/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY vulkan-api v0.9.3
 */
//type BigUint64ArrayNew = Float32Array
//declare const BigUint64ArrayNew: typeof Float32Array

export interface ObjectConstructor {
  assign(...objects: Object[]): Object;
}

export function memoryWrite (pointer: BigInt, data: Uint8Array): void;
export function getArrayBufferFromAddress (t: BigInt, length: BigInt): ArrayBuffer;

export const BI0 = BigInt(0);
export const BI4 = BigInt(4);
export const BI8 = BigInt(8);

declare var VkInout: { $: number | boolean; }
export interface VkInout { $: number | boolean; }

declare var VkInoutAddress: { $: bigint; }
export interface VkInoutAddress { $: bigint; }


/**
  * 
  * @member VK_KHR_SURFACE_EXTENSION_NAME
  * @member VK_KHR_SWAPCHAIN_EXTENSION_NAME
  * @member VK_KHR_DISPLAY_EXTENSION_NAME
  * @member VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME
  * @member VK_KHR_XLIB_SURFACE_EXTENSION_NAME
  * @member VK_KHR_XCB_SURFACE_EXTENSION_NAME
  * @member VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME
  * @member VK_KHR_MIR_SURFACE_EXTENSION_NAME
  * @member VK_KHR_ANDROID_SURFACE_EXTENSION_NAME
  * @member VK_KHR_WIN32_SURFACE_EXTENSION_NAME
  * @member VK_ANDROID_NATIVE_BUFFER_NAME
  * @member VK_EXT_DEBUG_REPORT_EXTENSION_NAME
  * @member VK_NV_GLSL_SHADER_EXTENSION_NAME
  * @member VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME
  * @member VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME
  * @member VK_IMG_FILTER_CUBIC_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_17_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_18_EXTENSION_NAME
  * @member VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_20_EXTENSION_NAME
  * @member VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME
  * @member VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME
  * @member VK_EXT_DEBUG_MARKER_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_24_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_25_EXTENSION_NAME
  * @member VK_AMD_GCN_SHADER_EXTENSION_NAME
  * @member VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_28_EXTENSION_NAME
  * @member VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME
  * @member VK_NVX_EXTENSION_30_EXTENSION_NAME
  * @member VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_32_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_33_EXTENSION_NAME
  * @member VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_35_EXTENSION_NAME
  * @member VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME
  * @member VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME
  * @member VK_AMD_SHADER_BALLOT_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_39_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_40_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_41_EXTENSION_NAME
  * @member VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME
  * @member VK_AMD_SHADER_INFO_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_44_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_45_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_46_EXTENSION_NAME
  * @member VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME
  * @member VK_NVX_EXTENSION_48_EXTENSION_NAME
  * @member VK_GOOGLE_EXTENSION_49_EXTENSION_NAME
  * @member VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME
  * @member VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME
  * @member VK_NV_EXTENSION_52_EXTENSION_NAME
  * @member VK_NV_EXTENSION_53_EXTENSION_NAME
  * @member VK_KHR_MULTIVIEW_EXTENSION_NAME
  * @member VK_IMG_FORMAT_PVRTC_EXTENSION_NAME
  * @member VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME
  * @member VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME
  * @member VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME
  * @member VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME
  * @member VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME
  * @member VK_KHR_DEVICE_GROUP_EXTENSION_NAME
  * @member VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME
  * @member VK_NN_VI_SURFACE_EXTENSION_NAME
  * @member VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME
  * @member VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME
  * @member VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME
  * @member VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME
  * @member VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME
  * @member VK_IMG_EXTENSION_69_EXTENSION_NAME
  * @member VK_KHR_MAINTENANCE1_EXTENSION_NAME
  * @member VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME
  * @member VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME
  * @member VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME
  * @member VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME
  * @member VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME
  * @member VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME
  * @member VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME
  * @member VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME
  * @member VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME
  * @member VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME
  * @member VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME
  * @member VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME
  * @member VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME
  * @member VK_KHR_16BIT_STORAGE_EXTENSION_NAME
  * @member VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME
  * @member VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME
  * @member VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME
  * @member VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME
  * @member VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME
  * @member VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME
  * @member VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME
  * @member VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME
  * @member VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME
  * @member VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME
  * @member VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME
  * @member VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME
  * @member VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME
  * @member VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME
  * @member VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME
  * @member VK_NV_EXTENSION_101_EXTENSION_NAME
  * @member VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME
  * @member VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME
  * @member VK_NV_EXTENSION_104_EXTENSION_NAME
  * @member VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME
  * @member VK_EXT_HDR_METADATA_EXTENSION_NAME
  * @member VK_IMG_EXTENSION_107_EXTENSION_NAME
  * @member VK_IMG_EXTENSION_108_EXTENSION_NAME
  * @member VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME
  * @member VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME
  * @member VK_IMG_EXTENSION_111_EXTENSION_NAME
  * @member VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME
  * @member VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME
  * @member VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME
  * @member VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME
  * @member VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME
  * @member VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME
  * @member VK_KHR_MAINTENANCE2_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_119_EXTENSION_NAME
  * @member VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME
  * @member VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME
  * @member VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME
  * @member VK_MVK_IOS_SURFACE_EXTENSION_NAME
  * @member VK_MVK_MACOS_SURFACE_EXTENSION_NAME
  * @member VK_MVK_MOLTENVK_EXTENSION_NAME
  * @member VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME
  * @member VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME
  * @member VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME
  * @member VK_EXT_DEBUG_UTILS_EXTENSION_NAME
  * @member VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME
  * @member VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME
  * @member VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME
  * @member VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_134_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_135_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_136_EXTENSION_NAME
  * @member VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME
  * @member VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME
  * @member VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_140_EXTENSION_NAME
  * @member VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_142_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_143_EXTENSION_NAME
  * @member VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME
  * @member VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME
  * @member VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME
  * @member VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME
  * @member VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME
  * @member VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME
  * @member VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME
  * @member VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME
  * @member VK_KHR_RAY_QUERY_EXTENSION_NAME
  * @member VK_NV_EXTENSION_152_EXTENSION_NAME
  * @member VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME
  * @member VK_NV_FILL_RECTANGLE_EXTENSION_NAME
  * @member VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME
  * @member VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME
  * @member VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME
  * @member VK_KHR_BIND_MEMORY_2_EXTENSION_NAME
  * @member VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_160_EXTENSION_NAME
  * @member VK_EXT_VALIDATION_CACHE_EXTENSION_NAME
  * @member VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME
  * @member VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME
  * @member VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME
  * @member VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME
  * @member VK_NV_RAY_TRACING_EXTENSION_NAME
  * @member VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_168_EXTENSION_NAME
  * @member VK_KHR_MAINTENANCE3_EXTENSION_NAME
  * @member VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME
  * @member VK_EXT_FILTER_CUBIC_EXTENSION_NAME
  * @member VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME
  * @member VK_QCOM_extension_173_EXTENSION_NAME
  * @member VK_QCOM_extension_174_EXTENSION_NAME
  * @member VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME
  * @member VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_177_EXTENSION_NAME
  * @member VK_KHR_8BIT_STORAGE_EXTENSION_NAME
  * @member VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME
  * @member VK_AMD_BUFFER_MARKER_EXTENSION_NAME
  * @member VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME
  * @member VK_KHR_SHADER_CLOCK_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_183_EXTENSION_NAME
  * @member VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME
  * @member VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME
  * @member VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_187_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_188_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_189_EXTENSION_NAME
  * @member VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME
  * @member VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME
  * @member VK_GGP_FRAME_TOKEN_EXTENSION_NAME
  * @member VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME
  * @member VK_GOOGLE_EXTENSION_194_EXTENSION_NAME
  * @member VK_GOOGLE_EXTENSION_195_EXTENSION_NAME
  * @member VK_GOOGLE_EXTENSION_196_EXTENSION_NAME
  * @member VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME
  * @member VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME
  * @member VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME
  * @member VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME
  * @member VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME
  * @member VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME
  * @member VK_NV_MESH_SHADER_EXTENSION_NAME
  * @member VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME
  * @member VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME
  * @member VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME
  * @member VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME
  * @member VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_209_EXTENSION_NAME
  * @member VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME
  * @member VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME
  * @member VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME
  * @member VK_EXT_PCI_BUS_INFO_EXTENSION_NAME
  * @member VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME
  * @member VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME
  * @member VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_217_EXTENSION_NAME
  * @member VK_EXT_METAL_SURFACE_EXTENSION_NAME
  * @member VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_220_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_221_EXTENSION_NAME
  * @member VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_223_EXTENSION_NAME
  * @member VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME
  * @member VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME
  * @member VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME
  * @member VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME
  * @member VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_229_EXTENSION_NAME
  * @member VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_231_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_232_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_233_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_234_EXTENSION_NAME
  * @member VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_236_EXTENSION_NAME
  * @member VK_KHR_SPIRV_1_4_EXTENSION_NAME
  * @member VK_EXT_MEMORY_BUDGET_EXTENSION_NAME
  * @member VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME
  * @member VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME
  * @member VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME
  * @member VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME
  * @member VK_INTEL_EXTENSION_243_EXTENSION_NAME
  * @member VK_MESA_EXTENSION_244_EXTENSION_NAME
  * @member VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME
  * @member VK_EXT_TOOLING_INFO_EXTENSION_NAME
  * @member VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME
  * @member VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_249_EXTENSION_NAME
  * @member VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME
  * @member VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME
  * @member VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME
  * @member VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME
  * @member VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_255_EXTENSION_NAME
  * @member VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME
  * @member VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME
  * @member VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_259_EXTENSION_NAME
  * @member VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME
  * @member VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME
  * @member VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME
  * @member VK_GOOGLE_EXTENSION_263_EXTENSION_NAME
  * @member VK_BRCM_EXTENSION_264_EXTENSION_NAME
  * @member VK_BRCM_EXTENSION_265_EXTENSION_NAME
  * @member VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME
  * @member VK_EXT_extension_267
  * @member VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME
  * @member VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME
  * @member VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME
  * @member VK_INTEL_extension_271
  * @member VK_INTEL_extension_272
  * @member VK_INTEL_extension_273
  * @member VK_INTEL_extension_274
  * @member VK_KHR_extension_275
  * @member VK_KHR_extension_276
  * @member VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME
  * @member VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME
  * @member VK_NV_extension_279
  * @member VK_KHR_extension_280
  * @member VK_ARM_extension_281
  * @member VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME
  * @member VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME
  * @member VK_EXT_extension_284
  * @member VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME
  * @member VK_EXT_extension_286
  * @member VK_EXT_ROBUSTNESS_2_EXTENSION_NAME
  * @member VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_289_EXTENSION_NAME
  * @member VK_GOOGLE_USER_TYPE_EXTENSION_NAME
  * @member VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME
  * @member VK_NV_EXTENSION_292_EXTENSION_NAME
  * @member VK_NV_EXTENSION_293_EXTENSION_NAME
  * @member VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_295_EXTENSION_NAME
  * @member VK_EXT_PRIVATE_DATA_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_297_EXTENSION_NAME
  * @member VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_299_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_300_EXTENSION_NAME
  * @member VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME
  * @member VK_QCOM_render_pass_store_ops_EXTENSION_NAME
  * @member VK_QCOM_extension_303_EXTENSION_NAME
  * @member VK_QCOM_extension_304_EXTENSION_NAME
  * @member VK_QCOM_extension_305_EXTENSION_NAME
  * @member VK_QCOM_extension_306_EXTENSION_NAME
  * @member VK_QCOM_extension_307_EXTENSION_NAME
  * @member VK_NV_EXTENSION_308_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_309_EXTENSION_NAME
  * @member VK_QCOM_extension_310_EXTENSION_NAME
  * @member VK_NV_EXTENSION_311_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_312_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_313_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_314_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_315_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_316_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_317_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_318_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_319_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_320_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_321_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_322_EXTENSION_NAME
  * @member VK_AMD_EXTENSION_323_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_324_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_325_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_326_EXTENSION_NAME
  * @member VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME
  * @member VK_NV_EXTENSION_328_EXTENSION_NAME
  * @member VK_NV_EXTENSION_329_EXTENSION_NAME
  * @member VK_NV_EXTENSION_330_EXTENSION_NAME
  * @member VK_NV_EXTENSION_331_EXTENSION_NAME
  * @member VK_NV_EXTENSION_332_EXTENSION_NAME
  * @member VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME
  * @member VK_QCOM_rotated_copy_commands_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_335_EXTENSION_NAME
  * @member VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_337_EXTENSION_NAME
  * @member VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME
  * @member VK_ARM_EXTENSION_339_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_340_EXTENSION_NAME
  * @member VK_EXT_4444_FORMATS_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_342_EXTENSION_NAME
  * @member VK_ARM_EXTENSION_343_EXTENSION_NAME
  * @member VK_ARM_EXTENSION_344_EXTENSION_NAME
  * @member VK_ARM_EXTENSION_345_EXTENSION_NAME
  * @member VK_NV_EXTENSION_346_EXTENSION_NAME
  * @member VK_EXT_DIRECTFB_SURFACE_EXTENSION_NAME
  * @member VK_KHR_EXTENSION_350_EXTENSION_NAME
  * @member VK_NV_EXTENSION_351_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_352_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_353_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_354_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_355_EXTENSION_NAME
  * @member VK_EXT_VERTEX_ATTRIBUTE_ALIASING_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_357
  * @member VK_KHR_EXTENSION_358_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_359
  * @member VK_EXT_EXTENSION_360
  * @member VK_EXT_EXTENSION_361
  * @member VK_EXT_EXTENSION_362_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_363_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_364_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_365_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_366_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_367_EXTENSION_NAME
  * @member VK_EXT_EXTENSION_368_EXTENSION_NAME
  * @member VK_QCOM_EXTENSION_369_EXTENSION_NAME
  * @member VK_HUAWEI_EXTENSION_370_EXTENSION_NAME
  * @member VK_HUAWEI_EXTENSION_371_EXTENSION_NAME
  * @member VK_NV_EXTENSION_372_EXTENSION_NAME
  */
export enum API_Extensions_Strings {
  VK_KHR_SURFACE_EXTENSION_NAME,
  VK_KHR_SWAPCHAIN_EXTENSION_NAME,
  VK_KHR_DISPLAY_EXTENSION_NAME,
  VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME,
  VK_KHR_XLIB_SURFACE_EXTENSION_NAME,
  VK_KHR_XCB_SURFACE_EXTENSION_NAME,
  VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME,
  VK_KHR_MIR_SURFACE_EXTENSION_NAME,
  VK_KHR_ANDROID_SURFACE_EXTENSION_NAME,
  VK_KHR_WIN32_SURFACE_EXTENSION_NAME,
  VK_ANDROID_NATIVE_BUFFER_NAME,
  VK_EXT_DEBUG_REPORT_EXTENSION_NAME,
  VK_NV_GLSL_SHADER_EXTENSION_NAME,
  VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME,
  VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME,
  VK_IMG_FILTER_CUBIC_EXTENSION_NAME,
  VK_AMD_EXTENSION_17_EXTENSION_NAME,
  VK_AMD_EXTENSION_18_EXTENSION_NAME,
  VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME,
  VK_AMD_EXTENSION_20_EXTENSION_NAME,
  VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME,
  VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME,
  VK_EXT_DEBUG_MARKER_EXTENSION_NAME,
  VK_AMD_EXTENSION_24_EXTENSION_NAME,
  VK_AMD_EXTENSION_25_EXTENSION_NAME,
  VK_AMD_GCN_SHADER_EXTENSION_NAME,
  VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME,
  VK_EXT_EXTENSION_28_EXTENSION_NAME,
  VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME,
  VK_NVX_EXTENSION_30_EXTENSION_NAME,
  VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME,
  VK_AMD_EXTENSION_32_EXTENSION_NAME,
  VK_AMD_EXTENSION_33_EXTENSION_NAME,
  VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME,
  VK_AMD_EXTENSION_35_EXTENSION_NAME,
  VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME,
  VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME,
  VK_AMD_SHADER_BALLOT_EXTENSION_NAME,
  VK_AMD_EXTENSION_39_EXTENSION_NAME,
  VK_AMD_EXTENSION_40_EXTENSION_NAME,
  VK_AMD_EXTENSION_41_EXTENSION_NAME,
  VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME,
  VK_AMD_SHADER_INFO_EXTENSION_NAME,
  VK_AMD_EXTENSION_44_EXTENSION_NAME,
  VK_AMD_EXTENSION_45_EXTENSION_NAME,
  VK_AMD_EXTENSION_46_EXTENSION_NAME,
  VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME,
  VK_NVX_EXTENSION_48_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_49_EXTENSION_NAME,
  VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME,
  VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME,
  VK_NV_EXTENSION_52_EXTENSION_NAME,
  VK_NV_EXTENSION_53_EXTENSION_NAME,
  VK_KHR_MULTIVIEW_EXTENSION_NAME,
  VK_IMG_FORMAT_PVRTC_EXTENSION_NAME,
  VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME,
  VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME,
  VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME,
  VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME,
  VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME,
  VK_KHR_DEVICE_GROUP_EXTENSION_NAME,
  VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME,
  VK_NN_VI_SURFACE_EXTENSION_NAME,
  VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME,
  VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME,
  VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME,
  VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME,
  VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME,
  VK_IMG_EXTENSION_69_EXTENSION_NAME,
  VK_KHR_MAINTENANCE1_EXTENSION_NAME,
  VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME,
  VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME,
  VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME,
  VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME,
  VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME,
  VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME,
  VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME,
  VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME,
  VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME,
  VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME,
  VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME,
  VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME,
  VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME,
  VK_KHR_16BIT_STORAGE_EXTENSION_NAME,
  VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME,
  VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME,
  VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME,
  VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME,
  VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME,
  VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME,
  VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME,
  VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME,
  VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME,
  VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME,
  VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME,
  VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME,
  VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME,
  VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME,
  VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME,
  VK_NV_EXTENSION_101_EXTENSION_NAME,
  VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME,
  VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME,
  VK_NV_EXTENSION_104_EXTENSION_NAME,
  VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME,
  VK_EXT_HDR_METADATA_EXTENSION_NAME,
  VK_IMG_EXTENSION_107_EXTENSION_NAME,
  VK_IMG_EXTENSION_108_EXTENSION_NAME,
  VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME,
  VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME,
  VK_IMG_EXTENSION_111_EXTENSION_NAME,
  VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME,
  VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME,
  VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME,
  VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME,
  VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME,
  VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME,
  VK_KHR_MAINTENANCE2_EXTENSION_NAME,
  VK_KHR_EXTENSION_119_EXTENSION_NAME,
  VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME,
  VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME,
  VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME,
  VK_MVK_IOS_SURFACE_EXTENSION_NAME,
  VK_MVK_MACOS_SURFACE_EXTENSION_NAME,
  VK_MVK_MOLTENVK_EXTENSION_NAME,
  VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME,
  VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME,
  VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME,
  VK_EXT_DEBUG_UTILS_EXTENSION_NAME,
  VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME,
  VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME,
  VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME,
  VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME,
  VK_AMD_EXTENSION_134_EXTENSION_NAME,
  VK_AMD_EXTENSION_135_EXTENSION_NAME,
  VK_AMD_EXTENSION_136_EXTENSION_NAME,
  VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME,
  VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME,
  VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME,
  VK_AMD_EXTENSION_140_EXTENSION_NAME,
  VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME,
  VK_AMD_EXTENSION_142_EXTENSION_NAME,
  VK_AMD_EXTENSION_143_EXTENSION_NAME,
  VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME,
  VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME,
  VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME,
  VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME,
  VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME,
  VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME,
  VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME,
  VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME,
  VK_KHR_RAY_QUERY_EXTENSION_NAME,
  VK_NV_EXTENSION_152_EXTENSION_NAME,
  VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME,
  VK_NV_FILL_RECTANGLE_EXTENSION_NAME,
  VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME,
  VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME,
  VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME,
  VK_KHR_BIND_MEMORY_2_EXTENSION_NAME,
  VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME,
  VK_EXT_EXTENSION_160_EXTENSION_NAME,
  VK_EXT_VALIDATION_CACHE_EXTENSION_NAME,
  VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME,
  VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME,
  VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME,
  VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME,
  VK_NV_RAY_TRACING_EXTENSION_NAME,
  VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME,
  VK_EXT_EXTENSION_168_EXTENSION_NAME,
  VK_KHR_MAINTENANCE3_EXTENSION_NAME,
  VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME,
  VK_EXT_FILTER_CUBIC_EXTENSION_NAME,
  VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME,
  VK_QCOM_extension_173_EXTENSION_NAME,
  VK_QCOM_extension_174_EXTENSION_NAME,
  VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME,
  VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME,
  VK_KHR_EXTENSION_177_EXTENSION_NAME,
  VK_KHR_8BIT_STORAGE_EXTENSION_NAME,
  VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME,
  VK_AMD_BUFFER_MARKER_EXTENSION_NAME,
  VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME,
  VK_KHR_SHADER_CLOCK_EXTENSION_NAME,
  VK_KHR_EXTENSION_183_EXTENSION_NAME,
  VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME,
  VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME,
  VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME,
  VK_KHR_EXTENSION_187_EXTENSION_NAME,
  VK_KHR_EXTENSION_188_EXTENSION_NAME,
  VK_KHR_EXTENSION_189_EXTENSION_NAME,
  VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME,
  VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME,
  VK_GGP_FRAME_TOKEN_EXTENSION_NAME,
  VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_194_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_195_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_196_EXTENSION_NAME,
  VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME,
  VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME,
  VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME,
  VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME,
  VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME,
  VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME,
  VK_NV_MESH_SHADER_EXTENSION_NAME,
  VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME,
  VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME,
  VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME,
  VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME,
  VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME,
  VK_KHR_EXTENSION_209_EXTENSION_NAME,
  VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME,
  VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME,
  VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME,
  VK_EXT_PCI_BUS_INFO_EXTENSION_NAME,
  VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME,
  VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME,
  VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME,
  VK_KHR_EXTENSION_217_EXTENSION_NAME,
  VK_EXT_METAL_SURFACE_EXTENSION_NAME,
  VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME,
  VK_EXT_EXTENSION_220_EXTENSION_NAME,
  VK_KHR_EXTENSION_221_EXTENSION_NAME,
  VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME,
  VK_EXT_EXTENSION_223_EXTENSION_NAME,
  VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME,
  VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME,
  VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME,
  VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME,
  VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME,
  VK_AMD_EXTENSION_229_EXTENSION_NAME,
  VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME,
  VK_AMD_EXTENSION_231_EXTENSION_NAME,
  VK_AMD_EXTENSION_232_EXTENSION_NAME,
  VK_AMD_EXTENSION_233_EXTENSION_NAME,
  VK_AMD_EXTENSION_234_EXTENSION_NAME,
  VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME,
  VK_AMD_EXTENSION_236_EXTENSION_NAME,
  VK_KHR_SPIRV_1_4_EXTENSION_NAME,
  VK_EXT_MEMORY_BUDGET_EXTENSION_NAME,
  VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME,
  VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME,
  VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME,
  VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME,
  VK_INTEL_EXTENSION_243_EXTENSION_NAME,
  VK_MESA_EXTENSION_244_EXTENSION_NAME,
  VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME,
  VK_EXT_TOOLING_INFO_EXTENSION_NAME,
  VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME,
  VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME,
  VK_KHR_EXTENSION_249_EXTENSION_NAME,
  VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME,
  VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME,
  VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME,
  VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME,
  VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME,
  VK_EXT_EXTENSION_255_EXTENSION_NAME,
  VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME,
  VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME,
  VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME,
  VK_EXT_EXTENSION_259_EXTENSION_NAME,
  VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME,
  VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME,
  VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_263_EXTENSION_NAME,
  VK_BRCM_EXTENSION_264_EXTENSION_NAME,
  VK_BRCM_EXTENSION_265_EXTENSION_NAME,
  VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME,
  VK_EXT_extension_267,
  VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME,
  VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME,
  VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME,
  VK_INTEL_extension_271,
  VK_INTEL_extension_272,
  VK_INTEL_extension_273,
  VK_INTEL_extension_274,
  VK_KHR_extension_275,
  VK_KHR_extension_276,
  VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME,
  VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME,
  VK_NV_extension_279,
  VK_KHR_extension_280,
  VK_ARM_extension_281,
  VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME,
  VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME,
  VK_EXT_extension_284,
  VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME,
  VK_EXT_extension_286,
  VK_EXT_ROBUSTNESS_2_EXTENSION_NAME,
  VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME,
  VK_EXT_EXTENSION_289_EXTENSION_NAME,
  VK_GOOGLE_USER_TYPE_EXTENSION_NAME,
  VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME,
  VK_NV_EXTENSION_292_EXTENSION_NAME,
  VK_NV_EXTENSION_293_EXTENSION_NAME,
  VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME,
  VK_KHR_EXTENSION_295_EXTENSION_NAME,
  VK_EXT_PRIVATE_DATA_EXTENSION_NAME,
  VK_KHR_EXTENSION_297_EXTENSION_NAME,
  VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME,
  VK_KHR_EXTENSION_299_EXTENSION_NAME,
  VK_KHR_EXTENSION_300_EXTENSION_NAME,
  VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME,
  VK_QCOM_render_pass_store_ops_EXTENSION_NAME,
  VK_QCOM_extension_303_EXTENSION_NAME,
  VK_QCOM_extension_304_EXTENSION_NAME,
  VK_QCOM_extension_305_EXTENSION_NAME,
  VK_QCOM_extension_306_EXTENSION_NAME,
  VK_QCOM_extension_307_EXTENSION_NAME,
  VK_NV_EXTENSION_308_EXTENSION_NAME,
  VK_KHR_EXTENSION_309_EXTENSION_NAME,
  VK_QCOM_extension_310_EXTENSION_NAME,
  VK_NV_EXTENSION_311_EXTENSION_NAME,
  VK_EXT_EXTENSION_312_EXTENSION_NAME,
  VK_EXT_EXTENSION_313_EXTENSION_NAME,
  VK_AMD_EXTENSION_314_EXTENSION_NAME,
  VK_AMD_EXTENSION_315_EXTENSION_NAME,
  VK_AMD_EXTENSION_316_EXTENSION_NAME,
  VK_AMD_EXTENSION_317_EXTENSION_NAME,
  VK_AMD_EXTENSION_318_EXTENSION_NAME,
  VK_AMD_EXTENSION_319_EXTENSION_NAME,
  VK_AMD_EXTENSION_320_EXTENSION_NAME,
  VK_AMD_EXTENSION_321_EXTENSION_NAME,
  VK_AMD_EXTENSION_322_EXTENSION_NAME,
  VK_AMD_EXTENSION_323_EXTENSION_NAME,
  VK_KHR_EXTENSION_324_EXTENSION_NAME,
  VK_KHR_EXTENSION_325_EXTENSION_NAME,
  VK_KHR_EXTENSION_326_EXTENSION_NAME,
  VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME,
  VK_NV_EXTENSION_328_EXTENSION_NAME,
  VK_NV_EXTENSION_329_EXTENSION_NAME,
  VK_NV_EXTENSION_330_EXTENSION_NAME,
  VK_NV_EXTENSION_331_EXTENSION_NAME,
  VK_NV_EXTENSION_332_EXTENSION_NAME,
  VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME,
  VK_QCOM_rotated_copy_commands_EXTENSION_NAME,
  VK_KHR_EXTENSION_335_EXTENSION_NAME,
  VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME,
  VK_KHR_EXTENSION_337_EXTENSION_NAME,
  VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME,
  VK_ARM_EXTENSION_339_EXTENSION_NAME,
  VK_EXT_EXTENSION_340_EXTENSION_NAME,
  VK_EXT_4444_FORMATS_EXTENSION_NAME,
  VK_EXT_EXTENSION_342_EXTENSION_NAME,
  VK_ARM_EXTENSION_343_EXTENSION_NAME,
  VK_ARM_EXTENSION_344_EXTENSION_NAME,
  VK_ARM_EXTENSION_345_EXTENSION_NAME,
  VK_NV_EXTENSION_346_EXTENSION_NAME,
  VK_EXT_DIRECTFB_SURFACE_EXTENSION_NAME,
  VK_KHR_EXTENSION_350_EXTENSION_NAME,
  VK_NV_EXTENSION_351_EXTENSION_NAME,
  VK_EXT_EXTENSION_352_EXTENSION_NAME,
  VK_EXT_EXTENSION_353_EXTENSION_NAME,
  VK_EXT_EXTENSION_354_EXTENSION_NAME,
  VK_EXT_EXTENSION_355_EXTENSION_NAME,
  VK_EXT_VERTEX_ATTRIBUTE_ALIASING_EXTENSION_NAME,
  VK_EXT_EXTENSION_357,
  VK_KHR_EXTENSION_358_EXTENSION_NAME,
  VK_EXT_EXTENSION_359,
  VK_EXT_EXTENSION_360,
  VK_EXT_EXTENSION_361,
  VK_EXT_EXTENSION_362_EXTENSION_NAME,
  VK_EXT_EXTENSION_363_EXTENSION_NAME,
  VK_EXT_EXTENSION_364_EXTENSION_NAME,
  VK_EXT_EXTENSION_365_EXTENSION_NAME,
  VK_EXT_EXTENSION_366_EXTENSION_NAME,
  VK_EXT_EXTENSION_367_EXTENSION_NAME,
  VK_EXT_EXTENSION_368_EXTENSION_NAME,
  VK_QCOM_EXTENSION_369_EXTENSION_NAME,
  VK_HUAWEI_EXTENSION_370_EXTENSION_NAME,
  VK_HUAWEI_EXTENSION_371_EXTENSION_NAME,
  VK_NV_EXTENSION_372_EXTENSION_NAME,
  
}

declare const VK_KHR_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SWAPCHAIN_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_DISPLAY_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_XLIB_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_XCB_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_MIR_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_ANDROID_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_WIN32_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_ANDROID_NATIVE_BUFFER_NAME: API_Extensions_Strings;
declare const VK_EXT_DEBUG_REPORT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_GLSL_SHADER_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_IMG_FILTER_CUBIC_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_17_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_18_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_20_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_DEBUG_MARKER_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_24_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_25_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_GCN_SHADER_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_28_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NVX_EXTENSION_30_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_32_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_33_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_35_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_SHADER_BALLOT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_39_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_40_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_41_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_SHADER_INFO_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_44_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_45_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_46_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NVX_EXTENSION_48_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_GOOGLE_EXTENSION_49_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_52_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_53_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_MULTIVIEW_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_IMG_FORMAT_PVRTC_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_DEVICE_GROUP_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NN_VI_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_IMG_EXTENSION_69_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_MAINTENANCE1_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_16BIT_STORAGE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_101_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_104_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_HDR_METADATA_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_IMG_EXTENSION_107_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_IMG_EXTENSION_108_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_IMG_EXTENSION_111_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_MAINTENANCE2_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_119_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_MVK_IOS_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_MVK_MACOS_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_MVK_MOLTENVK_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_DEBUG_UTILS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_134_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_135_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_136_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_140_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_142_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_143_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_RAY_QUERY_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_152_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_FILL_RECTANGLE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_BIND_MEMORY_2_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_160_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_VALIDATION_CACHE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_RAY_TRACING_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_168_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_MAINTENANCE3_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_FILTER_CUBIC_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_QCOM_extension_173_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_QCOM_extension_174_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_177_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_8BIT_STORAGE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_BUFFER_MARKER_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SHADER_CLOCK_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_183_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_187_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_188_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_189_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_GGP_FRAME_TOKEN_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_GOOGLE_EXTENSION_194_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_GOOGLE_EXTENSION_195_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_GOOGLE_EXTENSION_196_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_MESH_SHADER_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_209_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_PCI_BUS_INFO_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_217_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_METAL_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_220_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_221_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_223_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_229_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_231_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_232_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_233_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_234_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_236_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SPIRV_1_4_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_MEMORY_BUDGET_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_INTEL_EXTENSION_243_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_MESA_EXTENSION_244_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_TOOLING_INFO_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_249_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_255_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_259_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_GOOGLE_EXTENSION_263_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_BRCM_EXTENSION_264_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_BRCM_EXTENSION_265_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_extension_267: API_Extensions_Strings;
declare const VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_INTEL_extension_271: API_Extensions_Strings;
declare const VK_INTEL_extension_272: API_Extensions_Strings;
declare const VK_INTEL_extension_273: API_Extensions_Strings;
declare const VK_INTEL_extension_274: API_Extensions_Strings;
declare const VK_KHR_extension_275: API_Extensions_Strings;
declare const VK_KHR_extension_276: API_Extensions_Strings;
declare const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_extension_279: API_Extensions_Strings;
declare const VK_KHR_extension_280: API_Extensions_Strings;
declare const VK_ARM_extension_281: API_Extensions_Strings;
declare const VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_extension_284: API_Extensions_Strings;
declare const VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_extension_286: API_Extensions_Strings;
declare const VK_EXT_ROBUSTNESS_2_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_289_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_GOOGLE_USER_TYPE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_292_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_293_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_295_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_PRIVATE_DATA_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_297_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_299_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_300_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_QCOM_render_pass_store_ops_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_QCOM_extension_303_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_QCOM_extension_304_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_QCOM_extension_305_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_QCOM_extension_306_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_QCOM_extension_307_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_308_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_309_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_QCOM_extension_310_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_311_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_312_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_313_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_314_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_315_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_316_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_317_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_318_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_319_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_320_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_321_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_322_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_AMD_EXTENSION_323_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_324_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_325_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_326_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_328_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_329_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_330_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_331_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_332_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_QCOM_rotated_copy_commands_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_335_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_337_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_ARM_EXTENSION_339_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_340_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_4444_FORMATS_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_342_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_ARM_EXTENSION_343_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_ARM_EXTENSION_344_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_ARM_EXTENSION_345_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_346_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_DIRECTFB_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_350_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_351_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_352_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_353_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_354_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_355_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_VERTEX_ATTRIBUTE_ALIASING_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_357: API_Extensions_Strings;
declare const VK_KHR_EXTENSION_358_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_359: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_360: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_361: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_362_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_363_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_364_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_365_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_366_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_367_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_EXT_EXTENSION_368_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_QCOM_EXTENSION_369_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_HUAWEI_EXTENSION_370_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_HUAWEI_EXTENSION_371_EXTENSION_NAME: API_Extensions_Strings;
declare const VK_NV_EXTENSION_372_EXTENSION_NAME: API_Extensions_Strings;



/**
  * 
  * @member VK_KHR_SURFACE_SPEC_VERSION
  * @member VK_KHR_SWAPCHAIN_SPEC_VERSION
  * @member VK_KHR_DISPLAY_SPEC_VERSION
  * @member VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION
  * @member VK_KHR_XLIB_SURFACE_SPEC_VERSION
  * @member VK_KHR_XCB_SURFACE_SPEC_VERSION
  * @member VK_KHR_WAYLAND_SURFACE_SPEC_VERSION
  * @member VK_KHR_MIR_SURFACE_SPEC_VERSION
  * @member VK_KHR_ANDROID_SURFACE_SPEC_VERSION
  * @member VK_KHR_WIN32_SURFACE_SPEC_VERSION
  * @member VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION
  * @member VK_ANDROID_NATIVE_BUFFER_NUMBER
  * @member VK_EXT_DEBUG_REPORT_SPEC_VERSION
  * @member VK_NV_GLSL_SHADER_SPEC_VERSION
  * @member VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION
  * @member VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION
  * @member VK_IMG_FILTER_CUBIC_SPEC_VERSION
  * @member VK_AMD_EXTENSION_17_SPEC_VERSION
  * @member VK_AMD_EXTENSION_18_SPEC_VERSION
  * @member VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION
  * @member VK_AMD_EXTENSION_20_SPEC_VERSION
  * @member VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION
  * @member VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION
  * @member VK_EXT_DEBUG_MARKER_SPEC_VERSION
  * @member VK_AMD_EXTENSION_24_SPEC_VERSION
  * @member VK_AMD_EXTENSION_25_SPEC_VERSION
  * @member VK_AMD_GCN_SHADER_SPEC_VERSION
  * @member VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION
  * @member VK_EXT_EXTENSION_28_SPEC_VERSION
  * @member VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION
  * @member VK_NVX_EXTENSION_30_SPEC_VERSION
  * @member VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION
  * @member VK_AMD_EXTENSION_32_SPEC_VERSION
  * @member VK_AMD_EXTENSION_33_SPEC_VERSION
  * @member VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION
  * @member VK_AMD_EXTENSION_35_SPEC_VERSION
  * @member VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION
  * @member VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION
  * @member VK_AMD_SHADER_BALLOT_SPEC_VERSION
  * @member VK_AMD_EXTENSION_39_SPEC_VERSION
  * @member VK_AMD_EXTENSION_40_SPEC_VERSION
  * @member VK_AMD_EXTENSION_41_SPEC_VERSION
  * @member VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION
  * @member VK_AMD_SHADER_INFO_SPEC_VERSION
  * @member VK_AMD_EXTENSION_44_SPEC_VERSION
  * @member VK_AMD_EXTENSION_45_SPEC_VERSION
  * @member VK_AMD_EXTENSION_46_SPEC_VERSION
  * @member VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION
  * @member VK_NVX_EXTENSION_48_SPEC_VERSION
  * @member VK_GOOGLE_EXTENSION_49_SPEC_VERSION
  * @member VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION
  * @member VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION
  * @member VK_NV_EXTENSION_52_SPEC_VERSION
  * @member VK_NV_EXTENSION_53_SPEC_VERSION
  * @member VK_KHR_MULTIVIEW_SPEC_VERSION
  * @member VK_IMG_FORMAT_PVRTC_SPEC_VERSION
  * @member VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION
  * @member VK_NV_EXTERNAL_MEMORY_SPEC_VERSION
  * @member VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION
  * @member VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION
  * @member VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION
  * @member VK_KHR_DEVICE_GROUP_SPEC_VERSION
  * @member VK_EXT_VALIDATION_FLAGS_SPEC_VERSION
  * @member VK_NN_VI_SURFACE_SPEC_VERSION
  * @member VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION
  * @member VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION
  * @member VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION
  * @member VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION
  * @member VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION
  * @member VK_IMG_EXTENSION_69_SPEC_VERSION
  * @member VK_KHR_MAINTENANCE1_SPEC_VERSION
  * @member VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION
  * @member VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION
  * @member VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION
  * @member VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION
  * @member VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION
  * @member VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION
  * @member VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION
  * @member VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION
  * @member VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION
  * @member VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION
  * @member VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION
  * @member VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION
  * @member VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION
  * @member VK_KHR_16BIT_STORAGE_SPEC_VERSION
  * @member VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION
  * @member VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION
  * @member VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION
  * @member VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION
  * @member VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION
  * @member VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION
  * @member VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION
  * @member VK_EXT_DISPLAY_CONTROL_SPEC_VERSION
  * @member VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION
  * @member VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION
  * @member VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION
  * @member VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION
  * @member VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION
  * @member VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION
  * @member VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION
  * @member VK_NV_EXTENSION_101_SPEC_VERSION
  * @member VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION
  * @member VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION
  * @member VK_NV_EXTENSION_104_SPEC_VERSION
  * @member VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION
  * @member VK_EXT_HDR_METADATA_SPEC_VERSION
  * @member VK_IMG_EXTENSION_107_SPEC_VERSION
  * @member VK_IMG_EXTENSION_108_SPEC_VERSION
  * @member VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION
  * @member VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION
  * @member VK_IMG_EXTENSION_111_SPEC_VERSION
  * @member VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION
  * @member VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION
  * @member VK_KHR_EXTERNAL_FENCE_SPEC_VERSION
  * @member VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION
  * @member VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION
  * @member VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION
  * @member VK_KHR_MAINTENANCE2_SPEC_VERSION
  * @member VK_KHR_EXTENSION_119_SPEC_VERSION
  * @member VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION
  * @member VK_KHR_VARIABLE_POINTERS_SPEC_VERSION
  * @member VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION
  * @member VK_MVK_IOS_SURFACE_SPEC_VERSION
  * @member VK_MVK_MACOS_SURFACE_SPEC_VERSION
  * @member VK_MVK_MOLTENVK_SPEC_VERSION
  * @member VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION
  * @member VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION
  * @member VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION
  * @member VK_EXT_DEBUG_UTILS_SPEC_VERSION
  * @member VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION
  * @member VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION
  * @member VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION
  * @member VK_AMD_GPU_SHADER_INT16_SPEC_VERSION
  * @member VK_AMD_EXTENSION_134_SPEC_VERSION
  * @member VK_AMD_EXTENSION_135_SPEC_VERSION
  * @member VK_AMD_EXTENSION_136_SPEC_VERSION
  * @member VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION
  * @member VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION
  * @member VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION
  * @member VK_AMD_EXTENSION_140_SPEC_VERSION
  * @member VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION
  * @member VK_AMD_EXTENSION_142_SPEC_VERSION
  * @member VK_AMD_EXTENSION_143_SPEC_VERSION
  * @member VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION
  * @member VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION
  * @member VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION
  * @member VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION
  * @member VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION
  * @member VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION
  * @member VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION
  * @member VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION
  * @member VK_KHR_RAY_QUERY_SPEC_VERSION
  * @member VK_NV_EXTENSION_152_SPEC_VERSION
  * @member VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION
  * @member VK_NV_FILL_RECTANGLE_SPEC_VERSION
  * @member VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION
  * @member VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION
  * @member VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION
  * @member VK_KHR_BIND_MEMORY_2_SPEC_VERSION
  * @member VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION
  * @member VK_EXT_EXTENSION_160_SPEC_VERSION
  * @member VK_EXT_VALIDATION_CACHE_SPEC_VERSION
  * @member VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION
  * @member VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION
  * @member VK_KHR_PORTABILITY_SUBSET_SPEC_VERSION
  * @member VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION
  * @member VK_NV_RAY_TRACING_SPEC_VERSION
  * @member VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION
  * @member VK_EXT_EXTENSION_168_SPEC_VERSION
  * @member VK_KHR_MAINTENANCE3_SPEC_VERSION
  * @member VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION
  * @member VK_EXT_FILTER_CUBIC_SPEC_VERSION
  * @member VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION
  * @member VK_QCOM_extension_173_SPEC_VERSION
  * @member VK_QCOM_extension_174_SPEC_VERSION
  * @member VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION
  * @member VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION
  * @member VK_KHR_EXTENSION_177_SPEC_VERSION
  * @member VK_KHR_8BIT_STORAGE_SPEC_VERSION
  * @member VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION
  * @member VK_AMD_BUFFER_MARKER_SPEC_VERSION
  * @member VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION
  * @member VK_KHR_SHADER_CLOCK_SPEC_VERSION
  * @member VK_KHR_EXTENSION_183_SPEC_VERSION
  * @member VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION
  * @member VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION
  * @member VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION
  * @member VK_KHR_EXTENSION_187_SPEC_VERSION
  * @member VK_KHR_EXTENSION_188_SPEC_VERSION
  * @member VK_KHR_EXTENSION_189_SPEC_VERSION
  * @member VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION
  * @member VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION
  * @member VK_GGP_FRAME_TOKEN_SPEC_VERSION
  * @member VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION
  * @member VK_GOOGLE_EXTENSION_194_SPEC_VERSION
  * @member VK_GOOGLE_EXTENSION_195_SPEC_VERSION
  * @member VK_GOOGLE_EXTENSION_196_SPEC_VERSION
  * @member VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION
  * @member VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION
  * @member VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION
  * @member VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION
  * @member VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION
  * @member VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION
  * @member VK_NV_MESH_SHADER_SPEC_VERSION
  * @member VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION
  * @member VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION
  * @member VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION
  * @member VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION
  * @member VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION
  * @member VK_KHR_EXTENSION_209_SPEC_VERSION
  * @member VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION
  * @member VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION
  * @member VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION
  * @member VK_EXT_PCI_BUS_INFO_SPEC_VERSION
  * @member VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION
  * @member VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION
  * @member VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION
  * @member VK_KHR_EXTENSION_217_SPEC_VERSION
  * @member VK_EXT_METAL_SURFACE_SPEC_VERSION
  * @member VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION
  * @member VK_EXT_EXTENSION_220_SPEC_VERSION
  * @member VK_KHR_EXTENSION_221_SPEC_VERSION
  * @member VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION
  * @member VK_EXT_EXTENSION_223_SPEC_VERSION
  * @member VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION
  * @member VK_GOOGLE_DECORATE_STRING_SPEC_VERSION
  * @member VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION
  * @member VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION
  * @member VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION
  * @member VK_AMD_EXTENSION_229_SPEC_VERSION
  * @member VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION
  * @member VK_AMD_EXTENSION_231_SPEC_VERSION
  * @member VK_AMD_EXTENSION_232_SPEC_VERSION
  * @member VK_AMD_EXTENSION_233_SPEC_VERSION
  * @member VK_AMD_EXTENSION_234_SPEC_VERSION
  * @member VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION
  * @member VK_AMD_EXTENSION_236_SPEC_VERSION
  * @member VK_KHR_SPIRV_1_4_SPEC_VERSION
  * @member VK_EXT_MEMORY_BUDGET_SPEC_VERSION
  * @member VK_EXT_MEMORY_PRIORITY_SPEC_VERSION
  * @member VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION
  * @member VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION
  * @member VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION
  * @member VK_INTEL_EXTENSION_243_SPEC_VERSION
  * @member VK_MESA_EXTENSION_244_SPEC_VERSION
  * @member VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION
  * @member VK_EXT_TOOLING_INFO_SPEC_VERSION
  * @member VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION
  * @member VK_EXT_VALIDATION_FEATURES_SPEC_VERSION
  * @member VK_KHR_EXTENSION_249_SPEC_VERSION
  * @member VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION
  * @member VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION
  * @member VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION
  * @member VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION
  * @member VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION
  * @member VK_EXT_EXTENSION_255_SPEC_VERSION
  * @member VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION
  * @member VK_EXT_HEADLESS_SURFACE_SPEC_VERSION
  * @member VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION
  * @member VK_EXT_EXTENSION_259_SPEC_VERSION
  * @member VK_EXT_LINE_RASTERIZATION_SPEC_VERSION
  * @member VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION
  * @member VK_EXT_HOST_QUERY_RESET_SPEC_VERSION
  * @member VK_GOOGLE_EXTENSION_263_SPEC_VERSION
  * @member VK_BRCM_EXTENSION_264_SPEC_VERSION
  * @member VK_BRCM_EXTENSION_265_SPEC_VERSION
  * @member VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION
  * @member VK_EXT_EXTENSION_267_SPEC_VERSION
  * @member VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION
  * @member VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION
  * @member VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION
  * @member VK_INTEL_EXTENSION_271_SPEC_VERSION
  * @member VK_INTEL_EXTENSION_272_SPEC_VERSION
  * @member VK_INTEL_EXTENSION_273_SPEC_VERSION
  * @member VK_INTEL_EXTENSION_274_SPEC_VERSION
  * @member VK_KHR_EXTENSION_275_SPEC_VERSION
  * @member VK_KHR_EXTENSION_276_SPEC_VERSION
  * @member VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION
  * @member VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION
  * @member VK_NV_EXTENSION_279_SPEC_VERSION
  * @member VK_KHR_EXTENSION_280_SPEC_VERSION
  * @member VK_ARM_EXTENSION_281_SPEC_VERSION
  * @member VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION
  * @member VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION
  * @member VK_EXT_EXTENSION_284_SPEC_VERSION
  * @member VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION
  * @member VK_EXT_EXTENSION_286_SPEC_VERSION
  * @member VK_EXT_ROBUSTNESS_2_SPEC_VERSION
  * @member VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION
  * @member VK_EXT_EXTENSION_289_SPEC_VERSION
  * @member VK_GOOGLE_USER_TYPE_SPEC_VERSION
  * @member VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION
  * @member VK_NV_EXTENSION_292_SPEC_VERSION
  * @member VK_NV_EXTENSION_293_SPEC_VERSION
  * @member VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION
  * @member VK_KHR_EXTENSION_295_SPEC_VERSION
  * @member VK_EXT_PRIVATE_DATA_SPEC_VERSION
  * @member VK_KHR_EXTENSION_297_SPEC_VERSION
  * @member VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION
  * @member VK_KHR_EXTENSION_299_SPEC_VERSION
  * @member VK_KHR_EXTENSION_300_SPEC_VERSION
  * @member VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION
  * @member VK_QCOM_render_pass_store_ops_SPEC_VERSION
  * @member VK_QCOM_extension_303_SPEC_VERSION
  * @member VK_QCOM_extension_304_SPEC_VERSION
  * @member VK_QCOM_extension_305_SPEC_VERSION
  * @member VK_QCOM_extension_306_SPEC_VERSION
  * @member VK_QCOM_extension_307_SPEC_VERSION
  * @member VK_NV_EXTENSION_308_SPEC_VERSION
  * @member VK_KHR_EXTENSION_309_SPEC_VERSION
  * @member VK_QCOM_extension_310_SPEC_VERSION
  * @member VK_NV_EXTENSION_311_SPEC_VERSION
  * @member VK_EXT_EXTENSION_312_SPEC_VERSION
  * @member VK_EXT_EXTENSION_313_SPEC_VERSION
  * @member VK_AMD_EXTENSION_314_SPEC_VERSION
  * @member VK_AMD_EXTENSION_315_SPEC_VERSION
  * @member VK_AMD_EXTENSION_316_SPEC_VERSION
  * @member VK_AMD_EXTENSION_317_SPEC_VERSION
  * @member VK_AMD_EXTENSION_318_SPEC_VERSION
  * @member VK_AMD_EXTENSION_319_SPEC_VERSION
  * @member VK_AMD_EXTENSION_320_SPEC_VERSION
  * @member VK_AMD_EXTENSION_321_SPEC_VERSION
  * @member VK_AMD_EXTENSION_322_SPEC_VERSION
  * @member VK_AMD_EXTENSION_323_SPEC_VERSION
  * @member VK_KHR_EXTENSION_324_SPEC_VERSION
  * @member VK_KHR_EXTENSION_325_SPEC_VERSION
  * @member VK_KHR_EXTENSION_326_SPEC_VERSION
  * @member VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION
  * @member VK_NV_EXTENSION_328_SPEC_VERSION
  * @member VK_NV_EXTENSION_329_SPEC_VERSION
  * @member VK_NV_EXTENSION_330_SPEC_VERSION
  * @member VK_NV_EXTENSION_331_SPEC_VERSION
  * @member VK_NV_EXTENSION_332_SPEC_VERSION
  * @member VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION
  * @member VK_QCOM_rotated_copy_commands_SPEC_VERSION
  * @member VK_KHR_EXTENSION_335_SPEC_VERSION
  * @member VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION
  * @member VK_KHR_EXTENSION_337_SPEC_VERSION
  * @member VK_KHR_COPY_COMMANDS_2_SPEC_VERSION
  * @member VK_ARM_EXTENSION_339_SPEC_VERSION
  * @member VK_EXT_EXTENSION_340_SPEC_VERSION
  * @member VK_EXT_4444_FORMATS_SPEC_VERSION
  * @member VK_EXT_EXTENSION_342_SPEC_VERSION
  * @member VK_ARM_EXTENSION_343_SPEC_VERSION
  * @member VK_ARM_EXTENSION_344_SPEC_VERSION
  * @member VK_ARM_EXTENSION_345_SPEC_VERSION
  * @member VK_NV_EXTENSION_346_SPEC_VERSION
  * @member VK_EXT_DIRECTFB_SURFACE_SPEC_VERSION
  * @member VK_KHR_EXTENSION_350_SPEC_VERSION
  * @member VK_NV_EXTENSION_351_SPEC_VERSION
  * @member VK_EXT_EXTENSION_352_SPEC_VERSION
  * @member VK_EXT_EXTENSION_353_SPEC_VERSION
  * @member VK_EXT_EXTENSION_354_SPEC_VERSION
  * @member VK_EXT_EXTENSION_355_SPEC_VERSION
  * @member VK_EXT_VERTEX_ATTRIBUTE_ALIASING_SPEC_VERSION
  * @member VK_EXT_EXTENSION_357
  * @member VK_KHR_EXTENSION_358_SPEC_VERSION
  * @member VK_EXT_EXTENSION_359
  * @member VK_EXT_EXTENSION_360
  * @member VK_EXT_EXTENSION_361
  * @member VK_EXT_EXTENSION_362_SPEC_VERSION
  * @member VK_EXT_EXTENSION_363_SPEC_VERSION
  * @member VK_EXT_EXTENSION_364_SPEC_VERSION
  * @member VK_EXT_EXTENSION_365_SPEC_VERSION
  * @member VK_EXT_EXTENSION_366_SPEC_VERSION
  * @member VK_EXT_EXTENSION_367_SPEC_VERSION
  * @member VK_EXT_EXTENSION_368_SPEC_VERSION
  * @member VK_QCOM_EXTENSION_369_SPEC_VERSION
  * @member VK_HUAWEI_EXTENSION_370_SPEC_VERSION
  * @member VK_HUAWEI_EXTENSION_371_SPEC_VERSION
  * @member VK_NV_EXTENSION_372_SPEC_VERSION
  */
export enum API_Extensions {
  VK_KHR_SURFACE_SPEC_VERSION,
  VK_KHR_SWAPCHAIN_SPEC_VERSION,
  VK_KHR_DISPLAY_SPEC_VERSION,
  VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION,
  VK_KHR_XLIB_SURFACE_SPEC_VERSION,
  VK_KHR_XCB_SURFACE_SPEC_VERSION,
  VK_KHR_WAYLAND_SURFACE_SPEC_VERSION,
  VK_KHR_MIR_SURFACE_SPEC_VERSION,
  VK_KHR_ANDROID_SURFACE_SPEC_VERSION,
  VK_KHR_WIN32_SURFACE_SPEC_VERSION,
  VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION,
  VK_ANDROID_NATIVE_BUFFER_NUMBER,
  VK_EXT_DEBUG_REPORT_SPEC_VERSION,
  VK_NV_GLSL_SHADER_SPEC_VERSION,
  VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION,
  VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION,
  VK_IMG_FILTER_CUBIC_SPEC_VERSION,
  VK_AMD_EXTENSION_17_SPEC_VERSION,
  VK_AMD_EXTENSION_18_SPEC_VERSION,
  VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION,
  VK_AMD_EXTENSION_20_SPEC_VERSION,
  VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION,
  VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION,
  VK_EXT_DEBUG_MARKER_SPEC_VERSION,
  VK_AMD_EXTENSION_24_SPEC_VERSION,
  VK_AMD_EXTENSION_25_SPEC_VERSION,
  VK_AMD_GCN_SHADER_SPEC_VERSION,
  VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION,
  VK_EXT_EXTENSION_28_SPEC_VERSION,
  VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION,
  VK_NVX_EXTENSION_30_SPEC_VERSION,
  VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION,
  VK_AMD_EXTENSION_32_SPEC_VERSION,
  VK_AMD_EXTENSION_33_SPEC_VERSION,
  VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION,
  VK_AMD_EXTENSION_35_SPEC_VERSION,
  VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION,
  VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION,
  VK_AMD_SHADER_BALLOT_SPEC_VERSION,
  VK_AMD_EXTENSION_39_SPEC_VERSION,
  VK_AMD_EXTENSION_40_SPEC_VERSION,
  VK_AMD_EXTENSION_41_SPEC_VERSION,
  VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION,
  VK_AMD_SHADER_INFO_SPEC_VERSION,
  VK_AMD_EXTENSION_44_SPEC_VERSION,
  VK_AMD_EXTENSION_45_SPEC_VERSION,
  VK_AMD_EXTENSION_46_SPEC_VERSION,
  VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION,
  VK_NVX_EXTENSION_48_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_49_SPEC_VERSION,
  VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION,
  VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION,
  VK_NV_EXTENSION_52_SPEC_VERSION,
  VK_NV_EXTENSION_53_SPEC_VERSION,
  VK_KHR_MULTIVIEW_SPEC_VERSION,
  VK_IMG_FORMAT_PVRTC_SPEC_VERSION,
  VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION,
  VK_NV_EXTERNAL_MEMORY_SPEC_VERSION,
  VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION,
  VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION,
  VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION,
  VK_KHR_DEVICE_GROUP_SPEC_VERSION,
  VK_EXT_VALIDATION_FLAGS_SPEC_VERSION,
  VK_NN_VI_SURFACE_SPEC_VERSION,
  VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION,
  VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION,
  VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION,
  VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION,
  VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION,
  VK_IMG_EXTENSION_69_SPEC_VERSION,
  VK_KHR_MAINTENANCE1_SPEC_VERSION,
  VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION,
  VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION,
  VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION,
  VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION,
  VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION,
  VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION,
  VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION,
  VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION,
  VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION,
  VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION,
  VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION,
  VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION,
  VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION,
  VK_KHR_16BIT_STORAGE_SPEC_VERSION,
  VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION,
  VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION,
  VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION,
  VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION,
  VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION,
  VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION,
  VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION,
  VK_EXT_DISPLAY_CONTROL_SPEC_VERSION,
  VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION,
  VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION,
  VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION,
  VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION,
  VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION,
  VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION,
  VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION,
  VK_NV_EXTENSION_101_SPEC_VERSION,
  VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION,
  VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION,
  VK_NV_EXTENSION_104_SPEC_VERSION,
  VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION,
  VK_EXT_HDR_METADATA_SPEC_VERSION,
  VK_IMG_EXTENSION_107_SPEC_VERSION,
  VK_IMG_EXTENSION_108_SPEC_VERSION,
  VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION,
  VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION,
  VK_IMG_EXTENSION_111_SPEC_VERSION,
  VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION,
  VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION,
  VK_KHR_EXTERNAL_FENCE_SPEC_VERSION,
  VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION,
  VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION,
  VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION,
  VK_KHR_MAINTENANCE2_SPEC_VERSION,
  VK_KHR_EXTENSION_119_SPEC_VERSION,
  VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION,
  VK_KHR_VARIABLE_POINTERS_SPEC_VERSION,
  VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION,
  VK_MVK_IOS_SURFACE_SPEC_VERSION,
  VK_MVK_MACOS_SURFACE_SPEC_VERSION,
  VK_MVK_MOLTENVK_SPEC_VERSION,
  VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION,
  VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION,
  VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION,
  VK_EXT_DEBUG_UTILS_SPEC_VERSION,
  VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION,
  VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION,
  VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION,
  VK_AMD_GPU_SHADER_INT16_SPEC_VERSION,
  VK_AMD_EXTENSION_134_SPEC_VERSION,
  VK_AMD_EXTENSION_135_SPEC_VERSION,
  VK_AMD_EXTENSION_136_SPEC_VERSION,
  VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION,
  VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION,
  VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION,
  VK_AMD_EXTENSION_140_SPEC_VERSION,
  VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION,
  VK_AMD_EXTENSION_142_SPEC_VERSION,
  VK_AMD_EXTENSION_143_SPEC_VERSION,
  VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION,
  VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION,
  VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION,
  VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION,
  VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION,
  VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION,
  VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION,
  VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION,
  VK_KHR_RAY_QUERY_SPEC_VERSION,
  VK_NV_EXTENSION_152_SPEC_VERSION,
  VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION,
  VK_NV_FILL_RECTANGLE_SPEC_VERSION,
  VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION,
  VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION,
  VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION,
  VK_KHR_BIND_MEMORY_2_SPEC_VERSION,
  VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION,
  VK_EXT_EXTENSION_160_SPEC_VERSION,
  VK_EXT_VALIDATION_CACHE_SPEC_VERSION,
  VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION,
  VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION,
  VK_KHR_PORTABILITY_SUBSET_SPEC_VERSION,
  VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION,
  VK_NV_RAY_TRACING_SPEC_VERSION,
  VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION,
  VK_EXT_EXTENSION_168_SPEC_VERSION,
  VK_KHR_MAINTENANCE3_SPEC_VERSION,
  VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION,
  VK_EXT_FILTER_CUBIC_SPEC_VERSION,
  VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION,
  VK_QCOM_extension_173_SPEC_VERSION,
  VK_QCOM_extension_174_SPEC_VERSION,
  VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION,
  VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION,
  VK_KHR_EXTENSION_177_SPEC_VERSION,
  VK_KHR_8BIT_STORAGE_SPEC_VERSION,
  VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION,
  VK_AMD_BUFFER_MARKER_SPEC_VERSION,
  VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION,
  VK_KHR_SHADER_CLOCK_SPEC_VERSION,
  VK_KHR_EXTENSION_183_SPEC_VERSION,
  VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION,
  VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION,
  VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION,
  VK_KHR_EXTENSION_187_SPEC_VERSION,
  VK_KHR_EXTENSION_188_SPEC_VERSION,
  VK_KHR_EXTENSION_189_SPEC_VERSION,
  VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION,
  VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION,
  VK_GGP_FRAME_TOKEN_SPEC_VERSION,
  VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_194_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_195_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_196_SPEC_VERSION,
  VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION,
  VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION,
  VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION,
  VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION,
  VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION,
  VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION,
  VK_NV_MESH_SHADER_SPEC_VERSION,
  VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION,
  VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION,
  VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION,
  VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION,
  VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION,
  VK_KHR_EXTENSION_209_SPEC_VERSION,
  VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION,
  VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION,
  VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION,
  VK_EXT_PCI_BUS_INFO_SPEC_VERSION,
  VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION,
  VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION,
  VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION,
  VK_KHR_EXTENSION_217_SPEC_VERSION,
  VK_EXT_METAL_SURFACE_SPEC_VERSION,
  VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION,
  VK_EXT_EXTENSION_220_SPEC_VERSION,
  VK_KHR_EXTENSION_221_SPEC_VERSION,
  VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION,
  VK_EXT_EXTENSION_223_SPEC_VERSION,
  VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION,
  VK_GOOGLE_DECORATE_STRING_SPEC_VERSION,
  VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION,
  VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION,
  VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION,
  VK_AMD_EXTENSION_229_SPEC_VERSION,
  VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION,
  VK_AMD_EXTENSION_231_SPEC_VERSION,
  VK_AMD_EXTENSION_232_SPEC_VERSION,
  VK_AMD_EXTENSION_233_SPEC_VERSION,
  VK_AMD_EXTENSION_234_SPEC_VERSION,
  VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION,
  VK_AMD_EXTENSION_236_SPEC_VERSION,
  VK_KHR_SPIRV_1_4_SPEC_VERSION,
  VK_EXT_MEMORY_BUDGET_SPEC_VERSION,
  VK_EXT_MEMORY_PRIORITY_SPEC_VERSION,
  VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION,
  VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION,
  VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION,
  VK_INTEL_EXTENSION_243_SPEC_VERSION,
  VK_MESA_EXTENSION_244_SPEC_VERSION,
  VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION,
  VK_EXT_TOOLING_INFO_SPEC_VERSION,
  VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION,
  VK_EXT_VALIDATION_FEATURES_SPEC_VERSION,
  VK_KHR_EXTENSION_249_SPEC_VERSION,
  VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION,
  VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION,
  VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION,
  VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION,
  VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION,
  VK_EXT_EXTENSION_255_SPEC_VERSION,
  VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION,
  VK_EXT_HEADLESS_SURFACE_SPEC_VERSION,
  VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION,
  VK_EXT_EXTENSION_259_SPEC_VERSION,
  VK_EXT_LINE_RASTERIZATION_SPEC_VERSION,
  VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION,
  VK_EXT_HOST_QUERY_RESET_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_263_SPEC_VERSION,
  VK_BRCM_EXTENSION_264_SPEC_VERSION,
  VK_BRCM_EXTENSION_265_SPEC_VERSION,
  VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION,
  VK_EXT_EXTENSION_267_SPEC_VERSION,
  VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION,
  VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION,
  VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION,
  VK_INTEL_EXTENSION_271_SPEC_VERSION,
  VK_INTEL_EXTENSION_272_SPEC_VERSION,
  VK_INTEL_EXTENSION_273_SPEC_VERSION,
  VK_INTEL_EXTENSION_274_SPEC_VERSION,
  VK_KHR_EXTENSION_275_SPEC_VERSION,
  VK_KHR_EXTENSION_276_SPEC_VERSION,
  VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION,
  VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION,
  VK_NV_EXTENSION_279_SPEC_VERSION,
  VK_KHR_EXTENSION_280_SPEC_VERSION,
  VK_ARM_EXTENSION_281_SPEC_VERSION,
  VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION,
  VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION,
  VK_EXT_EXTENSION_284_SPEC_VERSION,
  VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION,
  VK_EXT_EXTENSION_286_SPEC_VERSION,
  VK_EXT_ROBUSTNESS_2_SPEC_VERSION,
  VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION,
  VK_EXT_EXTENSION_289_SPEC_VERSION,
  VK_GOOGLE_USER_TYPE_SPEC_VERSION,
  VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION,
  VK_NV_EXTENSION_292_SPEC_VERSION,
  VK_NV_EXTENSION_293_SPEC_VERSION,
  VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION,
  VK_KHR_EXTENSION_295_SPEC_VERSION,
  VK_EXT_PRIVATE_DATA_SPEC_VERSION,
  VK_KHR_EXTENSION_297_SPEC_VERSION,
  VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION,
  VK_KHR_EXTENSION_299_SPEC_VERSION,
  VK_KHR_EXTENSION_300_SPEC_VERSION,
  VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION,
  VK_QCOM_render_pass_store_ops_SPEC_VERSION,
  VK_QCOM_extension_303_SPEC_VERSION,
  VK_QCOM_extension_304_SPEC_VERSION,
  VK_QCOM_extension_305_SPEC_VERSION,
  VK_QCOM_extension_306_SPEC_VERSION,
  VK_QCOM_extension_307_SPEC_VERSION,
  VK_NV_EXTENSION_308_SPEC_VERSION,
  VK_KHR_EXTENSION_309_SPEC_VERSION,
  VK_QCOM_extension_310_SPEC_VERSION,
  VK_NV_EXTENSION_311_SPEC_VERSION,
  VK_EXT_EXTENSION_312_SPEC_VERSION,
  VK_EXT_EXTENSION_313_SPEC_VERSION,
  VK_AMD_EXTENSION_314_SPEC_VERSION,
  VK_AMD_EXTENSION_315_SPEC_VERSION,
  VK_AMD_EXTENSION_316_SPEC_VERSION,
  VK_AMD_EXTENSION_317_SPEC_VERSION,
  VK_AMD_EXTENSION_318_SPEC_VERSION,
  VK_AMD_EXTENSION_319_SPEC_VERSION,
  VK_AMD_EXTENSION_320_SPEC_VERSION,
  VK_AMD_EXTENSION_321_SPEC_VERSION,
  VK_AMD_EXTENSION_322_SPEC_VERSION,
  VK_AMD_EXTENSION_323_SPEC_VERSION,
  VK_KHR_EXTENSION_324_SPEC_VERSION,
  VK_KHR_EXTENSION_325_SPEC_VERSION,
  VK_KHR_EXTENSION_326_SPEC_VERSION,
  VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION,
  VK_NV_EXTENSION_328_SPEC_VERSION,
  VK_NV_EXTENSION_329_SPEC_VERSION,
  VK_NV_EXTENSION_330_SPEC_VERSION,
  VK_NV_EXTENSION_331_SPEC_VERSION,
  VK_NV_EXTENSION_332_SPEC_VERSION,
  VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION,
  VK_QCOM_rotated_copy_commands_SPEC_VERSION,
  VK_KHR_EXTENSION_335_SPEC_VERSION,
  VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION,
  VK_KHR_EXTENSION_337_SPEC_VERSION,
  VK_KHR_COPY_COMMANDS_2_SPEC_VERSION,
  VK_ARM_EXTENSION_339_SPEC_VERSION,
  VK_EXT_EXTENSION_340_SPEC_VERSION,
  VK_EXT_4444_FORMATS_SPEC_VERSION,
  VK_EXT_EXTENSION_342_SPEC_VERSION,
  VK_ARM_EXTENSION_343_SPEC_VERSION,
  VK_ARM_EXTENSION_344_SPEC_VERSION,
  VK_ARM_EXTENSION_345_SPEC_VERSION,
  VK_NV_EXTENSION_346_SPEC_VERSION,
  VK_EXT_DIRECTFB_SURFACE_SPEC_VERSION,
  VK_KHR_EXTENSION_350_SPEC_VERSION,
  VK_NV_EXTENSION_351_SPEC_VERSION,
  VK_EXT_EXTENSION_352_SPEC_VERSION,
  VK_EXT_EXTENSION_353_SPEC_VERSION,
  VK_EXT_EXTENSION_354_SPEC_VERSION,
  VK_EXT_EXTENSION_355_SPEC_VERSION,
  VK_EXT_VERTEX_ATTRIBUTE_ALIASING_SPEC_VERSION,
  VK_EXT_EXTENSION_357,
  VK_KHR_EXTENSION_358_SPEC_VERSION,
  VK_EXT_EXTENSION_359,
  VK_EXT_EXTENSION_360,
  VK_EXT_EXTENSION_361,
  VK_EXT_EXTENSION_362_SPEC_VERSION,
  VK_EXT_EXTENSION_363_SPEC_VERSION,
  VK_EXT_EXTENSION_364_SPEC_VERSION,
  VK_EXT_EXTENSION_365_SPEC_VERSION,
  VK_EXT_EXTENSION_366_SPEC_VERSION,
  VK_EXT_EXTENSION_367_SPEC_VERSION,
  VK_EXT_EXTENSION_368_SPEC_VERSION,
  VK_QCOM_EXTENSION_369_SPEC_VERSION,
  VK_HUAWEI_EXTENSION_370_SPEC_VERSION,
  VK_HUAWEI_EXTENSION_371_SPEC_VERSION,
  VK_NV_EXTENSION_372_SPEC_VERSION,
  
}

declare const VK_KHR_SURFACE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SWAPCHAIN_SPEC_VERSION: API_Extensions;
declare const VK_KHR_DISPLAY_SPEC_VERSION: API_Extensions;
declare const VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION: API_Extensions;
declare const VK_KHR_XLIB_SURFACE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_XCB_SURFACE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_WAYLAND_SURFACE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_MIR_SURFACE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_ANDROID_SURFACE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_WIN32_SURFACE_SPEC_VERSION: API_Extensions;
declare const VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION: API_Extensions;
declare const VK_ANDROID_NATIVE_BUFFER_NUMBER: API_Extensions;
declare const VK_EXT_DEBUG_REPORT_SPEC_VERSION: API_Extensions;
declare const VK_NV_GLSL_SHADER_SPEC_VERSION: API_Extensions;
declare const VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION: API_Extensions;
declare const VK_IMG_FILTER_CUBIC_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_17_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_18_SPEC_VERSION: API_Extensions;
declare const VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_20_SPEC_VERSION: API_Extensions;
declare const VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION: API_Extensions;
declare const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION: API_Extensions;
declare const VK_EXT_DEBUG_MARKER_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_24_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_25_SPEC_VERSION: API_Extensions;
declare const VK_AMD_GCN_SHADER_SPEC_VERSION: API_Extensions;
declare const VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_28_SPEC_VERSION: API_Extensions;
declare const VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION: API_Extensions;
declare const VK_NVX_EXTENSION_30_SPEC_VERSION: API_Extensions;
declare const VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_32_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_33_SPEC_VERSION: API_Extensions;
declare const VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_35_SPEC_VERSION: API_Extensions;
declare const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION: API_Extensions;
declare const VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION: API_Extensions;
declare const VK_AMD_SHADER_BALLOT_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_39_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_40_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_41_SPEC_VERSION: API_Extensions;
declare const VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION: API_Extensions;
declare const VK_AMD_SHADER_INFO_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_44_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_45_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_46_SPEC_VERSION: API_Extensions;
declare const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION: API_Extensions;
declare const VK_NVX_EXTENSION_48_SPEC_VERSION: API_Extensions;
declare const VK_GOOGLE_EXTENSION_49_SPEC_VERSION: API_Extensions;
declare const VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION: API_Extensions;
declare const VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_52_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_53_SPEC_VERSION: API_Extensions;
declare const VK_KHR_MULTIVIEW_SPEC_VERSION: API_Extensions;
declare const VK_IMG_FORMAT_PVRTC_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTERNAL_MEMORY_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION: API_Extensions;
declare const VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION: API_Extensions;
declare const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION: API_Extensions;
declare const VK_KHR_DEVICE_GROUP_SPEC_VERSION: API_Extensions;
declare const VK_EXT_VALIDATION_FLAGS_SPEC_VERSION: API_Extensions;
declare const VK_NN_VI_SURFACE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION: API_Extensions;
declare const VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION: API_Extensions;
declare const VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION: API_Extensions;
declare const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION: API_Extensions;
declare const VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION: API_Extensions;
declare const VK_IMG_EXTENSION_69_SPEC_VERSION: API_Extensions;
declare const VK_KHR_MAINTENANCE1_SPEC_VERSION: API_Extensions;
declare const VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION: API_Extensions;
declare const VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION: API_Extensions;
declare const VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION: API_Extensions;
declare const VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION: API_Extensions;
declare const VK_KHR_16BIT_STORAGE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION: API_Extensions;
declare const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION: API_Extensions;
declare const VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION: API_Extensions;
declare const VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION: API_Extensions;
declare const VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION: API_Extensions;
declare const VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION: API_Extensions;
declare const VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION: API_Extensions;
declare const VK_EXT_DISPLAY_CONTROL_SPEC_VERSION: API_Extensions;
declare const VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION: API_Extensions;
declare const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION: API_Extensions;
declare const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION: API_Extensions;
declare const VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION: API_Extensions;
declare const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION: API_Extensions;
declare const VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION: API_Extensions;
declare const VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_101_SPEC_VERSION: API_Extensions;
declare const VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION: API_Extensions;
declare const VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_104_SPEC_VERSION: API_Extensions;
declare const VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION: API_Extensions;
declare const VK_EXT_HDR_METADATA_SPEC_VERSION: API_Extensions;
declare const VK_IMG_EXTENSION_107_SPEC_VERSION: API_Extensions;
declare const VK_IMG_EXTENSION_108_SPEC_VERSION: API_Extensions;
declare const VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION: API_Extensions;
declare const VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION: API_Extensions;
declare const VK_IMG_EXTENSION_111_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTERNAL_FENCE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION: API_Extensions;
declare const VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION: API_Extensions;
declare const VK_KHR_MAINTENANCE2_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_119_SPEC_VERSION: API_Extensions;
declare const VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION: API_Extensions;
declare const VK_KHR_VARIABLE_POINTERS_SPEC_VERSION: API_Extensions;
declare const VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION: API_Extensions;
declare const VK_MVK_IOS_SURFACE_SPEC_VERSION: API_Extensions;
declare const VK_MVK_MACOS_SURFACE_SPEC_VERSION: API_Extensions;
declare const VK_MVK_MOLTENVK_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION: API_Extensions;
declare const VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION: API_Extensions;
declare const VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION: API_Extensions;
declare const VK_EXT_DEBUG_UTILS_SPEC_VERSION: API_Extensions;
declare const VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION: API_Extensions;
declare const VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION: API_Extensions;
declare const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION: API_Extensions;
declare const VK_AMD_GPU_SHADER_INT16_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_134_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_135_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_136_SPEC_VERSION: API_Extensions;
declare const VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION: API_Extensions;
declare const VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION: API_Extensions;
declare const VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_140_SPEC_VERSION: API_Extensions;
declare const VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_142_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_143_SPEC_VERSION: API_Extensions;
declare const VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION: API_Extensions;
declare const VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION: API_Extensions;
declare const VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION: API_Extensions;
declare const VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION: API_Extensions;
declare const VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION: API_Extensions;
declare const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION: API_Extensions;
declare const VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_RAY_QUERY_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_152_SPEC_VERSION: API_Extensions;
declare const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION: API_Extensions;
declare const VK_NV_FILL_RECTANGLE_SPEC_VERSION: API_Extensions;
declare const VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION: API_Extensions;
declare const VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION: API_Extensions;
declare const VK_KHR_BIND_MEMORY_2_SPEC_VERSION: API_Extensions;
declare const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_160_SPEC_VERSION: API_Extensions;
declare const VK_EXT_VALIDATION_CACHE_SPEC_VERSION: API_Extensions;
declare const VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION: API_Extensions;
declare const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION: API_Extensions;
declare const VK_KHR_PORTABILITY_SUBSET_SPEC_VERSION: API_Extensions;
declare const VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION: API_Extensions;
declare const VK_NV_RAY_TRACING_SPEC_VERSION: API_Extensions;
declare const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_168_SPEC_VERSION: API_Extensions;
declare const VK_KHR_MAINTENANCE3_SPEC_VERSION: API_Extensions;
declare const VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION: API_Extensions;
declare const VK_EXT_FILTER_CUBIC_SPEC_VERSION: API_Extensions;
declare const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION: API_Extensions;
declare const VK_QCOM_extension_173_SPEC_VERSION: API_Extensions;
declare const VK_QCOM_extension_174_SPEC_VERSION: API_Extensions;
declare const VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_177_SPEC_VERSION: API_Extensions;
declare const VK_KHR_8BIT_STORAGE_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION: API_Extensions;
declare const VK_AMD_BUFFER_MARKER_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SHADER_CLOCK_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_183_SPEC_VERSION: API_Extensions;
declare const VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION: API_Extensions;
declare const VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION: API_Extensions;
declare const VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_187_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_188_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_189_SPEC_VERSION: API_Extensions;
declare const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION: API_Extensions;
declare const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION: API_Extensions;
declare const VK_GGP_FRAME_TOKEN_SPEC_VERSION: API_Extensions;
declare const VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION: API_Extensions;
declare const VK_GOOGLE_EXTENSION_194_SPEC_VERSION: API_Extensions;
declare const VK_GOOGLE_EXTENSION_195_SPEC_VERSION: API_Extensions;
declare const VK_GOOGLE_EXTENSION_196_SPEC_VERSION: API_Extensions;
declare const VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION: API_Extensions;
declare const VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION: API_Extensions;
declare const VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION: API_Extensions;
declare const VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION: API_Extensions;
declare const VK_NV_MESH_SHADER_SPEC_VERSION: API_Extensions;
declare const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION: API_Extensions;
declare const VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION: API_Extensions;
declare const VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION: API_Extensions;
declare const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION: API_Extensions;
declare const VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_209_SPEC_VERSION: API_Extensions;
declare const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION: API_Extensions;
declare const VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION: API_Extensions;
declare const VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION: API_Extensions;
declare const VK_EXT_PCI_BUS_INFO_SPEC_VERSION: API_Extensions;
declare const VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION: API_Extensions;
declare const VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_217_SPEC_VERSION: API_Extensions;
declare const VK_EXT_METAL_SURFACE_SPEC_VERSION: API_Extensions;
declare const VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_220_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_221_SPEC_VERSION: API_Extensions;
declare const VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_223_SPEC_VERSION: API_Extensions;
declare const VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION: API_Extensions;
declare const VK_GOOGLE_DECORATE_STRING_SPEC_VERSION: API_Extensions;
declare const VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION: API_Extensions;
declare const VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION: API_Extensions;
declare const VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_229_SPEC_VERSION: API_Extensions;
declare const VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_231_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_232_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_233_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_234_SPEC_VERSION: API_Extensions;
declare const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_236_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SPIRV_1_4_SPEC_VERSION: API_Extensions;
declare const VK_EXT_MEMORY_BUDGET_SPEC_VERSION: API_Extensions;
declare const VK_EXT_MEMORY_PRIORITY_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION: API_Extensions;
declare const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION: API_Extensions;
declare const VK_INTEL_EXTENSION_243_SPEC_VERSION: API_Extensions;
declare const VK_MESA_EXTENSION_244_SPEC_VERSION: API_Extensions;
declare const VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION: API_Extensions;
declare const VK_EXT_TOOLING_INFO_SPEC_VERSION: API_Extensions;
declare const VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION: API_Extensions;
declare const VK_EXT_VALIDATION_FEATURES_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_249_SPEC_VERSION: API_Extensions;
declare const VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION: API_Extensions;
declare const VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION: API_Extensions;
declare const VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION: API_Extensions;
declare const VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION: API_Extensions;
declare const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_255_SPEC_VERSION: API_Extensions;
declare const VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION: API_Extensions;
declare const VK_EXT_HEADLESS_SURFACE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_259_SPEC_VERSION: API_Extensions;
declare const VK_EXT_LINE_RASTERIZATION_SPEC_VERSION: API_Extensions;
declare const VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION: API_Extensions;
declare const VK_EXT_HOST_QUERY_RESET_SPEC_VERSION: API_Extensions;
declare const VK_GOOGLE_EXTENSION_263_SPEC_VERSION: API_Extensions;
declare const VK_BRCM_EXTENSION_264_SPEC_VERSION: API_Extensions;
declare const VK_BRCM_EXTENSION_265_SPEC_VERSION: API_Extensions;
declare const VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_267_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION: API_Extensions;
declare const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION: API_Extensions;
declare const VK_INTEL_EXTENSION_271_SPEC_VERSION: API_Extensions;
declare const VK_INTEL_EXTENSION_272_SPEC_VERSION: API_Extensions;
declare const VK_INTEL_EXTENSION_273_SPEC_VERSION: API_Extensions;
declare const VK_INTEL_EXTENSION_274_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_275_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_276_SPEC_VERSION: API_Extensions;
declare const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION: API_Extensions;
declare const VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_279_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_280_SPEC_VERSION: API_Extensions;
declare const VK_ARM_EXTENSION_281_SPEC_VERSION: API_Extensions;
declare const VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION: API_Extensions;
declare const VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_284_SPEC_VERSION: API_Extensions;
declare const VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_286_SPEC_VERSION: API_Extensions;
declare const VK_EXT_ROBUSTNESS_2_SPEC_VERSION: API_Extensions;
declare const VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_289_SPEC_VERSION: API_Extensions;
declare const VK_GOOGLE_USER_TYPE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_292_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_293_SPEC_VERSION: API_Extensions;
declare const VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_295_SPEC_VERSION: API_Extensions;
declare const VK_EXT_PRIVATE_DATA_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_297_SPEC_VERSION: API_Extensions;
declare const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_299_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_300_SPEC_VERSION: API_Extensions;
declare const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION: API_Extensions;
declare const VK_QCOM_render_pass_store_ops_SPEC_VERSION: API_Extensions;
declare const VK_QCOM_extension_303_SPEC_VERSION: API_Extensions;
declare const VK_QCOM_extension_304_SPEC_VERSION: API_Extensions;
declare const VK_QCOM_extension_305_SPEC_VERSION: API_Extensions;
declare const VK_QCOM_extension_306_SPEC_VERSION: API_Extensions;
declare const VK_QCOM_extension_307_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_308_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_309_SPEC_VERSION: API_Extensions;
declare const VK_QCOM_extension_310_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_311_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_312_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_313_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_314_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_315_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_316_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_317_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_318_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_319_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_320_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_321_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_322_SPEC_VERSION: API_Extensions;
declare const VK_AMD_EXTENSION_323_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_324_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_325_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_326_SPEC_VERSION: API_Extensions;
declare const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_328_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_329_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_330_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_331_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_332_SPEC_VERSION: API_Extensions;
declare const VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION: API_Extensions;
declare const VK_QCOM_rotated_copy_commands_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_335_SPEC_VERSION: API_Extensions;
declare const VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_337_SPEC_VERSION: API_Extensions;
declare const VK_KHR_COPY_COMMANDS_2_SPEC_VERSION: API_Extensions;
declare const VK_ARM_EXTENSION_339_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_340_SPEC_VERSION: API_Extensions;
declare const VK_EXT_4444_FORMATS_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_342_SPEC_VERSION: API_Extensions;
declare const VK_ARM_EXTENSION_343_SPEC_VERSION: API_Extensions;
declare const VK_ARM_EXTENSION_344_SPEC_VERSION: API_Extensions;
declare const VK_ARM_EXTENSION_345_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_346_SPEC_VERSION: API_Extensions;
declare const VK_EXT_DIRECTFB_SURFACE_SPEC_VERSION: API_Extensions;
declare const VK_KHR_EXTENSION_350_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_351_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_352_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_353_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_354_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_355_SPEC_VERSION: API_Extensions;
declare const VK_EXT_VERTEX_ATTRIBUTE_ALIASING_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_357: API_Extensions;
declare const VK_KHR_EXTENSION_358_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_359: API_Extensions;
declare const VK_EXT_EXTENSION_360: API_Extensions;
declare const VK_EXT_EXTENSION_361: API_Extensions;
declare const VK_EXT_EXTENSION_362_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_363_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_364_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_365_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_366_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_367_SPEC_VERSION: API_Extensions;
declare const VK_EXT_EXTENSION_368_SPEC_VERSION: API_Extensions;
declare const VK_QCOM_EXTENSION_369_SPEC_VERSION: API_Extensions;
declare const VK_HUAWEI_EXTENSION_370_SPEC_VERSION: API_Extensions;
declare const VK_HUAWEI_EXTENSION_371_SPEC_VERSION: API_Extensions;
declare const VK_NV_EXTENSION_372_SPEC_VERSION: API_Extensions;



/**
  * 
  * @member VK_MAX_PHYSICAL_DEVICE_NAME_SIZE
  * @member VK_UUID_SIZE
  * @member VK_LUID_SIZE
  * @member VK_LUID_SIZE_KHR
  * @member VK_MAX_EXTENSION_NAME_SIZE
  * @member VK_MAX_DESCRIPTION_SIZE
  * @member VK_MAX_MEMORY_TYPES
  * @member VK_MAX_MEMORY_HEAPS
  * @member VK_LOD_CLAMP_NONE
  * @member VK_REMAINING_MIP_LEVELS
  * @member VK_REMAINING_ARRAY_LAYERS
  * @member VK_WHOLE_SIZE
  * @member VK_ATTACHMENT_UNUSED
  * @member VK_TRUE
  * @member VK_FALSE
  * @member VK_QUEUE_FAMILY_IGNORED
  * @member VK_QUEUE_FAMILY_EXTERNAL
  * @member VK_QUEUE_FAMILY_EXTERNAL_KHR
  * @member VK_QUEUE_FAMILY_FOREIGN_EXT
  * @member VK_SUBPASS_EXTERNAL
  * @member VK_MAX_DEVICE_GROUP_SIZE
  * @member VK_MAX_DEVICE_GROUP_SIZE_KHR
  * @member VK_MAX_DRIVER_NAME_SIZE
  * @member VK_MAX_DRIVER_NAME_SIZE_KHR
  * @member VK_MAX_DRIVER_INFO_SIZE
  * @member VK_MAX_DRIVER_INFO_SIZE_KHR
  * @member VK_SHADER_UNUSED_KHR
  * @member VK_SHADER_UNUSED_NV
  * @member VK_NULL_HANDLE
  */
export enum API_Constants {
  VK_MAX_PHYSICAL_DEVICE_NAME_SIZE,
  VK_UUID_SIZE,
  VK_LUID_SIZE,
  VK_LUID_SIZE_KHR,
  VK_MAX_EXTENSION_NAME_SIZE,
  VK_MAX_DESCRIPTION_SIZE,
  VK_MAX_MEMORY_TYPES,
  VK_MAX_MEMORY_HEAPS,
  VK_LOD_CLAMP_NONE,
  VK_REMAINING_MIP_LEVELS,
  VK_REMAINING_ARRAY_LAYERS,
  VK_WHOLE_SIZE,
  VK_ATTACHMENT_UNUSED,
  VK_TRUE,
  VK_FALSE,
  VK_QUEUE_FAMILY_IGNORED,
  VK_QUEUE_FAMILY_EXTERNAL,
  VK_QUEUE_FAMILY_EXTERNAL_KHR,
  VK_QUEUE_FAMILY_FOREIGN_EXT,
  VK_SUBPASS_EXTERNAL,
  VK_MAX_DEVICE_GROUP_SIZE,
  VK_MAX_DEVICE_GROUP_SIZE_KHR,
  VK_MAX_DRIVER_NAME_SIZE,
  VK_MAX_DRIVER_NAME_SIZE_KHR,
  VK_MAX_DRIVER_INFO_SIZE,
  VK_MAX_DRIVER_INFO_SIZE_KHR,
  VK_SHADER_UNUSED_KHR,
  VK_SHADER_UNUSED_NV,
  VK_NULL_HANDLE,
  
}

declare const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE: API_Constants;
declare const VK_UUID_SIZE: API_Constants;
declare const VK_LUID_SIZE: API_Constants;
declare const VK_LUID_SIZE_KHR: API_Constants;
declare const VK_MAX_EXTENSION_NAME_SIZE: API_Constants;
declare const VK_MAX_DESCRIPTION_SIZE: API_Constants;
declare const VK_MAX_MEMORY_TYPES: API_Constants;
declare const VK_MAX_MEMORY_HEAPS: API_Constants;
declare const VK_LOD_CLAMP_NONE: API_Constants;
declare const VK_REMAINING_MIP_LEVELS: API_Constants;
declare const VK_REMAINING_ARRAY_LAYERS: API_Constants;
declare const VK_WHOLE_SIZE: API_Constants;
declare const VK_ATTACHMENT_UNUSED: API_Constants;
declare const VK_TRUE: API_Constants;
declare const VK_FALSE: API_Constants;
declare const VK_QUEUE_FAMILY_IGNORED: API_Constants;
declare const VK_QUEUE_FAMILY_EXTERNAL: API_Constants;
declare const VK_QUEUE_FAMILY_EXTERNAL_KHR: API_Constants;
declare const VK_QUEUE_FAMILY_FOREIGN_EXT: API_Constants;
declare const VK_SUBPASS_EXTERNAL: API_Constants;
declare const VK_MAX_DEVICE_GROUP_SIZE: API_Constants;
declare const VK_MAX_DEVICE_GROUP_SIZE_KHR: API_Constants;
declare const VK_MAX_DRIVER_NAME_SIZE: API_Constants;
declare const VK_MAX_DRIVER_NAME_SIZE_KHR: API_Constants;
declare const VK_MAX_DRIVER_INFO_SIZE: API_Constants;
declare const VK_MAX_DRIVER_INFO_SIZE_KHR: API_Constants;
declare const VK_SHADER_UNUSED_KHR: API_Constants;
declare const VK_SHADER_UNUSED_NV: API_Constants;
declare const VK_NULL_HANDLE: API_Constants;



/**
  * 
  * @member VK_IMAGE_LAYOUT_UNDEFINED
  * @member VK_IMAGE_LAYOUT_GENERAL
  * @member VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL
  * @member VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL
  * @member VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL
  * @member VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL
  * @member VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL
  * @member VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL
  * @member VK_IMAGE_LAYOUT_PREINITIALIZED
  * @member VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL
  * @member VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL
  * @member VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL
  * @member VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL
  * @member VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL
  * @member VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL
  * @member VK_IMAGE_LAYOUT_PRESENT_SRC_KHR
  * @member VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR
  * @member VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV
  * @member VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT
  * @member VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR
  * @member VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR
  * @member VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR
  * @member VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR
  * @member VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR
  * @member VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR
  * @member VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR
  */
export enum VkImageLayout {
  VK_IMAGE_LAYOUT_UNDEFINED,
  VK_IMAGE_LAYOUT_GENERAL,
  VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
  VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
  VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
  VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
  VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
  VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
  VK_IMAGE_LAYOUT_PREINITIALIZED,
  VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
  VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
  VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
  VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
  VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
  VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
  VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,
  VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR,
  VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV,
  VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT,
  VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR,
  VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR,
  VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR,
  VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR,
  VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR,
  VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR,
  VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR,
  
}

declare const VK_IMAGE_LAYOUT_UNDEFINED: VkImageLayout;
declare const VK_IMAGE_LAYOUT_GENERAL: VkImageLayout;
declare const VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: VkImageLayout;
declare const VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: VkImageLayout;
declare const VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: VkImageLayout;
declare const VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: VkImageLayout;
declare const VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: VkImageLayout;
declare const VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: VkImageLayout;
declare const VK_IMAGE_LAYOUT_PREINITIALIZED: VkImageLayout;
declare const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: VkImageLayout;
declare const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: VkImageLayout;
declare const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL: VkImageLayout;
declare const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL: VkImageLayout;
declare const VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL: VkImageLayout;
declare const VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL: VkImageLayout;
declare const VK_IMAGE_LAYOUT_PRESENT_SRC_KHR: VkImageLayout;
declare const VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR: VkImageLayout;
declare const VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV: VkImageLayout;
declare const VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT: VkImageLayout;
declare const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR: VkImageLayout;
declare const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR: VkImageLayout;
declare const VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR: VkImageLayout;
declare const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR: VkImageLayout;
declare const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR: VkImageLayout;
declare const VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR: VkImageLayout;
declare const VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR: VkImageLayout;



/**
  * 
  * @member VK_ATTACHMENT_LOAD_OP_LOAD
  * @member VK_ATTACHMENT_LOAD_OP_CLEAR
  * @member VK_ATTACHMENT_LOAD_OP_DONT_CARE
  */
export enum VkAttachmentLoadOp {
  VK_ATTACHMENT_LOAD_OP_LOAD,
  VK_ATTACHMENT_LOAD_OP_CLEAR,
  VK_ATTACHMENT_LOAD_OP_DONT_CARE,
  
}

declare const VK_ATTACHMENT_LOAD_OP_LOAD: VkAttachmentLoadOp;
declare const VK_ATTACHMENT_LOAD_OP_CLEAR: VkAttachmentLoadOp;
declare const VK_ATTACHMENT_LOAD_OP_DONT_CARE: VkAttachmentLoadOp;



/**
  * 
  * @member VK_ATTACHMENT_STORE_OP_STORE
  * @member VK_ATTACHMENT_STORE_OP_DONT_CARE
  * @member VK_ATTACHMENT_STORE_OP_NONE_QCOM
  */
export enum VkAttachmentStoreOp {
  VK_ATTACHMENT_STORE_OP_STORE,
  VK_ATTACHMENT_STORE_OP_DONT_CARE,
  VK_ATTACHMENT_STORE_OP_NONE_QCOM,
  
}

declare const VK_ATTACHMENT_STORE_OP_STORE: VkAttachmentStoreOp;
declare const VK_ATTACHMENT_STORE_OP_DONT_CARE: VkAttachmentStoreOp;
declare const VK_ATTACHMENT_STORE_OP_NONE_QCOM: VkAttachmentStoreOp;



/**
  * 
  * @member VK_IMAGE_TYPE_1D
  * @member VK_IMAGE_TYPE_2D
  * @member VK_IMAGE_TYPE_3D
  */
export enum VkImageType {
  VK_IMAGE_TYPE_1D,
  VK_IMAGE_TYPE_2D,
  VK_IMAGE_TYPE_3D,
  
}

declare const VK_IMAGE_TYPE_1D: VkImageType;
declare const VK_IMAGE_TYPE_2D: VkImageType;
declare const VK_IMAGE_TYPE_3D: VkImageType;



/**
  * 
  * @member VK_IMAGE_TILING_OPTIMAL
  * @member VK_IMAGE_TILING_LINEAR
  * @member VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT
  */
export enum VkImageTiling {
  VK_IMAGE_TILING_OPTIMAL,
  VK_IMAGE_TILING_LINEAR,
  VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT,
  
}

declare const VK_IMAGE_TILING_OPTIMAL: VkImageTiling;
declare const VK_IMAGE_TILING_LINEAR: VkImageTiling;
declare const VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT: VkImageTiling;



/**
  * 
  * @member VK_IMAGE_VIEW_TYPE_1D
  * @member VK_IMAGE_VIEW_TYPE_2D
  * @member VK_IMAGE_VIEW_TYPE_3D
  * @member VK_IMAGE_VIEW_TYPE_CUBE
  * @member VK_IMAGE_VIEW_TYPE_1D_ARRAY
  * @member VK_IMAGE_VIEW_TYPE_2D_ARRAY
  * @member VK_IMAGE_VIEW_TYPE_CUBE_ARRAY
  */
export enum VkImageViewType {
  VK_IMAGE_VIEW_TYPE_1D,
  VK_IMAGE_VIEW_TYPE_2D,
  VK_IMAGE_VIEW_TYPE_3D,
  VK_IMAGE_VIEW_TYPE_CUBE,
  VK_IMAGE_VIEW_TYPE_1D_ARRAY,
  VK_IMAGE_VIEW_TYPE_2D_ARRAY,
  VK_IMAGE_VIEW_TYPE_CUBE_ARRAY,
  
}

declare const VK_IMAGE_VIEW_TYPE_1D: VkImageViewType;
declare const VK_IMAGE_VIEW_TYPE_2D: VkImageViewType;
declare const VK_IMAGE_VIEW_TYPE_3D: VkImageViewType;
declare const VK_IMAGE_VIEW_TYPE_CUBE: VkImageViewType;
declare const VK_IMAGE_VIEW_TYPE_1D_ARRAY: VkImageViewType;
declare const VK_IMAGE_VIEW_TYPE_2D_ARRAY: VkImageViewType;
declare const VK_IMAGE_VIEW_TYPE_CUBE_ARRAY: VkImageViewType;



/**
  * 
  * @member VK_COMMAND_BUFFER_LEVEL_PRIMARY
  * @member VK_COMMAND_BUFFER_LEVEL_SECONDARY
  */
export enum VkCommandBufferLevel {
  VK_COMMAND_BUFFER_LEVEL_PRIMARY,
  VK_COMMAND_BUFFER_LEVEL_SECONDARY,
  
}

declare const VK_COMMAND_BUFFER_LEVEL_PRIMARY: VkCommandBufferLevel;
declare const VK_COMMAND_BUFFER_LEVEL_SECONDARY: VkCommandBufferLevel;



/**
  * 
  * @member VK_COMPONENT_SWIZZLE_IDENTITY
  * @member VK_COMPONENT_SWIZZLE_ZERO
  * @member VK_COMPONENT_SWIZZLE_ONE
  * @member VK_COMPONENT_SWIZZLE_R
  * @member VK_COMPONENT_SWIZZLE_G
  * @member VK_COMPONENT_SWIZZLE_B
  * @member VK_COMPONENT_SWIZZLE_A
  */
export enum VkComponentSwizzle {
  VK_COMPONENT_SWIZZLE_IDENTITY,
  VK_COMPONENT_SWIZZLE_ZERO,
  VK_COMPONENT_SWIZZLE_ONE,
  VK_COMPONENT_SWIZZLE_R,
  VK_COMPONENT_SWIZZLE_G,
  VK_COMPONENT_SWIZZLE_B,
  VK_COMPONENT_SWIZZLE_A,
  
}

declare const VK_COMPONENT_SWIZZLE_IDENTITY: VkComponentSwizzle;
declare const VK_COMPONENT_SWIZZLE_ZERO: VkComponentSwizzle;
declare const VK_COMPONENT_SWIZZLE_ONE: VkComponentSwizzle;
declare const VK_COMPONENT_SWIZZLE_R: VkComponentSwizzle;
declare const VK_COMPONENT_SWIZZLE_G: VkComponentSwizzle;
declare const VK_COMPONENT_SWIZZLE_B: VkComponentSwizzle;
declare const VK_COMPONENT_SWIZZLE_A: VkComponentSwizzle;



/**
  * 
  * @member VK_DESCRIPTOR_TYPE_SAMPLER
  * @member VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER
  * @member VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE
  * @member VK_DESCRIPTOR_TYPE_STORAGE_IMAGE
  * @member VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER
  * @member VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER
  * @member VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER
  * @member VK_DESCRIPTOR_TYPE_STORAGE_BUFFER
  * @member VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC
  * @member VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC
  * @member VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT
  * @member VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT
  * @member VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR
  * @member VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV
  */
export enum VkDescriptorType {
  VK_DESCRIPTOR_TYPE_SAMPLER,
  VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
  VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE,
  VK_DESCRIPTOR_TYPE_STORAGE_IMAGE,
  VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER,
  VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER,
  VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
  VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
  VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC,
  VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC,
  VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT,
  VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT,
  VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR,
  VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV,
  
}

declare const VK_DESCRIPTOR_TYPE_SAMPLER: VkDescriptorType;
declare const VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: VkDescriptorType;
declare const VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE: VkDescriptorType;
declare const VK_DESCRIPTOR_TYPE_STORAGE_IMAGE: VkDescriptorType;
declare const VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER: VkDescriptorType;
declare const VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: VkDescriptorType;
declare const VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER: VkDescriptorType;
declare const VK_DESCRIPTOR_TYPE_STORAGE_BUFFER: VkDescriptorType;
declare const VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC: VkDescriptorType;
declare const VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: VkDescriptorType;
declare const VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: VkDescriptorType;
declare const VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT: VkDescriptorType;
declare const VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR: VkDescriptorType;
declare const VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV: VkDescriptorType;



/**
  * 
  * @member VK_QUERY_TYPE_OCCLUSION
  * @member VK_QUERY_TYPE_PIPELINE_STATISTICS
  * @member VK_QUERY_TYPE_TIMESTAMP
  * @member VK_QUERY_TYPE_RESERVED_8
  * @member VK_QUERY_TYPE_RESERVED_4
  * @member VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT
  * @member VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR
  * @member VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR
  * @member VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR
  * @member VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV
  * @member VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL
  */
export enum VkQueryType {
  VK_QUERY_TYPE_OCCLUSION,
  VK_QUERY_TYPE_PIPELINE_STATISTICS,
  VK_QUERY_TYPE_TIMESTAMP,
  VK_QUERY_TYPE_RESERVED_8,
  VK_QUERY_TYPE_RESERVED_4,
  VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT,
  VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR,
  VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR,
  VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR,
  VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV,
  VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL,
  
}

declare const VK_QUERY_TYPE_OCCLUSION: VkQueryType;
declare const VK_QUERY_TYPE_PIPELINE_STATISTICS: VkQueryType;
declare const VK_QUERY_TYPE_TIMESTAMP: VkQueryType;
declare const VK_QUERY_TYPE_RESERVED_8: VkQueryType;
declare const VK_QUERY_TYPE_RESERVED_4: VkQueryType;
declare const VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT: VkQueryType;
declare const VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR: VkQueryType;
declare const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR: VkQueryType;
declare const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR: VkQueryType;
declare const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV: VkQueryType;
declare const VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL: VkQueryType;



/**
  * 
  * @member VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK
  * @member VK_BORDER_COLOR_INT_TRANSPARENT_BLACK
  * @member VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK
  * @member VK_BORDER_COLOR_INT_OPAQUE_BLACK
  * @member VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE
  * @member VK_BORDER_COLOR_INT_OPAQUE_WHITE
  * @member VK_BORDER_COLOR_FLOAT_CUSTOM_EXT
  * @member VK_BORDER_COLOR_INT_CUSTOM_EXT
  */
export enum VkBorderColor {
  VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK,
  VK_BORDER_COLOR_INT_TRANSPARENT_BLACK,
  VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK,
  VK_BORDER_COLOR_INT_OPAQUE_BLACK,
  VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE,
  VK_BORDER_COLOR_INT_OPAQUE_WHITE,
  VK_BORDER_COLOR_FLOAT_CUSTOM_EXT,
  VK_BORDER_COLOR_INT_CUSTOM_EXT,
  
}

declare const VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK: VkBorderColor;
declare const VK_BORDER_COLOR_INT_TRANSPARENT_BLACK: VkBorderColor;
declare const VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK: VkBorderColor;
declare const VK_BORDER_COLOR_INT_OPAQUE_BLACK: VkBorderColor;
declare const VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE: VkBorderColor;
declare const VK_BORDER_COLOR_INT_OPAQUE_WHITE: VkBorderColor;
declare const VK_BORDER_COLOR_FLOAT_CUSTOM_EXT: VkBorderColor;
declare const VK_BORDER_COLOR_INT_CUSTOM_EXT: VkBorderColor;



/**
  * 
  * @member VK_PIPELINE_BIND_POINT_GRAPHICS
  * @member VK_PIPELINE_BIND_POINT_COMPUTE
  * @member VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR
  * @member VK_PIPELINE_BIND_POINT_RAY_TRACING_NV
  */
export enum VkPipelineBindPoint {
  VK_PIPELINE_BIND_POINT_GRAPHICS,
  VK_PIPELINE_BIND_POINT_COMPUTE,
  VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR,
  VK_PIPELINE_BIND_POINT_RAY_TRACING_NV,
  
}

declare const VK_PIPELINE_BIND_POINT_GRAPHICS: VkPipelineBindPoint;
declare const VK_PIPELINE_BIND_POINT_COMPUTE: VkPipelineBindPoint;
declare const VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR: VkPipelineBindPoint;
declare const VK_PIPELINE_BIND_POINT_RAY_TRACING_NV: VkPipelineBindPoint;



/**
  * 
  * @member VK_PIPELINE_CACHE_HEADER_VERSION_ONE
  */
export enum VkPipelineCacheHeaderVersion {
  VK_PIPELINE_CACHE_HEADER_VERSION_ONE,
  
}

declare const VK_PIPELINE_CACHE_HEADER_VERSION_ONE: VkPipelineCacheHeaderVersion;



/**
  * 
  * @member VK_PRIMITIVE_TOPOLOGY_POINT_LIST
  * @member VK_PRIMITIVE_TOPOLOGY_LINE_LIST
  * @member VK_PRIMITIVE_TOPOLOGY_LINE_STRIP
  * @member VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST
  * @member VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP
  * @member VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN
  * @member VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY
  * @member VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY
  * @member VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY
  * @member VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY
  * @member VK_PRIMITIVE_TOPOLOGY_PATCH_LIST
  */
export enum VkPrimitiveTopology {
  VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
  VK_PRIMITIVE_TOPOLOGY_LINE_LIST,
  VK_PRIMITIVE_TOPOLOGY_LINE_STRIP,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN,
  VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY,
  VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY,
  VK_PRIMITIVE_TOPOLOGY_PATCH_LIST,
  
}

declare const VK_PRIMITIVE_TOPOLOGY_POINT_LIST: VkPrimitiveTopology;
declare const VK_PRIMITIVE_TOPOLOGY_LINE_LIST: VkPrimitiveTopology;
declare const VK_PRIMITIVE_TOPOLOGY_LINE_STRIP: VkPrimitiveTopology;
declare const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST: VkPrimitiveTopology;
declare const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP: VkPrimitiveTopology;
declare const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN: VkPrimitiveTopology;
declare const VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY: VkPrimitiveTopology;
declare const VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY: VkPrimitiveTopology;
declare const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY: VkPrimitiveTopology;
declare const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY: VkPrimitiveTopology;
declare const VK_PRIMITIVE_TOPOLOGY_PATCH_LIST: VkPrimitiveTopology;



/**
  * 
  * @member VK_SHARING_MODE_EXCLUSIVE
  * @member VK_SHARING_MODE_CONCURRENT
  */
export enum VkSharingMode {
  VK_SHARING_MODE_EXCLUSIVE,
  VK_SHARING_MODE_CONCURRENT,
  
}

declare const VK_SHARING_MODE_EXCLUSIVE: VkSharingMode;
declare const VK_SHARING_MODE_CONCURRENT: VkSharingMode;



/**
  * 
  * @member VK_INDEX_TYPE_UINT16
  * @member VK_INDEX_TYPE_UINT32
  * @member VK_INDEX_TYPE_NONE_KHR
  * @member VK_INDEX_TYPE_UINT8_EXT
  * @member VK_INDEX_TYPE_NONE_NV
  */
export enum VkIndexType {
  VK_INDEX_TYPE_UINT16,
  VK_INDEX_TYPE_UINT32,
  VK_INDEX_TYPE_NONE_KHR,
  VK_INDEX_TYPE_UINT8_EXT,
  VK_INDEX_TYPE_NONE_NV,
  
}

declare const VK_INDEX_TYPE_UINT16: VkIndexType;
declare const VK_INDEX_TYPE_UINT32: VkIndexType;
declare const VK_INDEX_TYPE_NONE_KHR: VkIndexType;
declare const VK_INDEX_TYPE_UINT8_EXT: VkIndexType;
declare const VK_INDEX_TYPE_NONE_NV: VkIndexType;



/**
  * 
  * @member VK_FILTER_NEAREST
  * @member VK_FILTER_LINEAR
  * @member VK_FILTER_CUBIC_IMG
  * @member VK_FILTER_CUBIC_EXT
  */
export enum VkFilter {
  VK_FILTER_NEAREST,
  VK_FILTER_LINEAR,
  VK_FILTER_CUBIC_IMG,
  VK_FILTER_CUBIC_EXT,
  
}

declare const VK_FILTER_NEAREST: VkFilter;
declare const VK_FILTER_LINEAR: VkFilter;
declare const VK_FILTER_CUBIC_IMG: VkFilter;
declare const VK_FILTER_CUBIC_EXT: VkFilter;



/**
  * 
  * @member VK_SAMPLER_MIPMAP_MODE_NEAREST
  * @member VK_SAMPLER_MIPMAP_MODE_LINEAR
  */
export enum VkSamplerMipmapMode {
  VK_SAMPLER_MIPMAP_MODE_NEAREST,
  VK_SAMPLER_MIPMAP_MODE_LINEAR,
  
}

declare const VK_SAMPLER_MIPMAP_MODE_NEAREST: VkSamplerMipmapMode;
declare const VK_SAMPLER_MIPMAP_MODE_LINEAR: VkSamplerMipmapMode;



/**
  * 
  * @member VK_SAMPLER_ADDRESS_MODE_REPEAT
  * @member VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT
  * @member VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE
  * @member VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER
  * @member VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE
  * @member VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR
  */
export enum VkSamplerAddressMode {
  VK_SAMPLER_ADDRESS_MODE_REPEAT,
  VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT,
  VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE,
  VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER,
  VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
  VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR,
  
}

declare const VK_SAMPLER_ADDRESS_MODE_REPEAT: VkSamplerAddressMode;
declare const VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT: VkSamplerAddressMode;
declare const VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE: VkSamplerAddressMode;
declare const VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER: VkSamplerAddressMode;
declare const VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE: VkSamplerAddressMode;
declare const VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR: VkSamplerAddressMode;



/**
  * 
  * @member VK_COMPARE_OP_NEVER
  * @member VK_COMPARE_OP_LESS
  * @member VK_COMPARE_OP_EQUAL
  * @member VK_COMPARE_OP_LESS_OR_EQUAL
  * @member VK_COMPARE_OP_GREATER
  * @member VK_COMPARE_OP_NOT_EQUAL
  * @member VK_COMPARE_OP_GREATER_OR_EQUAL
  * @member VK_COMPARE_OP_ALWAYS
  */
export enum VkCompareOp {
  VK_COMPARE_OP_NEVER,
  VK_COMPARE_OP_LESS,
  VK_COMPARE_OP_EQUAL,
  VK_COMPARE_OP_LESS_OR_EQUAL,
  VK_COMPARE_OP_GREATER,
  VK_COMPARE_OP_NOT_EQUAL,
  VK_COMPARE_OP_GREATER_OR_EQUAL,
  VK_COMPARE_OP_ALWAYS,
  
}

declare const VK_COMPARE_OP_NEVER: VkCompareOp;
declare const VK_COMPARE_OP_LESS: VkCompareOp;
declare const VK_COMPARE_OP_EQUAL: VkCompareOp;
declare const VK_COMPARE_OP_LESS_OR_EQUAL: VkCompareOp;
declare const VK_COMPARE_OP_GREATER: VkCompareOp;
declare const VK_COMPARE_OP_NOT_EQUAL: VkCompareOp;
declare const VK_COMPARE_OP_GREATER_OR_EQUAL: VkCompareOp;
declare const VK_COMPARE_OP_ALWAYS: VkCompareOp;



/**
  * 
  * @member VK_POLYGON_MODE_FILL
  * @member VK_POLYGON_MODE_LINE
  * @member VK_POLYGON_MODE_POINT
  * @member VK_POLYGON_MODE_FILL_RECTANGLE_NV
  */
export enum VkPolygonMode {
  VK_POLYGON_MODE_FILL,
  VK_POLYGON_MODE_LINE,
  VK_POLYGON_MODE_POINT,
  VK_POLYGON_MODE_FILL_RECTANGLE_NV,
  
}

declare const VK_POLYGON_MODE_FILL: VkPolygonMode;
declare const VK_POLYGON_MODE_LINE: VkPolygonMode;
declare const VK_POLYGON_MODE_POINT: VkPolygonMode;
declare const VK_POLYGON_MODE_FILL_RECTANGLE_NV: VkPolygonMode;



/**
  * 
  * @member VK_FRONT_FACE_COUNTER_CLOCKWISE
  * @member VK_FRONT_FACE_CLOCKWISE
  */
export enum VkFrontFace {
  VK_FRONT_FACE_COUNTER_CLOCKWISE,
  VK_FRONT_FACE_CLOCKWISE,
  
}

declare const VK_FRONT_FACE_COUNTER_CLOCKWISE: VkFrontFace;
declare const VK_FRONT_FACE_CLOCKWISE: VkFrontFace;



/**
  * 
  * @member VK_BLEND_FACTOR_ZERO
  * @member VK_BLEND_FACTOR_ONE
  * @member VK_BLEND_FACTOR_SRC_COLOR
  * @member VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR
  * @member VK_BLEND_FACTOR_DST_COLOR
  * @member VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR
  * @member VK_BLEND_FACTOR_SRC_ALPHA
  * @member VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
  * @member VK_BLEND_FACTOR_DST_ALPHA
  * @member VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA
  * @member VK_BLEND_FACTOR_CONSTANT_COLOR
  * @member VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR
  * @member VK_BLEND_FACTOR_CONSTANT_ALPHA
  * @member VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA
  * @member VK_BLEND_FACTOR_SRC_ALPHA_SATURATE
  * @member VK_BLEND_FACTOR_SRC1_COLOR
  * @member VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR
  * @member VK_BLEND_FACTOR_SRC1_ALPHA
  * @member VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA
  */
export enum VkBlendFactor {
  VK_BLEND_FACTOR_ZERO,
  VK_BLEND_FACTOR_ONE,
  VK_BLEND_FACTOR_SRC_COLOR,
  VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR,
  VK_BLEND_FACTOR_DST_COLOR,
  VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR,
  VK_BLEND_FACTOR_SRC_ALPHA,
  VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
  VK_BLEND_FACTOR_DST_ALPHA,
  VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA,
  VK_BLEND_FACTOR_CONSTANT_COLOR,
  VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR,
  VK_BLEND_FACTOR_CONSTANT_ALPHA,
  VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA,
  VK_BLEND_FACTOR_SRC_ALPHA_SATURATE,
  VK_BLEND_FACTOR_SRC1_COLOR,
  VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR,
  VK_BLEND_FACTOR_SRC1_ALPHA,
  VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA,
  
}

declare const VK_BLEND_FACTOR_ZERO: VkBlendFactor;
declare const VK_BLEND_FACTOR_ONE: VkBlendFactor;
declare const VK_BLEND_FACTOR_SRC_COLOR: VkBlendFactor;
declare const VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: VkBlendFactor;
declare const VK_BLEND_FACTOR_DST_COLOR: VkBlendFactor;
declare const VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR: VkBlendFactor;
declare const VK_BLEND_FACTOR_SRC_ALPHA: VkBlendFactor;
declare const VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: VkBlendFactor;
declare const VK_BLEND_FACTOR_DST_ALPHA: VkBlendFactor;
declare const VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: VkBlendFactor;
declare const VK_BLEND_FACTOR_CONSTANT_COLOR: VkBlendFactor;
declare const VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: VkBlendFactor;
declare const VK_BLEND_FACTOR_CONSTANT_ALPHA: VkBlendFactor;
declare const VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: VkBlendFactor;
declare const VK_BLEND_FACTOR_SRC_ALPHA_SATURATE: VkBlendFactor;
declare const VK_BLEND_FACTOR_SRC1_COLOR: VkBlendFactor;
declare const VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: VkBlendFactor;
declare const VK_BLEND_FACTOR_SRC1_ALPHA: VkBlendFactor;
declare const VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: VkBlendFactor;



/**
  * 
  * @member VK_BLEND_OP_ADD
  * @member VK_BLEND_OP_SUBTRACT
  * @member VK_BLEND_OP_REVERSE_SUBTRACT
  * @member VK_BLEND_OP_MIN
  * @member VK_BLEND_OP_MAX
  * @member VK_BLEND_OP_ZERO_EXT
  * @member VK_BLEND_OP_SRC_EXT
  * @member VK_BLEND_OP_DST_EXT
  * @member VK_BLEND_OP_SRC_OVER_EXT
  * @member VK_BLEND_OP_DST_OVER_EXT
  * @member VK_BLEND_OP_SRC_IN_EXT
  * @member VK_BLEND_OP_DST_IN_EXT
  * @member VK_BLEND_OP_SRC_OUT_EXT
  * @member VK_BLEND_OP_DST_OUT_EXT
  * @member VK_BLEND_OP_SRC_ATOP_EXT
  * @member VK_BLEND_OP_DST_ATOP_EXT
  * @member VK_BLEND_OP_XOR_EXT
  * @member VK_BLEND_OP_MULTIPLY_EXT
  * @member VK_BLEND_OP_SCREEN_EXT
  * @member VK_BLEND_OP_OVERLAY_EXT
  * @member VK_BLEND_OP_DARKEN_EXT
  * @member VK_BLEND_OP_LIGHTEN_EXT
  * @member VK_BLEND_OP_COLORDODGE_EXT
  * @member VK_BLEND_OP_COLORBURN_EXT
  * @member VK_BLEND_OP_HARDLIGHT_EXT
  * @member VK_BLEND_OP_SOFTLIGHT_EXT
  * @member VK_BLEND_OP_DIFFERENCE_EXT
  * @member VK_BLEND_OP_EXCLUSION_EXT
  * @member VK_BLEND_OP_INVERT_EXT
  * @member VK_BLEND_OP_INVERT_RGB_EXT
  * @member VK_BLEND_OP_LINEARDODGE_EXT
  * @member VK_BLEND_OP_LINEARBURN_EXT
  * @member VK_BLEND_OP_VIVIDLIGHT_EXT
  * @member VK_BLEND_OP_LINEARLIGHT_EXT
  * @member VK_BLEND_OP_PINLIGHT_EXT
  * @member VK_BLEND_OP_HARDMIX_EXT
  * @member VK_BLEND_OP_HSL_HUE_EXT
  * @member VK_BLEND_OP_HSL_SATURATION_EXT
  * @member VK_BLEND_OP_HSL_COLOR_EXT
  * @member VK_BLEND_OP_HSL_LUMINOSITY_EXT
  * @member VK_BLEND_OP_PLUS_EXT
  * @member VK_BLEND_OP_PLUS_CLAMPED_EXT
  * @member VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT
  * @member VK_BLEND_OP_PLUS_DARKER_EXT
  * @member VK_BLEND_OP_MINUS_EXT
  * @member VK_BLEND_OP_MINUS_CLAMPED_EXT
  * @member VK_BLEND_OP_CONTRAST_EXT
  * @member VK_BLEND_OP_INVERT_OVG_EXT
  * @member VK_BLEND_OP_RED_EXT
  * @member VK_BLEND_OP_GREEN_EXT
  * @member VK_BLEND_OP_BLUE_EXT
  */
export enum VkBlendOp {
  VK_BLEND_OP_ADD,
  VK_BLEND_OP_SUBTRACT,
  VK_BLEND_OP_REVERSE_SUBTRACT,
  VK_BLEND_OP_MIN,
  VK_BLEND_OP_MAX,
  VK_BLEND_OP_ZERO_EXT,
  VK_BLEND_OP_SRC_EXT,
  VK_BLEND_OP_DST_EXT,
  VK_BLEND_OP_SRC_OVER_EXT,
  VK_BLEND_OP_DST_OVER_EXT,
  VK_BLEND_OP_SRC_IN_EXT,
  VK_BLEND_OP_DST_IN_EXT,
  VK_BLEND_OP_SRC_OUT_EXT,
  VK_BLEND_OP_DST_OUT_EXT,
  VK_BLEND_OP_SRC_ATOP_EXT,
  VK_BLEND_OP_DST_ATOP_EXT,
  VK_BLEND_OP_XOR_EXT,
  VK_BLEND_OP_MULTIPLY_EXT,
  VK_BLEND_OP_SCREEN_EXT,
  VK_BLEND_OP_OVERLAY_EXT,
  VK_BLEND_OP_DARKEN_EXT,
  VK_BLEND_OP_LIGHTEN_EXT,
  VK_BLEND_OP_COLORDODGE_EXT,
  VK_BLEND_OP_COLORBURN_EXT,
  VK_BLEND_OP_HARDLIGHT_EXT,
  VK_BLEND_OP_SOFTLIGHT_EXT,
  VK_BLEND_OP_DIFFERENCE_EXT,
  VK_BLEND_OP_EXCLUSION_EXT,
  VK_BLEND_OP_INVERT_EXT,
  VK_BLEND_OP_INVERT_RGB_EXT,
  VK_BLEND_OP_LINEARDODGE_EXT,
  VK_BLEND_OP_LINEARBURN_EXT,
  VK_BLEND_OP_VIVIDLIGHT_EXT,
  VK_BLEND_OP_LINEARLIGHT_EXT,
  VK_BLEND_OP_PINLIGHT_EXT,
  VK_BLEND_OP_HARDMIX_EXT,
  VK_BLEND_OP_HSL_HUE_EXT,
  VK_BLEND_OP_HSL_SATURATION_EXT,
  VK_BLEND_OP_HSL_COLOR_EXT,
  VK_BLEND_OP_HSL_LUMINOSITY_EXT,
  VK_BLEND_OP_PLUS_EXT,
  VK_BLEND_OP_PLUS_CLAMPED_EXT,
  VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT,
  VK_BLEND_OP_PLUS_DARKER_EXT,
  VK_BLEND_OP_MINUS_EXT,
  VK_BLEND_OP_MINUS_CLAMPED_EXT,
  VK_BLEND_OP_CONTRAST_EXT,
  VK_BLEND_OP_INVERT_OVG_EXT,
  VK_BLEND_OP_RED_EXT,
  VK_BLEND_OP_GREEN_EXT,
  VK_BLEND_OP_BLUE_EXT,
  
}

declare const VK_BLEND_OP_ADD: VkBlendOp;
declare const VK_BLEND_OP_SUBTRACT: VkBlendOp;
declare const VK_BLEND_OP_REVERSE_SUBTRACT: VkBlendOp;
declare const VK_BLEND_OP_MIN: VkBlendOp;
declare const VK_BLEND_OP_MAX: VkBlendOp;
declare const VK_BLEND_OP_ZERO_EXT: VkBlendOp;
declare const VK_BLEND_OP_SRC_EXT: VkBlendOp;
declare const VK_BLEND_OP_DST_EXT: VkBlendOp;
declare const VK_BLEND_OP_SRC_OVER_EXT: VkBlendOp;
declare const VK_BLEND_OP_DST_OVER_EXT: VkBlendOp;
declare const VK_BLEND_OP_SRC_IN_EXT: VkBlendOp;
declare const VK_BLEND_OP_DST_IN_EXT: VkBlendOp;
declare const VK_BLEND_OP_SRC_OUT_EXT: VkBlendOp;
declare const VK_BLEND_OP_DST_OUT_EXT: VkBlendOp;
declare const VK_BLEND_OP_SRC_ATOP_EXT: VkBlendOp;
declare const VK_BLEND_OP_DST_ATOP_EXT: VkBlendOp;
declare const VK_BLEND_OP_XOR_EXT: VkBlendOp;
declare const VK_BLEND_OP_MULTIPLY_EXT: VkBlendOp;
declare const VK_BLEND_OP_SCREEN_EXT: VkBlendOp;
declare const VK_BLEND_OP_OVERLAY_EXT: VkBlendOp;
declare const VK_BLEND_OP_DARKEN_EXT: VkBlendOp;
declare const VK_BLEND_OP_LIGHTEN_EXT: VkBlendOp;
declare const VK_BLEND_OP_COLORDODGE_EXT: VkBlendOp;
declare const VK_BLEND_OP_COLORBURN_EXT: VkBlendOp;
declare const VK_BLEND_OP_HARDLIGHT_EXT: VkBlendOp;
declare const VK_BLEND_OP_SOFTLIGHT_EXT: VkBlendOp;
declare const VK_BLEND_OP_DIFFERENCE_EXT: VkBlendOp;
declare const VK_BLEND_OP_EXCLUSION_EXT: VkBlendOp;
declare const VK_BLEND_OP_INVERT_EXT: VkBlendOp;
declare const VK_BLEND_OP_INVERT_RGB_EXT: VkBlendOp;
declare const VK_BLEND_OP_LINEARDODGE_EXT: VkBlendOp;
declare const VK_BLEND_OP_LINEARBURN_EXT: VkBlendOp;
declare const VK_BLEND_OP_VIVIDLIGHT_EXT: VkBlendOp;
declare const VK_BLEND_OP_LINEARLIGHT_EXT: VkBlendOp;
declare const VK_BLEND_OP_PINLIGHT_EXT: VkBlendOp;
declare const VK_BLEND_OP_HARDMIX_EXT: VkBlendOp;
declare const VK_BLEND_OP_HSL_HUE_EXT: VkBlendOp;
declare const VK_BLEND_OP_HSL_SATURATION_EXT: VkBlendOp;
declare const VK_BLEND_OP_HSL_COLOR_EXT: VkBlendOp;
declare const VK_BLEND_OP_HSL_LUMINOSITY_EXT: VkBlendOp;
declare const VK_BLEND_OP_PLUS_EXT: VkBlendOp;
declare const VK_BLEND_OP_PLUS_CLAMPED_EXT: VkBlendOp;
declare const VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT: VkBlendOp;
declare const VK_BLEND_OP_PLUS_DARKER_EXT: VkBlendOp;
declare const VK_BLEND_OP_MINUS_EXT: VkBlendOp;
declare const VK_BLEND_OP_MINUS_CLAMPED_EXT: VkBlendOp;
declare const VK_BLEND_OP_CONTRAST_EXT: VkBlendOp;
declare const VK_BLEND_OP_INVERT_OVG_EXT: VkBlendOp;
declare const VK_BLEND_OP_RED_EXT: VkBlendOp;
declare const VK_BLEND_OP_GREEN_EXT: VkBlendOp;
declare const VK_BLEND_OP_BLUE_EXT: VkBlendOp;



/**
  * 
  * @member VK_STENCIL_OP_KEEP
  * @member VK_STENCIL_OP_ZERO
  * @member VK_STENCIL_OP_REPLACE
  * @member VK_STENCIL_OP_INCREMENT_AND_CLAMP
  * @member VK_STENCIL_OP_DECREMENT_AND_CLAMP
  * @member VK_STENCIL_OP_INVERT
  * @member VK_STENCIL_OP_INCREMENT_AND_WRAP
  * @member VK_STENCIL_OP_DECREMENT_AND_WRAP
  */
export enum VkStencilOp {
  VK_STENCIL_OP_KEEP,
  VK_STENCIL_OP_ZERO,
  VK_STENCIL_OP_REPLACE,
  VK_STENCIL_OP_INCREMENT_AND_CLAMP,
  VK_STENCIL_OP_DECREMENT_AND_CLAMP,
  VK_STENCIL_OP_INVERT,
  VK_STENCIL_OP_INCREMENT_AND_WRAP,
  VK_STENCIL_OP_DECREMENT_AND_WRAP,
  
}

declare const VK_STENCIL_OP_KEEP: VkStencilOp;
declare const VK_STENCIL_OP_ZERO: VkStencilOp;
declare const VK_STENCIL_OP_REPLACE: VkStencilOp;
declare const VK_STENCIL_OP_INCREMENT_AND_CLAMP: VkStencilOp;
declare const VK_STENCIL_OP_DECREMENT_AND_CLAMP: VkStencilOp;
declare const VK_STENCIL_OP_INVERT: VkStencilOp;
declare const VK_STENCIL_OP_INCREMENT_AND_WRAP: VkStencilOp;
declare const VK_STENCIL_OP_DECREMENT_AND_WRAP: VkStencilOp;



/**
  * 
  * @member VK_LOGIC_OP_CLEAR
  * @member VK_LOGIC_OP_AND
  * @member VK_LOGIC_OP_AND_REVERSE
  * @member VK_LOGIC_OP_COPY
  * @member VK_LOGIC_OP_AND_INVERTED
  * @member VK_LOGIC_OP_NO_OP
  * @member VK_LOGIC_OP_XOR
  * @member VK_LOGIC_OP_OR
  * @member VK_LOGIC_OP_NOR
  * @member VK_LOGIC_OP_EQUIVALENT
  * @member VK_LOGIC_OP_INVERT
  * @member VK_LOGIC_OP_OR_REVERSE
  * @member VK_LOGIC_OP_COPY_INVERTED
  * @member VK_LOGIC_OP_OR_INVERTED
  * @member VK_LOGIC_OP_NAND
  * @member VK_LOGIC_OP_SET
  */
export enum VkLogicOp {
  VK_LOGIC_OP_CLEAR,
  VK_LOGIC_OP_AND,
  VK_LOGIC_OP_AND_REVERSE,
  VK_LOGIC_OP_COPY,
  VK_LOGIC_OP_AND_INVERTED,
  VK_LOGIC_OP_NO_OP,
  VK_LOGIC_OP_XOR,
  VK_LOGIC_OP_OR,
  VK_LOGIC_OP_NOR,
  VK_LOGIC_OP_EQUIVALENT,
  VK_LOGIC_OP_INVERT,
  VK_LOGIC_OP_OR_REVERSE,
  VK_LOGIC_OP_COPY_INVERTED,
  VK_LOGIC_OP_OR_INVERTED,
  VK_LOGIC_OP_NAND,
  VK_LOGIC_OP_SET,
  
}

declare const VK_LOGIC_OP_CLEAR: VkLogicOp;
declare const VK_LOGIC_OP_AND: VkLogicOp;
declare const VK_LOGIC_OP_AND_REVERSE: VkLogicOp;
declare const VK_LOGIC_OP_COPY: VkLogicOp;
declare const VK_LOGIC_OP_AND_INVERTED: VkLogicOp;
declare const VK_LOGIC_OP_NO_OP: VkLogicOp;
declare const VK_LOGIC_OP_XOR: VkLogicOp;
declare const VK_LOGIC_OP_OR: VkLogicOp;
declare const VK_LOGIC_OP_NOR: VkLogicOp;
declare const VK_LOGIC_OP_EQUIVALENT: VkLogicOp;
declare const VK_LOGIC_OP_INVERT: VkLogicOp;
declare const VK_LOGIC_OP_OR_REVERSE: VkLogicOp;
declare const VK_LOGIC_OP_COPY_INVERTED: VkLogicOp;
declare const VK_LOGIC_OP_OR_INVERTED: VkLogicOp;
declare const VK_LOGIC_OP_NAND: VkLogicOp;
declare const VK_LOGIC_OP_SET: VkLogicOp;



/**
  * 
  * @member VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE
  */
export enum VkInternalAllocationType {
  VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE,
  
}

declare const VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE: VkInternalAllocationType;



/**
  * 
  * @member VK_SYSTEM_ALLOCATION_SCOPE_COMMAND
  * @member VK_SYSTEM_ALLOCATION_SCOPE_OBJECT
  * @member VK_SYSTEM_ALLOCATION_SCOPE_CACHE
  * @member VK_SYSTEM_ALLOCATION_SCOPE_DEVICE
  * @member VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE
  */
export enum VkSystemAllocationScope {
  VK_SYSTEM_ALLOCATION_SCOPE_COMMAND,
  VK_SYSTEM_ALLOCATION_SCOPE_OBJECT,
  VK_SYSTEM_ALLOCATION_SCOPE_CACHE,
  VK_SYSTEM_ALLOCATION_SCOPE_DEVICE,
  VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE,
  
}

declare const VK_SYSTEM_ALLOCATION_SCOPE_COMMAND: VkSystemAllocationScope;
declare const VK_SYSTEM_ALLOCATION_SCOPE_OBJECT: VkSystemAllocationScope;
declare const VK_SYSTEM_ALLOCATION_SCOPE_CACHE: VkSystemAllocationScope;
declare const VK_SYSTEM_ALLOCATION_SCOPE_DEVICE: VkSystemAllocationScope;
declare const VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE: VkSystemAllocationScope;



/**
  * 
  * @member VK_PHYSICAL_DEVICE_TYPE_OTHER
  * @member VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU
  * @member VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU
  * @member VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU
  * @member VK_PHYSICAL_DEVICE_TYPE_CPU
  */
export enum VkPhysicalDeviceType {
  VK_PHYSICAL_DEVICE_TYPE_OTHER,
  VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU,
  VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU,
  VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU,
  VK_PHYSICAL_DEVICE_TYPE_CPU,
  
}

declare const VK_PHYSICAL_DEVICE_TYPE_OTHER: VkPhysicalDeviceType;
declare const VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU: VkPhysicalDeviceType;
declare const VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU: VkPhysicalDeviceType;
declare const VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU: VkPhysicalDeviceType;
declare const VK_PHYSICAL_DEVICE_TYPE_CPU: VkPhysicalDeviceType;



/**
  * 
  * @member VK_VERTEX_INPUT_RATE_VERTEX
  * @member VK_VERTEX_INPUT_RATE_INSTANCE
  */
export enum VkVertexInputRate {
  VK_VERTEX_INPUT_RATE_VERTEX,
  VK_VERTEX_INPUT_RATE_INSTANCE,
  
}

declare const VK_VERTEX_INPUT_RATE_VERTEX: VkVertexInputRate;
declare const VK_VERTEX_INPUT_RATE_INSTANCE: VkVertexInputRate;



/**
  * 
  * @member VK_FORMAT_UNDEFINED
  * @member VK_FORMAT_R4G4_UNORM_PACK8
  * @member VK_FORMAT_R4G4B4A4_UNORM_PACK16
  * @member VK_FORMAT_B4G4R4A4_UNORM_PACK16
  * @member VK_FORMAT_R5G6B5_UNORM_PACK16
  * @member VK_FORMAT_B5G6R5_UNORM_PACK16
  * @member VK_FORMAT_R5G5B5A1_UNORM_PACK16
  * @member VK_FORMAT_B5G5R5A1_UNORM_PACK16
  * @member VK_FORMAT_A1R5G5B5_UNORM_PACK16
  * @member VK_FORMAT_R8_UNORM
  * @member VK_FORMAT_R8_SNORM
  * @member VK_FORMAT_R8_USCALED
  * @member VK_FORMAT_R8_SSCALED
  * @member VK_FORMAT_R8_UINT
  * @member VK_FORMAT_R8_SINT
  * @member VK_FORMAT_R8_SRGB
  * @member VK_FORMAT_R8G8_UNORM
  * @member VK_FORMAT_R8G8_SNORM
  * @member VK_FORMAT_R8G8_USCALED
  * @member VK_FORMAT_R8G8_SSCALED
  * @member VK_FORMAT_R8G8_UINT
  * @member VK_FORMAT_R8G8_SINT
  * @member VK_FORMAT_R8G8_SRGB
  * @member VK_FORMAT_R8G8B8_UNORM
  * @member VK_FORMAT_R8G8B8_SNORM
  * @member VK_FORMAT_R8G8B8_USCALED
  * @member VK_FORMAT_R8G8B8_SSCALED
  * @member VK_FORMAT_R8G8B8_UINT
  * @member VK_FORMAT_R8G8B8_SINT
  * @member VK_FORMAT_R8G8B8_SRGB
  * @member VK_FORMAT_B8G8R8_UNORM
  * @member VK_FORMAT_B8G8R8_SNORM
  * @member VK_FORMAT_B8G8R8_USCALED
  * @member VK_FORMAT_B8G8R8_SSCALED
  * @member VK_FORMAT_B8G8R8_UINT
  * @member VK_FORMAT_B8G8R8_SINT
  * @member VK_FORMAT_B8G8R8_SRGB
  * @member VK_FORMAT_R8G8B8A8_UNORM
  * @member VK_FORMAT_R8G8B8A8_SNORM
  * @member VK_FORMAT_R8G8B8A8_USCALED
  * @member VK_FORMAT_R8G8B8A8_SSCALED
  * @member VK_FORMAT_R8G8B8A8_UINT
  * @member VK_FORMAT_R8G8B8A8_SINT
  * @member VK_FORMAT_R8G8B8A8_SRGB
  * @member VK_FORMAT_B8G8R8A8_UNORM
  * @member VK_FORMAT_B8G8R8A8_SNORM
  * @member VK_FORMAT_B8G8R8A8_USCALED
  * @member VK_FORMAT_B8G8R8A8_SSCALED
  * @member VK_FORMAT_B8G8R8A8_UINT
  * @member VK_FORMAT_B8G8R8A8_SINT
  * @member VK_FORMAT_B8G8R8A8_SRGB
  * @member VK_FORMAT_A8B8G8R8_UNORM_PACK32
  * @member VK_FORMAT_A8B8G8R8_SNORM_PACK32
  * @member VK_FORMAT_A8B8G8R8_USCALED_PACK32
  * @member VK_FORMAT_A8B8G8R8_SSCALED_PACK32
  * @member VK_FORMAT_A8B8G8R8_UINT_PACK32
  * @member VK_FORMAT_A8B8G8R8_SINT_PACK32
  * @member VK_FORMAT_A8B8G8R8_SRGB_PACK32
  * @member VK_FORMAT_A2R10G10B10_UNORM_PACK32
  * @member VK_FORMAT_A2R10G10B10_SNORM_PACK32
  * @member VK_FORMAT_A2R10G10B10_USCALED_PACK32
  * @member VK_FORMAT_A2R10G10B10_SSCALED_PACK32
  * @member VK_FORMAT_A2R10G10B10_UINT_PACK32
  * @member VK_FORMAT_A2R10G10B10_SINT_PACK32
  * @member VK_FORMAT_A2B10G10R10_UNORM_PACK32
  * @member VK_FORMAT_A2B10G10R10_SNORM_PACK32
  * @member VK_FORMAT_A2B10G10R10_USCALED_PACK32
  * @member VK_FORMAT_A2B10G10R10_SSCALED_PACK32
  * @member VK_FORMAT_A2B10G10R10_UINT_PACK32
  * @member VK_FORMAT_A2B10G10R10_SINT_PACK32
  * @member VK_FORMAT_R16_UNORM
  * @member VK_FORMAT_R16_SNORM
  * @member VK_FORMAT_R16_USCALED
  * @member VK_FORMAT_R16_SSCALED
  * @member VK_FORMAT_R16_UINT
  * @member VK_FORMAT_R16_SINT
  * @member VK_FORMAT_R16_SFLOAT
  * @member VK_FORMAT_R16G16_UNORM
  * @member VK_FORMAT_R16G16_SNORM
  * @member VK_FORMAT_R16G16_USCALED
  * @member VK_FORMAT_R16G16_SSCALED
  * @member VK_FORMAT_R16G16_UINT
  * @member VK_FORMAT_R16G16_SINT
  * @member VK_FORMAT_R16G16_SFLOAT
  * @member VK_FORMAT_R16G16B16_UNORM
  * @member VK_FORMAT_R16G16B16_SNORM
  * @member VK_FORMAT_R16G16B16_USCALED
  * @member VK_FORMAT_R16G16B16_SSCALED
  * @member VK_FORMAT_R16G16B16_UINT
  * @member VK_FORMAT_R16G16B16_SINT
  * @member VK_FORMAT_R16G16B16_SFLOAT
  * @member VK_FORMAT_R16G16B16A16_UNORM
  * @member VK_FORMAT_R16G16B16A16_SNORM
  * @member VK_FORMAT_R16G16B16A16_USCALED
  * @member VK_FORMAT_R16G16B16A16_SSCALED
  * @member VK_FORMAT_R16G16B16A16_UINT
  * @member VK_FORMAT_R16G16B16A16_SINT
  * @member VK_FORMAT_R16G16B16A16_SFLOAT
  * @member VK_FORMAT_R32_UINT
  * @member VK_FORMAT_R32_SINT
  * @member VK_FORMAT_R32_SFLOAT
  * @member VK_FORMAT_R32G32_UINT
  * @member VK_FORMAT_R32G32_SINT
  * @member VK_FORMAT_R32G32_SFLOAT
  * @member VK_FORMAT_R32G32B32_UINT
  * @member VK_FORMAT_R32G32B32_SINT
  * @member VK_FORMAT_R32G32B32_SFLOAT
  * @member VK_FORMAT_R32G32B32A32_UINT
  * @member VK_FORMAT_R32G32B32A32_SINT
  * @member VK_FORMAT_R32G32B32A32_SFLOAT
  * @member VK_FORMAT_R64_UINT
  * @member VK_FORMAT_R64_SINT
  * @member VK_FORMAT_R64_SFLOAT
  * @member VK_FORMAT_R64G64_UINT
  * @member VK_FORMAT_R64G64_SINT
  * @member VK_FORMAT_R64G64_SFLOAT
  * @member VK_FORMAT_R64G64B64_UINT
  * @member VK_FORMAT_R64G64B64_SINT
  * @member VK_FORMAT_R64G64B64_SFLOAT
  * @member VK_FORMAT_R64G64B64A64_UINT
  * @member VK_FORMAT_R64G64B64A64_SINT
  * @member VK_FORMAT_R64G64B64A64_SFLOAT
  * @member VK_FORMAT_B10G11R11_UFLOAT_PACK32
  * @member VK_FORMAT_E5B9G9R9_UFLOAT_PACK32
  * @member VK_FORMAT_D16_UNORM
  * @member VK_FORMAT_X8_D24_UNORM_PACK32
  * @member VK_FORMAT_D32_SFLOAT
  * @member VK_FORMAT_S8_UINT
  * @member VK_FORMAT_D16_UNORM_S8_UINT
  * @member VK_FORMAT_D24_UNORM_S8_UINT
  * @member VK_FORMAT_D32_SFLOAT_S8_UINT
  * @member VK_FORMAT_BC1_RGB_UNORM_BLOCK
  * @member VK_FORMAT_BC1_RGB_SRGB_BLOCK
  * @member VK_FORMAT_BC1_RGBA_UNORM_BLOCK
  * @member VK_FORMAT_BC1_RGBA_SRGB_BLOCK
  * @member VK_FORMAT_BC2_UNORM_BLOCK
  * @member VK_FORMAT_BC2_SRGB_BLOCK
  * @member VK_FORMAT_BC3_UNORM_BLOCK
  * @member VK_FORMAT_BC3_SRGB_BLOCK
  * @member VK_FORMAT_BC4_UNORM_BLOCK
  * @member VK_FORMAT_BC4_SNORM_BLOCK
  * @member VK_FORMAT_BC5_UNORM_BLOCK
  * @member VK_FORMAT_BC5_SNORM_BLOCK
  * @member VK_FORMAT_BC6H_UFLOAT_BLOCK
  * @member VK_FORMAT_BC6H_SFLOAT_BLOCK
  * @member VK_FORMAT_BC7_UNORM_BLOCK
  * @member VK_FORMAT_BC7_SRGB_BLOCK
  * @member VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK
  * @member VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK
  * @member VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK
  * @member VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK
  * @member VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK
  * @member VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK
  * @member VK_FORMAT_EAC_R11_UNORM_BLOCK
  * @member VK_FORMAT_EAC_R11_SNORM_BLOCK
  * @member VK_FORMAT_EAC_R11G11_UNORM_BLOCK
  * @member VK_FORMAT_EAC_R11G11_SNORM_BLOCK
  * @member VK_FORMAT_ASTC_4x4_UNORM_BLOCK
  * @member VK_FORMAT_ASTC_4x4_SRGB_BLOCK
  * @member VK_FORMAT_ASTC_5x4_UNORM_BLOCK
  * @member VK_FORMAT_ASTC_5x4_SRGB_BLOCK
  * @member VK_FORMAT_ASTC_5x5_UNORM_BLOCK
  * @member VK_FORMAT_ASTC_5x5_SRGB_BLOCK
  * @member VK_FORMAT_ASTC_6x5_UNORM_BLOCK
  * @member VK_FORMAT_ASTC_6x5_SRGB_BLOCK
  * @member VK_FORMAT_ASTC_6x6_UNORM_BLOCK
  * @member VK_FORMAT_ASTC_6x6_SRGB_BLOCK
  * @member VK_FORMAT_ASTC_8x5_UNORM_BLOCK
  * @member VK_FORMAT_ASTC_8x5_SRGB_BLOCK
  * @member VK_FORMAT_ASTC_8x6_UNORM_BLOCK
  * @member VK_FORMAT_ASTC_8x6_SRGB_BLOCK
  * @member VK_FORMAT_ASTC_8x8_UNORM_BLOCK
  * @member VK_FORMAT_ASTC_8x8_SRGB_BLOCK
  * @member VK_FORMAT_ASTC_10x5_UNORM_BLOCK
  * @member VK_FORMAT_ASTC_10x5_SRGB_BLOCK
  * @member VK_FORMAT_ASTC_10x6_UNORM_BLOCK
  * @member VK_FORMAT_ASTC_10x6_SRGB_BLOCK
  * @member VK_FORMAT_ASTC_10x8_UNORM_BLOCK
  * @member VK_FORMAT_ASTC_10x8_SRGB_BLOCK
  * @member VK_FORMAT_ASTC_10x10_UNORM_BLOCK
  * @member VK_FORMAT_ASTC_10x10_SRGB_BLOCK
  * @member VK_FORMAT_ASTC_12x10_UNORM_BLOCK
  * @member VK_FORMAT_ASTC_12x10_SRGB_BLOCK
  * @member VK_FORMAT_ASTC_12x12_UNORM_BLOCK
  * @member VK_FORMAT_ASTC_12x12_SRGB_BLOCK
  * @member VK_FORMAT_G8B8G8R8_422_UNORM
  * @member VK_FORMAT_B8G8R8G8_422_UNORM
  * @member VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM
  * @member VK_FORMAT_G8_B8R8_2PLANE_420_UNORM
  * @member VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM
  * @member VK_FORMAT_G8_B8R8_2PLANE_422_UNORM
  * @member VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM
  * @member VK_FORMAT_R10X6_UNORM_PACK16
  * @member VK_FORMAT_R10X6G10X6_UNORM_2PACK16
  * @member VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16
  * @member VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16
  * @member VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16
  * @member VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16
  * @member VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16
  * @member VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16
  * @member VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16
  * @member VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16
  * @member VK_FORMAT_R12X4_UNORM_PACK16
  * @member VK_FORMAT_R12X4G12X4_UNORM_2PACK16
  * @member VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16
  * @member VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16
  * @member VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16
  * @member VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16
  * @member VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16
  * @member VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16
  * @member VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16
  * @member VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16
  * @member VK_FORMAT_G16B16G16R16_422_UNORM
  * @member VK_FORMAT_B16G16R16G16_422_UNORM
  * @member VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM
  * @member VK_FORMAT_G16_B16R16_2PLANE_420_UNORM
  * @member VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM
  * @member VK_FORMAT_G16_B16R16_2PLANE_422_UNORM
  * @member VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM
  * @member VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG
  * @member VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG
  * @member VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG
  * @member VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG
  * @member VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG
  * @member VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG
  * @member VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG
  * @member VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG
  * @member VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT
  * @member VK_FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT
  * @member VK_FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT
  * @member VK_FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT
  * @member VK_FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT
  * @member VK_FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT
  * @member VK_FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT
  * @member VK_FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT
  * @member VK_FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT
  * @member VK_FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT
  * @member VK_FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT
  * @member VK_FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT
  * @member VK_FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT
  * @member VK_FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT
  * @member VK_FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT
  * @member VK_FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT
  * @member VK_FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT
  * @member VK_FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT
  * @member VK_FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT
  * @member VK_FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT
  * @member VK_FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT
  * @member VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT
  * @member VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT
  * @member VK_FORMAT_G8B8G8R8_422_UNORM_KHR
  * @member VK_FORMAT_B8G8R8G8_422_UNORM_KHR
  * @member VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR
  * @member VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR
  * @member VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR
  * @member VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR
  * @member VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR
  * @member VK_FORMAT_R10X6_UNORM_PACK16_KHR
  * @member VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR
  * @member VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR
  * @member VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR
  * @member VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR
  * @member VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR
  * @member VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR
  * @member VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR
  * @member VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR
  * @member VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR
  * @member VK_FORMAT_R12X4_UNORM_PACK16_KHR
  * @member VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR
  * @member VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR
  * @member VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR
  * @member VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR
  * @member VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR
  * @member VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR
  * @member VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR
  * @member VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR
  * @member VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR
  * @member VK_FORMAT_G16B16G16R16_422_UNORM_KHR
  * @member VK_FORMAT_B16G16R16G16_422_UNORM_KHR
  * @member VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR
  * @member VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR
  * @member VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR
  * @member VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR
  * @member VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR
  */
export enum VkFormat {
  VK_FORMAT_UNDEFINED,
  VK_FORMAT_R4G4_UNORM_PACK8,
  VK_FORMAT_R4G4B4A4_UNORM_PACK16,
  VK_FORMAT_B4G4R4A4_UNORM_PACK16,
  VK_FORMAT_R5G6B5_UNORM_PACK16,
  VK_FORMAT_B5G6R5_UNORM_PACK16,
  VK_FORMAT_R5G5B5A1_UNORM_PACK16,
  VK_FORMAT_B5G5R5A1_UNORM_PACK16,
  VK_FORMAT_A1R5G5B5_UNORM_PACK16,
  VK_FORMAT_R8_UNORM,
  VK_FORMAT_R8_SNORM,
  VK_FORMAT_R8_USCALED,
  VK_FORMAT_R8_SSCALED,
  VK_FORMAT_R8_UINT,
  VK_FORMAT_R8_SINT,
  VK_FORMAT_R8_SRGB,
  VK_FORMAT_R8G8_UNORM,
  VK_FORMAT_R8G8_SNORM,
  VK_FORMAT_R8G8_USCALED,
  VK_FORMAT_R8G8_SSCALED,
  VK_FORMAT_R8G8_UINT,
  VK_FORMAT_R8G8_SINT,
  VK_FORMAT_R8G8_SRGB,
  VK_FORMAT_R8G8B8_UNORM,
  VK_FORMAT_R8G8B8_SNORM,
  VK_FORMAT_R8G8B8_USCALED,
  VK_FORMAT_R8G8B8_SSCALED,
  VK_FORMAT_R8G8B8_UINT,
  VK_FORMAT_R8G8B8_SINT,
  VK_FORMAT_R8G8B8_SRGB,
  VK_FORMAT_B8G8R8_UNORM,
  VK_FORMAT_B8G8R8_SNORM,
  VK_FORMAT_B8G8R8_USCALED,
  VK_FORMAT_B8G8R8_SSCALED,
  VK_FORMAT_B8G8R8_UINT,
  VK_FORMAT_B8G8R8_SINT,
  VK_FORMAT_B8G8R8_SRGB,
  VK_FORMAT_R8G8B8A8_UNORM,
  VK_FORMAT_R8G8B8A8_SNORM,
  VK_FORMAT_R8G8B8A8_USCALED,
  VK_FORMAT_R8G8B8A8_SSCALED,
  VK_FORMAT_R8G8B8A8_UINT,
  VK_FORMAT_R8G8B8A8_SINT,
  VK_FORMAT_R8G8B8A8_SRGB,
  VK_FORMAT_B8G8R8A8_UNORM,
  VK_FORMAT_B8G8R8A8_SNORM,
  VK_FORMAT_B8G8R8A8_USCALED,
  VK_FORMAT_B8G8R8A8_SSCALED,
  VK_FORMAT_B8G8R8A8_UINT,
  VK_FORMAT_B8G8R8A8_SINT,
  VK_FORMAT_B8G8R8A8_SRGB,
  VK_FORMAT_A8B8G8R8_UNORM_PACK32,
  VK_FORMAT_A8B8G8R8_SNORM_PACK32,
  VK_FORMAT_A8B8G8R8_USCALED_PACK32,
  VK_FORMAT_A8B8G8R8_SSCALED_PACK32,
  VK_FORMAT_A8B8G8R8_UINT_PACK32,
  VK_FORMAT_A8B8G8R8_SINT_PACK32,
  VK_FORMAT_A8B8G8R8_SRGB_PACK32,
  VK_FORMAT_A2R10G10B10_UNORM_PACK32,
  VK_FORMAT_A2R10G10B10_SNORM_PACK32,
  VK_FORMAT_A2R10G10B10_USCALED_PACK32,
  VK_FORMAT_A2R10G10B10_SSCALED_PACK32,
  VK_FORMAT_A2R10G10B10_UINT_PACK32,
  VK_FORMAT_A2R10G10B10_SINT_PACK32,
  VK_FORMAT_A2B10G10R10_UNORM_PACK32,
  VK_FORMAT_A2B10G10R10_SNORM_PACK32,
  VK_FORMAT_A2B10G10R10_USCALED_PACK32,
  VK_FORMAT_A2B10G10R10_SSCALED_PACK32,
  VK_FORMAT_A2B10G10R10_UINT_PACK32,
  VK_FORMAT_A2B10G10R10_SINT_PACK32,
  VK_FORMAT_R16_UNORM,
  VK_FORMAT_R16_SNORM,
  VK_FORMAT_R16_USCALED,
  VK_FORMAT_R16_SSCALED,
  VK_FORMAT_R16_UINT,
  VK_FORMAT_R16_SINT,
  VK_FORMAT_R16_SFLOAT,
  VK_FORMAT_R16G16_UNORM,
  VK_FORMAT_R16G16_SNORM,
  VK_FORMAT_R16G16_USCALED,
  VK_FORMAT_R16G16_SSCALED,
  VK_FORMAT_R16G16_UINT,
  VK_FORMAT_R16G16_SINT,
  VK_FORMAT_R16G16_SFLOAT,
  VK_FORMAT_R16G16B16_UNORM,
  VK_FORMAT_R16G16B16_SNORM,
  VK_FORMAT_R16G16B16_USCALED,
  VK_FORMAT_R16G16B16_SSCALED,
  VK_FORMAT_R16G16B16_UINT,
  VK_FORMAT_R16G16B16_SINT,
  VK_FORMAT_R16G16B16_SFLOAT,
  VK_FORMAT_R16G16B16A16_UNORM,
  VK_FORMAT_R16G16B16A16_SNORM,
  VK_FORMAT_R16G16B16A16_USCALED,
  VK_FORMAT_R16G16B16A16_SSCALED,
  VK_FORMAT_R16G16B16A16_UINT,
  VK_FORMAT_R16G16B16A16_SINT,
  VK_FORMAT_R16G16B16A16_SFLOAT,
  VK_FORMAT_R32_UINT,
  VK_FORMAT_R32_SINT,
  VK_FORMAT_R32_SFLOAT,
  VK_FORMAT_R32G32_UINT,
  VK_FORMAT_R32G32_SINT,
  VK_FORMAT_R32G32_SFLOAT,
  VK_FORMAT_R32G32B32_UINT,
  VK_FORMAT_R32G32B32_SINT,
  VK_FORMAT_R32G32B32_SFLOAT,
  VK_FORMAT_R32G32B32A32_UINT,
  VK_FORMAT_R32G32B32A32_SINT,
  VK_FORMAT_R32G32B32A32_SFLOAT,
  VK_FORMAT_R64_UINT,
  VK_FORMAT_R64_SINT,
  VK_FORMAT_R64_SFLOAT,
  VK_FORMAT_R64G64_UINT,
  VK_FORMAT_R64G64_SINT,
  VK_FORMAT_R64G64_SFLOAT,
  VK_FORMAT_R64G64B64_UINT,
  VK_FORMAT_R64G64B64_SINT,
  VK_FORMAT_R64G64B64_SFLOAT,
  VK_FORMAT_R64G64B64A64_UINT,
  VK_FORMAT_R64G64B64A64_SINT,
  VK_FORMAT_R64G64B64A64_SFLOAT,
  VK_FORMAT_B10G11R11_UFLOAT_PACK32,
  VK_FORMAT_E5B9G9R9_UFLOAT_PACK32,
  VK_FORMAT_D16_UNORM,
  VK_FORMAT_X8_D24_UNORM_PACK32,
  VK_FORMAT_D32_SFLOAT,
  VK_FORMAT_S8_UINT,
  VK_FORMAT_D16_UNORM_S8_UINT,
  VK_FORMAT_D24_UNORM_S8_UINT,
  VK_FORMAT_D32_SFLOAT_S8_UINT,
  VK_FORMAT_BC1_RGB_UNORM_BLOCK,
  VK_FORMAT_BC1_RGB_SRGB_BLOCK,
  VK_FORMAT_BC1_RGBA_UNORM_BLOCK,
  VK_FORMAT_BC1_RGBA_SRGB_BLOCK,
  VK_FORMAT_BC2_UNORM_BLOCK,
  VK_FORMAT_BC2_SRGB_BLOCK,
  VK_FORMAT_BC3_UNORM_BLOCK,
  VK_FORMAT_BC3_SRGB_BLOCK,
  VK_FORMAT_BC4_UNORM_BLOCK,
  VK_FORMAT_BC4_SNORM_BLOCK,
  VK_FORMAT_BC5_UNORM_BLOCK,
  VK_FORMAT_BC5_SNORM_BLOCK,
  VK_FORMAT_BC6H_UFLOAT_BLOCK,
  VK_FORMAT_BC6H_SFLOAT_BLOCK,
  VK_FORMAT_BC7_UNORM_BLOCK,
  VK_FORMAT_BC7_SRGB_BLOCK,
  VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK,
  VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK,
  VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK,
  VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK,
  VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK,
  VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK,
  VK_FORMAT_EAC_R11_UNORM_BLOCK,
  VK_FORMAT_EAC_R11_SNORM_BLOCK,
  VK_FORMAT_EAC_R11G11_UNORM_BLOCK,
  VK_FORMAT_EAC_R11G11_SNORM_BLOCK,
  VK_FORMAT_ASTC_4x4_UNORM_BLOCK,
  VK_FORMAT_ASTC_4x4_SRGB_BLOCK,
  VK_FORMAT_ASTC_5x4_UNORM_BLOCK,
  VK_FORMAT_ASTC_5x4_SRGB_BLOCK,
  VK_FORMAT_ASTC_5x5_UNORM_BLOCK,
  VK_FORMAT_ASTC_5x5_SRGB_BLOCK,
  VK_FORMAT_ASTC_6x5_UNORM_BLOCK,
  VK_FORMAT_ASTC_6x5_SRGB_BLOCK,
  VK_FORMAT_ASTC_6x6_UNORM_BLOCK,
  VK_FORMAT_ASTC_6x6_SRGB_BLOCK,
  VK_FORMAT_ASTC_8x5_UNORM_BLOCK,
  VK_FORMAT_ASTC_8x5_SRGB_BLOCK,
  VK_FORMAT_ASTC_8x6_UNORM_BLOCK,
  VK_FORMAT_ASTC_8x6_SRGB_BLOCK,
  VK_FORMAT_ASTC_8x8_UNORM_BLOCK,
  VK_FORMAT_ASTC_8x8_SRGB_BLOCK,
  VK_FORMAT_ASTC_10x5_UNORM_BLOCK,
  VK_FORMAT_ASTC_10x5_SRGB_BLOCK,
  VK_FORMAT_ASTC_10x6_UNORM_BLOCK,
  VK_FORMAT_ASTC_10x6_SRGB_BLOCK,
  VK_FORMAT_ASTC_10x8_UNORM_BLOCK,
  VK_FORMAT_ASTC_10x8_SRGB_BLOCK,
  VK_FORMAT_ASTC_10x10_UNORM_BLOCK,
  VK_FORMAT_ASTC_10x10_SRGB_BLOCK,
  VK_FORMAT_ASTC_12x10_UNORM_BLOCK,
  VK_FORMAT_ASTC_12x10_SRGB_BLOCK,
  VK_FORMAT_ASTC_12x12_UNORM_BLOCK,
  VK_FORMAT_ASTC_12x12_SRGB_BLOCK,
  VK_FORMAT_G8B8G8R8_422_UNORM,
  VK_FORMAT_B8G8R8G8_422_UNORM,
  VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
  VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
  VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
  VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
  VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
  VK_FORMAT_R10X6_UNORM_PACK16,
  VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
  VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
  VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
  VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
  VK_FORMAT_R12X4_UNORM_PACK16,
  VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
  VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
  VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
  VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
  VK_FORMAT_G16B16G16R16_422_UNORM,
  VK_FORMAT_B16G16R16G16_422_UNORM,
  VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
  VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
  VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
  VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
  VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
  VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG,
  VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG,
  VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG,
  VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG,
  VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG,
  VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG,
  VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG,
  VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG,
  VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT,
  VK_FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT,
  VK_FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT,
  VK_FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT,
  VK_FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT,
  VK_FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT,
  VK_FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT,
  VK_FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT,
  VK_FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT,
  VK_FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT,
  VK_FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT,
  VK_FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT,
  VK_FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT,
  VK_FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT,
  VK_FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT,
  VK_FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT,
  VK_FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT,
  VK_FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT,
  VK_FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT,
  VK_FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT,
  VK_FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT,
  VK_FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT,
  VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT,
  VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT,
  VK_FORMAT_G8B8G8R8_422_UNORM_KHR,
  VK_FORMAT_B8G8R8G8_422_UNORM_KHR,
  VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR,
  VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR,
  VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR,
  VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR,
  VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR,
  VK_FORMAT_R10X6_UNORM_PACK16_KHR,
  VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR,
  VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR,
  VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR,
  VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR,
  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR,
  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR,
  VK_FORMAT_R12X4_UNORM_PACK16_KHR,
  VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR,
  VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR,
  VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR,
  VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR,
  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR,
  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR,
  VK_FORMAT_G16B16G16R16_422_UNORM_KHR,
  VK_FORMAT_B16G16R16G16_422_UNORM_KHR,
  VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR,
  VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR,
  VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR,
  VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR,
  VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR,
  
}

declare const VK_FORMAT_UNDEFINED: VkFormat;
declare const VK_FORMAT_R4G4_UNORM_PACK8: VkFormat;
declare const VK_FORMAT_R4G4B4A4_UNORM_PACK16: VkFormat;
declare const VK_FORMAT_B4G4R4A4_UNORM_PACK16: VkFormat;
declare const VK_FORMAT_R5G6B5_UNORM_PACK16: VkFormat;
declare const VK_FORMAT_B5G6R5_UNORM_PACK16: VkFormat;
declare const VK_FORMAT_R5G5B5A1_UNORM_PACK16: VkFormat;
declare const VK_FORMAT_B5G5R5A1_UNORM_PACK16: VkFormat;
declare const VK_FORMAT_A1R5G5B5_UNORM_PACK16: VkFormat;
declare const VK_FORMAT_R8_UNORM: VkFormat;
declare const VK_FORMAT_R8_SNORM: VkFormat;
declare const VK_FORMAT_R8_USCALED: VkFormat;
declare const VK_FORMAT_R8_SSCALED: VkFormat;
declare const VK_FORMAT_R8_UINT: VkFormat;
declare const VK_FORMAT_R8_SINT: VkFormat;
declare const VK_FORMAT_R8_SRGB: VkFormat;
declare const VK_FORMAT_R8G8_UNORM: VkFormat;
declare const VK_FORMAT_R8G8_SNORM: VkFormat;
declare const VK_FORMAT_R8G8_USCALED: VkFormat;
declare const VK_FORMAT_R8G8_SSCALED: VkFormat;
declare const VK_FORMAT_R8G8_UINT: VkFormat;
declare const VK_FORMAT_R8G8_SINT: VkFormat;
declare const VK_FORMAT_R8G8_SRGB: VkFormat;
declare const VK_FORMAT_R8G8B8_UNORM: VkFormat;
declare const VK_FORMAT_R8G8B8_SNORM: VkFormat;
declare const VK_FORMAT_R8G8B8_USCALED: VkFormat;
declare const VK_FORMAT_R8G8B8_SSCALED: VkFormat;
declare const VK_FORMAT_R8G8B8_UINT: VkFormat;
declare const VK_FORMAT_R8G8B8_SINT: VkFormat;
declare const VK_FORMAT_R8G8B8_SRGB: VkFormat;
declare const VK_FORMAT_B8G8R8_UNORM: VkFormat;
declare const VK_FORMAT_B8G8R8_SNORM: VkFormat;
declare const VK_FORMAT_B8G8R8_USCALED: VkFormat;
declare const VK_FORMAT_B8G8R8_SSCALED: VkFormat;
declare const VK_FORMAT_B8G8R8_UINT: VkFormat;
declare const VK_FORMAT_B8G8R8_SINT: VkFormat;
declare const VK_FORMAT_B8G8R8_SRGB: VkFormat;
declare const VK_FORMAT_R8G8B8A8_UNORM: VkFormat;
declare const VK_FORMAT_R8G8B8A8_SNORM: VkFormat;
declare const VK_FORMAT_R8G8B8A8_USCALED: VkFormat;
declare const VK_FORMAT_R8G8B8A8_SSCALED: VkFormat;
declare const VK_FORMAT_R8G8B8A8_UINT: VkFormat;
declare const VK_FORMAT_R8G8B8A8_SINT: VkFormat;
declare const VK_FORMAT_R8G8B8A8_SRGB: VkFormat;
declare const VK_FORMAT_B8G8R8A8_UNORM: VkFormat;
declare const VK_FORMAT_B8G8R8A8_SNORM: VkFormat;
declare const VK_FORMAT_B8G8R8A8_USCALED: VkFormat;
declare const VK_FORMAT_B8G8R8A8_SSCALED: VkFormat;
declare const VK_FORMAT_B8G8R8A8_UINT: VkFormat;
declare const VK_FORMAT_B8G8R8A8_SINT: VkFormat;
declare const VK_FORMAT_B8G8R8A8_SRGB: VkFormat;
declare const VK_FORMAT_A8B8G8R8_UNORM_PACK32: VkFormat;
declare const VK_FORMAT_A8B8G8R8_SNORM_PACK32: VkFormat;
declare const VK_FORMAT_A8B8G8R8_USCALED_PACK32: VkFormat;
declare const VK_FORMAT_A8B8G8R8_SSCALED_PACK32: VkFormat;
declare const VK_FORMAT_A8B8G8R8_UINT_PACK32: VkFormat;
declare const VK_FORMAT_A8B8G8R8_SINT_PACK32: VkFormat;
declare const VK_FORMAT_A8B8G8R8_SRGB_PACK32: VkFormat;
declare const VK_FORMAT_A2R10G10B10_UNORM_PACK32: VkFormat;
declare const VK_FORMAT_A2R10G10B10_SNORM_PACK32: VkFormat;
declare const VK_FORMAT_A2R10G10B10_USCALED_PACK32: VkFormat;
declare const VK_FORMAT_A2R10G10B10_SSCALED_PACK32: VkFormat;
declare const VK_FORMAT_A2R10G10B10_UINT_PACK32: VkFormat;
declare const VK_FORMAT_A2R10G10B10_SINT_PACK32: VkFormat;
declare const VK_FORMAT_A2B10G10R10_UNORM_PACK32: VkFormat;
declare const VK_FORMAT_A2B10G10R10_SNORM_PACK32: VkFormat;
declare const VK_FORMAT_A2B10G10R10_USCALED_PACK32: VkFormat;
declare const VK_FORMAT_A2B10G10R10_SSCALED_PACK32: VkFormat;
declare const VK_FORMAT_A2B10G10R10_UINT_PACK32: VkFormat;
declare const VK_FORMAT_A2B10G10R10_SINT_PACK32: VkFormat;
declare const VK_FORMAT_R16_UNORM: VkFormat;
declare const VK_FORMAT_R16_SNORM: VkFormat;
declare const VK_FORMAT_R16_USCALED: VkFormat;
declare const VK_FORMAT_R16_SSCALED: VkFormat;
declare const VK_FORMAT_R16_UINT: VkFormat;
declare const VK_FORMAT_R16_SINT: VkFormat;
declare const VK_FORMAT_R16_SFLOAT: VkFormat;
declare const VK_FORMAT_R16G16_UNORM: VkFormat;
declare const VK_FORMAT_R16G16_SNORM: VkFormat;
declare const VK_FORMAT_R16G16_USCALED: VkFormat;
declare const VK_FORMAT_R16G16_SSCALED: VkFormat;
declare const VK_FORMAT_R16G16_UINT: VkFormat;
declare const VK_FORMAT_R16G16_SINT: VkFormat;
declare const VK_FORMAT_R16G16_SFLOAT: VkFormat;
declare const VK_FORMAT_R16G16B16_UNORM: VkFormat;
declare const VK_FORMAT_R16G16B16_SNORM: VkFormat;
declare const VK_FORMAT_R16G16B16_USCALED: VkFormat;
declare const VK_FORMAT_R16G16B16_SSCALED: VkFormat;
declare const VK_FORMAT_R16G16B16_UINT: VkFormat;
declare const VK_FORMAT_R16G16B16_SINT: VkFormat;
declare const VK_FORMAT_R16G16B16_SFLOAT: VkFormat;
declare const VK_FORMAT_R16G16B16A16_UNORM: VkFormat;
declare const VK_FORMAT_R16G16B16A16_SNORM: VkFormat;
declare const VK_FORMAT_R16G16B16A16_USCALED: VkFormat;
declare const VK_FORMAT_R16G16B16A16_SSCALED: VkFormat;
declare const VK_FORMAT_R16G16B16A16_UINT: VkFormat;
declare const VK_FORMAT_R16G16B16A16_SINT: VkFormat;
declare const VK_FORMAT_R16G16B16A16_SFLOAT: VkFormat;
declare const VK_FORMAT_R32_UINT: VkFormat;
declare const VK_FORMAT_R32_SINT: VkFormat;
declare const VK_FORMAT_R32_SFLOAT: VkFormat;
declare const VK_FORMAT_R32G32_UINT: VkFormat;
declare const VK_FORMAT_R32G32_SINT: VkFormat;
declare const VK_FORMAT_R32G32_SFLOAT: VkFormat;
declare const VK_FORMAT_R32G32B32_UINT: VkFormat;
declare const VK_FORMAT_R32G32B32_SINT: VkFormat;
declare const VK_FORMAT_R32G32B32_SFLOAT: VkFormat;
declare const VK_FORMAT_R32G32B32A32_UINT: VkFormat;
declare const VK_FORMAT_R32G32B32A32_SINT: VkFormat;
declare const VK_FORMAT_R32G32B32A32_SFLOAT: VkFormat;
declare const VK_FORMAT_R64_UINT: VkFormat;
declare const VK_FORMAT_R64_SINT: VkFormat;
declare const VK_FORMAT_R64_SFLOAT: VkFormat;
declare const VK_FORMAT_R64G64_UINT: VkFormat;
declare const VK_FORMAT_R64G64_SINT: VkFormat;
declare const VK_FORMAT_R64G64_SFLOAT: VkFormat;
declare const VK_FORMAT_R64G64B64_UINT: VkFormat;
declare const VK_FORMAT_R64G64B64_SINT: VkFormat;
declare const VK_FORMAT_R64G64B64_SFLOAT: VkFormat;
declare const VK_FORMAT_R64G64B64A64_UINT: VkFormat;
declare const VK_FORMAT_R64G64B64A64_SINT: VkFormat;
declare const VK_FORMAT_R64G64B64A64_SFLOAT: VkFormat;
declare const VK_FORMAT_B10G11R11_UFLOAT_PACK32: VkFormat;
declare const VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: VkFormat;
declare const VK_FORMAT_D16_UNORM: VkFormat;
declare const VK_FORMAT_X8_D24_UNORM_PACK32: VkFormat;
declare const VK_FORMAT_D32_SFLOAT: VkFormat;
declare const VK_FORMAT_S8_UINT: VkFormat;
declare const VK_FORMAT_D16_UNORM_S8_UINT: VkFormat;
declare const VK_FORMAT_D24_UNORM_S8_UINT: VkFormat;
declare const VK_FORMAT_D32_SFLOAT_S8_UINT: VkFormat;
declare const VK_FORMAT_BC1_RGB_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_BC1_RGB_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_BC1_RGBA_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_BC1_RGBA_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_BC2_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_BC2_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_BC3_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_BC3_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_BC4_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_BC4_SNORM_BLOCK: VkFormat;
declare const VK_FORMAT_BC5_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_BC5_SNORM_BLOCK: VkFormat;
declare const VK_FORMAT_BC6H_UFLOAT_BLOCK: VkFormat;
declare const VK_FORMAT_BC6H_SFLOAT_BLOCK: VkFormat;
declare const VK_FORMAT_BC7_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_BC7_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_EAC_R11_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_EAC_R11_SNORM_BLOCK: VkFormat;
declare const VK_FORMAT_EAC_R11G11_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_EAC_R11G11_SNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_4x4_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_4x4_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_5x4_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_5x4_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_5x5_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_5x5_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_6x5_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_6x5_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_6x6_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_6x6_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_8x5_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_8x5_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_8x6_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_8x6_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_8x8_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_8x8_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_10x5_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_10x5_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_10x6_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_10x6_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_10x8_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_10x8_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_10x10_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_10x10_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_12x10_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_12x10_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_12x12_UNORM_BLOCK: VkFormat;
declare const VK_FORMAT_ASTC_12x12_SRGB_BLOCK: VkFormat;
declare const VK_FORMAT_G8B8G8R8_422_UNORM: VkFormat;
declare const VK_FORMAT_B8G8R8G8_422_UNORM: VkFormat;
declare const VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM: VkFormat;
declare const VK_FORMAT_G8_B8R8_2PLANE_420_UNORM: VkFormat;
declare const VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM: VkFormat;
declare const VK_FORMAT_G8_B8R8_2PLANE_422_UNORM: VkFormat;
declare const VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM: VkFormat;
declare const VK_FORMAT_R10X6_UNORM_PACK16: VkFormat;
declare const VK_FORMAT_R10X6G10X6_UNORM_2PACK16: VkFormat;
declare const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: VkFormat;
declare const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: VkFormat;
declare const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: VkFormat;
declare const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: VkFormat;
declare const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: VkFormat;
declare const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: VkFormat;
declare const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: VkFormat;
declare const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: VkFormat;
declare const VK_FORMAT_R12X4_UNORM_PACK16: VkFormat;
declare const VK_FORMAT_R12X4G12X4_UNORM_2PACK16: VkFormat;
declare const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: VkFormat;
declare const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: VkFormat;
declare const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: VkFormat;
declare const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: VkFormat;
declare const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: VkFormat;
declare const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: VkFormat;
declare const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: VkFormat;
declare const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: VkFormat;
declare const VK_FORMAT_G16B16G16R16_422_UNORM: VkFormat;
declare const VK_FORMAT_B16G16R16G16_422_UNORM: VkFormat;
declare const VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM: VkFormat;
declare const VK_FORMAT_G16_B16R16_2PLANE_420_UNORM: VkFormat;
declare const VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM: VkFormat;
declare const VK_FORMAT_G16_B16R16_2PLANE_422_UNORM: VkFormat;
declare const VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM: VkFormat;
declare const VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: VkFormat;
declare const VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: VkFormat;
declare const VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: VkFormat;
declare const VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: VkFormat;
declare const VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: VkFormat;
declare const VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: VkFormat;
declare const VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: VkFormat;
declare const VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: VkFormat;
declare const VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT: VkFormat;
declare const VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT: VkFormat;
declare const VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT: VkFormat;
declare const VK_FORMAT_G8B8G8R8_422_UNORM_KHR: VkFormat;
declare const VK_FORMAT_B8G8R8G8_422_UNORM_KHR: VkFormat;
declare const VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR: VkFormat;
declare const VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR: VkFormat;
declare const VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR: VkFormat;
declare const VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR: VkFormat;
declare const VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR: VkFormat;
declare const VK_FORMAT_R10X6_UNORM_PACK16_KHR: VkFormat;
declare const VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR: VkFormat;
declare const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR: VkFormat;
declare const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR: VkFormat;
declare const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR: VkFormat;
declare const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR: VkFormat;
declare const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR: VkFormat;
declare const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR: VkFormat;
declare const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR: VkFormat;
declare const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR: VkFormat;
declare const VK_FORMAT_R12X4_UNORM_PACK16_KHR: VkFormat;
declare const VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR: VkFormat;
declare const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR: VkFormat;
declare const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR: VkFormat;
declare const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR: VkFormat;
declare const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR: VkFormat;
declare const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR: VkFormat;
declare const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR: VkFormat;
declare const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR: VkFormat;
declare const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR: VkFormat;
declare const VK_FORMAT_G16B16G16R16_422_UNORM_KHR: VkFormat;
declare const VK_FORMAT_B16G16R16G16_422_UNORM_KHR: VkFormat;
declare const VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR: VkFormat;
declare const VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR: VkFormat;
declare const VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR: VkFormat;
declare const VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR: VkFormat;
declare const VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR: VkFormat;



/**
  * 
  * @member VK_STRUCTURE_TYPE_APPLICATION_INFO
  * @member VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_SUBMIT_INFO
  * @member VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO
  * @member VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE
  * @member VK_STRUCTURE_TYPE_BIND_SPARSE_INFO
  * @member VK_STRUCTURE_TYPE_FENCE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_EVENT_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO
  * @member VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET
  * @member VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET
  * @member VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO
  * @member VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO
  * @member VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO
  * @member VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO
  * @member VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER
  * @member VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER
  * @member VK_STRUCTURE_TYPE_MEMORY_BARRIER
  * @member VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES
  * @member VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO
  * @member VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES
  * @member VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS
  * @member VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO
  * @member VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO
  * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO
  * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO
  * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO
  * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO
  * @member VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO
  * @member VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES
  * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2
  * @member VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2
  * @member VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2
  * @member VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2
  * @member VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2
  * @member VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2
  * @member VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2
  * @member VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2
  * @member VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES
  * @member VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES
  * @member VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES
  * @member VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2
  * @member VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO
  * @member VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO
  * @member VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES
  * @member VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES
  * @member VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO
  * @member VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO
  * @member VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES
  * @member VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO
  * @member VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES
  * @member VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO
  * @member VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES
  * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES
  * @member VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2
  * @member VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2
  * @member VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2
  * @member VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2
  * @member VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2
  * @member VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO
  * @member VK_STRUCTURE_TYPE_SUBPASS_END_INFO
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES
  * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES
  * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO
  * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES
  * @member VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES
  * @member VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES
  * @member VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES
  * @member VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO
  * @member VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES
  * @member VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT
  * @member VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES
  * @member VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO
  * @member VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO
  * @member VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES
  * @member VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO
  * @member VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO
  * @member VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO
  * @member VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO
  * @member VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PRESENT_INFO_KHR
  * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR
  * @member VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR
  * @member VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR
  * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR
  * @member VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID
  * @member VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID
  * @member VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD
  * @member VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT
  * @member VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT
  * @member VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT
  * @member VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX
  * @member VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX
  * @member VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD
  * @member VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV
  * @member VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV
  * @member VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV
  * @member VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV
  * @member VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT
  * @member VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR
  * @member VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR
  * @member VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR
  * @member VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR
  * @member VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR
  * @member VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT
  * @member VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT
  * @member VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT
  * @member VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT
  * @member VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT
  * @member VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX
  * @member VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_HDR_METADATA_EXT
  * @member VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR
  * @member VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR
  * @member VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR
  * @member VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR
  * @member VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR
  * @member VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR
  * @member VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR
  * @member VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR
  * @member VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR
  * @member VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR
  * @member VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR
  * @member VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR
  * @member VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK
  * @member VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK
  * @member VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT
  * @member VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT
  * @member VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT
  * @member VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT
  * @member VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID
  * @member VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID
  * @member VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID
  * @member VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID
  * @member VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID
  * @member VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT
  * @member VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT
  * @member VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR
  * @member VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR
  * @member VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR
  * @member VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR
  * @member VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR
  * @member VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR
  * @member VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR
  * @member VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR
  * @member VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR
  * @member VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV
  * @member VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT
  * @member VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV
  * @member VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_GEOMETRY_NV
  * @member VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV
  * @member VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV
  * @member VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV
  * @member VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV
  * @member VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV
  * @member VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV
  * @member VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT
  * @member VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT
  * @member VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD
  * @member VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD
  * @member VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP
  * @member VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV
  * @member VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV
  * @member VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV
  * @member VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL
  * @member VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL
  * @member VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL
  * @member VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL
  * @member VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL
  * @member VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL
  * @member VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL
  * @member VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD
  * @member VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD
  * @member VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV
  * @member VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV
  * @member VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT
  * @member VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT
  * @member VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR
  * @member VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV
  * @member VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV
  * @member VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV
  * @member VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM
  * @member VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV
  * @member VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_RESERVED_QCOM
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV
  * @member VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR
  * @member VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR
  * @member VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR
  * @member VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR
  * @member VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR
  * @member VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR
  * @member VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR
  * @member VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR
  * @member VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR
  * @member VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR
  * @member VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR
  * @member VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR
  * @member VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR
  * @member VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR
  * @member VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR
  * @member VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR
  * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR
  * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR
  * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR
  * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR
  * @member VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR
  * @member VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR
  * @member VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR
  * @member VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR
  * @member VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR
  * @member VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR
  * @member VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR
  * @member VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR
  * @member VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR
  * @member VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR
  * @member VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR
  * @member VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR
  * @member VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR
  * @member VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR
  * @member VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR
  * @member VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR
  * @member VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR
  * @member VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR
  * @member VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR
  * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT
  * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR
  * @member VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR
  * @member VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR
  * @member VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR
  * @member VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR
  * @member VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT
  * @member VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR
  * @member VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR
  * @member VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR
  * @member VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR
  * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT
  */
export enum VkStructureType {
  VK_STRUCTURE_TYPE_APPLICATION_INFO,
  VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
  VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
  VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,
  VK_STRUCTURE_TYPE_SUBMIT_INFO,
  VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
  VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE,
  VK_STRUCTURE_TYPE_BIND_SPARSE_INFO,
  VK_STRUCTURE_TYPE_FENCE_CREATE_INFO,
  VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO,
  VK_STRUCTURE_TYPE_EVENT_CREATE_INFO,
  VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO,
  VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
  VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO,
  VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
  VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
  VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
  VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
  VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
  VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET,
  VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
  VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO,
  VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
  VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
  VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER,
  VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,
  VK_STRUCTURE_TYPE_MEMORY_BARRIER,
  VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO,
  VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES,
  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
  VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
  VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
  VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
  VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
  VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
  VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
  VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
  VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
  VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
  VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
  VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES,
  VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES,
  VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
  VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
  VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
  VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
  VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
  VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
  VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
  VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
  VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
  VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES,
  VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
  VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
  VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
  VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
  VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
  VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
  VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
  VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
  VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
  VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
  VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
  VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
  VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
  VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
  VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
  VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
  VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
  VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
  VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
  VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
  VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
  VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
  VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
  VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
  VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PRESENT_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR,
  VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR,
  VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR,
  VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID,
  VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID,
  VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD,
  VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT,
  VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT,
  VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT,
  VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX,
  VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD,
  VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV,
  VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV,
  VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT,
  VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR,
  VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT,
  VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT,
  VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT,
  VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT,
  VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT,
  VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT,
  VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_HDR_METADATA_EXT,
  VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR,
  VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR,
  VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR,
  VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR,
  VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR,
  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR,
  VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR,
  VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK,
  VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID,
  VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID,
  VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID,
  VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
  VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
  VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT,
  VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT,
  VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR,
  VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR,
  VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR,
  VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT,
  VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_GEOMETRY_NV,
  VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV,
  VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV,
  VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV,
  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV,
  VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT,
  VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT,
  VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD,
  VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD,
  VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP,
  VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV,
  VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV,
  VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL,
  VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
  VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL,
  VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL,
  VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL,
  VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL,
  VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL,
  VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD,
  VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD,
  VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR,
  VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT,
  VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR,
  VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT,
  VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT,
  VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT,
  VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV,
  VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV,
  VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT,
  VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT,
  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT,
  VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT,
  VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR,
  VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR,
  VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR,
  VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV,
  VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV,
  VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM,
  VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT,
  VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT,
  VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV,
  VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_RESERVED_QCOM,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV,
  VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT,
  VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR,
  VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR,
  VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR,
  VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR,
  VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR,
  VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR,
  VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR,
  VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR,
  VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR,
  VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR,
  VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT,
  VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR,
  VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR,
  VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR,
  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR,
  VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR,
  VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR,
  VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR,
  VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR,
  VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR,
  VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR,
  VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR,
  VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR,
  VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR,
  VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR,
  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR,
  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR,
  VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR,
  VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR,
  VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR,
  VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR,
  VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR,
  VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR,
  VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR,
  VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR,
  VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR,
  VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR,
  VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR,
  VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT,
  VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR,
  VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR,
  VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT,
  
}

declare const VK_STRUCTURE_TYPE_APPLICATION_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_SUBMIT_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE: VkStructureType;
declare const VK_STRUCTURE_TYPE_BIND_SPARSE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_FENCE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_EVENT_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET: VkStructureType;
declare const VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET: VkStructureType;
declare const VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_BARRIER: VkStructureType;
declare const VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2: VkStructureType;
declare const VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_SUBPASS_END_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT: VkStructureType;
declare const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES: VkStructureType;
declare const VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES: VkStructureType;
declare const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO: VkStructureType;
declare const VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PRESENT_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID: VkStructureType;
declare const VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX: VkStructureType;
declare const VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD: VkStructureType;
declare const VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_HDR_METADATA_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK: VkStructureType;
declare const VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID: VkStructureType;
declare const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID: VkStructureType;
declare const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_GEOMETRY_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD: VkStructureType;
declare const VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL: VkStructureType;
declare const VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL: VkStructureType;
declare const VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL: VkStructureType;
declare const VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL: VkStructureType;
declare const VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL: VkStructureType;
declare const VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL: VkStructureType;
declare const VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL: VkStructureType;
declare const VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD: VkStructureType;
declare const VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM: VkStructureType;
declare const VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_RESERVED_QCOM: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR: VkStructureType;
declare const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT: VkStructureType;



/**
  * 
  * @member VK_SUBPASS_CONTENTS_INLINE
  * @member VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS
  */
export enum VkSubpassContents {
  VK_SUBPASS_CONTENTS_INLINE,
  VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS,
  
}

declare const VK_SUBPASS_CONTENTS_INLINE: VkSubpassContents;
declare const VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS: VkSubpassContents;



/**
  * 
  * @member VK_SUCCESS
  * @member VK_NOT_READY
  * @member VK_TIMEOUT
  * @member VK_EVENT_SET
  * @member VK_EVENT_RESET
  * @member VK_INCOMPLETE
  * @member VK_ERROR_OUT_OF_HOST_MEMORY
  * @member VK_ERROR_OUT_OF_DEVICE_MEMORY
  * @member VK_ERROR_INITIALIZATION_FAILED
  * @member VK_ERROR_DEVICE_LOST
  * @member VK_ERROR_MEMORY_MAP_FAILED
  * @member VK_ERROR_LAYER_NOT_PRESENT
  * @member VK_ERROR_EXTENSION_NOT_PRESENT
  * @member VK_ERROR_FEATURE_NOT_PRESENT
  * @member VK_ERROR_INCOMPATIBLE_DRIVER
  * @member VK_ERROR_TOO_MANY_OBJECTS
  * @member VK_ERROR_FORMAT_NOT_SUPPORTED
  * @member VK_ERROR_FRAGMENTED_POOL
  * @member VK_ERROR_UNKNOWN
  * @member VK_ERROR_OUT_OF_POOL_MEMORY
  * @member VK_ERROR_INVALID_EXTERNAL_HANDLE
  * @member VK_ERROR_FRAGMENTATION
  * @member VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS
  * @member VK_ERROR_SURFACE_LOST_KHR
  * @member VK_ERROR_NATIVE_WINDOW_IN_USE_KHR
  * @member VK_SUBOPTIMAL_KHR
  * @member VK_ERROR_OUT_OF_DATE_KHR
  * @member VK_ERROR_INCOMPATIBLE_DISPLAY_KHR
  * @member VK_ERROR_VALIDATION_FAILED_EXT
  * @member VK_ERROR_INVALID_SHADER_NV
  * @member VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT
  * @member VK_ERROR_NOT_PERMITTED_EXT
  * @member VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT
  * @member VK_THREAD_IDLE_KHR
  * @member VK_THREAD_DONE_KHR
  * @member VK_OPERATION_DEFERRED_KHR
  * @member VK_OPERATION_NOT_DEFERRED_KHR
  * @member VK_PIPELINE_COMPILE_REQUIRED_EXT
  * @member VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT
  * @member VK_ERROR_OUT_OF_POOL_MEMORY_KHR
  * @member VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR
  * @member VK_ERROR_FRAGMENTATION_EXT
  * @member VK_ERROR_INVALID_DEVICE_ADDRESS_EXT
  * @member VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR
  */
export enum VkResult {
  VK_SUCCESS,
  VK_NOT_READY,
  VK_TIMEOUT,
  VK_EVENT_SET,
  VK_EVENT_RESET,
  VK_INCOMPLETE,
  VK_ERROR_OUT_OF_HOST_MEMORY,
  VK_ERROR_OUT_OF_DEVICE_MEMORY,
  VK_ERROR_INITIALIZATION_FAILED,
  VK_ERROR_DEVICE_LOST,
  VK_ERROR_MEMORY_MAP_FAILED,
  VK_ERROR_LAYER_NOT_PRESENT,
  VK_ERROR_EXTENSION_NOT_PRESENT,
  VK_ERROR_FEATURE_NOT_PRESENT,
  VK_ERROR_INCOMPATIBLE_DRIVER,
  VK_ERROR_TOO_MANY_OBJECTS,
  VK_ERROR_FORMAT_NOT_SUPPORTED,
  VK_ERROR_FRAGMENTED_POOL,
  VK_ERROR_UNKNOWN,
  VK_ERROR_OUT_OF_POOL_MEMORY,
  VK_ERROR_INVALID_EXTERNAL_HANDLE,
  VK_ERROR_FRAGMENTATION,
  VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
  VK_ERROR_SURFACE_LOST_KHR,
  VK_ERROR_NATIVE_WINDOW_IN_USE_KHR,
  VK_SUBOPTIMAL_KHR,
  VK_ERROR_OUT_OF_DATE_KHR,
  VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,
  VK_ERROR_VALIDATION_FAILED_EXT,
  VK_ERROR_INVALID_SHADER_NV,
  VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT,
  VK_ERROR_NOT_PERMITTED_EXT,
  VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT,
  VK_THREAD_IDLE_KHR,
  VK_THREAD_DONE_KHR,
  VK_OPERATION_DEFERRED_KHR,
  VK_OPERATION_NOT_DEFERRED_KHR,
  VK_PIPELINE_COMPILE_REQUIRED_EXT,
  VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT,
  VK_ERROR_OUT_OF_POOL_MEMORY_KHR,
  VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR,
  VK_ERROR_FRAGMENTATION_EXT,
  VK_ERROR_INVALID_DEVICE_ADDRESS_EXT,
  VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR,
  
}

declare const VK_SUCCESS: VkResult;
declare const VK_NOT_READY: VkResult;
declare const VK_TIMEOUT: VkResult;
declare const VK_EVENT_SET: VkResult;
declare const VK_EVENT_RESET: VkResult;
declare const VK_INCOMPLETE: VkResult;
declare const VK_ERROR_OUT_OF_HOST_MEMORY: VkResult;
declare const VK_ERROR_OUT_OF_DEVICE_MEMORY: VkResult;
declare const VK_ERROR_INITIALIZATION_FAILED: VkResult;
declare const VK_ERROR_DEVICE_LOST: VkResult;
declare const VK_ERROR_MEMORY_MAP_FAILED: VkResult;
declare const VK_ERROR_LAYER_NOT_PRESENT: VkResult;
declare const VK_ERROR_EXTENSION_NOT_PRESENT: VkResult;
declare const VK_ERROR_FEATURE_NOT_PRESENT: VkResult;
declare const VK_ERROR_INCOMPATIBLE_DRIVER: VkResult;
declare const VK_ERROR_TOO_MANY_OBJECTS: VkResult;
declare const VK_ERROR_FORMAT_NOT_SUPPORTED: VkResult;
declare const VK_ERROR_FRAGMENTED_POOL: VkResult;
declare const VK_ERROR_UNKNOWN: VkResult;
declare const VK_ERROR_OUT_OF_POOL_MEMORY: VkResult;
declare const VK_ERROR_INVALID_EXTERNAL_HANDLE: VkResult;
declare const VK_ERROR_FRAGMENTATION: VkResult;
declare const VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS: VkResult;
declare const VK_ERROR_SURFACE_LOST_KHR: VkResult;
declare const VK_ERROR_NATIVE_WINDOW_IN_USE_KHR: VkResult;
declare const VK_SUBOPTIMAL_KHR: VkResult;
declare const VK_ERROR_OUT_OF_DATE_KHR: VkResult;
declare const VK_ERROR_INCOMPATIBLE_DISPLAY_KHR: VkResult;
declare const VK_ERROR_VALIDATION_FAILED_EXT: VkResult;
declare const VK_ERROR_INVALID_SHADER_NV: VkResult;
declare const VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT: VkResult;
declare const VK_ERROR_NOT_PERMITTED_EXT: VkResult;
declare const VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT: VkResult;
declare const VK_THREAD_IDLE_KHR: VkResult;
declare const VK_THREAD_DONE_KHR: VkResult;
declare const VK_OPERATION_DEFERRED_KHR: VkResult;
declare const VK_OPERATION_NOT_DEFERRED_KHR: VkResult;
declare const VK_PIPELINE_COMPILE_REQUIRED_EXT: VkResult;
declare const VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT: VkResult;
declare const VK_ERROR_OUT_OF_POOL_MEMORY_KHR: VkResult;
declare const VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR: VkResult;
declare const VK_ERROR_FRAGMENTATION_EXT: VkResult;
declare const VK_ERROR_INVALID_DEVICE_ADDRESS_EXT: VkResult;
declare const VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: VkResult;



/**
  * 
  * @member VK_DYNAMIC_STATE_VIEWPORT
  * @member VK_DYNAMIC_STATE_SCISSOR
  * @member VK_DYNAMIC_STATE_LINE_WIDTH
  * @member VK_DYNAMIC_STATE_DEPTH_BIAS
  * @member VK_DYNAMIC_STATE_BLEND_CONSTANTS
  * @member VK_DYNAMIC_STATE_DEPTH_BOUNDS
  * @member VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK
  * @member VK_DYNAMIC_STATE_STENCIL_WRITE_MASK
  * @member VK_DYNAMIC_STATE_STENCIL_REFERENCE
  * @member VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV
  * @member VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT
  * @member VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT
  * @member VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR
  * @member VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV
  * @member VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV
  * @member VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV
  * @member VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR
  * @member VK_DYNAMIC_STATE_LINE_STIPPLE_EXT
  * @member VK_DYNAMIC_STATE_CULL_MODE_EXT
  * @member VK_DYNAMIC_STATE_FRONT_FACE_EXT
  * @member VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT
  * @member VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT
  * @member VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT
  * @member VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT
  * @member VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT
  * @member VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT
  * @member VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT
  * @member VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT
  * @member VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT
  * @member VK_DYNAMIC_STATE_STENCIL_OP_EXT
  */
export enum VkDynamicState {
  VK_DYNAMIC_STATE_VIEWPORT,
  VK_DYNAMIC_STATE_SCISSOR,
  VK_DYNAMIC_STATE_LINE_WIDTH,
  VK_DYNAMIC_STATE_DEPTH_BIAS,
  VK_DYNAMIC_STATE_BLEND_CONSTANTS,
  VK_DYNAMIC_STATE_DEPTH_BOUNDS,
  VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK,
  VK_DYNAMIC_STATE_STENCIL_WRITE_MASK,
  VK_DYNAMIC_STATE_STENCIL_REFERENCE,
  VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV,
  VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT,
  VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT,
  VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR,
  VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV,
  VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV,
  VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV,
  VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR,
  VK_DYNAMIC_STATE_LINE_STIPPLE_EXT,
  VK_DYNAMIC_STATE_CULL_MODE_EXT,
  VK_DYNAMIC_STATE_FRONT_FACE_EXT,
  VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT,
  VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT,
  VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT,
  VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT,
  VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT,
  VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT,
  VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT,
  VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT,
  VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT,
  VK_DYNAMIC_STATE_STENCIL_OP_EXT,
  
}

declare const VK_DYNAMIC_STATE_VIEWPORT: VkDynamicState;
declare const VK_DYNAMIC_STATE_SCISSOR: VkDynamicState;
declare const VK_DYNAMIC_STATE_LINE_WIDTH: VkDynamicState;
declare const VK_DYNAMIC_STATE_DEPTH_BIAS: VkDynamicState;
declare const VK_DYNAMIC_STATE_BLEND_CONSTANTS: VkDynamicState;
declare const VK_DYNAMIC_STATE_DEPTH_BOUNDS: VkDynamicState;
declare const VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK: VkDynamicState;
declare const VK_DYNAMIC_STATE_STENCIL_WRITE_MASK: VkDynamicState;
declare const VK_DYNAMIC_STATE_STENCIL_REFERENCE: VkDynamicState;
declare const VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV: VkDynamicState;
declare const VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT: VkDynamicState;
declare const VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT: VkDynamicState;
declare const VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR: VkDynamicState;
declare const VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV: VkDynamicState;
declare const VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV: VkDynamicState;
declare const VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV: VkDynamicState;
declare const VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR: VkDynamicState;
declare const VK_DYNAMIC_STATE_LINE_STIPPLE_EXT: VkDynamicState;
declare const VK_DYNAMIC_STATE_CULL_MODE_EXT: VkDynamicState;
declare const VK_DYNAMIC_STATE_FRONT_FACE_EXT: VkDynamicState;
declare const VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT: VkDynamicState;
declare const VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT: VkDynamicState;
declare const VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT: VkDynamicState;
declare const VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT: VkDynamicState;
declare const VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT: VkDynamicState;
declare const VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT: VkDynamicState;
declare const VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT: VkDynamicState;
declare const VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT: VkDynamicState;
declare const VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT: VkDynamicState;
declare const VK_DYNAMIC_STATE_STENCIL_OP_EXT: VkDynamicState;



/**
  * 
  * @member VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET
  * @member VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR
  * @member VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR
  */
export enum VkDescriptorUpdateTemplateType {
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR,
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR,
  
}

declare const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET: VkDescriptorUpdateTemplateType;
declare const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR: VkDescriptorUpdateTemplateType;
declare const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR: VkDescriptorUpdateTemplateType;



/**
  * 
  * @member VK_OBJECT_TYPE_UNKNOWN
  * @member VK_OBJECT_TYPE_INSTANCE
  * @member VK_OBJECT_TYPE_PHYSICAL_DEVICE
  * @member VK_OBJECT_TYPE_DEVICE
  * @member VK_OBJECT_TYPE_QUEUE
  * @member VK_OBJECT_TYPE_SEMAPHORE
  * @member VK_OBJECT_TYPE_COMMAND_BUFFER
  * @member VK_OBJECT_TYPE_FENCE
  * @member VK_OBJECT_TYPE_DEVICE_MEMORY
  * @member VK_OBJECT_TYPE_BUFFER
  * @member VK_OBJECT_TYPE_IMAGE
  * @member VK_OBJECT_TYPE_EVENT
  * @member VK_OBJECT_TYPE_QUERY_POOL
  * @member VK_OBJECT_TYPE_BUFFER_VIEW
  * @member VK_OBJECT_TYPE_IMAGE_VIEW
  * @member VK_OBJECT_TYPE_SHADER_MODULE
  * @member VK_OBJECT_TYPE_PIPELINE_CACHE
  * @member VK_OBJECT_TYPE_PIPELINE_LAYOUT
  * @member VK_OBJECT_TYPE_RENDER_PASS
  * @member VK_OBJECT_TYPE_PIPELINE
  * @member VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT
  * @member VK_OBJECT_TYPE_SAMPLER
  * @member VK_OBJECT_TYPE_DESCRIPTOR_POOL
  * @member VK_OBJECT_TYPE_DESCRIPTOR_SET
  * @member VK_OBJECT_TYPE_FRAMEBUFFER
  * @member VK_OBJECT_TYPE_COMMAND_POOL
  * @member VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION
  * @member VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE
  * @member VK_OBJECT_TYPE_SURFACE_KHR
  * @member VK_OBJECT_TYPE_SWAPCHAIN_KHR
  * @member VK_OBJECT_TYPE_DISPLAY_KHR
  * @member VK_OBJECT_TYPE_DISPLAY_MODE_KHR
  * @member VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT
  * @member VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT
  * @member VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR
  * @member VK_OBJECT_TYPE_VALIDATION_CACHE_EXT
  * @member VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV
  * @member VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL
  * @member VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR
  * @member VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV
  * @member VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT
  * @member VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR
  * @member VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR
  */
export enum VkObjectType {
  VK_OBJECT_TYPE_UNKNOWN,
  VK_OBJECT_TYPE_INSTANCE,
  VK_OBJECT_TYPE_PHYSICAL_DEVICE,
  VK_OBJECT_TYPE_DEVICE,
  VK_OBJECT_TYPE_QUEUE,
  VK_OBJECT_TYPE_SEMAPHORE,
  VK_OBJECT_TYPE_COMMAND_BUFFER,
  VK_OBJECT_TYPE_FENCE,
  VK_OBJECT_TYPE_DEVICE_MEMORY,
  VK_OBJECT_TYPE_BUFFER,
  VK_OBJECT_TYPE_IMAGE,
  VK_OBJECT_TYPE_EVENT,
  VK_OBJECT_TYPE_QUERY_POOL,
  VK_OBJECT_TYPE_BUFFER_VIEW,
  VK_OBJECT_TYPE_IMAGE_VIEW,
  VK_OBJECT_TYPE_SHADER_MODULE,
  VK_OBJECT_TYPE_PIPELINE_CACHE,
  VK_OBJECT_TYPE_PIPELINE_LAYOUT,
  VK_OBJECT_TYPE_RENDER_PASS,
  VK_OBJECT_TYPE_PIPELINE,
  VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT,
  VK_OBJECT_TYPE_SAMPLER,
  VK_OBJECT_TYPE_DESCRIPTOR_POOL,
  VK_OBJECT_TYPE_DESCRIPTOR_SET,
  VK_OBJECT_TYPE_FRAMEBUFFER,
  VK_OBJECT_TYPE_COMMAND_POOL,
  VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
  VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
  VK_OBJECT_TYPE_SURFACE_KHR,
  VK_OBJECT_TYPE_SWAPCHAIN_KHR,
  VK_OBJECT_TYPE_DISPLAY_KHR,
  VK_OBJECT_TYPE_DISPLAY_MODE_KHR,
  VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT,
  VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT,
  VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR,
  VK_OBJECT_TYPE_VALIDATION_CACHE_EXT,
  VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV,
  VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL,
  VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR,
  VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV,
  VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT,
  VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR,
  VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR,
  
}

declare const VK_OBJECT_TYPE_UNKNOWN: VkObjectType;
declare const VK_OBJECT_TYPE_INSTANCE: VkObjectType;
declare const VK_OBJECT_TYPE_PHYSICAL_DEVICE: VkObjectType;
declare const VK_OBJECT_TYPE_DEVICE: VkObjectType;
declare const VK_OBJECT_TYPE_QUEUE: VkObjectType;
declare const VK_OBJECT_TYPE_SEMAPHORE: VkObjectType;
declare const VK_OBJECT_TYPE_COMMAND_BUFFER: VkObjectType;
declare const VK_OBJECT_TYPE_FENCE: VkObjectType;
declare const VK_OBJECT_TYPE_DEVICE_MEMORY: VkObjectType;
declare const VK_OBJECT_TYPE_BUFFER: VkObjectType;
declare const VK_OBJECT_TYPE_IMAGE: VkObjectType;
declare const VK_OBJECT_TYPE_EVENT: VkObjectType;
declare const VK_OBJECT_TYPE_QUERY_POOL: VkObjectType;
declare const VK_OBJECT_TYPE_BUFFER_VIEW: VkObjectType;
declare const VK_OBJECT_TYPE_IMAGE_VIEW: VkObjectType;
declare const VK_OBJECT_TYPE_SHADER_MODULE: VkObjectType;
declare const VK_OBJECT_TYPE_PIPELINE_CACHE: VkObjectType;
declare const VK_OBJECT_TYPE_PIPELINE_LAYOUT: VkObjectType;
declare const VK_OBJECT_TYPE_RENDER_PASS: VkObjectType;
declare const VK_OBJECT_TYPE_PIPELINE: VkObjectType;
declare const VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT: VkObjectType;
declare const VK_OBJECT_TYPE_SAMPLER: VkObjectType;
declare const VK_OBJECT_TYPE_DESCRIPTOR_POOL: VkObjectType;
declare const VK_OBJECT_TYPE_DESCRIPTOR_SET: VkObjectType;
declare const VK_OBJECT_TYPE_FRAMEBUFFER: VkObjectType;
declare const VK_OBJECT_TYPE_COMMAND_POOL: VkObjectType;
declare const VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION: VkObjectType;
declare const VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE: VkObjectType;
declare const VK_OBJECT_TYPE_SURFACE_KHR: VkObjectType;
declare const VK_OBJECT_TYPE_SWAPCHAIN_KHR: VkObjectType;
declare const VK_OBJECT_TYPE_DISPLAY_KHR: VkObjectType;
declare const VK_OBJECT_TYPE_DISPLAY_MODE_KHR: VkObjectType;
declare const VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT: VkObjectType;
declare const VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: VkObjectType;
declare const VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR: VkObjectType;
declare const VK_OBJECT_TYPE_VALIDATION_CACHE_EXT: VkObjectType;
declare const VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV: VkObjectType;
declare const VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL: VkObjectType;
declare const VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR: VkObjectType;
declare const VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV: VkObjectType;
declare const VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT: VkObjectType;
declare const VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR: VkObjectType;
declare const VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR: VkObjectType;



/**
  * 
  * @member VK_SEMAPHORE_TYPE_BINARY
  * @member VK_SEMAPHORE_TYPE_TIMELINE
  * @member VK_SEMAPHORE_TYPE_BINARY_KHR
  * @member VK_SEMAPHORE_TYPE_TIMELINE_KHR
  */
export enum VkSemaphoreType {
  VK_SEMAPHORE_TYPE_BINARY,
  VK_SEMAPHORE_TYPE_TIMELINE,
  VK_SEMAPHORE_TYPE_BINARY_KHR,
  VK_SEMAPHORE_TYPE_TIMELINE_KHR,
  
}

declare const VK_SEMAPHORE_TYPE_BINARY: VkSemaphoreType;
declare const VK_SEMAPHORE_TYPE_TIMELINE: VkSemaphoreType;
declare const VK_SEMAPHORE_TYPE_BINARY_KHR: VkSemaphoreType;
declare const VK_SEMAPHORE_TYPE_TIMELINE_KHR: VkSemaphoreType;



/**
  * 
  * @member VK_PRESENT_MODE_IMMEDIATE_KHR
  * @member VK_PRESENT_MODE_MAILBOX_KHR
  * @member VK_PRESENT_MODE_FIFO_KHR
  * @member VK_PRESENT_MODE_FIFO_RELAXED_KHR
  * @member VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR
  * @member VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR
  */
export enum VkPresentModeKHR {
  VK_PRESENT_MODE_IMMEDIATE_KHR,
  VK_PRESENT_MODE_MAILBOX_KHR,
  VK_PRESENT_MODE_FIFO_KHR,
  VK_PRESENT_MODE_FIFO_RELAXED_KHR,
  VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR,
  VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR,
  
}

declare const VK_PRESENT_MODE_IMMEDIATE_KHR: VkPresentModeKHR;
declare const VK_PRESENT_MODE_MAILBOX_KHR: VkPresentModeKHR;
declare const VK_PRESENT_MODE_FIFO_KHR: VkPresentModeKHR;
declare const VK_PRESENT_MODE_FIFO_RELAXED_KHR: VkPresentModeKHR;
declare const VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR: VkPresentModeKHR;
declare const VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR: VkPresentModeKHR;



/**
  * 
  * @member VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
  * @member VK_COLORSPACE_SRGB_NONLINEAR_KHR
  * @member VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT
  * @member VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT
  * @member VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT
  * @member VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT
  * @member VK_COLOR_SPACE_BT709_LINEAR_EXT
  * @member VK_COLOR_SPACE_BT709_NONLINEAR_EXT
  * @member VK_COLOR_SPACE_BT2020_LINEAR_EXT
  * @member VK_COLOR_SPACE_HDR10_ST2084_EXT
  * @member VK_COLOR_SPACE_DOLBYVISION_EXT
  * @member VK_COLOR_SPACE_HDR10_HLG_EXT
  * @member VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT
  * @member VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT
  * @member VK_COLOR_SPACE_PASS_THROUGH_EXT
  * @member VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT
  * @member VK_COLOR_SPACE_DCI_P3_LINEAR_EXT
  * @member VK_COLOR_SPACE_DISPLAY_NATIVE_AMD
  */
export enum VkColorSpaceKHR {
  VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
  VK_COLORSPACE_SRGB_NONLINEAR_KHR,
  VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT,
  VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT,
  VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,
  VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT,
  VK_COLOR_SPACE_BT709_LINEAR_EXT,
  VK_COLOR_SPACE_BT709_NONLINEAR_EXT,
  VK_COLOR_SPACE_BT2020_LINEAR_EXT,
  VK_COLOR_SPACE_HDR10_ST2084_EXT,
  VK_COLOR_SPACE_DOLBYVISION_EXT,
  VK_COLOR_SPACE_HDR10_HLG_EXT,
  VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT,
  VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT,
  VK_COLOR_SPACE_PASS_THROUGH_EXT,
  VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT,
  VK_COLOR_SPACE_DCI_P3_LINEAR_EXT,
  VK_COLOR_SPACE_DISPLAY_NATIVE_AMD,
  
}

declare const VK_COLOR_SPACE_SRGB_NONLINEAR_KHR: VkColorSpaceKHR;
declare const VK_COLORSPACE_SRGB_NONLINEAR_KHR: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_BT709_LINEAR_EXT: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_BT709_NONLINEAR_EXT: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_BT2020_LINEAR_EXT: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_HDR10_ST2084_EXT: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_DOLBYVISION_EXT: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_HDR10_HLG_EXT: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_PASS_THROUGH_EXT: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_DCI_P3_LINEAR_EXT: VkColorSpaceKHR;
declare const VK_COLOR_SPACE_DISPLAY_NATIVE_AMD: VkColorSpaceKHR;



/**
  * 
  * @member VK_TIME_DOMAIN_DEVICE_EXT
  * @member VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT
  * @member VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT
  * @member VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT
  */
export enum VkTimeDomainEXT {
  VK_TIME_DOMAIN_DEVICE_EXT,
  VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT,
  VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT,
  VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT,
  
}

declare const VK_TIME_DOMAIN_DEVICE_EXT: VkTimeDomainEXT;
declare const VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT: VkTimeDomainEXT;
declare const VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT: VkTimeDomainEXT;
declare const VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT: VkTimeDomainEXT;



/**
  * 
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT
  * @member VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT
  */
export enum VkDebugReportObjectTypeEXT {
  VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT,
  
}

declare const VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT: VkDebugReportObjectTypeEXT;
declare const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT: VkDebugReportObjectTypeEXT;



/**
  * 
  * @member VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT
  * @member VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT
  * @member VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT
  * @member VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT
  * @member VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT
  */
export enum VkDeviceMemoryReportEventTypeEXT {
  VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT,
  VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT,
  VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT,
  VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT,
  VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT,
  
}

declare const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT: VkDeviceMemoryReportEventTypeEXT;
declare const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT: VkDeviceMemoryReportEventTypeEXT;
declare const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT: VkDeviceMemoryReportEventTypeEXT;
declare const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT: VkDeviceMemoryReportEventTypeEXT;
declare const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT: VkDeviceMemoryReportEventTypeEXT;



/**
  * 
  * @member VK_RASTERIZATION_ORDER_STRICT_AMD
  * @member VK_RASTERIZATION_ORDER_RELAXED_AMD
  */
export enum VkRasterizationOrderAMD {
  VK_RASTERIZATION_ORDER_STRICT_AMD,
  VK_RASTERIZATION_ORDER_RELAXED_AMD,
  
}

declare const VK_RASTERIZATION_ORDER_STRICT_AMD: VkRasterizationOrderAMD;
declare const VK_RASTERIZATION_ORDER_RELAXED_AMD: VkRasterizationOrderAMD;



/**
  * 
  * @member VK_VALIDATION_CHECK_ALL_EXT
  * @member VK_VALIDATION_CHECK_SHADERS_EXT
  */
export enum VkValidationCheckEXT {
  VK_VALIDATION_CHECK_ALL_EXT,
  VK_VALIDATION_CHECK_SHADERS_EXT,
  
}

declare const VK_VALIDATION_CHECK_ALL_EXT: VkValidationCheckEXT;
declare const VK_VALIDATION_CHECK_SHADERS_EXT: VkValidationCheckEXT;



/**
  * 
  * @member VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT
  * @member VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT
  * @member VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT
  * @member VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT
  * @member VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT
  */
export enum VkValidationFeatureEnableEXT {
  VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT,
  VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT,
  VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT,
  VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT,
  VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT,
  
}

declare const VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT: VkValidationFeatureEnableEXT;
declare const VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT: VkValidationFeatureEnableEXT;
declare const VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT: VkValidationFeatureEnableEXT;
declare const VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT: VkValidationFeatureEnableEXT;
declare const VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT: VkValidationFeatureEnableEXT;



/**
  * 
  * @member VK_VALIDATION_FEATURE_DISABLE_ALL_EXT
  * @member VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT
  * @member VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT
  * @member VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT
  * @member VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT
  * @member VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT
  * @member VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT
  */
export enum VkValidationFeatureDisableEXT {
  VK_VALIDATION_FEATURE_DISABLE_ALL_EXT,
  VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT,
  VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT,
  VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT,
  VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT,
  VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT,
  VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT,
  
}

declare const VK_VALIDATION_FEATURE_DISABLE_ALL_EXT: VkValidationFeatureDisableEXT;
declare const VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT: VkValidationFeatureDisableEXT;
declare const VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT: VkValidationFeatureDisableEXT;
declare const VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT: VkValidationFeatureDisableEXT;
declare const VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT: VkValidationFeatureDisableEXT;
declare const VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT: VkValidationFeatureDisableEXT;
declare const VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT: VkValidationFeatureDisableEXT;



/**
  * 
  * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV
  * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV
  * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV
  * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV
  * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV
  * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV
  * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV
  * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV
  */
export enum VkIndirectCommandsTokenTypeNV {
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV,
  
}

declare const VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV: VkIndirectCommandsTokenTypeNV;
declare const VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV: VkIndirectCommandsTokenTypeNV;
declare const VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV: VkIndirectCommandsTokenTypeNV;
declare const VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV: VkIndirectCommandsTokenTypeNV;
declare const VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV: VkIndirectCommandsTokenTypeNV;
declare const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV: VkIndirectCommandsTokenTypeNV;
declare const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV: VkIndirectCommandsTokenTypeNV;
declare const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV: VkIndirectCommandsTokenTypeNV;



/**
  * 
  * @member VK_DISPLAY_POWER_STATE_OFF_EXT
  * @member VK_DISPLAY_POWER_STATE_SUSPEND_EXT
  * @member VK_DISPLAY_POWER_STATE_ON_EXT
  */
export enum VkDisplayPowerStateEXT {
  VK_DISPLAY_POWER_STATE_OFF_EXT,
  VK_DISPLAY_POWER_STATE_SUSPEND_EXT,
  VK_DISPLAY_POWER_STATE_ON_EXT,
  
}

declare const VK_DISPLAY_POWER_STATE_OFF_EXT: VkDisplayPowerStateEXT;
declare const VK_DISPLAY_POWER_STATE_SUSPEND_EXT: VkDisplayPowerStateEXT;
declare const VK_DISPLAY_POWER_STATE_ON_EXT: VkDisplayPowerStateEXT;



/**
  * 
  * @member VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT
  */
export enum VkDeviceEventTypeEXT {
  VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT,
  
}

declare const VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT: VkDeviceEventTypeEXT;



/**
  * 
  * @member VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT
  */
export enum VkDisplayEventTypeEXT {
  VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT,
  
}

declare const VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT: VkDisplayEventTypeEXT;



/**
  * 
  * @member VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV
  * @member VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV
  * @member VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV
  * @member VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV
  * @member VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV
  * @member VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV
  * @member VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV
  * @member VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV
  */
export enum VkViewportCoordinateSwizzleNV {
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV,
  
}

declare const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV: VkViewportCoordinateSwizzleNV;
declare const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV: VkViewportCoordinateSwizzleNV;
declare const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV: VkViewportCoordinateSwizzleNV;
declare const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV: VkViewportCoordinateSwizzleNV;
declare const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV: VkViewportCoordinateSwizzleNV;
declare const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV: VkViewportCoordinateSwizzleNV;
declare const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV: VkViewportCoordinateSwizzleNV;
declare const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV: VkViewportCoordinateSwizzleNV;



/**
  * 
  * @member VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT
  * @member VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT
  */
export enum VkDiscardRectangleModeEXT {
  VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT,
  VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT,
  
}

declare const VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT: VkDiscardRectangleModeEXT;
declare const VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT: VkDiscardRectangleModeEXT;



/**
  * 
  * @member VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES
  * @member VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY
  * @member VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR
  * @member VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR
  */
export enum VkPointClippingBehavior {
  VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
  VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
  VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR,
  VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR,
  
}

declare const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES: VkPointClippingBehavior;
declare const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY: VkPointClippingBehavior;
declare const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR: VkPointClippingBehavior;
declare const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR: VkPointClippingBehavior;



/**
  * 
  * @member VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE
  * @member VK_SAMPLER_REDUCTION_MODE_MIN
  * @member VK_SAMPLER_REDUCTION_MODE_MAX
  * @member VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT
  * @member VK_SAMPLER_REDUCTION_MODE_MIN_EXT
  * @member VK_SAMPLER_REDUCTION_MODE_MAX_EXT
  */
export enum VkSamplerReductionMode {
  VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,
  VK_SAMPLER_REDUCTION_MODE_MIN,
  VK_SAMPLER_REDUCTION_MODE_MAX,
  VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT,
  VK_SAMPLER_REDUCTION_MODE_MIN_EXT,
  VK_SAMPLER_REDUCTION_MODE_MAX_EXT,
  
}

declare const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE: VkSamplerReductionMode;
declare const VK_SAMPLER_REDUCTION_MODE_MIN: VkSamplerReductionMode;
declare const VK_SAMPLER_REDUCTION_MODE_MAX: VkSamplerReductionMode;
declare const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT: VkSamplerReductionMode;
declare const VK_SAMPLER_REDUCTION_MODE_MIN_EXT: VkSamplerReductionMode;
declare const VK_SAMPLER_REDUCTION_MODE_MAX_EXT: VkSamplerReductionMode;



/**
  * 
  * @member VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT
  * @member VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT
  * @member VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR
  * @member VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR
  */
export enum VkTessellationDomainOrigin {
  VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
  VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
  VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR,
  VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR,
  
}

declare const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT: VkTessellationDomainOrigin;
declare const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT: VkTessellationDomainOrigin;
declare const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR: VkTessellationDomainOrigin;
declare const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR: VkTessellationDomainOrigin;



/**
  * 
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR
  */
export enum VkSamplerYcbcrModelConversion {
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR,
  
}

declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY: VkSamplerYcbcrModelConversion;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY: VkSamplerYcbcrModelConversion;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709: VkSamplerYcbcrModelConversion;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601: VkSamplerYcbcrModelConversion;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020: VkSamplerYcbcrModelConversion;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR: VkSamplerYcbcrModelConversion;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR: VkSamplerYcbcrModelConversion;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR: VkSamplerYcbcrModelConversion;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR: VkSamplerYcbcrModelConversion;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR: VkSamplerYcbcrModelConversion;



/**
  * 
  * @member VK_SAMPLER_YCBCR_RANGE_ITU_FULL
  * @member VK_SAMPLER_YCBCR_RANGE_ITU_NARROW
  * @member VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR
  * @member VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR
  */
export enum VkSamplerYcbcrRange {
  VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
  VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
  VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR,
  VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR,
  
}

declare const VK_SAMPLER_YCBCR_RANGE_ITU_FULL: VkSamplerYcbcrRange;
declare const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW: VkSamplerYcbcrRange;
declare const VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR: VkSamplerYcbcrRange;
declare const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR: VkSamplerYcbcrRange;



/**
  * 
  * @member VK_CHROMA_LOCATION_COSITED_EVEN
  * @member VK_CHROMA_LOCATION_MIDPOINT
  * @member VK_CHROMA_LOCATION_COSITED_EVEN_KHR
  * @member VK_CHROMA_LOCATION_MIDPOINT_KHR
  */
export enum VkChromaLocation {
  VK_CHROMA_LOCATION_COSITED_EVEN,
  VK_CHROMA_LOCATION_MIDPOINT,
  VK_CHROMA_LOCATION_COSITED_EVEN_KHR,
  VK_CHROMA_LOCATION_MIDPOINT_KHR,
  
}

declare const VK_CHROMA_LOCATION_COSITED_EVEN: VkChromaLocation;
declare const VK_CHROMA_LOCATION_MIDPOINT: VkChromaLocation;
declare const VK_CHROMA_LOCATION_COSITED_EVEN_KHR: VkChromaLocation;
declare const VK_CHROMA_LOCATION_MIDPOINT_KHR: VkChromaLocation;



/**
  * 
  * @member VK_BLEND_OVERLAP_UNCORRELATED_EXT
  * @member VK_BLEND_OVERLAP_DISJOINT_EXT
  * @member VK_BLEND_OVERLAP_CONJOINT_EXT
  */
export enum VkBlendOverlapEXT {
  VK_BLEND_OVERLAP_UNCORRELATED_EXT,
  VK_BLEND_OVERLAP_DISJOINT_EXT,
  VK_BLEND_OVERLAP_CONJOINT_EXT,
  
}

declare const VK_BLEND_OVERLAP_UNCORRELATED_EXT: VkBlendOverlapEXT;
declare const VK_BLEND_OVERLAP_DISJOINT_EXT: VkBlendOverlapEXT;
declare const VK_BLEND_OVERLAP_CONJOINT_EXT: VkBlendOverlapEXT;



/**
  * 
  * @member VK_COVERAGE_MODULATION_MODE_NONE_NV
  * @member VK_COVERAGE_MODULATION_MODE_RGB_NV
  * @member VK_COVERAGE_MODULATION_MODE_ALPHA_NV
  * @member VK_COVERAGE_MODULATION_MODE_RGBA_NV
  */
export enum VkCoverageModulationModeNV {
  VK_COVERAGE_MODULATION_MODE_NONE_NV,
  VK_COVERAGE_MODULATION_MODE_RGB_NV,
  VK_COVERAGE_MODULATION_MODE_ALPHA_NV,
  VK_COVERAGE_MODULATION_MODE_RGBA_NV,
  
}

declare const VK_COVERAGE_MODULATION_MODE_NONE_NV: VkCoverageModulationModeNV;
declare const VK_COVERAGE_MODULATION_MODE_RGB_NV: VkCoverageModulationModeNV;
declare const VK_COVERAGE_MODULATION_MODE_ALPHA_NV: VkCoverageModulationModeNV;
declare const VK_COVERAGE_MODULATION_MODE_RGBA_NV: VkCoverageModulationModeNV;



/**
  * 
  * @member VK_COVERAGE_REDUCTION_MODE_MERGE_NV
  * @member VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV
  */
export enum VkCoverageReductionModeNV {
  VK_COVERAGE_REDUCTION_MODE_MERGE_NV,
  VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV,
  
}

declare const VK_COVERAGE_REDUCTION_MODE_MERGE_NV: VkCoverageReductionModeNV;
declare const VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV: VkCoverageReductionModeNV;



/**
  * 
  * @member VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT
  */
export enum VkValidationCacheHeaderVersionEXT {
  VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT,
  
}

declare const VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT: VkValidationCacheHeaderVersionEXT;



/**
  * 
  * @member VK_SHADER_INFO_TYPE_STATISTICS_AMD
  * @member VK_SHADER_INFO_TYPE_BINARY_AMD
  * @member VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD
  */
export enum VkShaderInfoTypeAMD {
  VK_SHADER_INFO_TYPE_STATISTICS_AMD,
  VK_SHADER_INFO_TYPE_BINARY_AMD,
  VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD,
  
}

declare const VK_SHADER_INFO_TYPE_STATISTICS_AMD: VkShaderInfoTypeAMD;
declare const VK_SHADER_INFO_TYPE_BINARY_AMD: VkShaderInfoTypeAMD;
declare const VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD: VkShaderInfoTypeAMD;



/**
  * 
  * @member VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT
  * @member VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT
  * @member VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT
  * @member VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT
  */
export enum VkQueueGlobalPriorityEXT {
  VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT,
  VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT,
  VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT,
  VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT,
  
}

declare const VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT: VkQueueGlobalPriorityEXT;
declare const VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT: VkQueueGlobalPriorityEXT;
declare const VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT: VkQueueGlobalPriorityEXT;
declare const VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT: VkQueueGlobalPriorityEXT;



/**
  * 
  * @member VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT
  * @member VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT
  * @member VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT
  */
export enum VkConservativeRasterizationModeEXT {
  VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT,
  VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT,
  VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT,
  
}

declare const VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT: VkConservativeRasterizationModeEXT;
declare const VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT: VkConservativeRasterizationModeEXT;
declare const VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT: VkConservativeRasterizationModeEXT;



/**
  * 
  * @member VK_VENDOR_ID_VIV
  * @member VK_VENDOR_ID_VSI
  * @member VK_VENDOR_ID_KAZAN
  * @member VK_VENDOR_ID_CODEPLAY
  * @member VK_VENDOR_ID_MESA
  */
export enum VkVendorId {
  VK_VENDOR_ID_VIV,
  VK_VENDOR_ID_VSI,
  VK_VENDOR_ID_KAZAN,
  VK_VENDOR_ID_CODEPLAY,
  VK_VENDOR_ID_MESA,
  
}

declare const VK_VENDOR_ID_VIV: VkVendorId;
declare const VK_VENDOR_ID_VSI: VkVendorId;
declare const VK_VENDOR_ID_KAZAN: VkVendorId;
declare const VK_VENDOR_ID_CODEPLAY: VkVendorId;
declare const VK_VENDOR_ID_MESA: VkVendorId;



/**
  * 
  * @member VK_DRIVER_ID_AMD_PROPRIETARY
  * @member VK_DRIVER_ID_AMD_OPEN_SOURCE
  * @member VK_DRIVER_ID_MESA_RADV
  * @member VK_DRIVER_ID_NVIDIA_PROPRIETARY
  * @member VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS
  * @member VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA
  * @member VK_DRIVER_ID_IMAGINATION_PROPRIETARY
  * @member VK_DRIVER_ID_QUALCOMM_PROPRIETARY
  * @member VK_DRIVER_ID_ARM_PROPRIETARY
  * @member VK_DRIVER_ID_GOOGLE_SWIFTSHADER
  * @member VK_DRIVER_ID_GGP_PROPRIETARY
  * @member VK_DRIVER_ID_BROADCOM_PROPRIETARY
  * @member VK_DRIVER_ID_MESA_LLVMPIPE
  * @member VK_DRIVER_ID_MOLTENVK
  * @member VK_DRIVER_ID_AMD_PROPRIETARY_KHR
  * @member VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR
  * @member VK_DRIVER_ID_MESA_RADV_KHR
  * @member VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR
  * @member VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR
  * @member VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR
  * @member VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR
  * @member VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR
  * @member VK_DRIVER_ID_ARM_PROPRIETARY_KHR
  * @member VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR
  * @member VK_DRIVER_ID_GGP_PROPRIETARY_KHR
  * @member VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR
  */
export enum VkDriverId {
  VK_DRIVER_ID_AMD_PROPRIETARY,
  VK_DRIVER_ID_AMD_OPEN_SOURCE,
  VK_DRIVER_ID_MESA_RADV,
  VK_DRIVER_ID_NVIDIA_PROPRIETARY,
  VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,
  VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,
  VK_DRIVER_ID_IMAGINATION_PROPRIETARY,
  VK_DRIVER_ID_QUALCOMM_PROPRIETARY,
  VK_DRIVER_ID_ARM_PROPRIETARY,
  VK_DRIVER_ID_GOOGLE_SWIFTSHADER,
  VK_DRIVER_ID_GGP_PROPRIETARY,
  VK_DRIVER_ID_BROADCOM_PROPRIETARY,
  VK_DRIVER_ID_MESA_LLVMPIPE,
  VK_DRIVER_ID_MOLTENVK,
  VK_DRIVER_ID_AMD_PROPRIETARY_KHR,
  VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR,
  VK_DRIVER_ID_MESA_RADV_KHR,
  VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR,
  VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR,
  VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR,
  VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR,
  VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR,
  VK_DRIVER_ID_ARM_PROPRIETARY_KHR,
  VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR,
  VK_DRIVER_ID_GGP_PROPRIETARY_KHR,
  VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR,
  
}

declare const VK_DRIVER_ID_AMD_PROPRIETARY: VkDriverId;
declare const VK_DRIVER_ID_AMD_OPEN_SOURCE: VkDriverId;
declare const VK_DRIVER_ID_MESA_RADV: VkDriverId;
declare const VK_DRIVER_ID_NVIDIA_PROPRIETARY: VkDriverId;
declare const VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS: VkDriverId;
declare const VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA: VkDriverId;
declare const VK_DRIVER_ID_IMAGINATION_PROPRIETARY: VkDriverId;
declare const VK_DRIVER_ID_QUALCOMM_PROPRIETARY: VkDriverId;
declare const VK_DRIVER_ID_ARM_PROPRIETARY: VkDriverId;
declare const VK_DRIVER_ID_GOOGLE_SWIFTSHADER: VkDriverId;
declare const VK_DRIVER_ID_GGP_PROPRIETARY: VkDriverId;
declare const VK_DRIVER_ID_BROADCOM_PROPRIETARY: VkDriverId;
declare const VK_DRIVER_ID_MESA_LLVMPIPE: VkDriverId;
declare const VK_DRIVER_ID_MOLTENVK: VkDriverId;
declare const VK_DRIVER_ID_AMD_PROPRIETARY_KHR: VkDriverId;
declare const VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR: VkDriverId;
declare const VK_DRIVER_ID_MESA_RADV_KHR: VkDriverId;
declare const VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR: VkDriverId;
declare const VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR: VkDriverId;
declare const VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR: VkDriverId;
declare const VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR: VkDriverId;
declare const VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR: VkDriverId;
declare const VK_DRIVER_ID_ARM_PROPRIETARY_KHR: VkDriverId;
declare const VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR: VkDriverId;
declare const VK_DRIVER_ID_GGP_PROPRIETARY_KHR: VkDriverId;
declare const VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR: VkDriverId;



/**
  * 
  * @member VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV
  * @member VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV
  * @member VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV
  * @member VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV
  * @member VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV
  * @member VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV
  * @member VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV
  * @member VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV
  * @member VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV
  * @member VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV
  * @member VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV
  * @member VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV
  */
export enum VkShadingRatePaletteEntryNV {
  VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV,
  
}

declare const VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV: VkShadingRatePaletteEntryNV;
declare const VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV: VkShadingRatePaletteEntryNV;
declare const VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV: VkShadingRatePaletteEntryNV;
declare const VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV: VkShadingRatePaletteEntryNV;
declare const VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV: VkShadingRatePaletteEntryNV;
declare const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV: VkShadingRatePaletteEntryNV;
declare const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV: VkShadingRatePaletteEntryNV;
declare const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV: VkShadingRatePaletteEntryNV;
declare const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV: VkShadingRatePaletteEntryNV;
declare const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV: VkShadingRatePaletteEntryNV;
declare const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV: VkShadingRatePaletteEntryNV;
declare const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV: VkShadingRatePaletteEntryNV;



/**
  * 
  * @member VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV
  * @member VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV
  * @member VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV
  * @member VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV
  */
export enum VkCoarseSampleOrderTypeNV {
  VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV,
  VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV,
  VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV,
  VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV,
  
}

declare const VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV: VkCoarseSampleOrderTypeNV;
declare const VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV: VkCoarseSampleOrderTypeNV;
declare const VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV: VkCoarseSampleOrderTypeNV;
declare const VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV: VkCoarseSampleOrderTypeNV;



/**
  * 
  * @member VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR
  * @member VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR
  * @member VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR
  * @member VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR
  * @member VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV
  * @member VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV
  */
export enum VkCopyAccelerationStructureModeKHR {
  VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,
  VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR,
  VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR,
  VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR,
  VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV,
  VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV,
  
}

declare const VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR: VkCopyAccelerationStructureModeKHR;
declare const VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR: VkCopyAccelerationStructureModeKHR;
declare const VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR: VkCopyAccelerationStructureModeKHR;
declare const VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR: VkCopyAccelerationStructureModeKHR;
declare const VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV: VkCopyAccelerationStructureModeKHR;
declare const VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV: VkCopyAccelerationStructureModeKHR;



/**
  * 
  * @member VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR
  */
export enum VkBuildAccelerationStructureModeKHR {
  VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR,
  
}

declare const VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR: VkBuildAccelerationStructureModeKHR;
declare const VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR: VkBuildAccelerationStructureModeKHR;



/**
  * 
  * @member VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR
  * @member VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR
  * @member VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR
  * @member VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV
  * @member VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV
  */
export enum VkAccelerationStructureTypeKHR {
  VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR,
  VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,
  VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR,
  VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV,
  VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV,
  
}

declare const VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR: VkAccelerationStructureTypeKHR;
declare const VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR: VkAccelerationStructureTypeKHR;
declare const VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR: VkAccelerationStructureTypeKHR;
declare const VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV: VkAccelerationStructureTypeKHR;
declare const VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV: VkAccelerationStructureTypeKHR;



/**
  * 
  * @member VK_GEOMETRY_TYPE_TRIANGLES_KHR
  * @member VK_GEOMETRY_TYPE_AABBS_KHR
  * @member VK_GEOMETRY_TYPE_INSTANCES_KHR
  * @member VK_GEOMETRY_TYPE_TRIANGLES_NV
  * @member VK_GEOMETRY_TYPE_AABBS_NV
  */
export enum VkGeometryTypeKHR {
  VK_GEOMETRY_TYPE_TRIANGLES_KHR,
  VK_GEOMETRY_TYPE_AABBS_KHR,
  VK_GEOMETRY_TYPE_INSTANCES_KHR,
  VK_GEOMETRY_TYPE_TRIANGLES_NV,
  VK_GEOMETRY_TYPE_AABBS_NV,
  
}

declare const VK_GEOMETRY_TYPE_TRIANGLES_KHR: VkGeometryTypeKHR;
declare const VK_GEOMETRY_TYPE_AABBS_KHR: VkGeometryTypeKHR;
declare const VK_GEOMETRY_TYPE_INSTANCES_KHR: VkGeometryTypeKHR;
declare const VK_GEOMETRY_TYPE_TRIANGLES_NV: VkGeometryTypeKHR;
declare const VK_GEOMETRY_TYPE_AABBS_NV: VkGeometryTypeKHR;



/**
  * 
  * @member VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV
  * @member VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV
  * @member VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV
  */
export enum VkAccelerationStructureMemoryRequirementsTypeNV {
  VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV,
  VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV,
  VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV,
  
}

declare const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV: VkAccelerationStructureMemoryRequirementsTypeNV;
declare const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV: VkAccelerationStructureMemoryRequirementsTypeNV;
declare const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV: VkAccelerationStructureMemoryRequirementsTypeNV;



/**
  * 
  * @member VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR
  * @member VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR
  * @member VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR
  */
export enum VkAccelerationStructureBuildTypeKHR {
  VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR,
  VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR,
  VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR,
  
}

declare const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR: VkAccelerationStructureBuildTypeKHR;
declare const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR: VkAccelerationStructureBuildTypeKHR;
declare const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR: VkAccelerationStructureBuildTypeKHR;



/**
  * 
  * @member VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR
  * @member VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR
  * @member VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR
  * @member VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV
  * @member VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV
  * @member VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV
  */
export enum VkRayTracingShaderGroupTypeKHR {
  VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,
  VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR,
  VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR,
  VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV,
  VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV,
  VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV,
  
}

declare const VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR: VkRayTracingShaderGroupTypeKHR;
declare const VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR: VkRayTracingShaderGroupTypeKHR;
declare const VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR: VkRayTracingShaderGroupTypeKHR;
declare const VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV: VkRayTracingShaderGroupTypeKHR;
declare const VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV: VkRayTracingShaderGroupTypeKHR;
declare const VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV: VkRayTracingShaderGroupTypeKHR;



/**
  * 
  * @member VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR
  * @member VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR
  */
export enum VkAccelerationStructureCompatibilityKHR {
  VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR,
  VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR,
  
}

declare const VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR: VkAccelerationStructureCompatibilityKHR;
declare const VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR: VkAccelerationStructureCompatibilityKHR;



/**
  * 
  * @member VK_SHADER_GROUP_SHADER_GENERAL_KHR
  * @member VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR
  * @member VK_SHADER_GROUP_SHADER_ANY_HIT_KHR
  * @member VK_SHADER_GROUP_SHADER_INTERSECTION_KHR
  */
export enum VkShaderGroupShaderKHR {
  VK_SHADER_GROUP_SHADER_GENERAL_KHR,
  VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR,
  VK_SHADER_GROUP_SHADER_ANY_HIT_KHR,
  VK_SHADER_GROUP_SHADER_INTERSECTION_KHR,
  
}

declare const VK_SHADER_GROUP_SHADER_GENERAL_KHR: VkShaderGroupShaderKHR;
declare const VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR: VkShaderGroupShaderKHR;
declare const VK_SHADER_GROUP_SHADER_ANY_HIT_KHR: VkShaderGroupShaderKHR;
declare const VK_SHADER_GROUP_SHADER_INTERSECTION_KHR: VkShaderGroupShaderKHR;



/**
  * 
  * @member VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD
  * @member VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD
  * @member VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD
  */
export enum VkMemoryOverallocationBehaviorAMD {
  VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD,
  VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD,
  VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD,
  
}

declare const VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD: VkMemoryOverallocationBehaviorAMD;
declare const VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD: VkMemoryOverallocationBehaviorAMD;
declare const VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD: VkMemoryOverallocationBehaviorAMD;



/**
  * 
  * @member VK_SCOPE_DEVICE_NV
  * @member VK_SCOPE_WORKGROUP_NV
  * @member VK_SCOPE_SUBGROUP_NV
  * @member VK_SCOPE_QUEUE_FAMILY_NV
  */
export enum VkScopeNV {
  VK_SCOPE_DEVICE_NV,
  VK_SCOPE_WORKGROUP_NV,
  VK_SCOPE_SUBGROUP_NV,
  VK_SCOPE_QUEUE_FAMILY_NV,
  
}

declare const VK_SCOPE_DEVICE_NV: VkScopeNV;
declare const VK_SCOPE_WORKGROUP_NV: VkScopeNV;
declare const VK_SCOPE_SUBGROUP_NV: VkScopeNV;
declare const VK_SCOPE_QUEUE_FAMILY_NV: VkScopeNV;



/**
  * 
  * @member VK_COMPONENT_TYPE_FLOAT16_NV
  * @member VK_COMPONENT_TYPE_FLOAT32_NV
  * @member VK_COMPONENT_TYPE_FLOAT64_NV
  * @member VK_COMPONENT_TYPE_SINT8_NV
  * @member VK_COMPONENT_TYPE_SINT16_NV
  * @member VK_COMPONENT_TYPE_SINT32_NV
  * @member VK_COMPONENT_TYPE_SINT64_NV
  * @member VK_COMPONENT_TYPE_UINT8_NV
  * @member VK_COMPONENT_TYPE_UINT16_NV
  * @member VK_COMPONENT_TYPE_UINT32_NV
  * @member VK_COMPONENT_TYPE_UINT64_NV
  */
export enum VkComponentTypeNV {
  VK_COMPONENT_TYPE_FLOAT16_NV,
  VK_COMPONENT_TYPE_FLOAT32_NV,
  VK_COMPONENT_TYPE_FLOAT64_NV,
  VK_COMPONENT_TYPE_SINT8_NV,
  VK_COMPONENT_TYPE_SINT16_NV,
  VK_COMPONENT_TYPE_SINT32_NV,
  VK_COMPONENT_TYPE_SINT64_NV,
  VK_COMPONENT_TYPE_UINT8_NV,
  VK_COMPONENT_TYPE_UINT16_NV,
  VK_COMPONENT_TYPE_UINT32_NV,
  VK_COMPONENT_TYPE_UINT64_NV,
  
}

declare const VK_COMPONENT_TYPE_FLOAT16_NV: VkComponentTypeNV;
declare const VK_COMPONENT_TYPE_FLOAT32_NV: VkComponentTypeNV;
declare const VK_COMPONENT_TYPE_FLOAT64_NV: VkComponentTypeNV;
declare const VK_COMPONENT_TYPE_SINT8_NV: VkComponentTypeNV;
declare const VK_COMPONENT_TYPE_SINT16_NV: VkComponentTypeNV;
declare const VK_COMPONENT_TYPE_SINT32_NV: VkComponentTypeNV;
declare const VK_COMPONENT_TYPE_SINT64_NV: VkComponentTypeNV;
declare const VK_COMPONENT_TYPE_UINT8_NV: VkComponentTypeNV;
declare const VK_COMPONENT_TYPE_UINT16_NV: VkComponentTypeNV;
declare const VK_COMPONENT_TYPE_UINT32_NV: VkComponentTypeNV;
declare const VK_COMPONENT_TYPE_UINT64_NV: VkComponentTypeNV;



/**
  * 
  * @member VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT
  * @member VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT
  * @member VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT
  * @member VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT
  */
export enum VkFullScreenExclusiveEXT {
  VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT,
  VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT,
  VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT,
  VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT,
  
}

declare const VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT: VkFullScreenExclusiveEXT;
declare const VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT: VkFullScreenExclusiveEXT;
declare const VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT: VkFullScreenExclusiveEXT;
declare const VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT: VkFullScreenExclusiveEXT;



/**
  * 
  * @member VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR
  * @member VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR
  * @member VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR
  * @member VK_QUERY_SCOPE_COMMAND_BUFFER_KHR
  * @member VK_QUERY_SCOPE_RENDER_PASS_KHR
  * @member VK_QUERY_SCOPE_COMMAND_KHR
  */
export enum VkPerformanceCounterScopeKHR {
  VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR,
  VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR,
  VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR,
  VK_QUERY_SCOPE_COMMAND_BUFFER_KHR,
  VK_QUERY_SCOPE_RENDER_PASS_KHR,
  VK_QUERY_SCOPE_COMMAND_KHR,
  
}

declare const VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR: VkPerformanceCounterScopeKHR;
declare const VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR: VkPerformanceCounterScopeKHR;
declare const VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR: VkPerformanceCounterScopeKHR;
declare const VK_QUERY_SCOPE_COMMAND_BUFFER_KHR: VkPerformanceCounterScopeKHR;
declare const VK_QUERY_SCOPE_RENDER_PASS_KHR: VkPerformanceCounterScopeKHR;
declare const VK_QUERY_SCOPE_COMMAND_KHR: VkPerformanceCounterScopeKHR;



/**
  * 
  * @member VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR
  * @member VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR
  * @member VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR
  * @member VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR
  * @member VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR
  * @member VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR
  * @member VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR
  * @member VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR
  * @member VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR
  * @member VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR
  * @member VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR
  */
export enum VkPerformanceCounterUnitKHR {
  VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR,
  VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR,
  VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR,
  VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR,
  VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR,
  VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR,
  VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR,
  VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR,
  VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR,
  VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR,
  VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR,
  
}

declare const VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR: VkPerformanceCounterUnitKHR;
declare const VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR: VkPerformanceCounterUnitKHR;
declare const VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR: VkPerformanceCounterUnitKHR;
declare const VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR: VkPerformanceCounterUnitKHR;
declare const VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR: VkPerformanceCounterUnitKHR;
declare const VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR: VkPerformanceCounterUnitKHR;
declare const VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR: VkPerformanceCounterUnitKHR;
declare const VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR: VkPerformanceCounterUnitKHR;
declare const VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR: VkPerformanceCounterUnitKHR;
declare const VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR: VkPerformanceCounterUnitKHR;
declare const VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR: VkPerformanceCounterUnitKHR;



/**
  * 
  * @member VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR
  * @member VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR
  * @member VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR
  * @member VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR
  * @member VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR
  * @member VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR
  */
export enum VkPerformanceCounterStorageKHR {
  VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR,
  VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR,
  VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR,
  VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR,
  VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR,
  VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR,
  
}

declare const VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR: VkPerformanceCounterStorageKHR;
declare const VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR: VkPerformanceCounterStorageKHR;
declare const VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR: VkPerformanceCounterStorageKHR;
declare const VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR: VkPerformanceCounterStorageKHR;
declare const VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR: VkPerformanceCounterStorageKHR;
declare const VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR: VkPerformanceCounterStorageKHR;



/**
  * 
  * @member VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL
  */
export enum VkPerformanceConfigurationTypeINTEL {
  VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL,
  
}

declare const VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL: VkPerformanceConfigurationTypeINTEL;



/**
  * 
  * @member VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL
  */
export enum VkQueryPoolSamplingModeINTEL {
  VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL,
  
}

declare const VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL: VkQueryPoolSamplingModeINTEL;



/**
  * 
  * @member VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL
  * @member VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL
  */
export enum VkPerformanceOverrideTypeINTEL {
  VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL,
  VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL,
  
}

declare const VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL: VkPerformanceOverrideTypeINTEL;
declare const VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL: VkPerformanceOverrideTypeINTEL;



/**
  * 
  * @member VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL
  * @member VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL
  */
export enum VkPerformanceParameterTypeINTEL {
  VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL,
  VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL,
  
}

declare const VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL: VkPerformanceParameterTypeINTEL;
declare const VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL: VkPerformanceParameterTypeINTEL;



/**
  * 
  * @member VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL
  * @member VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL
  * @member VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL
  * @member VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL
  * @member VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL
  */
export enum VkPerformanceValueTypeINTEL {
  VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL,
  VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL,
  VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL,
  VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL,
  VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL,
  
}

declare const VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL: VkPerformanceValueTypeINTEL;
declare const VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL: VkPerformanceValueTypeINTEL;
declare const VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL: VkPerformanceValueTypeINTEL;
declare const VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL: VkPerformanceValueTypeINTEL;
declare const VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL: VkPerformanceValueTypeINTEL;



/**
  * 
  * @member VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY
  * @member VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL
  * @member VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE
  * @member VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR
  * @member VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR
  * @member VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR
  */
export enum VkShaderFloatControlsIndependence {
  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,
  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,
  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE,
  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR,
  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR,
  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR,
  
}

declare const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY: VkShaderFloatControlsIndependence;
declare const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL: VkShaderFloatControlsIndependence;
declare const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE: VkShaderFloatControlsIndependence;
declare const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR: VkShaderFloatControlsIndependence;
declare const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR: VkShaderFloatControlsIndependence;
declare const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR: VkShaderFloatControlsIndependence;



/**
  * 
  * @member VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR
  * @member VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR
  * @member VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR
  * @member VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR
  */
export enum VkPipelineExecutableStatisticFormatKHR {
  VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR,
  VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR,
  VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR,
  VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR,
  
}

declare const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR: VkPipelineExecutableStatisticFormatKHR;
declare const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR: VkPipelineExecutableStatisticFormatKHR;
declare const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR: VkPipelineExecutableStatisticFormatKHR;
declare const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR: VkPipelineExecutableStatisticFormatKHR;



/**
  * 
  * @member VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT
  * @member VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT
  * @member VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT
  * @member VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT
  */
export enum VkLineRasterizationModeEXT {
  VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT,
  VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT,
  VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT,
  VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT,
  
}

declare const VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT: VkLineRasterizationModeEXT;
declare const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT: VkLineRasterizationModeEXT;
declare const VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT: VkLineRasterizationModeEXT;
declare const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT: VkLineRasterizationModeEXT;



/**
  * 
  * @member VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR
  * @member VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR
  * @member VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR
  * @member VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR
  * @member VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR
  */
export enum VkFragmentShadingRateCombinerOpKHR {
  VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR,
  VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR,
  VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR,
  VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR,
  VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR,
  
}

declare const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR: VkFragmentShadingRateCombinerOpKHR;
declare const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR: VkFragmentShadingRateCombinerOpKHR;
declare const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR: VkFragmentShadingRateCombinerOpKHR;
declare const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR: VkFragmentShadingRateCombinerOpKHR;
declare const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR: VkFragmentShadingRateCombinerOpKHR;



/**
  * 
  * @member VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV
  * @member VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV
  * @member VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV
  * @member VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV
  * @member VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV
  * @member VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV
  * @member VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV
  * @member VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV
  * @member VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV
  * @member VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV
  * @member VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV
  * @member VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV
  */
export enum VkFragmentShadingRateNV {
  VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV,
  VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV,
  VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV,
  VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV,
  VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV,
  VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV,
  VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV,
  VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV,
  VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV,
  VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV,
  VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV,
  VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV,
  
}

declare const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV: VkFragmentShadingRateNV;
declare const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV: VkFragmentShadingRateNV;
declare const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV: VkFragmentShadingRateNV;
declare const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV: VkFragmentShadingRateNV;
declare const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV: VkFragmentShadingRateNV;
declare const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV: VkFragmentShadingRateNV;
declare const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV: VkFragmentShadingRateNV;
declare const VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV: VkFragmentShadingRateNV;
declare const VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV: VkFragmentShadingRateNV;
declare const VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV: VkFragmentShadingRateNV;
declare const VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV: VkFragmentShadingRateNV;
declare const VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV: VkFragmentShadingRateNV;



/**
  * 
  * @member VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV
  * @member VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV
  */
export enum VkFragmentShadingRateTypeNV {
  VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV,
  VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV,
  
}

declare const VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV: VkFragmentShadingRateTypeNV;
declare const VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV: VkFragmentShadingRateTypeNV;



/**
  * 
  * @member VK_PIPELINE_CACHE_CREATE_RESERVED_1_BIT_EXT
  * @member VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT
  * @member VK_PIPELINE_CACHE_CREATE_RESERVED_2_BIT_EXT
  */
export enum VkPipelineCacheCreateFlagBits {
  VK_PIPELINE_CACHE_CREATE_RESERVED_1_BIT_EXT,
  VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT,
  VK_PIPELINE_CACHE_CREATE_RESERVED_2_BIT_EXT,
  
}

declare const VK_PIPELINE_CACHE_CREATE_RESERVED_1_BIT_EXT: VkPipelineCacheCreateFlagBits;
declare const VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT: VkPipelineCacheCreateFlagBits;
declare const VK_PIPELINE_CACHE_CREATE_RESERVED_2_BIT_EXT: VkPipelineCacheCreateFlagBits;



/**
  * 
  * @member VK_QUEUE_GRAPHICS_BIT
  * @member VK_QUEUE_COMPUTE_BIT
  * @member VK_QUEUE_TRANSFER_BIT
  * @member VK_QUEUE_SPARSE_BINDING_BIT
  * @member VK_QUEUE_PROTECTED_BIT
  * @member VK_QUEUE_RESERVED_6_BIT_KHR
  * @member VK_QUEUE_RESERVED_5_BIT_KHR
  */
export enum VkQueueFlagBits {
  VK_QUEUE_GRAPHICS_BIT,
  VK_QUEUE_COMPUTE_BIT,
  VK_QUEUE_TRANSFER_BIT,
  VK_QUEUE_SPARSE_BINDING_BIT,
  VK_QUEUE_PROTECTED_BIT,
  VK_QUEUE_RESERVED_6_BIT_KHR,
  VK_QUEUE_RESERVED_5_BIT_KHR,
  
}

declare const VK_QUEUE_GRAPHICS_BIT: VkQueueFlagBits;
declare const VK_QUEUE_COMPUTE_BIT: VkQueueFlagBits;
declare const VK_QUEUE_TRANSFER_BIT: VkQueueFlagBits;
declare const VK_QUEUE_SPARSE_BINDING_BIT: VkQueueFlagBits;
declare const VK_QUEUE_PROTECTED_BIT: VkQueueFlagBits;
declare const VK_QUEUE_RESERVED_6_BIT_KHR: VkQueueFlagBits;
declare const VK_QUEUE_RESERVED_5_BIT_KHR: VkQueueFlagBits;



/**
  * 
  * @member VK_CULL_MODE_NONE
  * @member VK_CULL_MODE_FRONT_BIT
  * @member VK_CULL_MODE_BACK_BIT
  * @member VK_CULL_MODE_FRONT_AND_BACK
  */
export enum VkCullModeFlagBits {
  VK_CULL_MODE_NONE,
  VK_CULL_MODE_FRONT_BIT,
  VK_CULL_MODE_BACK_BIT,
  VK_CULL_MODE_FRONT_AND_BACK,
  
}

declare const VK_CULL_MODE_NONE: VkCullModeFlagBits;
declare const VK_CULL_MODE_FRONT_BIT: VkCullModeFlagBits;
declare const VK_CULL_MODE_BACK_BIT: VkCullModeFlagBits;
declare const VK_CULL_MODE_FRONT_AND_BACK: VkCullModeFlagBits;



/**
  * 
  * @member VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR
  * @member VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM
  */
export enum VkRenderPassCreateFlagBits {
  VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR,
  VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM,
  
}

declare const VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR: VkRenderPassCreateFlagBits;
declare const VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM: VkRenderPassCreateFlagBits;



/**
  * 
  * @member VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT
  */
export enum VkDeviceQueueCreateFlagBits {
  VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT,
  
}

declare const VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT: VkDeviceQueueCreateFlagBits;



/**
  * 
  * @member VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT
  * @member VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT
  * @member VK_MEMORY_PROPERTY_HOST_COHERENT_BIT
  * @member VK_MEMORY_PROPERTY_HOST_CACHED_BIT
  * @member VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT
  * @member VK_MEMORY_PROPERTY_PROTECTED_BIT
  * @member VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD
  * @member VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD
  */
export enum VkMemoryPropertyFlagBits {
  VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
  VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT,
  VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
  VK_MEMORY_PROPERTY_HOST_CACHED_BIT,
  VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT,
  VK_MEMORY_PROPERTY_PROTECTED_BIT,
  VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD,
  VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD,
  
}

declare const VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT: VkMemoryPropertyFlagBits;
declare const VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT: VkMemoryPropertyFlagBits;
declare const VK_MEMORY_PROPERTY_HOST_COHERENT_BIT: VkMemoryPropertyFlagBits;
declare const VK_MEMORY_PROPERTY_HOST_CACHED_BIT: VkMemoryPropertyFlagBits;
declare const VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT: VkMemoryPropertyFlagBits;
declare const VK_MEMORY_PROPERTY_PROTECTED_BIT: VkMemoryPropertyFlagBits;
declare const VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD: VkMemoryPropertyFlagBits;
declare const VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD: VkMemoryPropertyFlagBits;



/**
  * 
  * @member VK_MEMORY_HEAP_DEVICE_LOCAL_BIT
  * @member VK_MEMORY_HEAP_MULTI_INSTANCE_BIT
  * @member VK_MEMORY_HEAP_RESERVED_2_BIT_KHR
  * @member VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR
  */
export enum VkMemoryHeapFlagBits {
  VK_MEMORY_HEAP_DEVICE_LOCAL_BIT,
  VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,
  VK_MEMORY_HEAP_RESERVED_2_BIT_KHR,
  VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR,
  
}

declare const VK_MEMORY_HEAP_DEVICE_LOCAL_BIT: VkMemoryHeapFlagBits;
declare const VK_MEMORY_HEAP_MULTI_INSTANCE_BIT: VkMemoryHeapFlagBits;
declare const VK_MEMORY_HEAP_RESERVED_2_BIT_KHR: VkMemoryHeapFlagBits;
declare const VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR: VkMemoryHeapFlagBits;



/**
  * 
  * @member VK_ACCESS_INDIRECT_COMMAND_READ_BIT
  * @member VK_ACCESS_INDEX_READ_BIT
  * @member VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT
  * @member VK_ACCESS_UNIFORM_READ_BIT
  * @member VK_ACCESS_INPUT_ATTACHMENT_READ_BIT
  * @member VK_ACCESS_SHADER_READ_BIT
  * @member VK_ACCESS_SHADER_WRITE_BIT
  * @member VK_ACCESS_COLOR_ATTACHMENT_READ_BIT
  * @member VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT
  * @member VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT
  * @member VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT
  * @member VK_ACCESS_TRANSFER_READ_BIT
  * @member VK_ACCESS_TRANSFER_WRITE_BIT
  * @member VK_ACCESS_HOST_READ_BIT
  * @member VK_ACCESS_HOST_WRITE_BIT
  * @member VK_ACCESS_MEMORY_READ_BIT
  * @member VK_ACCESS_MEMORY_WRITE_BIT
  * @member VK_ACCESS_RESERVED_30_BIT_KHR
  * @member VK_ACCESS_RESERVED_28_BIT_KHR
  * @member VK_ACCESS_RESERVED_29_BIT_KHR
  * @member VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT
  * @member VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT
  * @member VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT
  * @member VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT
  * @member VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT
  * @member VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR
  * @member VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR
  * @member VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV
  * @member VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT
  * @member VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV
  * @member VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV
  * @member VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV
  * @member VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV
  * @member VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR
  */
export enum VkAccessFlagBits {
  VK_ACCESS_INDIRECT_COMMAND_READ_BIT,
  VK_ACCESS_INDEX_READ_BIT,
  VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT,
  VK_ACCESS_UNIFORM_READ_BIT,
  VK_ACCESS_INPUT_ATTACHMENT_READ_BIT,
  VK_ACCESS_SHADER_READ_BIT,
  VK_ACCESS_SHADER_WRITE_BIT,
  VK_ACCESS_COLOR_ATTACHMENT_READ_BIT,
  VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT,
  VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT,
  VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT,
  VK_ACCESS_TRANSFER_READ_BIT,
  VK_ACCESS_TRANSFER_WRITE_BIT,
  VK_ACCESS_HOST_READ_BIT,
  VK_ACCESS_HOST_WRITE_BIT,
  VK_ACCESS_MEMORY_READ_BIT,
  VK_ACCESS_MEMORY_WRITE_BIT,
  VK_ACCESS_RESERVED_30_BIT_KHR,
  VK_ACCESS_RESERVED_28_BIT_KHR,
  VK_ACCESS_RESERVED_29_BIT_KHR,
  VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT,
  VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT,
  VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT,
  VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT,
  VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT,
  VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
  VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
  VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV,
  VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT,
  VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV,
  VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV,
  VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV,
  VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV,
  VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR,
  
}

declare const VK_ACCESS_INDIRECT_COMMAND_READ_BIT: VkAccessFlagBits;
declare const VK_ACCESS_INDEX_READ_BIT: VkAccessFlagBits;
declare const VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT: VkAccessFlagBits;
declare const VK_ACCESS_UNIFORM_READ_BIT: VkAccessFlagBits;
declare const VK_ACCESS_INPUT_ATTACHMENT_READ_BIT: VkAccessFlagBits;
declare const VK_ACCESS_SHADER_READ_BIT: VkAccessFlagBits;
declare const VK_ACCESS_SHADER_WRITE_BIT: VkAccessFlagBits;
declare const VK_ACCESS_COLOR_ATTACHMENT_READ_BIT: VkAccessFlagBits;
declare const VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT: VkAccessFlagBits;
declare const VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT: VkAccessFlagBits;
declare const VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: VkAccessFlagBits;
declare const VK_ACCESS_TRANSFER_READ_BIT: VkAccessFlagBits;
declare const VK_ACCESS_TRANSFER_WRITE_BIT: VkAccessFlagBits;
declare const VK_ACCESS_HOST_READ_BIT: VkAccessFlagBits;
declare const VK_ACCESS_HOST_WRITE_BIT: VkAccessFlagBits;
declare const VK_ACCESS_MEMORY_READ_BIT: VkAccessFlagBits;
declare const VK_ACCESS_MEMORY_WRITE_BIT: VkAccessFlagBits;
declare const VK_ACCESS_RESERVED_30_BIT_KHR: VkAccessFlagBits;
declare const VK_ACCESS_RESERVED_28_BIT_KHR: VkAccessFlagBits;
declare const VK_ACCESS_RESERVED_29_BIT_KHR: VkAccessFlagBits;
declare const VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: VkAccessFlagBits;
declare const VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: VkAccessFlagBits;
declare const VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: VkAccessFlagBits;
declare const VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT: VkAccessFlagBits;
declare const VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: VkAccessFlagBits;
declare const VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR: VkAccessFlagBits;
declare const VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: VkAccessFlagBits;
declare const VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV: VkAccessFlagBits;
declare const VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: VkAccessFlagBits;
declare const VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV: VkAccessFlagBits;
declare const VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV: VkAccessFlagBits;
declare const VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV: VkAccessFlagBits;
declare const VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV: VkAccessFlagBits;
declare const VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits;



/**
  * 
  * @member VK_BUFFER_USAGE_TRANSFER_SRC_BIT
  * @member VK_BUFFER_USAGE_TRANSFER_DST_BIT
  * @member VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT
  * @member VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT
  * @member VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT
  * @member VK_BUFFER_USAGE_STORAGE_BUFFER_BIT
  * @member VK_BUFFER_USAGE_INDEX_BUFFER_BIT
  * @member VK_BUFFER_USAGE_VERTEX_BUFFER_BIT
  * @member VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT
  * @member VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT
  * @member VK_BUFFER_USAGE_RESERVED_15_BIT_KHR
  * @member VK_BUFFER_USAGE_RESERVED_16_BIT_KHR
  * @member VK_BUFFER_USAGE_RESERVED_13_BIT_KHR
  * @member VK_BUFFER_USAGE_RESERVED_14_BIT_KHR
  * @member VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT
  * @member VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT
  * @member VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT
  * @member VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR
  * @member VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR
  * @member VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR
  * @member VK_BUFFER_USAGE_RESERVED_18_BIT_QCOM
  * @member VK_BUFFER_USAGE_RAY_TRACING_BIT_NV
  * @member VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT
  * @member VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR
  */
export enum VkBufferUsageFlagBits {
  VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
  VK_BUFFER_USAGE_TRANSFER_DST_BIT,
  VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT,
  VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT,
  VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT,
  VK_BUFFER_USAGE_STORAGE_BUFFER_BIT,
  VK_BUFFER_USAGE_INDEX_BUFFER_BIT,
  VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
  VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT,
  VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
  VK_BUFFER_USAGE_RESERVED_15_BIT_KHR,
  VK_BUFFER_USAGE_RESERVED_16_BIT_KHR,
  VK_BUFFER_USAGE_RESERVED_13_BIT_KHR,
  VK_BUFFER_USAGE_RESERVED_14_BIT_KHR,
  VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT,
  VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT,
  VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT,
  VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR,
  VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR,
  VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR,
  VK_BUFFER_USAGE_RESERVED_18_BIT_QCOM,
  VK_BUFFER_USAGE_RAY_TRACING_BIT_NV,
  VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT,
  VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR,
  
}

declare const VK_BUFFER_USAGE_TRANSFER_SRC_BIT: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_TRANSFER_DST_BIT: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_STORAGE_BUFFER_BIT: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_INDEX_BUFFER_BIT: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_VERTEX_BUFFER_BIT: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_RESERVED_15_BIT_KHR: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_RESERVED_16_BIT_KHR: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_RESERVED_13_BIT_KHR: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_RESERVED_14_BIT_KHR: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_RESERVED_18_BIT_QCOM: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_RAY_TRACING_BIT_NV: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT: VkBufferUsageFlagBits;
declare const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR: VkBufferUsageFlagBits;



/**
  * 
  * @member VK_BUFFER_CREATE_SPARSE_BINDING_BIT
  * @member VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT
  * @member VK_BUFFER_CREATE_SPARSE_ALIASED_BIT
  * @member VK_BUFFER_CREATE_PROTECTED_BIT
  * @member VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT
  * @member VK_BUFFER_CREATE_RESERVED_5_BIT_NV
  * @member VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT
  * @member VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR
  */
export enum VkBufferCreateFlagBits {
  VK_BUFFER_CREATE_SPARSE_BINDING_BIT,
  VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT,
  VK_BUFFER_CREATE_SPARSE_ALIASED_BIT,
  VK_BUFFER_CREATE_PROTECTED_BIT,
  VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
  VK_BUFFER_CREATE_RESERVED_5_BIT_NV,
  VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT,
  VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR,
  
}

declare const VK_BUFFER_CREATE_SPARSE_BINDING_BIT: VkBufferCreateFlagBits;
declare const VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT: VkBufferCreateFlagBits;
declare const VK_BUFFER_CREATE_SPARSE_ALIASED_BIT: VkBufferCreateFlagBits;
declare const VK_BUFFER_CREATE_PROTECTED_BIT: VkBufferCreateFlagBits;
declare const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: VkBufferCreateFlagBits;
declare const VK_BUFFER_CREATE_RESERVED_5_BIT_NV: VkBufferCreateFlagBits;
declare const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT: VkBufferCreateFlagBits;
declare const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: VkBufferCreateFlagBits;



/**
  * 
  * @member VK_SHADER_STAGE_VERTEX_BIT
  * @member VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT
  * @member VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT
  * @member VK_SHADER_STAGE_GEOMETRY_BIT
  * @member VK_SHADER_STAGE_FRAGMENT_BIT
  * @member VK_SHADER_STAGE_COMPUTE_BIT
  * @member VK_SHADER_STAGE_ALL_GRAPHICS
  * @member VK_SHADER_STAGE_ALL
  * @member VK_SHADER_STAGE_RAYGEN_BIT_KHR
  * @member VK_SHADER_STAGE_ANY_HIT_BIT_KHR
  * @member VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR
  * @member VK_SHADER_STAGE_MISS_BIT_KHR
  * @member VK_SHADER_STAGE_INTERSECTION_BIT_KHR
  * @member VK_SHADER_STAGE_CALLABLE_BIT_KHR
  * @member VK_SHADER_STAGE_TASK_BIT_NV
  * @member VK_SHADER_STAGE_MESH_BIT_NV
  * @member VK_SHADER_STAGE_RAYGEN_BIT_NV
  * @member VK_SHADER_STAGE_ANY_HIT_BIT_NV
  * @member VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV
  * @member VK_SHADER_STAGE_MISS_BIT_NV
  * @member VK_SHADER_STAGE_INTERSECTION_BIT_NV
  * @member VK_SHADER_STAGE_CALLABLE_BIT_NV
  */
export enum VkShaderStageFlagBits {
  VK_SHADER_STAGE_VERTEX_BIT,
  VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT,
  VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT,
  VK_SHADER_STAGE_GEOMETRY_BIT,
  VK_SHADER_STAGE_FRAGMENT_BIT,
  VK_SHADER_STAGE_COMPUTE_BIT,
  VK_SHADER_STAGE_ALL_GRAPHICS,
  VK_SHADER_STAGE_ALL,
  VK_SHADER_STAGE_RAYGEN_BIT_KHR,
  VK_SHADER_STAGE_ANY_HIT_BIT_KHR,
  VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,
  VK_SHADER_STAGE_MISS_BIT_KHR,
  VK_SHADER_STAGE_INTERSECTION_BIT_KHR,
  VK_SHADER_STAGE_CALLABLE_BIT_KHR,
  VK_SHADER_STAGE_TASK_BIT_NV,
  VK_SHADER_STAGE_MESH_BIT_NV,
  VK_SHADER_STAGE_RAYGEN_BIT_NV,
  VK_SHADER_STAGE_ANY_HIT_BIT_NV,
  VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV,
  VK_SHADER_STAGE_MISS_BIT_NV,
  VK_SHADER_STAGE_INTERSECTION_BIT_NV,
  VK_SHADER_STAGE_CALLABLE_BIT_NV,
  
}

declare const VK_SHADER_STAGE_VERTEX_BIT: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_GEOMETRY_BIT: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_FRAGMENT_BIT: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_COMPUTE_BIT: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_ALL_GRAPHICS: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_ALL: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_RAYGEN_BIT_KHR: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_ANY_HIT_BIT_KHR: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_MISS_BIT_KHR: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_INTERSECTION_BIT_KHR: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_CALLABLE_BIT_KHR: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_TASK_BIT_NV: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_MESH_BIT_NV: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_RAYGEN_BIT_NV: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_ANY_HIT_BIT_NV: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_MISS_BIT_NV: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_INTERSECTION_BIT_NV: VkShaderStageFlagBits;
declare const VK_SHADER_STAGE_CALLABLE_BIT_NV: VkShaderStageFlagBits;



/**
  * 
  * @member VK_IMAGE_USAGE_TRANSFER_SRC_BIT
  * @member VK_IMAGE_USAGE_TRANSFER_DST_BIT
  * @member VK_IMAGE_USAGE_SAMPLED_BIT
  * @member VK_IMAGE_USAGE_STORAGE_BIT
  * @member VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT
  * @member VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT
  * @member VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT
  * @member VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT
  * @member VK_IMAGE_USAGE_RESERVED_13_BIT_KHR
  * @member VK_IMAGE_USAGE_RESERVED_14_BIT_KHR
  * @member VK_IMAGE_USAGE_RESERVED_15_BIT_KHR
  * @member VK_IMAGE_USAGE_RESERVED_10_BIT_KHR
  * @member VK_IMAGE_USAGE_RESERVED_11_BIT_KHR
  * @member VK_IMAGE_USAGE_RESERVED_12_BIT_KHR
  * @member VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV
  * @member VK_IMAGE_USAGE_RESERVED_16_BIT_QCOM
  * @member VK_IMAGE_USAGE_RESERVED_17_BIT_QCOM
  * @member VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT
  * @member VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR
  */
export enum VkImageUsageFlagBits {
  VK_IMAGE_USAGE_TRANSFER_SRC_BIT,
  VK_IMAGE_USAGE_TRANSFER_DST_BIT,
  VK_IMAGE_USAGE_SAMPLED_BIT,
  VK_IMAGE_USAGE_STORAGE_BIT,
  VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,
  VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT,
  VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT,
  VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT,
  VK_IMAGE_USAGE_RESERVED_13_BIT_KHR,
  VK_IMAGE_USAGE_RESERVED_14_BIT_KHR,
  VK_IMAGE_USAGE_RESERVED_15_BIT_KHR,
  VK_IMAGE_USAGE_RESERVED_10_BIT_KHR,
  VK_IMAGE_USAGE_RESERVED_11_BIT_KHR,
  VK_IMAGE_USAGE_RESERVED_12_BIT_KHR,
  VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV,
  VK_IMAGE_USAGE_RESERVED_16_BIT_QCOM,
  VK_IMAGE_USAGE_RESERVED_17_BIT_QCOM,
  VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT,
  VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
  
}

declare const VK_IMAGE_USAGE_TRANSFER_SRC_BIT: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_TRANSFER_DST_BIT: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_SAMPLED_BIT: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_STORAGE_BIT: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_RESERVED_13_BIT_KHR: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_RESERVED_14_BIT_KHR: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_RESERVED_15_BIT_KHR: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_RESERVED_10_BIT_KHR: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_RESERVED_11_BIT_KHR: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_RESERVED_12_BIT_KHR: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_RESERVED_16_BIT_QCOM: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_RESERVED_17_BIT_QCOM: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT: VkImageUsageFlagBits;
declare const VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkImageUsageFlagBits;



/**
  * 
  * @member VK_IMAGE_CREATE_SPARSE_BINDING_BIT
  * @member VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT
  * @member VK_IMAGE_CREATE_SPARSE_ALIASED_BIT
  * @member VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT
  * @member VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT
  * @member VK_IMAGE_CREATE_ALIAS_BIT
  * @member VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT
  * @member VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT
  * @member VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT
  * @member VK_IMAGE_CREATE_EXTENDED_USAGE_BIT
  * @member VK_IMAGE_CREATE_PROTECTED_BIT
  * @member VK_IMAGE_CREATE_DISJOINT_BIT
  * @member VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV
  * @member VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT
  * @member VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT
  * @member VK_IMAGE_CREATE_RESERVED_15_BIT_NV
  * @member VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR
  * @member VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR
  * @member VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR
  * @member VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR
  * @member VK_IMAGE_CREATE_DISJOINT_BIT_KHR
  * @member VK_IMAGE_CREATE_ALIAS_BIT_KHR
  */
export enum VkImageCreateFlagBits {
  VK_IMAGE_CREATE_SPARSE_BINDING_BIT,
  VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT,
  VK_IMAGE_CREATE_SPARSE_ALIASED_BIT,
  VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT,
  VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT,
  VK_IMAGE_CREATE_ALIAS_BIT,
  VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
  VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
  VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
  VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
  VK_IMAGE_CREATE_PROTECTED_BIT,
  VK_IMAGE_CREATE_DISJOINT_BIT,
  VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV,
  VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT,
  VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT,
  VK_IMAGE_CREATE_RESERVED_15_BIT_NV,
  VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR,
  VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR,
  VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR,
  VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR,
  VK_IMAGE_CREATE_DISJOINT_BIT_KHR,
  VK_IMAGE_CREATE_ALIAS_BIT_KHR,
  
}

declare const VK_IMAGE_CREATE_SPARSE_BINDING_BIT: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_SPARSE_ALIASED_BIT: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_ALIAS_BIT: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_EXTENDED_USAGE_BIT: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_PROTECTED_BIT: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_DISJOINT_BIT: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_RESERVED_15_BIT_NV: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_DISJOINT_BIT_KHR: VkImageCreateFlagBits;
declare const VK_IMAGE_CREATE_ALIAS_BIT_KHR: VkImageCreateFlagBits;



/**
  * 
  * @member VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT
  * @member VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT
  */
export enum VkImageViewCreateFlagBits {
  VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT,
  VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT,
  
}

declare const VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT: VkImageViewCreateFlagBits;
declare const VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT: VkImageViewCreateFlagBits;



/**
  * 
  * @member VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT
  * @member VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT
  */
export enum VkSamplerCreateFlagBits {
  VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT,
  VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT,
  
}

declare const VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT: VkSamplerCreateFlagBits;
declare const VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT: VkSamplerCreateFlagBits;



/**
  * 
  * @member VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT
  * @member VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT
  * @member VK_PIPELINE_CREATE_DERIVATIVE_BIT
  * @member VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT
  * @member VK_PIPELINE_CREATE_DISPATCH_BASE_BIT
  * @member VK_PIPELINE_CREATE_DISPATCH_BASE
  * @member VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR
  * @member VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR
  * @member VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR
  * @member VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR
  * @member VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR
  * @member VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR
  * @member VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR
  * @member VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV
  * @member VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR
  * @member VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR
  * @member VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV
  * @member VK_PIPELINE_CREATE_LIBRARY_BIT_KHR
  * @member VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT
  * @member VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT
  * @member VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR
  * @member VK_PIPELINE_CREATE_DISPATCH_BASE_KHR
  */
export enum VkPipelineCreateFlagBits {
  VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT,
  VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT,
  VK_PIPELINE_CREATE_DERIVATIVE_BIT,
  VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
  VK_PIPELINE_CREATE_DISPATCH_BASE_BIT,
  VK_PIPELINE_CREATE_DISPATCH_BASE,
  VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR,
  VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR,
  VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR,
  VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR,
  VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR,
  VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR,
  VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR,
  VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV,
  VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR,
  VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR,
  VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV,
  VK_PIPELINE_CREATE_LIBRARY_BIT_KHR,
  VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT,
  VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT,
  VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR,
  VK_PIPELINE_CREATE_DISPATCH_BASE_KHR,
  
}

declare const VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_DERIVATIVE_BIT: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_DISPATCH_BASE_BIT: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_DISPATCH_BASE: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_LIBRARY_BIT_KHR: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR: VkPipelineCreateFlagBits;
declare const VK_PIPELINE_CREATE_DISPATCH_BASE_KHR: VkPipelineCreateFlagBits;



/**
  * 
  * @member VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_2_BIT_NV
  * @member VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT
  * @member VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT
  * @member VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_3_BIT_KHR
  */
export enum VkPipelineShaderStageCreateFlagBits {
  VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_2_BIT_NV,
  VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT,
  VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT,
  VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_3_BIT_KHR,
  
}

declare const VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_2_BIT_NV: VkPipelineShaderStageCreateFlagBits;
declare const VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT: VkPipelineShaderStageCreateFlagBits;
declare const VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT: VkPipelineShaderStageCreateFlagBits;
declare const VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_3_BIT_KHR: VkPipelineShaderStageCreateFlagBits;



/**
  * 
  * @member VK_COLOR_COMPONENT_R_BIT
  * @member VK_COLOR_COMPONENT_G_BIT
  * @member VK_COLOR_COMPONENT_B_BIT
  * @member VK_COLOR_COMPONENT_A_BIT
  */
export enum VkColorComponentFlagBits {
  VK_COLOR_COMPONENT_R_BIT,
  VK_COLOR_COMPONENT_G_BIT,
  VK_COLOR_COMPONENT_B_BIT,
  VK_COLOR_COMPONENT_A_BIT,
  
}

declare const VK_COLOR_COMPONENT_R_BIT: VkColorComponentFlagBits;
declare const VK_COLOR_COMPONENT_G_BIT: VkColorComponentFlagBits;
declare const VK_COLOR_COMPONENT_B_BIT: VkColorComponentFlagBits;
declare const VK_COLOR_COMPONENT_A_BIT: VkColorComponentFlagBits;



/**
  * 
  * @member VK_FENCE_CREATE_SIGNALED_BIT
  */
export enum VkFenceCreateFlagBits {
  VK_FENCE_CREATE_SIGNALED_BIT,
  
}

declare const VK_FENCE_CREATE_SIGNALED_BIT: VkFenceCreateFlagBits;



/**
  * 
  * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT
  * @member VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT
  * @member VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT
  * @member VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT
  * @member VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT
  * @member VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT
  * @member VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT
  * @member VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT
  * @member VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT
  * @member VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT
  * @member VK_FORMAT_FEATURE_BLIT_SRC_BIT
  * @member VK_FORMAT_FEATURE_BLIT_DST_BIT
  * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT
  * @member VK_FORMAT_FEATURE_TRANSFER_SRC_BIT
  * @member VK_FORMAT_FEATURE_TRANSFER_DST_BIT
  * @member VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT
  * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT
  * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT
  * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT
  * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT
  * @member VK_FORMAT_FEATURE_DISJOINT_BIT
  * @member VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT
  * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT
  * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG
  * @member VK_FORMAT_FEATURE_RESERVED_27_BIT_KHR
  * @member VK_FORMAT_FEATURE_RESERVED_28_BIT_KHR
  * @member VK_FORMAT_FEATURE_RESERVED_25_BIT_KHR
  * @member VK_FORMAT_FEATURE_RESERVED_26_BIT_KHR
  * @member VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR
  * @member VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT
  * @member VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR
  * @member VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR
  * @member VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR
  * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT
  * @member VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR
  * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR
  * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR
  * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR
  * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR
  * @member VK_FORMAT_FEATURE_DISJOINT_BIT_KHR
  * @member VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR
  * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT
  */
export enum VkFormatFeatureFlagBits {
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT,
  VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT,
  VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT,
  VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
  VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
  VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT,
  VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT,
  VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT,
  VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT,
  VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT,
  VK_FORMAT_FEATURE_BLIT_SRC_BIT,
  VK_FORMAT_FEATURE_BLIT_DST_BIT,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
  VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,
  VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
  VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
  VK_FORMAT_FEATURE_DISJOINT_BIT,
  VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG,
  VK_FORMAT_FEATURE_RESERVED_27_BIT_KHR,
  VK_FORMAT_FEATURE_RESERVED_28_BIT_KHR,
  VK_FORMAT_FEATURE_RESERVED_25_BIT_KHR,
  VK_FORMAT_FEATURE_RESERVED_26_BIT_KHR,
  VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR,
  VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT,
  VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
  VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR,
  VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT,
  VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR,
  VK_FORMAT_FEATURE_DISJOINT_BIT_KHR,
  VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT,
  
}

declare const VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_BLIT_SRC_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_BLIT_DST_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_TRANSFER_SRC_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_TRANSFER_DST_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_DISJOINT_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_RESERVED_27_BIT_KHR: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_RESERVED_28_BIT_KHR: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_RESERVED_25_BIT_KHR: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_RESERVED_26_BIT_KHR: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_DISJOINT_BIT_KHR: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits;
declare const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT: VkFormatFeatureFlagBits;



/**
  * 
  * @member VK_QUERY_CONTROL_PRECISE_BIT
  */
export enum VkQueryControlFlagBits {
  VK_QUERY_CONTROL_PRECISE_BIT,
  
}

declare const VK_QUERY_CONTROL_PRECISE_BIT: VkQueryControlFlagBits;



/**
  * 
  * @member VK_QUERY_RESULT_64_BIT
  * @member VK_QUERY_RESULT_WAIT_BIT
  * @member VK_QUERY_RESULT_WITH_AVAILABILITY_BIT
  * @member VK_QUERY_RESULT_PARTIAL_BIT
  */
export enum VkQueryResultFlagBits {
  VK_QUERY_RESULT_64_BIT,
  VK_QUERY_RESULT_WAIT_BIT,
  VK_QUERY_RESULT_WITH_AVAILABILITY_BIT,
  VK_QUERY_RESULT_PARTIAL_BIT,
  
}

declare const VK_QUERY_RESULT_64_BIT: VkQueryResultFlagBits;
declare const VK_QUERY_RESULT_WAIT_BIT: VkQueryResultFlagBits;
declare const VK_QUERY_RESULT_WITH_AVAILABILITY_BIT: VkQueryResultFlagBits;
declare const VK_QUERY_RESULT_PARTIAL_BIT: VkQueryResultFlagBits;



/**
  * 
  * @member VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT
  * @member VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT
  * @member VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT
  */
export enum VkCommandBufferUsageFlagBits {
  VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT,
  VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT,
  VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT,
  
}

declare const VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT: VkCommandBufferUsageFlagBits;
declare const VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT: VkCommandBufferUsageFlagBits;
declare const VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT: VkCommandBufferUsageFlagBits;



/**
  * 
  * @member VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT
  * @member VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT
  * @member VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT
  * @member VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT
  * @member VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT
  * @member VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT
  * @member VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT
  * @member VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT
  * @member VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT
  * @member VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT
  * @member VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT
  */
export enum VkQueryPipelineStatisticFlagBits {
  VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT,
  VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT,
  VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT,
  VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT,
  VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT,
  VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT,
  VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT,
  VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT,
  VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT,
  VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT,
  VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT,
  
}

declare const VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT: VkQueryPipelineStatisticFlagBits;
declare const VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT: VkQueryPipelineStatisticFlagBits;
declare const VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT: VkQueryPipelineStatisticFlagBits;
declare const VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT: VkQueryPipelineStatisticFlagBits;
declare const VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT: VkQueryPipelineStatisticFlagBits;
declare const VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT: VkQueryPipelineStatisticFlagBits;
declare const VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT: VkQueryPipelineStatisticFlagBits;
declare const VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT: VkQueryPipelineStatisticFlagBits;
declare const VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT: VkQueryPipelineStatisticFlagBits;
declare const VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT: VkQueryPipelineStatisticFlagBits;
declare const VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT: VkQueryPipelineStatisticFlagBits;



/**
  * 
  * @member VK_IMAGE_ASPECT_COLOR_BIT
  * @member VK_IMAGE_ASPECT_DEPTH_BIT
  * @member VK_IMAGE_ASPECT_STENCIL_BIT
  * @member VK_IMAGE_ASPECT_METADATA_BIT
  * @member VK_IMAGE_ASPECT_PLANE_0_BIT
  * @member VK_IMAGE_ASPECT_PLANE_1_BIT
  * @member VK_IMAGE_ASPECT_PLANE_2_BIT
  * @member VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT
  * @member VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT
  * @member VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT
  * @member VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT
  * @member VK_IMAGE_ASPECT_PLANE_0_BIT_KHR
  * @member VK_IMAGE_ASPECT_PLANE_1_BIT_KHR
  * @member VK_IMAGE_ASPECT_PLANE_2_BIT_KHR
  */
export enum VkImageAspectFlagBits {
  VK_IMAGE_ASPECT_COLOR_BIT,
  VK_IMAGE_ASPECT_DEPTH_BIT,
  VK_IMAGE_ASPECT_STENCIL_BIT,
  VK_IMAGE_ASPECT_METADATA_BIT,
  VK_IMAGE_ASPECT_PLANE_0_BIT,
  VK_IMAGE_ASPECT_PLANE_1_BIT,
  VK_IMAGE_ASPECT_PLANE_2_BIT,
  VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT,
  VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT,
  VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT,
  VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT,
  VK_IMAGE_ASPECT_PLANE_0_BIT_KHR,
  VK_IMAGE_ASPECT_PLANE_1_BIT_KHR,
  VK_IMAGE_ASPECT_PLANE_2_BIT_KHR,
  
}

declare const VK_IMAGE_ASPECT_COLOR_BIT: VkImageAspectFlagBits;
declare const VK_IMAGE_ASPECT_DEPTH_BIT: VkImageAspectFlagBits;
declare const VK_IMAGE_ASPECT_STENCIL_BIT: VkImageAspectFlagBits;
declare const VK_IMAGE_ASPECT_METADATA_BIT: VkImageAspectFlagBits;
declare const VK_IMAGE_ASPECT_PLANE_0_BIT: VkImageAspectFlagBits;
declare const VK_IMAGE_ASPECT_PLANE_1_BIT: VkImageAspectFlagBits;
declare const VK_IMAGE_ASPECT_PLANE_2_BIT: VkImageAspectFlagBits;
declare const VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT: VkImageAspectFlagBits;
declare const VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT: VkImageAspectFlagBits;
declare const VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT: VkImageAspectFlagBits;
declare const VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT: VkImageAspectFlagBits;
declare const VK_IMAGE_ASPECT_PLANE_0_BIT_KHR: VkImageAspectFlagBits;
declare const VK_IMAGE_ASPECT_PLANE_1_BIT_KHR: VkImageAspectFlagBits;
declare const VK_IMAGE_ASPECT_PLANE_2_BIT_KHR: VkImageAspectFlagBits;



/**
  * 
  * @member VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT
  * @member VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT
  * @member VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT
  */
export enum VkSparseImageFormatFlagBits {
  VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT,
  VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT,
  VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT,
  
}

declare const VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT: VkSparseImageFormatFlagBits;
declare const VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT: VkSparseImageFormatFlagBits;
declare const VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT: VkSparseImageFormatFlagBits;



/**
  * 
  * @member VK_SPARSE_MEMORY_BIND_METADATA_BIT
  */
export enum VkSparseMemoryBindFlagBits {
  VK_SPARSE_MEMORY_BIND_METADATA_BIT,
  
}

declare const VK_SPARSE_MEMORY_BIND_METADATA_BIT: VkSparseMemoryBindFlagBits;



/**
  * 
  * @member VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT
  * @member VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT
  * @member VK_PIPELINE_STAGE_VERTEX_INPUT_BIT
  * @member VK_PIPELINE_STAGE_VERTEX_SHADER_BIT
  * @member VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT
  * @member VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT
  * @member VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT
  * @member VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT
  * @member VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT
  * @member VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT
  * @member VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT
  * @member VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT
  * @member VK_PIPELINE_STAGE_TRANSFER_BIT
  * @member VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT
  * @member VK_PIPELINE_STAGE_HOST_BIT
  * @member VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT
  * @member VK_PIPELINE_STAGE_ALL_COMMANDS_BIT
  * @member VK_PIPELINE_STAGE_RESERVED_27_BIT_KHR
  * @member VK_PIPELINE_STAGE_RESERVED_26_BIT_KHR
  * @member VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT
  * @member VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT
  * @member VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR
  * @member VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR
  * @member VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV
  * @member VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV
  * @member VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV
  * @member VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT
  * @member VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV
  * @member VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV
  * @member VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV
  * @member VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR
  */
export enum VkPipelineStageFlagBits {
  VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,
  VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT,
  VK_PIPELINE_STAGE_VERTEX_INPUT_BIT,
  VK_PIPELINE_STAGE_VERTEX_SHADER_BIT,
  VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT,
  VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT,
  VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT,
  VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT,
  VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT,
  VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT,
  VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,
  VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT,
  VK_PIPELINE_STAGE_TRANSFER_BIT,
  VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,
  VK_PIPELINE_STAGE_HOST_BIT,
  VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT,
  VK_PIPELINE_STAGE_ALL_COMMANDS_BIT,
  VK_PIPELINE_STAGE_RESERVED_27_BIT_KHR,
  VK_PIPELINE_STAGE_RESERVED_26_BIT_KHR,
  VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT,
  VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT,
  VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,
  VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR,
  VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV,
  VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV,
  VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV,
  VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT,
  VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV,
  VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV,
  VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV,
  VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
  
}

declare const VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_VERTEX_INPUT_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_VERTEX_SHADER_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_TRANSFER_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_HOST_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_ALL_COMMANDS_BIT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_RESERVED_27_BIT_KHR: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_RESERVED_26_BIT_KHR: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV: VkPipelineStageFlagBits;
declare const VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkPipelineStageFlagBits;



/**
  * 
  * @member VK_COMMAND_POOL_CREATE_TRANSIENT_BIT
  * @member VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT
  * @member VK_COMMAND_POOL_CREATE_PROTECTED_BIT
  */
export enum VkCommandPoolCreateFlagBits {
  VK_COMMAND_POOL_CREATE_TRANSIENT_BIT,
  VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT,
  VK_COMMAND_POOL_CREATE_PROTECTED_BIT,
  
}

declare const VK_COMMAND_POOL_CREATE_TRANSIENT_BIT: VkCommandPoolCreateFlagBits;
declare const VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT: VkCommandPoolCreateFlagBits;
declare const VK_COMMAND_POOL_CREATE_PROTECTED_BIT: VkCommandPoolCreateFlagBits;



/**
  * 
  * @member VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT
  */
export enum VkCommandPoolResetFlagBits {
  VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT,
  
}

declare const VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT: VkCommandPoolResetFlagBits;



/**
  * 
  * @member VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT
  */
export enum VkCommandBufferResetFlagBits {
  VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT,
  
}

declare const VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT: VkCommandBufferResetFlagBits;



/**
  * 
  * @member VK_SAMPLE_COUNT_1_BIT
  * @member VK_SAMPLE_COUNT_2_BIT
  * @member VK_SAMPLE_COUNT_4_BIT
  * @member VK_SAMPLE_COUNT_8_BIT
  * @member VK_SAMPLE_COUNT_16_BIT
  * @member VK_SAMPLE_COUNT_32_BIT
  * @member VK_SAMPLE_COUNT_64_BIT
  */
export enum VkSampleCountFlagBits {
  VK_SAMPLE_COUNT_1_BIT,
  VK_SAMPLE_COUNT_2_BIT,
  VK_SAMPLE_COUNT_4_BIT,
  VK_SAMPLE_COUNT_8_BIT,
  VK_SAMPLE_COUNT_16_BIT,
  VK_SAMPLE_COUNT_32_BIT,
  VK_SAMPLE_COUNT_64_BIT,
  
}

declare const VK_SAMPLE_COUNT_1_BIT: VkSampleCountFlagBits;
declare const VK_SAMPLE_COUNT_2_BIT: VkSampleCountFlagBits;
declare const VK_SAMPLE_COUNT_4_BIT: VkSampleCountFlagBits;
declare const VK_SAMPLE_COUNT_8_BIT: VkSampleCountFlagBits;
declare const VK_SAMPLE_COUNT_16_BIT: VkSampleCountFlagBits;
declare const VK_SAMPLE_COUNT_32_BIT: VkSampleCountFlagBits;
declare const VK_SAMPLE_COUNT_64_BIT: VkSampleCountFlagBits;



/**
  * 
  * @member VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT
  */
export enum VkAttachmentDescriptionFlagBits {
  VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT,
  
}

declare const VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT: VkAttachmentDescriptionFlagBits;



/**
  * 
  * @member VK_STENCIL_FACE_FRONT_BIT
  * @member VK_STENCIL_FACE_BACK_BIT
  * @member VK_STENCIL_FACE_FRONT_AND_BACK
  * @member VK_STENCIL_FRONT_AND_BACK
  */
export enum VkStencilFaceFlagBits {
  VK_STENCIL_FACE_FRONT_BIT,
  VK_STENCIL_FACE_BACK_BIT,
  VK_STENCIL_FACE_FRONT_AND_BACK,
  VK_STENCIL_FRONT_AND_BACK,
  
}

declare const VK_STENCIL_FACE_FRONT_BIT: VkStencilFaceFlagBits;
declare const VK_STENCIL_FACE_BACK_BIT: VkStencilFaceFlagBits;
declare const VK_STENCIL_FACE_FRONT_AND_BACK: VkStencilFaceFlagBits;
declare const VK_STENCIL_FRONT_AND_BACK: VkStencilFaceFlagBits;



/**
  * 
  * @member VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT
  * @member VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT
  * @member VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT
  */
export enum VkDescriptorPoolCreateFlagBits {
  VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT,
  VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT,
  VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT,
  
}

declare const VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT: VkDescriptorPoolCreateFlagBits;
declare const VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT: VkDescriptorPoolCreateFlagBits;
declare const VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT: VkDescriptorPoolCreateFlagBits;



/**
  * 
  * @member VK_DEPENDENCY_BY_REGION_BIT
  * @member VK_DEPENDENCY_DEVICE_GROUP_BIT
  * @member VK_DEPENDENCY_VIEW_LOCAL_BIT
  * @member VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR
  * @member VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR
  */
export enum VkDependencyFlagBits {
  VK_DEPENDENCY_BY_REGION_BIT,
  VK_DEPENDENCY_DEVICE_GROUP_BIT,
  VK_DEPENDENCY_VIEW_LOCAL_BIT,
  VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR,
  VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR,
  
}

declare const VK_DEPENDENCY_BY_REGION_BIT: VkDependencyFlagBits;
declare const VK_DEPENDENCY_DEVICE_GROUP_BIT: VkDependencyFlagBits;
declare const VK_DEPENDENCY_VIEW_LOCAL_BIT: VkDependencyFlagBits;
declare const VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR: VkDependencyFlagBits;
declare const VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR: VkDependencyFlagBits;



/**
  * 
  * @member VK_SEMAPHORE_WAIT_ANY_BIT
  * @member VK_SEMAPHORE_WAIT_ANY_BIT_KHR
  */
export enum VkSemaphoreWaitFlagBits {
  VK_SEMAPHORE_WAIT_ANY_BIT,
  VK_SEMAPHORE_WAIT_ANY_BIT_KHR,
  
}

declare const VK_SEMAPHORE_WAIT_ANY_BIT: VkSemaphoreWaitFlagBits;
declare const VK_SEMAPHORE_WAIT_ANY_BIT_KHR: VkSemaphoreWaitFlagBits;



/**
  * 
  * @member VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR
  * @member VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR
  * @member VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR
  * @member VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR
  */
export enum VkDisplayPlaneAlphaFlagBitsKHR {
  VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR,
  VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR,
  VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR,
  VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR,
  
}

declare const VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR: VkDisplayPlaneAlphaFlagBitsKHR;
declare const VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR: VkDisplayPlaneAlphaFlagBitsKHR;
declare const VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR: VkDisplayPlaneAlphaFlagBitsKHR;
declare const VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR: VkDisplayPlaneAlphaFlagBitsKHR;



/**
  * 
  * @member VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR
  * @member VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR
  * @member VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR
  * @member VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR
  */
export enum VkCompositeAlphaFlagBitsKHR {
  VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR,
  VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR,
  VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR,
  VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR,
  
}

declare const VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR: VkCompositeAlphaFlagBitsKHR;
declare const VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR: VkCompositeAlphaFlagBitsKHR;
declare const VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR: VkCompositeAlphaFlagBitsKHR;
declare const VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR: VkCompositeAlphaFlagBitsKHR;



/**
  * 
  * @member VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR
  * @member VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR
  * @member VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR
  * @member VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR
  * @member VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR
  * @member VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR
  * @member VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR
  * @member VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR
  * @member VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR
  */
export enum VkSurfaceTransformFlagBitsKHR {
  VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR,
  VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR,
  VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR,
  VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR,
  VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR,
  
}

declare const VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
declare const VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
declare const VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
declare const VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
declare const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
declare const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
declare const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
declare const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
declare const VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR: VkSurfaceTransformFlagBitsKHR;



/**
  * 
  * @member VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID
  */
export enum VkSwapchainImageUsageFlagBitsANDROID {
  VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID,
  
}

declare const VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID: VkSwapchainImageUsageFlagBitsANDROID;



/**
  * 
  * @member VK_DEBUG_REPORT_INFORMATION_BIT_EXT
  * @member VK_DEBUG_REPORT_WARNING_BIT_EXT
  * @member VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT
  * @member VK_DEBUG_REPORT_ERROR_BIT_EXT
  * @member VK_DEBUG_REPORT_DEBUG_BIT_EXT
  */
export enum VkDebugReportFlagBitsEXT {
  VK_DEBUG_REPORT_INFORMATION_BIT_EXT,
  VK_DEBUG_REPORT_WARNING_BIT_EXT,
  VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT,
  VK_DEBUG_REPORT_ERROR_BIT_EXT,
  VK_DEBUG_REPORT_DEBUG_BIT_EXT,
  
}

declare const VK_DEBUG_REPORT_INFORMATION_BIT_EXT: VkDebugReportFlagBitsEXT;
declare const VK_DEBUG_REPORT_WARNING_BIT_EXT: VkDebugReportFlagBitsEXT;
declare const VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT: VkDebugReportFlagBitsEXT;
declare const VK_DEBUG_REPORT_ERROR_BIT_EXT: VkDebugReportFlagBitsEXT;
declare const VK_DEBUG_REPORT_DEBUG_BIT_EXT: VkDebugReportFlagBitsEXT;



/**
  * 
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV
  */
export enum VkExternalMemoryHandleTypeFlagBitsNV {
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV,
  
}

declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV: VkExternalMemoryHandleTypeFlagBitsNV;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV: VkExternalMemoryHandleTypeFlagBitsNV;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV: VkExternalMemoryHandleTypeFlagBitsNV;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV: VkExternalMemoryHandleTypeFlagBitsNV;



/**
  * 
  * @member VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV
  * @member VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV
  * @member VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV
  */
export enum VkExternalMemoryFeatureFlagBitsNV {
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV,
  
}

declare const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV: VkExternalMemoryFeatureFlagBitsNV;
declare const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV: VkExternalMemoryFeatureFlagBitsNV;
declare const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV: VkExternalMemoryFeatureFlagBitsNV;



/**
  * 
  * @member VK_SUBGROUP_FEATURE_BASIC_BIT
  * @member VK_SUBGROUP_FEATURE_VOTE_BIT
  * @member VK_SUBGROUP_FEATURE_ARITHMETIC_BIT
  * @member VK_SUBGROUP_FEATURE_BALLOT_BIT
  * @member VK_SUBGROUP_FEATURE_SHUFFLE_BIT
  * @member VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT
  * @member VK_SUBGROUP_FEATURE_CLUSTERED_BIT
  * @member VK_SUBGROUP_FEATURE_QUAD_BIT
  * @member VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV
  */
export enum VkSubgroupFeatureFlagBits {
  VK_SUBGROUP_FEATURE_BASIC_BIT,
  VK_SUBGROUP_FEATURE_VOTE_BIT,
  VK_SUBGROUP_FEATURE_ARITHMETIC_BIT,
  VK_SUBGROUP_FEATURE_BALLOT_BIT,
  VK_SUBGROUP_FEATURE_SHUFFLE_BIT,
  VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT,
  VK_SUBGROUP_FEATURE_CLUSTERED_BIT,
  VK_SUBGROUP_FEATURE_QUAD_BIT,
  VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV,
  
}

declare const VK_SUBGROUP_FEATURE_BASIC_BIT: VkSubgroupFeatureFlagBits;
declare const VK_SUBGROUP_FEATURE_VOTE_BIT: VkSubgroupFeatureFlagBits;
declare const VK_SUBGROUP_FEATURE_ARITHMETIC_BIT: VkSubgroupFeatureFlagBits;
declare const VK_SUBGROUP_FEATURE_BALLOT_BIT: VkSubgroupFeatureFlagBits;
declare const VK_SUBGROUP_FEATURE_SHUFFLE_BIT: VkSubgroupFeatureFlagBits;
declare const VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT: VkSubgroupFeatureFlagBits;
declare const VK_SUBGROUP_FEATURE_CLUSTERED_BIT: VkSubgroupFeatureFlagBits;
declare const VK_SUBGROUP_FEATURE_QUAD_BIT: VkSubgroupFeatureFlagBits;
declare const VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV: VkSubgroupFeatureFlagBits;



/**
  * 
  * @member VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV
  * @member VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV
  * @member VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV
  */
export enum VkIndirectCommandsLayoutUsageFlagBitsNV {
  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV,
  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV,
  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV,
  
}

declare const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV: VkIndirectCommandsLayoutUsageFlagBitsNV;
declare const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV: VkIndirectCommandsLayoutUsageFlagBitsNV;
declare const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV: VkIndirectCommandsLayoutUsageFlagBitsNV;



/**
  * 
  * @member VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV
  */
export enum VkIndirectStateFlagBitsNV {
  VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV,
  
}

declare const VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV: VkIndirectStateFlagBitsNV;



/**
  * 
  */
export enum VkPrivateDataSlotCreateFlagBitsEXT {
  
}




/**
  * 
  * @member VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT
  * @member VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR
  * @member VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT
  */
export enum VkDescriptorSetLayoutCreateFlagBits {
  VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT,
  VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR,
  VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT,
  
}

declare const VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT: VkDescriptorSetLayoutCreateFlagBits;
declare const VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR: VkDescriptorSetLayoutCreateFlagBits;
declare const VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT: VkDescriptorSetLayoutCreateFlagBits;



/**
  * 
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR
  */
export enum VkExternalMemoryHandleTypeFlagBits {
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR,
  
}

declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR: VkExternalMemoryHandleTypeFlagBits;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR: VkExternalMemoryHandleTypeFlagBits;



/**
  * 
  * @member VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT
  * @member VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT
  * @member VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT
  * @member VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR
  */
export enum VkExternalMemoryFeatureFlagBits {
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR,
  
}

declare const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT: VkExternalMemoryFeatureFlagBits;
declare const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT: VkExternalMemoryFeatureFlagBits;
declare const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT: VkExternalMemoryFeatureFlagBits;
declare const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR: VkExternalMemoryFeatureFlagBits;
declare const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR: VkExternalMemoryFeatureFlagBits;
declare const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR: VkExternalMemoryFeatureFlagBits;



/**
  * 
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR
  */
export enum VkExternalSemaphoreHandleTypeFlagBits {
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
  
}

declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT: VkExternalSemaphoreHandleTypeFlagBits;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT: VkExternalSemaphoreHandleTypeFlagBits;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: VkExternalSemaphoreHandleTypeFlagBits;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT: VkExternalSemaphoreHandleTypeFlagBits;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT: VkExternalSemaphoreHandleTypeFlagBits;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT: VkExternalSemaphoreHandleTypeFlagBits;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: VkExternalSemaphoreHandleTypeFlagBits;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: VkExternalSemaphoreHandleTypeFlagBits;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: VkExternalSemaphoreHandleTypeFlagBits;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR: VkExternalSemaphoreHandleTypeFlagBits;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR: VkExternalSemaphoreHandleTypeFlagBits;



/**
  * 
  * @member VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT
  * @member VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT
  * @member VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR
  * @member VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR
  */
export enum VkExternalSemaphoreFeatureFlagBits {
  VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
  VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
  VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR,
  
}

declare const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT: VkExternalSemaphoreFeatureFlagBits;
declare const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT: VkExternalSemaphoreFeatureFlagBits;
declare const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR: VkExternalSemaphoreFeatureFlagBits;
declare const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR: VkExternalSemaphoreFeatureFlagBits;



/**
  * 
  * @member VK_SEMAPHORE_IMPORT_TEMPORARY_BIT
  * @member VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR
  */
export enum VkSemaphoreImportFlagBits {
  VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
  VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR,
  
}

declare const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT: VkSemaphoreImportFlagBits;
declare const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR: VkSemaphoreImportFlagBits;



/**
  * 
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR
  */
export enum VkExternalFenceHandleTypeFlagBits {
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
  
}

declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT: VkExternalFenceHandleTypeFlagBits;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT: VkExternalFenceHandleTypeFlagBits;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: VkExternalFenceHandleTypeFlagBits;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT: VkExternalFenceHandleTypeFlagBits;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: VkExternalFenceHandleTypeFlagBits;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: VkExternalFenceHandleTypeFlagBits;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: VkExternalFenceHandleTypeFlagBits;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR: VkExternalFenceHandleTypeFlagBits;



/**
  * 
  * @member VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT
  * @member VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT
  * @member VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR
  * @member VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR
  */
export enum VkExternalFenceFeatureFlagBits {
  VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
  VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
  VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR,
  VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR,
  
}

declare const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT: VkExternalFenceFeatureFlagBits;
declare const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT: VkExternalFenceFeatureFlagBits;
declare const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR: VkExternalFenceFeatureFlagBits;
declare const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR: VkExternalFenceFeatureFlagBits;



/**
  * 
  * @member VK_FENCE_IMPORT_TEMPORARY_BIT
  * @member VK_FENCE_IMPORT_TEMPORARY_BIT_KHR
  */
export enum VkFenceImportFlagBits {
  VK_FENCE_IMPORT_TEMPORARY_BIT,
  VK_FENCE_IMPORT_TEMPORARY_BIT_KHR,
  
}

declare const VK_FENCE_IMPORT_TEMPORARY_BIT: VkFenceImportFlagBits;
declare const VK_FENCE_IMPORT_TEMPORARY_BIT_KHR: VkFenceImportFlagBits;



/**
  * 
  * @member VK_SURFACE_COUNTER_VBLANK_BIT_EXT
  * @member VK_SURFACE_COUNTER_VBLANK_EXT
  */
export enum VkSurfaceCounterFlagBitsEXT {
  VK_SURFACE_COUNTER_VBLANK_BIT_EXT,
  VK_SURFACE_COUNTER_VBLANK_EXT,
  
}

declare const VK_SURFACE_COUNTER_VBLANK_BIT_EXT: VkSurfaceCounterFlagBitsEXT;
declare const VK_SURFACE_COUNTER_VBLANK_EXT: VkSurfaceCounterFlagBitsEXT;



/**
  * 
  * @member VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT
  * @member VK_PEER_MEMORY_FEATURE_COPY_DST_BIT
  * @member VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT
  * @member VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT
  * @member VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR
  * @member VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR
  * @member VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR
  * @member VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR
  */
export enum VkPeerMemoryFeatureFlagBits {
  VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
  VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
  VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
  VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
  VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR,
  VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR,
  VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR,
  VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR,
  
}

declare const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT: VkPeerMemoryFeatureFlagBits;
declare const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT: VkPeerMemoryFeatureFlagBits;
declare const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT: VkPeerMemoryFeatureFlagBits;
declare const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT: VkPeerMemoryFeatureFlagBits;
declare const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR: VkPeerMemoryFeatureFlagBits;
declare const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR: VkPeerMemoryFeatureFlagBits;
declare const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR: VkPeerMemoryFeatureFlagBits;
declare const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR: VkPeerMemoryFeatureFlagBits;



/**
  * 
  * @member VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT
  * @member VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT
  * @member VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT
  * @member VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR
  * @member VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR
  * @member VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR
  */
export enum VkMemoryAllocateFlagBits {
  VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT,
  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
  VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR,
  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR,
  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR,
  
}

declare const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT: VkMemoryAllocateFlagBits;
declare const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT: VkMemoryAllocateFlagBits;
declare const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: VkMemoryAllocateFlagBits;
declare const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR: VkMemoryAllocateFlagBits;
declare const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR: VkMemoryAllocateFlagBits;
declare const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: VkMemoryAllocateFlagBits;



/**
  * 
  * @member VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR
  * @member VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR
  * @member VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR
  * @member VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR
  */
export enum VkDeviceGroupPresentModeFlagBitsKHR {
  VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR,
  VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR,
  VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR,
  VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR,
  
}

declare const VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR: VkDeviceGroupPresentModeFlagBitsKHR;
declare const VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR: VkDeviceGroupPresentModeFlagBitsKHR;
declare const VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR: VkDeviceGroupPresentModeFlagBitsKHR;
declare const VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR: VkDeviceGroupPresentModeFlagBitsKHR;



/**
  * 
  * @member VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR
  * @member VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR
  * @member VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR
  */
export enum VkSwapchainCreateFlagBitsKHR {
  VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR,
  VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR,
  VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR,
  
}

declare const VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: VkSwapchainCreateFlagBitsKHR;
declare const VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR: VkSwapchainCreateFlagBitsKHR;
declare const VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR: VkSwapchainCreateFlagBitsKHR;



/**
  * 
  * @member VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX
  * @member VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX
  * @member VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM
  * @member VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM
  */
export enum VkSubpassDescriptionFlagBits {
  VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX,
  VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX,
  VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM,
  VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM,
  
}

declare const VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX: VkSubpassDescriptionFlagBits;
declare const VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX: VkSubpassDescriptionFlagBits;
declare const VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM: VkSubpassDescriptionFlagBits;
declare const VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM: VkSubpassDescriptionFlagBits;



/**
  * 
  * @member VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT
  * @member VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT
  * @member VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT
  * @member VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT
  */
export enum VkDebugUtilsMessageSeverityFlagBitsEXT {
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT,
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT,
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT,
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT,
  
}

declare const VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT: VkDebugUtilsMessageSeverityFlagBitsEXT;
declare const VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT: VkDebugUtilsMessageSeverityFlagBitsEXT;
declare const VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT: VkDebugUtilsMessageSeverityFlagBitsEXT;
declare const VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT: VkDebugUtilsMessageSeverityFlagBitsEXT;



/**
  * 
  * @member VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT
  * @member VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT
  * @member VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT
  */
export enum VkDebugUtilsMessageTypeFlagBitsEXT {
  VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT,
  VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT,
  VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT,
  
}

declare const VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT: VkDebugUtilsMessageTypeFlagBitsEXT;
declare const VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT: VkDebugUtilsMessageTypeFlagBitsEXT;
declare const VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT: VkDebugUtilsMessageTypeFlagBitsEXT;



/**
  * 
  * @member VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT
  * @member VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT
  * @member VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT
  * @member VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT
  * @member VK_DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM
  * @member VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT
  * @member VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT
  * @member VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT
  * @member VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT
  */
export enum VkDescriptorBindingFlagBits {
  VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT,
  VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT,
  VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT,
  VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT,
  VK_DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM,
  VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT,
  VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT,
  VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT,
  VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT,
  
}

declare const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT: VkDescriptorBindingFlagBits;
declare const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT: VkDescriptorBindingFlagBits;
declare const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT: VkDescriptorBindingFlagBits;
declare const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT: VkDescriptorBindingFlagBits;
declare const VK_DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM: VkDescriptorBindingFlagBits;
declare const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT: VkDescriptorBindingFlagBits;
declare const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT: VkDescriptorBindingFlagBits;
declare const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT: VkDescriptorBindingFlagBits;
declare const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT: VkDescriptorBindingFlagBits;



/**
  * 
  * @member VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT
  */
export enum VkConditionalRenderingFlagBitsEXT {
  VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT,
  
}

declare const VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT: VkConditionalRenderingFlagBitsEXT;



/**
  * 
  * @member VK_RESOLVE_MODE_NONE
  * @member VK_RESOLVE_MODE_SAMPLE_ZERO_BIT
  * @member VK_RESOLVE_MODE_AVERAGE_BIT
  * @member VK_RESOLVE_MODE_MIN_BIT
  * @member VK_RESOLVE_MODE_MAX_BIT
  * @member VK_RESOLVE_MODE_NONE_KHR
  * @member VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR
  * @member VK_RESOLVE_MODE_AVERAGE_BIT_KHR
  * @member VK_RESOLVE_MODE_MIN_BIT_KHR
  * @member VK_RESOLVE_MODE_MAX_BIT_KHR
  */
export enum VkResolveModeFlagBits {
  VK_RESOLVE_MODE_NONE,
  VK_RESOLVE_MODE_SAMPLE_ZERO_BIT,
  VK_RESOLVE_MODE_AVERAGE_BIT,
  VK_RESOLVE_MODE_MIN_BIT,
  VK_RESOLVE_MODE_MAX_BIT,
  VK_RESOLVE_MODE_NONE_KHR,
  VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR,
  VK_RESOLVE_MODE_AVERAGE_BIT_KHR,
  VK_RESOLVE_MODE_MIN_BIT_KHR,
  VK_RESOLVE_MODE_MAX_BIT_KHR,
  
}

declare const VK_RESOLVE_MODE_NONE: VkResolveModeFlagBits;
declare const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT: VkResolveModeFlagBits;
declare const VK_RESOLVE_MODE_AVERAGE_BIT: VkResolveModeFlagBits;
declare const VK_RESOLVE_MODE_MIN_BIT: VkResolveModeFlagBits;
declare const VK_RESOLVE_MODE_MAX_BIT: VkResolveModeFlagBits;
declare const VK_RESOLVE_MODE_NONE_KHR: VkResolveModeFlagBits;
declare const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR: VkResolveModeFlagBits;
declare const VK_RESOLVE_MODE_AVERAGE_BIT_KHR: VkResolveModeFlagBits;
declare const VK_RESOLVE_MODE_MIN_BIT_KHR: VkResolveModeFlagBits;
declare const VK_RESOLVE_MODE_MAX_BIT_KHR: VkResolveModeFlagBits;



/**
  * 
  * @member VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR
  * @member VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR
  * @member VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR
  * @member VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR
  * @member VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV
  * @member VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV
  * @member VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV
  * @member VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV
  */
export enum VkGeometryInstanceFlagBitsKHR {
  VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR,
  VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR,
  VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR,
  VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR,
  VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV,
  VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV,
  VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV,
  VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV,
  
}

declare const VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR: VkGeometryInstanceFlagBitsKHR;
declare const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR: VkGeometryInstanceFlagBitsKHR;
declare const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR: VkGeometryInstanceFlagBitsKHR;
declare const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR: VkGeometryInstanceFlagBitsKHR;
declare const VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV: VkGeometryInstanceFlagBitsKHR;
declare const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV: VkGeometryInstanceFlagBitsKHR;
declare const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV: VkGeometryInstanceFlagBitsKHR;
declare const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV: VkGeometryInstanceFlagBitsKHR;



/**
  * 
  * @member VK_GEOMETRY_OPAQUE_BIT_KHR
  * @member VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR
  * @member VK_GEOMETRY_OPAQUE_BIT_NV
  * @member VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV
  */
export enum VkGeometryFlagBitsKHR {
  VK_GEOMETRY_OPAQUE_BIT_KHR,
  VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR,
  VK_GEOMETRY_OPAQUE_BIT_NV,
  VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV,
  
}

declare const VK_GEOMETRY_OPAQUE_BIT_KHR: VkGeometryFlagBitsKHR;
declare const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR: VkGeometryFlagBitsKHR;
declare const VK_GEOMETRY_OPAQUE_BIT_NV: VkGeometryFlagBitsKHR;
declare const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV: VkGeometryFlagBitsKHR;



/**
  * 
  * @member VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV
  * @member VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV
  * @member VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV
  * @member VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV
  * @member VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV
  */
export enum VkBuildAccelerationStructureFlagBitsKHR {
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV,
  
}

declare const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR: VkBuildAccelerationStructureFlagBitsKHR;
declare const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR: VkBuildAccelerationStructureFlagBitsKHR;
declare const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR: VkBuildAccelerationStructureFlagBitsKHR;
declare const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR: VkBuildAccelerationStructureFlagBitsKHR;
declare const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR: VkBuildAccelerationStructureFlagBitsKHR;
declare const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV: VkBuildAccelerationStructureFlagBitsKHR;
declare const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV: VkBuildAccelerationStructureFlagBitsKHR;
declare const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV: VkBuildAccelerationStructureFlagBitsKHR;
declare const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV: VkBuildAccelerationStructureFlagBitsKHR;
declare const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV: VkBuildAccelerationStructureFlagBitsKHR;



/**
  * 
  * @member VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR
  */
export enum VkAccelerationStructureCreateFlagBitsKHR {
  VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR,
  
}

declare const VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: VkAccelerationStructureCreateFlagBitsKHR;



/**
  * 
  * @member VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT
  * @member VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR
  */
export enum VkFramebufferCreateFlagBits {
  VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT,
  VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR,
  
}

declare const VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT: VkFramebufferCreateFlagBits;
declare const VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR: VkFramebufferCreateFlagBits;



/**
  * 
  * @member VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV
  * @member VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV
  * @member VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV
  */
export enum VkDeviceDiagnosticsConfigFlagBitsNV {
  VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV,
  VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV,
  VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV,
  
}

declare const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV: VkDeviceDiagnosticsConfigFlagBitsNV;
declare const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV: VkDeviceDiagnosticsConfigFlagBitsNV;
declare const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV: VkDeviceDiagnosticsConfigFlagBitsNV;



/**
  * 
  * @member VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT
  * @member VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT
  * @member VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT
  */
export enum VkPipelineCreationFeedbackFlagBitsEXT {
  VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT,
  VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT,
  VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT,
  
}

declare const VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT: VkPipelineCreationFeedbackFlagBitsEXT;
declare const VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT: VkPipelineCreationFeedbackFlagBitsEXT;
declare const VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT: VkPipelineCreationFeedbackFlagBitsEXT;



/**
  * 
  * @member VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR
  * @member VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR
  * @member VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR
  * @member VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR
  */
export enum VkPerformanceCounterDescriptionFlagBitsKHR {
  VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR,
  VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR,
  VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR,
  VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR,
  
}

declare const VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR: VkPerformanceCounterDescriptionFlagBitsKHR;
declare const VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR: VkPerformanceCounterDescriptionFlagBitsKHR;
declare const VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR: VkPerformanceCounterDescriptionFlagBitsKHR;
declare const VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR: VkPerformanceCounterDescriptionFlagBitsKHR;



/**
  * 
  */
export enum VkAcquireProfilingLockFlagBitsKHR {
  
}




/**
  * 
  */
export enum VkShaderCorePropertiesFlagBitsAMD {
  
}




/**
  * 
  * @member VK_SHADER_MODULE_CREATE_RESERVED_0_BIT_NV
  */
export enum VkShaderModuleCreateFlagBits {
  VK_SHADER_MODULE_CREATE_RESERVED_0_BIT_NV,
  
}

declare const VK_SHADER_MODULE_CREATE_RESERVED_0_BIT_NV: VkShaderModuleCreateFlagBits;



/**
  * 
  */
export enum VkPipelineCompilerControlFlagBitsAMD {
  
}




/**
  * 
  * @member VK_TOOL_PURPOSE_VALIDATION_BIT_EXT
  * @member VK_TOOL_PURPOSE_PROFILING_BIT_EXT
  * @member VK_TOOL_PURPOSE_TRACING_BIT_EXT
  * @member VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT
  * @member VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT
  * @member VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT
  * @member VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT
  */
export enum VkToolPurposeFlagBitsEXT {
  VK_TOOL_PURPOSE_VALIDATION_BIT_EXT,
  VK_TOOL_PURPOSE_PROFILING_BIT_EXT,
  VK_TOOL_PURPOSE_TRACING_BIT_EXT,
  VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT,
  VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT,
  VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT,
  VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT,
  
}

declare const VK_TOOL_PURPOSE_VALIDATION_BIT_EXT: VkToolPurposeFlagBitsEXT;
declare const VK_TOOL_PURPOSE_PROFILING_BIT_EXT: VkToolPurposeFlagBitsEXT;
declare const VK_TOOL_PURPOSE_TRACING_BIT_EXT: VkToolPurposeFlagBitsEXT;
declare const VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT: VkToolPurposeFlagBitsEXT;
declare const VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT: VkToolPurposeFlagBitsEXT;
declare const VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT: VkToolPurposeFlagBitsEXT;
declare const VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT: VkToolPurposeFlagBitsEXT;



/**
  * 
  * @member VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET
  * @member VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR
  * @member VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR
  */
export enum VkDescriptorUpdateTemplateTypeKHR {
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR,
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR,
  
}

declare const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET: VkDescriptorUpdateTemplateTypeKHR;
declare const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR: VkDescriptorUpdateTemplateTypeKHR;
declare const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR: VkDescriptorUpdateTemplateTypeKHR;



/**
  * 
  * @member VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES
  * @member VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY
  * @member VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR
  * @member VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR
  */
export enum VkPointClippingBehaviorKHR {
  VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
  VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
  VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR,
  VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR,
  
}

declare const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES: VkPointClippingBehaviorKHR;
declare const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY: VkPointClippingBehaviorKHR;
declare const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR: VkPointClippingBehaviorKHR;
declare const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR: VkPointClippingBehaviorKHR;



/**
  * 
  * @member VK_RESOLVE_MODE_NONE
  * @member VK_RESOLVE_MODE_SAMPLE_ZERO_BIT
  * @member VK_RESOLVE_MODE_AVERAGE_BIT
  * @member VK_RESOLVE_MODE_MIN_BIT
  * @member VK_RESOLVE_MODE_MAX_BIT
  * @member VK_RESOLVE_MODE_NONE_KHR
  * @member VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR
  * @member VK_RESOLVE_MODE_AVERAGE_BIT_KHR
  * @member VK_RESOLVE_MODE_MIN_BIT_KHR
  * @member VK_RESOLVE_MODE_MAX_BIT_KHR
  */
export enum VkResolveModeFlagBitsKHR {
  VK_RESOLVE_MODE_NONE,
  VK_RESOLVE_MODE_SAMPLE_ZERO_BIT,
  VK_RESOLVE_MODE_AVERAGE_BIT,
  VK_RESOLVE_MODE_MIN_BIT,
  VK_RESOLVE_MODE_MAX_BIT,
  VK_RESOLVE_MODE_NONE_KHR,
  VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR,
  VK_RESOLVE_MODE_AVERAGE_BIT_KHR,
  VK_RESOLVE_MODE_MIN_BIT_KHR,
  VK_RESOLVE_MODE_MAX_BIT_KHR,
  
}

declare const VK_RESOLVE_MODE_NONE: VkResolveModeFlagBitsKHR;
declare const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT: VkResolveModeFlagBitsKHR;
declare const VK_RESOLVE_MODE_AVERAGE_BIT: VkResolveModeFlagBitsKHR;
declare const VK_RESOLVE_MODE_MIN_BIT: VkResolveModeFlagBitsKHR;
declare const VK_RESOLVE_MODE_MAX_BIT: VkResolveModeFlagBitsKHR;
declare const VK_RESOLVE_MODE_NONE_KHR: VkResolveModeFlagBitsKHR;
declare const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR: VkResolveModeFlagBitsKHR;
declare const VK_RESOLVE_MODE_AVERAGE_BIT_KHR: VkResolveModeFlagBitsKHR;
declare const VK_RESOLVE_MODE_MIN_BIT_KHR: VkResolveModeFlagBitsKHR;
declare const VK_RESOLVE_MODE_MAX_BIT_KHR: VkResolveModeFlagBitsKHR;



/**
  * 
  * @member VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT
  * @member VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT
  * @member VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT
  * @member VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT
  * @member VK_DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM
  * @member VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT
  * @member VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT
  * @member VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT
  * @member VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT
  */
export enum VkDescriptorBindingFlagBitsEXT {
  VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT,
  VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT,
  VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT,
  VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT,
  VK_DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM,
  VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT,
  VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT,
  VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT,
  VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT,
  
}

declare const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT: VkDescriptorBindingFlagBitsEXT;
declare const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT: VkDescriptorBindingFlagBitsEXT;
declare const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT: VkDescriptorBindingFlagBitsEXT;
declare const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT: VkDescriptorBindingFlagBitsEXT;
declare const VK_DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM: VkDescriptorBindingFlagBitsEXT;
declare const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT: VkDescriptorBindingFlagBitsEXT;
declare const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT: VkDescriptorBindingFlagBitsEXT;
declare const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT: VkDescriptorBindingFlagBitsEXT;
declare const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT: VkDescriptorBindingFlagBitsEXT;



/**
  * 
  * @member VK_SEMAPHORE_TYPE_BINARY
  * @member VK_SEMAPHORE_TYPE_TIMELINE
  * @member VK_SEMAPHORE_TYPE_BINARY_KHR
  * @member VK_SEMAPHORE_TYPE_TIMELINE_KHR
  */
export enum VkSemaphoreTypeKHR {
  VK_SEMAPHORE_TYPE_BINARY,
  VK_SEMAPHORE_TYPE_TIMELINE,
  VK_SEMAPHORE_TYPE_BINARY_KHR,
  VK_SEMAPHORE_TYPE_TIMELINE_KHR,
  
}

declare const VK_SEMAPHORE_TYPE_BINARY: VkSemaphoreTypeKHR;
declare const VK_SEMAPHORE_TYPE_TIMELINE: VkSemaphoreTypeKHR;
declare const VK_SEMAPHORE_TYPE_BINARY_KHR: VkSemaphoreTypeKHR;
declare const VK_SEMAPHORE_TYPE_TIMELINE_KHR: VkSemaphoreTypeKHR;



/**
  * 
  * @member VK_GEOMETRY_OPAQUE_BIT_KHR
  * @member VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR
  * @member VK_GEOMETRY_OPAQUE_BIT_NV
  * @member VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV
  */
export enum VkGeometryFlagBitsNV {
  VK_GEOMETRY_OPAQUE_BIT_KHR,
  VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR,
  VK_GEOMETRY_OPAQUE_BIT_NV,
  VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV,
  
}

declare const VK_GEOMETRY_OPAQUE_BIT_KHR: VkGeometryFlagBitsNV;
declare const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR: VkGeometryFlagBitsNV;
declare const VK_GEOMETRY_OPAQUE_BIT_NV: VkGeometryFlagBitsNV;
declare const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV: VkGeometryFlagBitsNV;



/**
  * 
  * @member VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR
  * @member VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR
  * @member VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR
  * @member VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR
  * @member VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV
  * @member VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV
  * @member VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV
  * @member VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV
  */
export enum VkGeometryInstanceFlagBitsNV {
  VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR,
  VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR,
  VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR,
  VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR,
  VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV,
  VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV,
  VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV,
  VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV,
  
}

declare const VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR: VkGeometryInstanceFlagBitsNV;
declare const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR: VkGeometryInstanceFlagBitsNV;
declare const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR: VkGeometryInstanceFlagBitsNV;
declare const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR: VkGeometryInstanceFlagBitsNV;
declare const VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV: VkGeometryInstanceFlagBitsNV;
declare const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV: VkGeometryInstanceFlagBitsNV;
declare const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV: VkGeometryInstanceFlagBitsNV;
declare const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV: VkGeometryInstanceFlagBitsNV;



/**
  * 
  * @member VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV
  * @member VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV
  * @member VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV
  * @member VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV
  * @member VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV
  */
export enum VkBuildAccelerationStructureFlagBitsNV {
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV,
  
}

declare const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR: VkBuildAccelerationStructureFlagBitsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR: VkBuildAccelerationStructureFlagBitsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR: VkBuildAccelerationStructureFlagBitsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR: VkBuildAccelerationStructureFlagBitsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR: VkBuildAccelerationStructureFlagBitsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV: VkBuildAccelerationStructureFlagBitsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV: VkBuildAccelerationStructureFlagBitsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV: VkBuildAccelerationStructureFlagBitsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV: VkBuildAccelerationStructureFlagBitsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV: VkBuildAccelerationStructureFlagBitsNV;



/**
  * 
  * @member VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR
  * @member VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR
  * @member VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR
  * @member VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR
  * @member VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV
  * @member VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV
  */
export enum VkCopyAccelerationStructureModeNV {
  VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,
  VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR,
  VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR,
  VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR,
  VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV,
  VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV,
  
}

declare const VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR: VkCopyAccelerationStructureModeNV;
declare const VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR: VkCopyAccelerationStructureModeNV;
declare const VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR: VkCopyAccelerationStructureModeNV;
declare const VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR: VkCopyAccelerationStructureModeNV;
declare const VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV: VkCopyAccelerationStructureModeNV;
declare const VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV: VkCopyAccelerationStructureModeNV;



/**
  * 
  * @member VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR
  * @member VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR
  * @member VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR
  * @member VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV
  * @member VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV
  */
export enum VkAccelerationStructureTypeNV {
  VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR,
  VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,
  VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR,
  VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV,
  VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV,
  
}

declare const VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR: VkAccelerationStructureTypeNV;
declare const VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR: VkAccelerationStructureTypeNV;
declare const VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR: VkAccelerationStructureTypeNV;
declare const VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV: VkAccelerationStructureTypeNV;
declare const VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV: VkAccelerationStructureTypeNV;



/**
  * 
  * @member VK_GEOMETRY_TYPE_TRIANGLES_KHR
  * @member VK_GEOMETRY_TYPE_AABBS_KHR
  * @member VK_GEOMETRY_TYPE_INSTANCES_KHR
  * @member VK_GEOMETRY_TYPE_TRIANGLES_NV
  * @member VK_GEOMETRY_TYPE_AABBS_NV
  */
export enum VkGeometryTypeNV {
  VK_GEOMETRY_TYPE_TRIANGLES_KHR,
  VK_GEOMETRY_TYPE_AABBS_KHR,
  VK_GEOMETRY_TYPE_INSTANCES_KHR,
  VK_GEOMETRY_TYPE_TRIANGLES_NV,
  VK_GEOMETRY_TYPE_AABBS_NV,
  
}

declare const VK_GEOMETRY_TYPE_TRIANGLES_KHR: VkGeometryTypeNV;
declare const VK_GEOMETRY_TYPE_AABBS_KHR: VkGeometryTypeNV;
declare const VK_GEOMETRY_TYPE_INSTANCES_KHR: VkGeometryTypeNV;
declare const VK_GEOMETRY_TYPE_TRIANGLES_NV: VkGeometryTypeNV;
declare const VK_GEOMETRY_TYPE_AABBS_NV: VkGeometryTypeNV;



/**
  * 
  * @member VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR
  * @member VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR
  * @member VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR
  * @member VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV
  * @member VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV
  * @member VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV
  */
export enum VkRayTracingShaderGroupTypeNV {
  VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,
  VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR,
  VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR,
  VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV,
  VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV,
  VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV,
  
}

declare const VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR: VkRayTracingShaderGroupTypeNV;
declare const VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR: VkRayTracingShaderGroupTypeNV;
declare const VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR: VkRayTracingShaderGroupTypeNV;
declare const VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV: VkRayTracingShaderGroupTypeNV;
declare const VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV: VkRayTracingShaderGroupTypeNV;
declare const VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV: VkRayTracingShaderGroupTypeNV;



/**
  * 
  * @member VK_SEMAPHORE_WAIT_ANY_BIT
  * @member VK_SEMAPHORE_WAIT_ANY_BIT_KHR
  */
export enum VkSemaphoreWaitFlagBitsKHR {
  VK_SEMAPHORE_WAIT_ANY_BIT,
  VK_SEMAPHORE_WAIT_ANY_BIT_KHR,
  
}

declare const VK_SEMAPHORE_WAIT_ANY_BIT: VkSemaphoreWaitFlagBitsKHR;
declare const VK_SEMAPHORE_WAIT_ANY_BIT_KHR: VkSemaphoreWaitFlagBitsKHR;



/**
  * 
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR
  */
export enum VkExternalMemoryHandleTypeFlagBitsKHR {
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR,
  
}

declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR: VkExternalMemoryHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR: VkExternalMemoryHandleTypeFlagBitsKHR;



/**
  * 
  * @member VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT
  * @member VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT
  * @member VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT
  * @member VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR
  */
export enum VkExternalMemoryFeatureFlagBitsKHR {
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR,
  
}

declare const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT: VkExternalMemoryFeatureFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT: VkExternalMemoryFeatureFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT: VkExternalMemoryFeatureFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR: VkExternalMemoryFeatureFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR: VkExternalMemoryFeatureFlagBitsKHR;
declare const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR: VkExternalMemoryFeatureFlagBitsKHR;



/**
  * 
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR
  */
export enum VkExternalSemaphoreHandleTypeFlagBitsKHR {
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
  
}

declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT: VkExternalSemaphoreHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT: VkExternalSemaphoreHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: VkExternalSemaphoreHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT: VkExternalSemaphoreHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT: VkExternalSemaphoreHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT: VkExternalSemaphoreHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: VkExternalSemaphoreHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: VkExternalSemaphoreHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: VkExternalSemaphoreHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR: VkExternalSemaphoreHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR: VkExternalSemaphoreHandleTypeFlagBitsKHR;



/**
  * 
  * @member VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT
  * @member VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT
  * @member VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR
  * @member VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR
  */
export enum VkExternalSemaphoreFeatureFlagBitsKHR {
  VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
  VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
  VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR,
  
}

declare const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT: VkExternalSemaphoreFeatureFlagBitsKHR;
declare const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT: VkExternalSemaphoreFeatureFlagBitsKHR;
declare const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR: VkExternalSemaphoreFeatureFlagBitsKHR;
declare const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR: VkExternalSemaphoreFeatureFlagBitsKHR;



/**
  * 
  * @member VK_SEMAPHORE_IMPORT_TEMPORARY_BIT
  * @member VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR
  */
export enum VkSemaphoreImportFlagBitsKHR {
  VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
  VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR,
  
}

declare const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT: VkSemaphoreImportFlagBitsKHR;
declare const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR: VkSemaphoreImportFlagBitsKHR;



/**
  * 
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR
  */
export enum VkExternalFenceHandleTypeFlagBitsKHR {
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
  
}

declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT: VkExternalFenceHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT: VkExternalFenceHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: VkExternalFenceHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT: VkExternalFenceHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: VkExternalFenceHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: VkExternalFenceHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: VkExternalFenceHandleTypeFlagBitsKHR;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR: VkExternalFenceHandleTypeFlagBitsKHR;



/**
  * 
  * @member VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT
  * @member VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT
  * @member VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR
  * @member VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR
  */
export enum VkExternalFenceFeatureFlagBitsKHR {
  VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
  VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
  VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR,
  VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR,
  
}

declare const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT: VkExternalFenceFeatureFlagBitsKHR;
declare const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT: VkExternalFenceFeatureFlagBitsKHR;
declare const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR: VkExternalFenceFeatureFlagBitsKHR;
declare const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR: VkExternalFenceFeatureFlagBitsKHR;



/**
  * 
  * @member VK_FENCE_IMPORT_TEMPORARY_BIT
  * @member VK_FENCE_IMPORT_TEMPORARY_BIT_KHR
  */
export enum VkFenceImportFlagBitsKHR {
  VK_FENCE_IMPORT_TEMPORARY_BIT,
  VK_FENCE_IMPORT_TEMPORARY_BIT_KHR,
  
}

declare const VK_FENCE_IMPORT_TEMPORARY_BIT: VkFenceImportFlagBitsKHR;
declare const VK_FENCE_IMPORT_TEMPORARY_BIT_KHR: VkFenceImportFlagBitsKHR;



/**
  * 
  * @member VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT
  * @member VK_PEER_MEMORY_FEATURE_COPY_DST_BIT
  * @member VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT
  * @member VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT
  * @member VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR
  * @member VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR
  * @member VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR
  * @member VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR
  */
export enum VkPeerMemoryFeatureFlagBitsKHR {
  VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
  VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
  VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
  VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
  VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR,
  VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR,
  VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR,
  VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR,
  
}

declare const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT: VkPeerMemoryFeatureFlagBitsKHR;
declare const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT: VkPeerMemoryFeatureFlagBitsKHR;
declare const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT: VkPeerMemoryFeatureFlagBitsKHR;
declare const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT: VkPeerMemoryFeatureFlagBitsKHR;
declare const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR: VkPeerMemoryFeatureFlagBitsKHR;
declare const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR: VkPeerMemoryFeatureFlagBitsKHR;
declare const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR: VkPeerMemoryFeatureFlagBitsKHR;
declare const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR: VkPeerMemoryFeatureFlagBitsKHR;



/**
  * 
  * @member VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT
  * @member VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT
  * @member VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT
  * @member VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR
  * @member VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR
  * @member VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR
  */
export enum VkMemoryAllocateFlagBitsKHR {
  VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT,
  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
  VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR,
  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR,
  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR,
  
}

declare const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT: VkMemoryAllocateFlagBitsKHR;
declare const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT: VkMemoryAllocateFlagBitsKHR;
declare const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: VkMemoryAllocateFlagBitsKHR;
declare const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR: VkMemoryAllocateFlagBitsKHR;
declare const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR: VkMemoryAllocateFlagBitsKHR;
declare const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: VkMemoryAllocateFlagBitsKHR;



/**
  * 
  * @member VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT
  * @member VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT
  * @member VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR
  * @member VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR
  */
export enum VkTessellationDomainOriginKHR {
  VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
  VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
  VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR,
  VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR,
  
}

declare const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT: VkTessellationDomainOriginKHR;
declare const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT: VkTessellationDomainOriginKHR;
declare const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR: VkTessellationDomainOriginKHR;
declare const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR: VkTessellationDomainOriginKHR;



/**
  * 
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR
  * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR
  */
export enum VkSamplerYcbcrModelConversionKHR {
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR,
  
}

declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY: VkSamplerYcbcrModelConversionKHR;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY: VkSamplerYcbcrModelConversionKHR;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709: VkSamplerYcbcrModelConversionKHR;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601: VkSamplerYcbcrModelConversionKHR;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020: VkSamplerYcbcrModelConversionKHR;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR: VkSamplerYcbcrModelConversionKHR;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR: VkSamplerYcbcrModelConversionKHR;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR: VkSamplerYcbcrModelConversionKHR;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR: VkSamplerYcbcrModelConversionKHR;
declare const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR: VkSamplerYcbcrModelConversionKHR;



/**
  * 
  * @member VK_SAMPLER_YCBCR_RANGE_ITU_FULL
  * @member VK_SAMPLER_YCBCR_RANGE_ITU_NARROW
  * @member VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR
  * @member VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR
  */
export enum VkSamplerYcbcrRangeKHR {
  VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
  VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
  VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR,
  VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR,
  
}

declare const VK_SAMPLER_YCBCR_RANGE_ITU_FULL: VkSamplerYcbcrRangeKHR;
declare const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW: VkSamplerYcbcrRangeKHR;
declare const VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR: VkSamplerYcbcrRangeKHR;
declare const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR: VkSamplerYcbcrRangeKHR;



/**
  * 
  * @member VK_CHROMA_LOCATION_COSITED_EVEN
  * @member VK_CHROMA_LOCATION_MIDPOINT
  * @member VK_CHROMA_LOCATION_COSITED_EVEN_KHR
  * @member VK_CHROMA_LOCATION_MIDPOINT_KHR
  */
export enum VkChromaLocationKHR {
  VK_CHROMA_LOCATION_COSITED_EVEN,
  VK_CHROMA_LOCATION_MIDPOINT,
  VK_CHROMA_LOCATION_COSITED_EVEN_KHR,
  VK_CHROMA_LOCATION_MIDPOINT_KHR,
  
}

declare const VK_CHROMA_LOCATION_COSITED_EVEN: VkChromaLocationKHR;
declare const VK_CHROMA_LOCATION_MIDPOINT: VkChromaLocationKHR;
declare const VK_CHROMA_LOCATION_COSITED_EVEN_KHR: VkChromaLocationKHR;
declare const VK_CHROMA_LOCATION_MIDPOINT_KHR: VkChromaLocationKHR;



/**
  * 
  * @member VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE
  * @member VK_SAMPLER_REDUCTION_MODE_MIN
  * @member VK_SAMPLER_REDUCTION_MODE_MAX
  * @member VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT
  * @member VK_SAMPLER_REDUCTION_MODE_MIN_EXT
  * @member VK_SAMPLER_REDUCTION_MODE_MAX_EXT
  */
export enum VkSamplerReductionModeEXT {
  VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,
  VK_SAMPLER_REDUCTION_MODE_MIN,
  VK_SAMPLER_REDUCTION_MODE_MAX,
  VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT,
  VK_SAMPLER_REDUCTION_MODE_MIN_EXT,
  VK_SAMPLER_REDUCTION_MODE_MAX_EXT,
  
}

declare const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE: VkSamplerReductionModeEXT;
declare const VK_SAMPLER_REDUCTION_MODE_MIN: VkSamplerReductionModeEXT;
declare const VK_SAMPLER_REDUCTION_MODE_MAX: VkSamplerReductionModeEXT;
declare const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT: VkSamplerReductionModeEXT;
declare const VK_SAMPLER_REDUCTION_MODE_MIN_EXT: VkSamplerReductionModeEXT;
declare const VK_SAMPLER_REDUCTION_MODE_MAX_EXT: VkSamplerReductionModeEXT;



/**
  * 
  * @member VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY
  * @member VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL
  * @member VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE
  * @member VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR
  * @member VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR
  * @member VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR
  */
export enum VkShaderFloatControlsIndependenceKHR {
  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,
  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,
  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE,
  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR,
  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR,
  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR,
  
}

declare const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY: VkShaderFloatControlsIndependenceKHR;
declare const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL: VkShaderFloatControlsIndependenceKHR;
declare const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE: VkShaderFloatControlsIndependenceKHR;
declare const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR: VkShaderFloatControlsIndependenceKHR;
declare const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR: VkShaderFloatControlsIndependenceKHR;
declare const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR: VkShaderFloatControlsIndependenceKHR;



/**
  * 
  * @member VK_DRIVER_ID_AMD_PROPRIETARY
  * @member VK_DRIVER_ID_AMD_OPEN_SOURCE
  * @member VK_DRIVER_ID_MESA_RADV
  * @member VK_DRIVER_ID_NVIDIA_PROPRIETARY
  * @member VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS
  * @member VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA
  * @member VK_DRIVER_ID_IMAGINATION_PROPRIETARY
  * @member VK_DRIVER_ID_QUALCOMM_PROPRIETARY
  * @member VK_DRIVER_ID_ARM_PROPRIETARY
  * @member VK_DRIVER_ID_GOOGLE_SWIFTSHADER
  * @member VK_DRIVER_ID_GGP_PROPRIETARY
  * @member VK_DRIVER_ID_BROADCOM_PROPRIETARY
  * @member VK_DRIVER_ID_MESA_LLVMPIPE
  * @member VK_DRIVER_ID_MOLTENVK
  * @member VK_DRIVER_ID_AMD_PROPRIETARY_KHR
  * @member VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR
  * @member VK_DRIVER_ID_MESA_RADV_KHR
  * @member VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR
  * @member VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR
  * @member VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR
  * @member VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR
  * @member VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR
  * @member VK_DRIVER_ID_ARM_PROPRIETARY_KHR
  * @member VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR
  * @member VK_DRIVER_ID_GGP_PROPRIETARY_KHR
  * @member VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR
  */
export enum VkDriverIdKHR {
  VK_DRIVER_ID_AMD_PROPRIETARY,
  VK_DRIVER_ID_AMD_OPEN_SOURCE,
  VK_DRIVER_ID_MESA_RADV,
  VK_DRIVER_ID_NVIDIA_PROPRIETARY,
  VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,
  VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,
  VK_DRIVER_ID_IMAGINATION_PROPRIETARY,
  VK_DRIVER_ID_QUALCOMM_PROPRIETARY,
  VK_DRIVER_ID_ARM_PROPRIETARY,
  VK_DRIVER_ID_GOOGLE_SWIFTSHADER,
  VK_DRIVER_ID_GGP_PROPRIETARY,
  VK_DRIVER_ID_BROADCOM_PROPRIETARY,
  VK_DRIVER_ID_MESA_LLVMPIPE,
  VK_DRIVER_ID_MOLTENVK,
  VK_DRIVER_ID_AMD_PROPRIETARY_KHR,
  VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR,
  VK_DRIVER_ID_MESA_RADV_KHR,
  VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR,
  VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR,
  VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR,
  VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR,
  VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR,
  VK_DRIVER_ID_ARM_PROPRIETARY_KHR,
  VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR,
  VK_DRIVER_ID_GGP_PROPRIETARY_KHR,
  VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR,
  
}

declare const VK_DRIVER_ID_AMD_PROPRIETARY: VkDriverIdKHR;
declare const VK_DRIVER_ID_AMD_OPEN_SOURCE: VkDriverIdKHR;
declare const VK_DRIVER_ID_MESA_RADV: VkDriverIdKHR;
declare const VK_DRIVER_ID_NVIDIA_PROPRIETARY: VkDriverIdKHR;
declare const VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS: VkDriverIdKHR;
declare const VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA: VkDriverIdKHR;
declare const VK_DRIVER_ID_IMAGINATION_PROPRIETARY: VkDriverIdKHR;
declare const VK_DRIVER_ID_QUALCOMM_PROPRIETARY: VkDriverIdKHR;
declare const VK_DRIVER_ID_ARM_PROPRIETARY: VkDriverIdKHR;
declare const VK_DRIVER_ID_GOOGLE_SWIFTSHADER: VkDriverIdKHR;
declare const VK_DRIVER_ID_GGP_PROPRIETARY: VkDriverIdKHR;
declare const VK_DRIVER_ID_BROADCOM_PROPRIETARY: VkDriverIdKHR;
declare const VK_DRIVER_ID_MESA_LLVMPIPE: VkDriverIdKHR;
declare const VK_DRIVER_ID_MOLTENVK: VkDriverIdKHR;
declare const VK_DRIVER_ID_AMD_PROPRIETARY_KHR: VkDriverIdKHR;
declare const VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR: VkDriverIdKHR;
declare const VK_DRIVER_ID_MESA_RADV_KHR: VkDriverIdKHR;
declare const VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR: VkDriverIdKHR;
declare const VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR: VkDriverIdKHR;
declare const VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR: VkDriverIdKHR;
declare const VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR: VkDriverIdKHR;
declare const VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR: VkDriverIdKHR;
declare const VK_DRIVER_ID_ARM_PROPRIETARY_KHR: VkDriverIdKHR;
declare const VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR: VkDriverIdKHR;
declare const VK_DRIVER_ID_GGP_PROPRIETARY_KHR: VkDriverIdKHR;
declare const VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR: VkDriverIdKHR;



/**
  * 
  * @member VK_GEOMETRY_OPAQUE_BIT_KHR
  * @member VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR
  * @member VK_GEOMETRY_OPAQUE_BIT_NV
  * @member VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV
  */
export enum VkGeometryFlagsNV {
  VK_GEOMETRY_OPAQUE_BIT_KHR,
  VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR,
  VK_GEOMETRY_OPAQUE_BIT_NV,
  VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV,
  
}

declare const VK_GEOMETRY_OPAQUE_BIT_KHR: VkGeometryFlagsNV;
declare const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR: VkGeometryFlagsNV;
declare const VK_GEOMETRY_OPAQUE_BIT_NV: VkGeometryFlagsNV;
declare const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV: VkGeometryFlagsNV;



/**
  * 
  * @member VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR
  * @member VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR
  * @member VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR
  * @member VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR
  * @member VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV
  * @member VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV
  * @member VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV
  * @member VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV
  */
export enum VkGeometryInstanceFlagsNV {
  VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR,
  VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR,
  VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR,
  VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR,
  VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV,
  VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV,
  VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV,
  VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV,
  
}

declare const VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR: VkGeometryInstanceFlagsNV;
declare const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR: VkGeometryInstanceFlagsNV;
declare const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR: VkGeometryInstanceFlagsNV;
declare const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR: VkGeometryInstanceFlagsNV;
declare const VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV: VkGeometryInstanceFlagsNV;
declare const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV: VkGeometryInstanceFlagsNV;
declare const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV: VkGeometryInstanceFlagsNV;
declare const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV: VkGeometryInstanceFlagsNV;



/**
  * 
  * @member VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR
  * @member VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV
  * @member VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV
  * @member VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV
  * @member VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV
  * @member VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV
  */
export enum VkBuildAccelerationStructureFlagsNV {
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR,
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV,
  
}

declare const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR: VkBuildAccelerationStructureFlagsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR: VkBuildAccelerationStructureFlagsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR: VkBuildAccelerationStructureFlagsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR: VkBuildAccelerationStructureFlagsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR: VkBuildAccelerationStructureFlagsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV: VkBuildAccelerationStructureFlagsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV: VkBuildAccelerationStructureFlagsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV: VkBuildAccelerationStructureFlagsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV: VkBuildAccelerationStructureFlagsNV;
declare const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV: VkBuildAccelerationStructureFlagsNV;



/**
  * 
  * @member VK_SEMAPHORE_WAIT_ANY_BIT
  * @member VK_SEMAPHORE_WAIT_ANY_BIT_KHR
  */
export enum VkSemaphoreWaitFlagsKHR {
  VK_SEMAPHORE_WAIT_ANY_BIT,
  VK_SEMAPHORE_WAIT_ANY_BIT_KHR,
  
}

declare const VK_SEMAPHORE_WAIT_ANY_BIT: VkSemaphoreWaitFlagsKHR;
declare const VK_SEMAPHORE_WAIT_ANY_BIT_KHR: VkSemaphoreWaitFlagsKHR;



/**
  * 
  * @member VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT
  * @member VK_PEER_MEMORY_FEATURE_COPY_DST_BIT
  * @member VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT
  * @member VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT
  * @member VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR
  * @member VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR
  * @member VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR
  * @member VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR
  */
export enum VkPeerMemoryFeatureFlagsKHR {
  VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
  VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
  VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
  VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
  VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR,
  VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR,
  VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR,
  VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR,
  
}

declare const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT: VkPeerMemoryFeatureFlagsKHR;
declare const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT: VkPeerMemoryFeatureFlagsKHR;
declare const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT: VkPeerMemoryFeatureFlagsKHR;
declare const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT: VkPeerMemoryFeatureFlagsKHR;
declare const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR: VkPeerMemoryFeatureFlagsKHR;
declare const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR: VkPeerMemoryFeatureFlagsKHR;
declare const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR: VkPeerMemoryFeatureFlagsKHR;
declare const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR: VkPeerMemoryFeatureFlagsKHR;



/**
  * 
  * @member VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT
  * @member VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT
  * @member VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT
  * @member VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR
  * @member VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR
  * @member VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR
  */
export enum VkMemoryAllocateFlagsKHR {
  VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT,
  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
  VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR,
  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR,
  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR,
  
}

declare const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT: VkMemoryAllocateFlagsKHR;
declare const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT: VkMemoryAllocateFlagsKHR;
declare const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: VkMemoryAllocateFlagsKHR;
declare const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR: VkMemoryAllocateFlagsKHR;
declare const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR: VkMemoryAllocateFlagsKHR;
declare const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: VkMemoryAllocateFlagsKHR;



/**
  * 
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR
  */
export enum VkExternalMemoryHandleTypeFlagsKHR {
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR,
  
}

declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR: VkExternalMemoryHandleTypeFlagsKHR;
declare const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR: VkExternalMemoryHandleTypeFlagsKHR;



/**
  * 
  * @member VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT
  * @member VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT
  * @member VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT
  * @member VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR
  * @member VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR
  */
export enum VkExternalMemoryFeatureFlagsKHR {
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR,
  
}

declare const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT: VkExternalMemoryFeatureFlagsKHR;
declare const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT: VkExternalMemoryFeatureFlagsKHR;
declare const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT: VkExternalMemoryFeatureFlagsKHR;
declare const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR: VkExternalMemoryFeatureFlagsKHR;
declare const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR: VkExternalMemoryFeatureFlagsKHR;
declare const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR: VkExternalMemoryFeatureFlagsKHR;



/**
  * 
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR
  * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR
  */
export enum VkExternalSemaphoreHandleTypeFlagsKHR {
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
  
}

declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT: VkExternalSemaphoreHandleTypeFlagsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT: VkExternalSemaphoreHandleTypeFlagsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: VkExternalSemaphoreHandleTypeFlagsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT: VkExternalSemaphoreHandleTypeFlagsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT: VkExternalSemaphoreHandleTypeFlagsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT: VkExternalSemaphoreHandleTypeFlagsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: VkExternalSemaphoreHandleTypeFlagsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: VkExternalSemaphoreHandleTypeFlagsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: VkExternalSemaphoreHandleTypeFlagsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR: VkExternalSemaphoreHandleTypeFlagsKHR;
declare const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR: VkExternalSemaphoreHandleTypeFlagsKHR;



/**
  * 
  * @member VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT
  * @member VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT
  * @member VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR
  * @member VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR
  */
export enum VkExternalSemaphoreFeatureFlagsKHR {
  VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
  VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
  VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR,
  
}

declare const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT: VkExternalSemaphoreFeatureFlagsKHR;
declare const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT: VkExternalSemaphoreFeatureFlagsKHR;
declare const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR: VkExternalSemaphoreFeatureFlagsKHR;
declare const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR: VkExternalSemaphoreFeatureFlagsKHR;



/**
  * 
  * @member VK_SEMAPHORE_IMPORT_TEMPORARY_BIT
  * @member VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR
  */
export enum VkSemaphoreImportFlagsKHR {
  VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
  VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR,
  
}

declare const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT: VkSemaphoreImportFlagsKHR;
declare const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR: VkSemaphoreImportFlagsKHR;



/**
  * 
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR
  * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR
  */
export enum VkExternalFenceHandleTypeFlagsKHR {
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
  
}

declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT: VkExternalFenceHandleTypeFlagsKHR;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT: VkExternalFenceHandleTypeFlagsKHR;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: VkExternalFenceHandleTypeFlagsKHR;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT: VkExternalFenceHandleTypeFlagsKHR;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: VkExternalFenceHandleTypeFlagsKHR;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: VkExternalFenceHandleTypeFlagsKHR;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: VkExternalFenceHandleTypeFlagsKHR;
declare const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR: VkExternalFenceHandleTypeFlagsKHR;



/**
  * 
  * @member VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT
  * @member VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT
  * @member VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR
  * @member VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR
  */
export enum VkExternalFenceFeatureFlagsKHR {
  VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
  VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
  VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR,
  VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR,
  
}

declare const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT: VkExternalFenceFeatureFlagsKHR;
declare const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT: VkExternalFenceFeatureFlagsKHR;
declare const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR: VkExternalFenceFeatureFlagsKHR;
declare const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR: VkExternalFenceFeatureFlagsKHR;



/**
  * 
  * @member VK_FENCE_IMPORT_TEMPORARY_BIT
  * @member VK_FENCE_IMPORT_TEMPORARY_BIT_KHR
  */
export enum VkFenceImportFlagsKHR {
  VK_FENCE_IMPORT_TEMPORARY_BIT,
  VK_FENCE_IMPORT_TEMPORARY_BIT_KHR,
  
}

declare const VK_FENCE_IMPORT_TEMPORARY_BIT: VkFenceImportFlagsKHR;
declare const VK_FENCE_IMPORT_TEMPORARY_BIT_KHR: VkFenceImportFlagsKHR;



/**
  * 
  * @member VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT
  * @member VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT
  * @member VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT
  * @member VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT
  * @member VK_DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM
  * @member VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT
  * @member VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT
  * @member VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT
  * @member VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT
  */
export enum VkDescriptorBindingFlagsEXT {
  VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT,
  VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT,
  VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT,
  VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT,
  VK_DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM,
  VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT,
  VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT,
  VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT,
  VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT,
  
}

declare const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT: VkDescriptorBindingFlagsEXT;
declare const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT: VkDescriptorBindingFlagsEXT;
declare const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT: VkDescriptorBindingFlagsEXT;
declare const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT: VkDescriptorBindingFlagsEXT;
declare const VK_DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM: VkDescriptorBindingFlagsEXT;
declare const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT: VkDescriptorBindingFlagsEXT;
declare const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT: VkDescriptorBindingFlagsEXT;
declare const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT: VkDescriptorBindingFlagsEXT;
declare const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT: VkDescriptorBindingFlagsEXT;



/**
  * 
  * @member VK_RESOLVE_MODE_NONE
  * @member VK_RESOLVE_MODE_SAMPLE_ZERO_BIT
  * @member VK_RESOLVE_MODE_AVERAGE_BIT
  * @member VK_RESOLVE_MODE_MIN_BIT
  * @member VK_RESOLVE_MODE_MAX_BIT
  * @member VK_RESOLVE_MODE_NONE_KHR
  * @member VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR
  * @member VK_RESOLVE_MODE_AVERAGE_BIT_KHR
  * @member VK_RESOLVE_MODE_MIN_BIT_KHR
  * @member VK_RESOLVE_MODE_MAX_BIT_KHR
  */
export enum VkResolveModeFlagsKHR {
  VK_RESOLVE_MODE_NONE,
  VK_RESOLVE_MODE_SAMPLE_ZERO_BIT,
  VK_RESOLVE_MODE_AVERAGE_BIT,
  VK_RESOLVE_MODE_MIN_BIT,
  VK_RESOLVE_MODE_MAX_BIT,
  VK_RESOLVE_MODE_NONE_KHR,
  VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR,
  VK_RESOLVE_MODE_AVERAGE_BIT_KHR,
  VK_RESOLVE_MODE_MIN_BIT_KHR,
  VK_RESOLVE_MODE_MAX_BIT_KHR,
  
}

declare const VK_RESOLVE_MODE_NONE: VkResolveModeFlagsKHR;
declare const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT: VkResolveModeFlagsKHR;
declare const VK_RESOLVE_MODE_AVERAGE_BIT: VkResolveModeFlagsKHR;
declare const VK_RESOLVE_MODE_MIN_BIT: VkResolveModeFlagsKHR;
declare const VK_RESOLVE_MODE_MAX_BIT: VkResolveModeFlagsKHR;
declare const VK_RESOLVE_MODE_NONE_KHR: VkResolveModeFlagsKHR;
declare const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR: VkResolveModeFlagsKHR;
declare const VK_RESOLVE_MODE_AVERAGE_BIT_KHR: VkResolveModeFlagsKHR;
declare const VK_RESOLVE_MODE_MIN_BIT_KHR: VkResolveModeFlagsKHR;
declare const VK_RESOLVE_MODE_MAX_BIT_KHR: VkResolveModeFlagsKHR;





  /**
   * 
   */
declare interface VkDebugUtilsMessengerEXT {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkDebugUtilsMessengerEXTConstructor {
  readonly prototype: VkDebugUtilsMessengerEXT;
  new(): VkDebugUtilsMessengerEXT;

}

declare var VkDebugUtilsMessengerEXT: VkDebugUtilsMessengerEXTConstructor;


  /**
   * 
   */
declare interface VkDebugReportCallbackEXT {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkDebugReportCallbackEXTConstructor {
  readonly prototype: VkDebugReportCallbackEXT;
  new(): VkDebugReportCallbackEXT;

}

declare var VkDebugReportCallbackEXT: VkDebugReportCallbackEXTConstructor;


  /**
   * 
   */
declare interface VkSwapchainKHR {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkSwapchainKHRConstructor {
  readonly prototype: VkSwapchainKHR;
  new(): VkSwapchainKHR;

}

declare var VkSwapchainKHR: VkSwapchainKHRConstructor;


  /**
   * 
   */
declare interface VkSurfaceKHR {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkSurfaceKHRConstructor {
  readonly prototype: VkSurfaceKHR;
  new(): VkSurfaceKHR;

}

declare var VkSurfaceKHR: VkSurfaceKHRConstructor;


  /**
   * 
   */
declare interface VkDisplayModeKHR {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkDisplayModeKHRConstructor {
  readonly prototype: VkDisplayModeKHR;
  new(): VkDisplayModeKHR;

}

declare var VkDisplayModeKHR: VkDisplayModeKHRConstructor;


  /**
   * 
   */
declare interface VkDisplayKHR {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkDisplayKHRConstructor {
  readonly prototype: VkDisplayKHR;
  new(): VkDisplayKHR;

}

declare var VkDisplayKHR: VkDisplayKHRConstructor;


  /**
   * 
   */
declare interface VkPrivateDataSlotEXT {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkPrivateDataSlotEXTConstructor {
  readonly prototype: VkPrivateDataSlotEXT;
  new(): VkPrivateDataSlotEXT;

}

declare var VkPrivateDataSlotEXT: VkPrivateDataSlotEXTConstructor;


  /**
   * 
   */
declare interface VkDeferredOperationKHR {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkDeferredOperationKHRConstructor {
  readonly prototype: VkDeferredOperationKHR;
  new(): VkDeferredOperationKHR;

}

declare var VkDeferredOperationKHR: VkDeferredOperationKHRConstructor;


  /**
   * 
   */
declare interface VkPerformanceConfigurationINTEL {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkPerformanceConfigurationINTELConstructor {
  readonly prototype: VkPerformanceConfigurationINTEL;
  new(): VkPerformanceConfigurationINTEL;

}

declare var VkPerformanceConfigurationINTEL: VkPerformanceConfigurationINTELConstructor;


  /**
   * 
   */
declare interface VkAccelerationStructureNV {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkAccelerationStructureNVConstructor {
  readonly prototype: VkAccelerationStructureNV;
  new(): VkAccelerationStructureNV;

}

declare var VkAccelerationStructureNV: VkAccelerationStructureNVConstructor;


  /**
   * 
   */
declare interface VkAccelerationStructureKHR {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkAccelerationStructureKHRConstructor {
  readonly prototype: VkAccelerationStructureKHR;
  new(): VkAccelerationStructureKHR;

}

declare var VkAccelerationStructureKHR: VkAccelerationStructureKHRConstructor;


  /**
   * 
   */
declare interface VkValidationCacheEXT {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkValidationCacheEXTConstructor {
  readonly prototype: VkValidationCacheEXT;
  new(): VkValidationCacheEXT;

}

declare var VkValidationCacheEXT: VkValidationCacheEXTConstructor;


  /**
   * 
   */
declare interface VkSamplerYcbcrConversion {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkSamplerYcbcrConversionConstructor {
  readonly prototype: VkSamplerYcbcrConversion;
  new(): VkSamplerYcbcrConversion;

}

declare var VkSamplerYcbcrConversion: VkSamplerYcbcrConversionConstructor;


  /**
   * 
   */
declare interface VkDescriptorUpdateTemplate {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkDescriptorUpdateTemplateConstructor {
  readonly prototype: VkDescriptorUpdateTemplate;
  new(): VkDescriptorUpdateTemplate;

}

declare var VkDescriptorUpdateTemplate: VkDescriptorUpdateTemplateConstructor;


  /**
   * 
   */
declare interface VkIndirectCommandsLayoutNV {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkIndirectCommandsLayoutNVConstructor {
  readonly prototype: VkIndirectCommandsLayoutNV;
  new(): VkIndirectCommandsLayoutNV;

}

declare var VkIndirectCommandsLayoutNV: VkIndirectCommandsLayoutNVConstructor;


  /**
   * 
   */
declare interface VkPipelineCache {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkPipelineCacheConstructor {
  readonly prototype: VkPipelineCache;
  new(): VkPipelineCache;

}

declare var VkPipelineCache: VkPipelineCacheConstructor;


  /**
   * 
   */
declare interface VkRenderPass {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkRenderPassConstructor {
  readonly prototype: VkRenderPass;
  new(): VkRenderPass;

}

declare var VkRenderPass: VkRenderPassConstructor;


  /**
   * 
   */
declare interface VkFramebuffer {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkFramebufferConstructor {
  readonly prototype: VkFramebuffer;
  new(): VkFramebuffer;

}

declare var VkFramebuffer: VkFramebufferConstructor;


  /**
   * 
   */
declare interface VkQueryPool {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkQueryPoolConstructor {
  readonly prototype: VkQueryPool;
  new(): VkQueryPool;

}

declare var VkQueryPool: VkQueryPoolConstructor;


  /**
   * 
   */
declare interface VkEvent {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkEventConstructor {
  readonly prototype: VkEvent;
  new(): VkEvent;

}

declare var VkEvent: VkEventConstructor;


  /**
   * 
   */
declare interface VkSemaphore {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkSemaphoreConstructor {
  readonly prototype: VkSemaphore;
  new(): VkSemaphore;

}

declare var VkSemaphore: VkSemaphoreConstructor;


  /**
   * 
   */
declare interface VkFence {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkFenceConstructor {
  readonly prototype: VkFence;
  new(): VkFence;

}

declare var VkFence: VkFenceConstructor;


  /**
   * 
   */
declare interface VkDescriptorPool {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkDescriptorPoolConstructor {
  readonly prototype: VkDescriptorPool;
  new(): VkDescriptorPool;

}

declare var VkDescriptorPool: VkDescriptorPoolConstructor;


  /**
   * 
   */
declare interface VkDescriptorSetLayout {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkDescriptorSetLayoutConstructor {
  readonly prototype: VkDescriptorSetLayout;
  new(): VkDescriptorSetLayout;

}

declare var VkDescriptorSetLayout: VkDescriptorSetLayoutConstructor;


  /**
   * 
   */
declare interface VkDescriptorSet {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkDescriptorSetConstructor {
  readonly prototype: VkDescriptorSet;
  new(): VkDescriptorSet;

}

declare var VkDescriptorSet: VkDescriptorSetConstructor;


  /**
   * 
   */
declare interface VkSampler {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkSamplerConstructor {
  readonly prototype: VkSampler;
  new(): VkSampler;

}

declare var VkSampler: VkSamplerConstructor;


  /**
   * 
   */
declare interface VkPipelineLayout {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkPipelineLayoutConstructor {
  readonly prototype: VkPipelineLayout;
  new(): VkPipelineLayout;

}

declare var VkPipelineLayout: VkPipelineLayoutConstructor;


  /**
   * 
   */
declare interface VkPipeline {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkPipelineConstructor {
  readonly prototype: VkPipeline;
  new(): VkPipeline;

}

declare var VkPipeline: VkPipelineConstructor;


  /**
   * 
   */
declare interface VkShaderModule {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkShaderModuleConstructor {
  readonly prototype: VkShaderModule;
  new(): VkShaderModule;

}

declare var VkShaderModule: VkShaderModuleConstructor;


  /**
   * 
   */
declare interface VkImageView {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkImageViewConstructor {
  readonly prototype: VkImageView;
  new(): VkImageView;

}

declare var VkImageView: VkImageViewConstructor;


  /**
   * 
   */
declare interface VkImage {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkImageConstructor {
  readonly prototype: VkImage;
  new(): VkImage;

}

declare var VkImage: VkImageConstructor;


  /**
   * 
   */
declare interface VkBufferView {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkBufferViewConstructor {
  readonly prototype: VkBufferView;
  new(): VkBufferView;

}

declare var VkBufferView: VkBufferViewConstructor;


  /**
   * 
   */
declare interface VkBuffer {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkBufferConstructor {
  readonly prototype: VkBuffer;
  new(): VkBuffer;

}

declare var VkBuffer: VkBufferConstructor;


  /**
   * 
   */
declare interface VkCommandPool {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkCommandPoolConstructor {
  readonly prototype: VkCommandPool;
  new(): VkCommandPool;

}

declare var VkCommandPool: VkCommandPoolConstructor;


  /**
   * 
   */
declare interface VkDeviceMemory {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkDeviceMemoryConstructor {
  readonly prototype: VkDeviceMemory;
  new(): VkDeviceMemory;

}

declare var VkDeviceMemory: VkDeviceMemoryConstructor;


  /**
   * 
   */
declare interface VkCommandBuffer {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkCommandBufferConstructor {
  readonly prototype: VkCommandBuffer;
  new(): VkCommandBuffer;

}

declare var VkCommandBuffer: VkCommandBufferConstructor;


  /**
   * 
   */
declare interface VkQueue {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkQueueConstructor {
  readonly prototype: VkQueue;
  new(): VkQueue;

}

declare var VkQueue: VkQueueConstructor;


  /**
   * 
   */
declare interface VkDevice {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkDeviceConstructor {
  readonly prototype: VkDevice;
  new(): VkDevice;

}

declare var VkDevice: VkDeviceConstructor;


  /**
   * 
   */
declare interface VkPhysicalDevice {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkPhysicalDeviceConstructor {
  readonly prototype: VkPhysicalDevice;
  new(): VkPhysicalDevice;

}

declare var VkPhysicalDevice: VkPhysicalDeviceConstructor;


  /**
   * 
   */
declare interface VkInstance {

  /**
    * Memory reference to the original vulkan handle.
    */
  address: bigint;

}

declare interface VkInstanceConstructor {
  readonly prototype: VkInstance;
  new(): VkInstance;

}

declare var VkInstance: VkInstanceConstructor;













































  /**
   * 
   */
interface VkAccelerationStructureBuildSizesInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    accelerationStructureSize: bigint | number;

    /**
     *
     */
    updateScratchSize: bigint | number;

    /**
     *
     */
    buildScratchSize: bigint | number;

}

declare interface VkAccelerationStructureBuildSizesInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    accelerationStructureSize?: bigint | number;

    /**
     *
     */
    updateScratchSize?: bigint | number;

    /**
     *
     */
    buildScratchSize?: bigint | number;
}

declare interface VkAccelerationStructureBuildSizesInfoKHRConstructor {
  readonly prototype: VkAccelerationStructureBuildSizesInfoKHR;
  new(param?: VkAccelerationStructureBuildSizesInfoKHRInitializer | null): VkAccelerationStructureBuildSizesInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureBuildSizesInfoKHR: VkAccelerationStructureBuildSizesInfoKHRConstructor;



  /**
   * 
   */
interface VkPipelineFragmentShadingRateEnumStateCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shadingRateType: VkFragmentShadingRateTypeNV;

    /**
     *
     */
    shadingRate: VkFragmentShadingRateNV;

    /**
     *
     */
    combinerOps: number[] | null;

}

declare interface VkPipelineFragmentShadingRateEnumStateCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shadingRateType?: VkFragmentShadingRateTypeNV;

    /**
     *
     */
    shadingRate?: VkFragmentShadingRateNV;

    /**
     *
     */
    combinerOps?: number[] | null;
}

declare interface VkPipelineFragmentShadingRateEnumStateCreateInfoNVConstructor {
  readonly prototype: VkPipelineFragmentShadingRateEnumStateCreateInfoNV;
  new(param?: VkPipelineFragmentShadingRateEnumStateCreateInfoNVInitializer | null): VkPipelineFragmentShadingRateEnumStateCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineFragmentShadingRateEnumStateCreateInfoNV: VkPipelineFragmentShadingRateEnumStateCreateInfoNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    maxFragmentShadingRateInvocationCount: VkSampleCountFlagBits;

}

declare interface VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    maxFragmentShadingRateInvocationCount?: VkSampleCountFlagBits;
}

declare interface VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNVConstructor {
  readonly prototype: VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV;
  new(param?: VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNVInitializer | null): VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV: VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fragmentShadingRateEnums: boolean;

    /**
     *
     */
    supersampleFragmentShadingRates: boolean;

    /**
     *
     */
    noInvocationFragmentShadingRates: boolean;

}

declare interface VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fragmentShadingRateEnums?: boolean;

    /**
     *
     */
    supersampleFragmentShadingRates?: boolean;

    /**
     *
     */
    noInvocationFragmentShadingRates?: boolean;
}

declare interface VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNVConstructor {
  readonly prototype: VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV;
  new(param?: VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNVInitializer | null): VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV: VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderTerminateInvocation: boolean;

}

declare interface VkPhysicalDeviceShaderTerminateInvocationFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderTerminateInvocation?: boolean;
}

declare interface VkPhysicalDeviceShaderTerminateInvocationFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR;
  new(param?: VkPhysicalDeviceShaderTerminateInvocationFeaturesKHRInitializer | null): VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR: VkPhysicalDeviceShaderTerminateInvocationFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFragmentShadingRateKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly sampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly fragmentSize: VkExtent2D | null;

}

declare interface VkPhysicalDeviceFragmentShadingRateKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly sampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly fragmentSize?: VkExtent2D | null;
}

declare interface VkPhysicalDeviceFragmentShadingRateKHRConstructor {
  readonly prototype: VkPhysicalDeviceFragmentShadingRateKHR;
  new(param?: VkPhysicalDeviceFragmentShadingRateKHRInitializer | null): VkPhysicalDeviceFragmentShadingRateKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFragmentShadingRateKHR: VkPhysicalDeviceFragmentShadingRateKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly minFragmentShadingRateAttachmentTexelSize: VkExtent2D | null;

    /**
     *
     */
    readonly maxFragmentShadingRateAttachmentTexelSize: VkExtent2D | null;

    /**
     *
     */
    readonly maxFragmentShadingRateAttachmentTexelSizeAspectRatio: number;

    /**
     *
     */
    readonly primitiveFragmentShadingRateWithMultipleViewports: boolean;

    /**
     *
     */
    readonly layeredShadingRateAttachments: boolean;

    /**
     *
     */
    readonly fragmentShadingRateNonTrivialCombinerOps: boolean;

    /**
     *
     */
    readonly maxFragmentSize: VkExtent2D | null;

    /**
     *
     */
    readonly maxFragmentSizeAspectRatio: number;

    /**
     *
     */
    readonly maxFragmentShadingRateCoverageSamples: number;

    /**
     *
     */
    readonly maxFragmentShadingRateRasterizationSamples: VkSampleCountFlagBits;

    /**
     *
     */
    readonly fragmentShadingRateWithShaderDepthStencilWrites: boolean;

    /**
     *
     */
    readonly fragmentShadingRateWithSampleMask: boolean;

    /**
     *
     */
    readonly fragmentShadingRateWithShaderSampleMask: boolean;

    /**
     *
     */
    readonly fragmentShadingRateWithConservativeRasterization: boolean;

    /**
     *
     */
    readonly fragmentShadingRateWithFragmentShaderInterlock: boolean;

    /**
     *
     */
    readonly fragmentShadingRateWithCustomSampleLocations: boolean;

    /**
     *
     */
    readonly fragmentShadingRateStrictMultiplyCombiner: boolean;

}

declare interface VkPhysicalDeviceFragmentShadingRatePropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly minFragmentShadingRateAttachmentTexelSize?: VkExtent2D | null;

    /**
     *
     */
    readonly maxFragmentShadingRateAttachmentTexelSize?: VkExtent2D | null;

    /**
     *
     */
    readonly maxFragmentShadingRateAttachmentTexelSizeAspectRatio?: number;

    /**
     *
     */
    readonly primitiveFragmentShadingRateWithMultipleViewports?: boolean;

    /**
     *
     */
    readonly layeredShadingRateAttachments?: boolean;

    /**
     *
     */
    readonly fragmentShadingRateNonTrivialCombinerOps?: boolean;

    /**
     *
     */
    readonly maxFragmentSize?: VkExtent2D | null;

    /**
     *
     */
    readonly maxFragmentSizeAspectRatio?: number;

    /**
     *
     */
    readonly maxFragmentShadingRateCoverageSamples?: number;

    /**
     *
     */
    readonly maxFragmentShadingRateRasterizationSamples?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly fragmentShadingRateWithShaderDepthStencilWrites?: boolean;

    /**
     *
     */
    readonly fragmentShadingRateWithSampleMask?: boolean;

    /**
     *
     */
    readonly fragmentShadingRateWithShaderSampleMask?: boolean;

    /**
     *
     */
    readonly fragmentShadingRateWithConservativeRasterization?: boolean;

    /**
     *
     */
    readonly fragmentShadingRateWithFragmentShaderInterlock?: boolean;

    /**
     *
     */
    readonly fragmentShadingRateWithCustomSampleLocations?: boolean;

    /**
     *
     */
    readonly fragmentShadingRateStrictMultiplyCombiner?: boolean;
}

declare interface VkPhysicalDeviceFragmentShadingRatePropertiesKHRConstructor {
  readonly prototype: VkPhysicalDeviceFragmentShadingRatePropertiesKHR;
  new(param?: VkPhysicalDeviceFragmentShadingRatePropertiesKHRInitializer | null): VkPhysicalDeviceFragmentShadingRatePropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFragmentShadingRatePropertiesKHR: VkPhysicalDeviceFragmentShadingRatePropertiesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFragmentShadingRateFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pipelineFragmentShadingRate: boolean;

    /**
     *
     */
    primitiveFragmentShadingRate: boolean;

    /**
     *
     */
    attachmentFragmentShadingRate: boolean;

}

declare interface VkPhysicalDeviceFragmentShadingRateFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pipelineFragmentShadingRate?: boolean;

    /**
     *
     */
    primitiveFragmentShadingRate?: boolean;

    /**
     *
     */
    attachmentFragmentShadingRate?: boolean;
}

declare interface VkPhysicalDeviceFragmentShadingRateFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceFragmentShadingRateFeaturesKHR;
  new(param?: VkPhysicalDeviceFragmentShadingRateFeaturesKHRInitializer | null): VkPhysicalDeviceFragmentShadingRateFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFragmentShadingRateFeaturesKHR: VkPhysicalDeviceFragmentShadingRateFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPipelineFragmentShadingRateStateCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fragmentSize: VkExtent2D | null;

    /**
     *
     */
    combinerOps: number[] | null;

}

declare interface VkPipelineFragmentShadingRateStateCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fragmentSize?: VkExtent2D | null;

    /**
     *
     */
    combinerOps?: number[] | null;
}

declare interface VkPipelineFragmentShadingRateStateCreateInfoKHRConstructor {
  readonly prototype: VkPipelineFragmentShadingRateStateCreateInfoKHR;
  new(param?: VkPipelineFragmentShadingRateStateCreateInfoKHRInitializer | null): VkPipelineFragmentShadingRateStateCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineFragmentShadingRateStateCreateInfoKHR: VkPipelineFragmentShadingRateStateCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkFragmentShadingRateAttachmentInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pFragmentShadingRateAttachment: VkAttachmentReference2 | null;

    /**
     *
     */
    shadingRateAttachmentTexelSize: VkExtent2D | null;

}

declare interface VkFragmentShadingRateAttachmentInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pFragmentShadingRateAttachment?: VkAttachmentReference2 | null;

    /**
     *
     */
    shadingRateAttachmentTexelSize?: VkExtent2D | null;
}

declare interface VkFragmentShadingRateAttachmentInfoKHRConstructor {
  readonly prototype: VkFragmentShadingRateAttachmentInfoKHR;
  new(param?: VkFragmentShadingRateAttachmentInfoKHRInitializer | null): VkFragmentShadingRateAttachmentInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkFragmentShadingRateAttachmentInfoKHR: VkFragmentShadingRateAttachmentInfoKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderImageInt64Atomics: boolean;

    /**
     *
     */
    sparseImageInt64Atomics: boolean;

}

declare interface VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderImageInt64Atomics?: boolean;

    /**
     *
     */
    sparseImageInt64Atomics?: boolean;
}

declare interface VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT;
  new(param?: VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXTInitializer | null): VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT: VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXTConstructor;



  /**
   * 
   */
interface VkResolveImageInfo2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcImage: VkImage | null;

    /**
     *
     */
    srcImageLayout: VkImageLayout;

    /**
     *
     */
    dstImage: VkImage | null;

    /**
     *
     */
    dstImageLayout: VkImageLayout;

    /**
     *
     */
    regionCount: number;

    /**
     *
     */
    pRegions: VkImageResolve2KHR[] | null;

}

declare interface VkResolveImageInfo2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcImage?: VkImage | null;

    /**
     *
     */
    srcImageLayout?: VkImageLayout;

    /**
     *
     */
    dstImage?: VkImage | null;

    /**
     *
     */
    dstImageLayout?: VkImageLayout;

    /**
     *
     */
    regionCount?: number;

    /**
     *
     */
    pRegions?: VkImageResolve2KHR[] | null;
}

declare interface VkResolveImageInfo2KHRConstructor {
  readonly prototype: VkResolveImageInfo2KHR;
  new(param?: VkResolveImageInfo2KHRInitializer | null): VkResolveImageInfo2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkResolveImageInfo2KHR: VkResolveImageInfo2KHRConstructor;



  /**
   * 
   */
interface VkCopyImageToBufferInfo2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcImage: VkImage | null;

    /**
     *
     */
    srcImageLayout: VkImageLayout;

    /**
     *
     */
    dstBuffer: VkBuffer | null;

    /**
     *
     */
    regionCount: number;

    /**
     *
     */
    pRegions: VkBufferImageCopy2KHR[] | null;

}

declare interface VkCopyImageToBufferInfo2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcImage?: VkImage | null;

    /**
     *
     */
    srcImageLayout?: VkImageLayout;

    /**
     *
     */
    dstBuffer?: VkBuffer | null;

    /**
     *
     */
    regionCount?: number;

    /**
     *
     */
    pRegions?: VkBufferImageCopy2KHR[] | null;
}

declare interface VkCopyImageToBufferInfo2KHRConstructor {
  readonly prototype: VkCopyImageToBufferInfo2KHR;
  new(param?: VkCopyImageToBufferInfo2KHRInitializer | null): VkCopyImageToBufferInfo2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCopyImageToBufferInfo2KHR: VkCopyImageToBufferInfo2KHRConstructor;



  /**
   * 
   */
interface VkCopyBufferToImageInfo2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcBuffer: VkBuffer | null;

    /**
     *
     */
    dstImage: VkImage | null;

    /**
     *
     */
    dstImageLayout: VkImageLayout;

    /**
     *
     */
    regionCount: number;

    /**
     *
     */
    pRegions: VkBufferImageCopy2KHR[] | null;

}

declare interface VkCopyBufferToImageInfo2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcBuffer?: VkBuffer | null;

    /**
     *
     */
    dstImage?: VkImage | null;

    /**
     *
     */
    dstImageLayout?: VkImageLayout;

    /**
     *
     */
    regionCount?: number;

    /**
     *
     */
    pRegions?: VkBufferImageCopy2KHR[] | null;
}

declare interface VkCopyBufferToImageInfo2KHRConstructor {
  readonly prototype: VkCopyBufferToImageInfo2KHR;
  new(param?: VkCopyBufferToImageInfo2KHRInitializer | null): VkCopyBufferToImageInfo2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCopyBufferToImageInfo2KHR: VkCopyBufferToImageInfo2KHRConstructor;



  /**
   * 
   */
interface VkBlitImageInfo2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcImage: VkImage | null;

    /**
     *
     */
    srcImageLayout: VkImageLayout;

    /**
     *
     */
    dstImage: VkImage | null;

    /**
     *
     */
    dstImageLayout: VkImageLayout;

    /**
     *
     */
    regionCount: number;

    /**
     *
     */
    pRegions: VkImageBlit2KHR[] | null;

    /**
     *
     */
    filter: VkFilter;

}

declare interface VkBlitImageInfo2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcImage?: VkImage | null;

    /**
     *
     */
    srcImageLayout?: VkImageLayout;

    /**
     *
     */
    dstImage?: VkImage | null;

    /**
     *
     */
    dstImageLayout?: VkImageLayout;

    /**
     *
     */
    regionCount?: number;

    /**
     *
     */
    pRegions?: VkImageBlit2KHR[] | null;

    /**
     *
     */
    filter?: VkFilter;
}

declare interface VkBlitImageInfo2KHRConstructor {
  readonly prototype: VkBlitImageInfo2KHR;
  new(param?: VkBlitImageInfo2KHRInitializer | null): VkBlitImageInfo2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBlitImageInfo2KHR: VkBlitImageInfo2KHRConstructor;



  /**
   * 
   */
interface VkCopyImageInfo2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcImage: VkImage | null;

    /**
     *
     */
    srcImageLayout: VkImageLayout;

    /**
     *
     */
    dstImage: VkImage | null;

    /**
     *
     */
    dstImageLayout: VkImageLayout;

    /**
     *
     */
    regionCount: number;

    /**
     *
     */
    pRegions: VkImageCopy2KHR[] | null;

}

declare interface VkCopyImageInfo2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcImage?: VkImage | null;

    /**
     *
     */
    srcImageLayout?: VkImageLayout;

    /**
     *
     */
    dstImage?: VkImage | null;

    /**
     *
     */
    dstImageLayout?: VkImageLayout;

    /**
     *
     */
    regionCount?: number;

    /**
     *
     */
    pRegions?: VkImageCopy2KHR[] | null;
}

declare interface VkCopyImageInfo2KHRConstructor {
  readonly prototype: VkCopyImageInfo2KHR;
  new(param?: VkCopyImageInfo2KHRInitializer | null): VkCopyImageInfo2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCopyImageInfo2KHR: VkCopyImageInfo2KHRConstructor;



  /**
   * 
   */
interface VkCopyBufferInfo2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcBuffer: VkBuffer | null;

    /**
     *
     */
    dstBuffer: VkBuffer | null;

    /**
     *
     */
    regionCount: number;

    /**
     *
     */
    pRegions: VkBufferCopy2KHR[] | null;

}

declare interface VkCopyBufferInfo2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcBuffer?: VkBuffer | null;

    /**
     *
     */
    dstBuffer?: VkBuffer | null;

    /**
     *
     */
    regionCount?: number;

    /**
     *
     */
    pRegions?: VkBufferCopy2KHR[] | null;
}

declare interface VkCopyBufferInfo2KHRConstructor {
  readonly prototype: VkCopyBufferInfo2KHR;
  new(param?: VkCopyBufferInfo2KHRInitializer | null): VkCopyBufferInfo2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCopyBufferInfo2KHR: VkCopyBufferInfo2KHRConstructor;



  /**
   * 
   */
interface VkImageResolve2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffset: VkOffset3D | null;

    /**
     *
     */
    dstSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffset: VkOffset3D | null;

    /**
     *
     */
    extent: VkExtent3D | null;

}

declare interface VkImageResolve2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffset?: VkOffset3D | null;

    /**
     *
     */
    dstSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffset?: VkOffset3D | null;

    /**
     *
     */
    extent?: VkExtent3D | null;
}

declare interface VkImageResolve2KHRConstructor {
  readonly prototype: VkImageResolve2KHR;
  new(param?: VkImageResolve2KHRInitializer | null): VkImageResolve2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageResolve2KHR: VkImageResolve2KHRConstructor;



  /**
   * 
   */
interface VkBufferImageCopy2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    bufferOffset: bigint | number;

    /**
     *
     */
    bufferRowLength: number;

    /**
     *
     */
    bufferImageHeight: number;

    /**
     *
     */
    imageSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    imageOffset: VkOffset3D | null;

    /**
     *
     */
    imageExtent: VkExtent3D | null;

}

declare interface VkBufferImageCopy2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    bufferOffset?: bigint | number;

    /**
     *
     */
    bufferRowLength?: number;

    /**
     *
     */
    bufferImageHeight?: number;

    /**
     *
     */
    imageSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    imageOffset?: VkOffset3D | null;

    /**
     *
     */
    imageExtent?: VkExtent3D | null;
}

declare interface VkBufferImageCopy2KHRConstructor {
  readonly prototype: VkBufferImageCopy2KHR;
  new(param?: VkBufferImageCopy2KHRInitializer | null): VkBufferImageCopy2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBufferImageCopy2KHR: VkBufferImageCopy2KHRConstructor;



  /**
   * 
   */
interface VkImageBlit2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffsets: VkOffset3D[] | null;

    /**
     *
     */
    dstSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffsets: VkOffset3D[] | null;

}

declare interface VkImageBlit2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffsets?: VkOffset3D[] | null;

    /**
     *
     */
    dstSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffsets?: VkOffset3D[] | null;
}

declare interface VkImageBlit2KHRConstructor {
  readonly prototype: VkImageBlit2KHR;
  new(param?: VkImageBlit2KHRInitializer | null): VkImageBlit2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageBlit2KHR: VkImageBlit2KHRConstructor;



  /**
   * 
   */
interface VkImageCopy2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffset: VkOffset3D | null;

    /**
     *
     */
    dstSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffset: VkOffset3D | null;

    /**
     *
     */
    extent: VkExtent3D | null;

}

declare interface VkImageCopy2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffset?: VkOffset3D | null;

    /**
     *
     */
    dstSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffset?: VkOffset3D | null;

    /**
     *
     */
    extent?: VkExtent3D | null;
}

declare interface VkImageCopy2KHRConstructor {
  readonly prototype: VkImageCopy2KHR;
  new(param?: VkImageCopy2KHRInitializer | null): VkImageCopy2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageCopy2KHR: VkImageCopy2KHRConstructor;



  /**
   * 
   */
interface VkBufferCopy2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcOffset: bigint | number;

    /**
     *
     */
    dstOffset: bigint | number;

    /**
     *
     */
    size: bigint | number;

}

declare interface VkBufferCopy2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcOffset?: bigint | number;

    /**
     *
     */
    dstOffset?: bigint | number;

    /**
     *
     */
    size?: bigint | number;
}

declare interface VkBufferCopy2KHRConstructor {
  readonly prototype: VkBufferCopy2KHR;
  new(param?: VkBufferCopy2KHRInitializer | null): VkBufferCopy2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBufferCopy2KHR: VkBufferCopy2KHRConstructor;



  /**
   * 
   */
interface VkPhysicalDevice4444FormatsFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    formatA4R4G4B4: boolean;

    /**
     *
     */
    formatA4B4G4R4: boolean;

}

declare interface VkPhysicalDevice4444FormatsFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    formatA4R4G4B4?: boolean;

    /**
     *
     */
    formatA4B4G4R4?: boolean;
}

declare interface VkPhysicalDevice4444FormatsFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDevice4444FormatsFeaturesEXT;
  new(param?: VkPhysicalDevice4444FormatsFeaturesEXTInitializer | null): VkPhysicalDevice4444FormatsFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDevice4444FormatsFeaturesEXT: VkPhysicalDevice4444FormatsFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceImageRobustnessFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    robustImageAccess: boolean;

}

declare interface VkPhysicalDeviceImageRobustnessFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    robustImageAccess?: boolean;
}

declare interface VkPhysicalDeviceImageRobustnessFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceImageRobustnessFeaturesEXT;
  new(param?: VkPhysicalDeviceImageRobustnessFeaturesEXTInitializer | null): VkPhysicalDeviceImageRobustnessFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceImageRobustnessFeaturesEXT: VkPhysicalDeviceImageRobustnessFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceRobustness2PropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly robustStorageBufferAccessSizeAlignment: bigint | number;

    /**
     *
     */
    readonly robustUniformBufferAccessSizeAlignment: bigint | number;

}

declare interface VkPhysicalDeviceRobustness2PropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly robustStorageBufferAccessSizeAlignment?: bigint | number;

    /**
     *
     */
    readonly robustUniformBufferAccessSizeAlignment?: bigint | number;
}

declare interface VkPhysicalDeviceRobustness2PropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceRobustness2PropertiesEXT;
  new(param?: VkPhysicalDeviceRobustness2PropertiesEXTInitializer | null): VkPhysicalDeviceRobustness2PropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceRobustness2PropertiesEXT: VkPhysicalDeviceRobustness2PropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceRobustness2FeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    robustBufferAccess2: boolean;

    /**
     *
     */
    robustImageAccess2: boolean;

    /**
     *
     */
    nullDescriptor: boolean;

}

declare interface VkPhysicalDeviceRobustness2FeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    robustBufferAccess2?: boolean;

    /**
     *
     */
    robustImageAccess2?: boolean;

    /**
     *
     */
    nullDescriptor?: boolean;
}

declare interface VkPhysicalDeviceRobustness2FeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceRobustness2FeaturesEXT;
  new(param?: VkPhysicalDeviceRobustness2FeaturesEXTInitializer | null): VkPhysicalDeviceRobustness2FeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceRobustness2FeaturesEXT: VkPhysicalDeviceRobustness2FeaturesEXTConstructor;



  /**
   * 
   */
interface VkDeviceDiagnosticsConfigCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkDeviceDiagnosticsConfigFlagBitsNV;

}

declare interface VkDeviceDiagnosticsConfigCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkDeviceDiagnosticsConfigFlagBitsNV;
}

declare interface VkDeviceDiagnosticsConfigCreateInfoNVConstructor {
  readonly prototype: VkDeviceDiagnosticsConfigCreateInfoNV;
  new(param?: VkDeviceDiagnosticsConfigCreateInfoNVInitializer | null): VkDeviceDiagnosticsConfigCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceDiagnosticsConfigCreateInfoNV: VkDeviceDiagnosticsConfigCreateInfoNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    diagnosticsConfig: boolean;

}

declare interface VkPhysicalDeviceDiagnosticsConfigFeaturesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    diagnosticsConfig?: boolean;
}

declare interface VkPhysicalDeviceDiagnosticsConfigFeaturesNVConstructor {
  readonly prototype: VkPhysicalDeviceDiagnosticsConfigFeaturesNV;
  new(param?: VkPhysicalDeviceDiagnosticsConfigFeaturesNVInitializer | null): VkPhysicalDeviceDiagnosticsConfigFeaturesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceDiagnosticsConfigFeaturesNV: VkPhysicalDeviceDiagnosticsConfigFeaturesNVConstructor;



  /**
   * 
   */
interface VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    transform: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    renderArea: VkRect2D | null;

}

declare interface VkCommandBufferInheritanceRenderPassTransformInfoQCOMInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    transform?: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    renderArea?: VkRect2D | null;
}

declare interface VkCommandBufferInheritanceRenderPassTransformInfoQCOMConstructor {
  readonly prototype: VkCommandBufferInheritanceRenderPassTransformInfoQCOM;
  new(param?: VkCommandBufferInheritanceRenderPassTransformInfoQCOMInitializer | null): VkCommandBufferInheritanceRenderPassTransformInfoQCOM;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCommandBufferInheritanceRenderPassTransformInfoQCOM: VkCommandBufferInheritanceRenderPassTransformInfoQCOMConstructor;



  /**
   * 
   */
interface VkCopyCommandTransformInfoQCOM {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    transform: VkSurfaceTransformFlagBitsKHR;

}

declare interface VkCopyCommandTransformInfoQCOMInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    transform?: VkSurfaceTransformFlagBitsKHR;
}

declare interface VkCopyCommandTransformInfoQCOMConstructor {
  readonly prototype: VkCopyCommandTransformInfoQCOM;
  new(param?: VkCopyCommandTransformInfoQCOMInitializer | null): VkCopyCommandTransformInfoQCOM;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCopyCommandTransformInfoQCOM: VkCopyCommandTransformInfoQCOMConstructor;



  /**
   * 
   */
interface VkRenderPassTransformBeginInfoQCOM {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    transform: VkSurfaceTransformFlagBitsKHR;

}

declare interface VkRenderPassTransformBeginInfoQCOMInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    transform?: VkSurfaceTransformFlagBitsKHR;
}

declare interface VkRenderPassTransformBeginInfoQCOMConstructor {
  readonly prototype: VkRenderPassTransformBeginInfoQCOM;
  new(param?: VkRenderPassTransformBeginInfoQCOMInitializer | null): VkRenderPassTransformBeginInfoQCOM;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRenderPassTransformBeginInfoQCOM: VkRenderPassTransformBeginInfoQCOMConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    extendedDynamicState: boolean;

}

declare interface VkPhysicalDeviceExtendedDynamicStateFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    extendedDynamicState?: boolean;
}

declare interface VkPhysicalDeviceExtendedDynamicStateFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceExtendedDynamicStateFeaturesEXT;
  new(param?: VkPhysicalDeviceExtendedDynamicStateFeaturesEXTInitializer | null): VkPhysicalDeviceExtendedDynamicStateFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceExtendedDynamicStateFeaturesEXT: VkPhysicalDeviceExtendedDynamicStateFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPipelineLibraryCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    libraryCount: number;

    /**
     *
     */
    pLibraries: VkPipeline[] | null;

}

declare interface VkPipelineLibraryCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    libraryCount?: number;

    /**
     *
     */
    pLibraries?: VkPipeline[] | null;
}

declare interface VkPipelineLibraryCreateInfoKHRConstructor {
  readonly prototype: VkPipelineLibraryCreateInfoKHR;
  new(param?: VkPipelineLibraryCreateInfoKHRInitializer | null): VkPipelineLibraryCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineLibraryCreateInfoKHR: VkPipelineLibraryCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkRayTracingPipelineInterfaceCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    maxPipelineRayPayloadSize: number;

    /**
     *
     */
    maxPipelineRayHitAttributeSize: number;

}

declare interface VkRayTracingPipelineInterfaceCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    maxPipelineRayPayloadSize?: number;

    /**
     *
     */
    maxPipelineRayHitAttributeSize?: number;
}

declare interface VkRayTracingPipelineInterfaceCreateInfoKHRConstructor {
  readonly prototype: VkRayTracingPipelineInterfaceCreateInfoKHR;
  new(param?: VkRayTracingPipelineInterfaceCreateInfoKHRInitializer | null): VkRayTracingPipelineInterfaceCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRayTracingPipelineInterfaceCreateInfoKHR: VkRayTracingPipelineInterfaceCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkCopyMemoryToAccelerationStructureInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    src: VkDeviceOrHostAddressConstKHR | null;

    /**
     *
     */
    dst: VkAccelerationStructureKHR | null;

    /**
     *
     */
    mode: VkCopyAccelerationStructureModeKHR;

}

declare interface VkCopyMemoryToAccelerationStructureInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    src?: VkDeviceOrHostAddressConstKHR | null;

    /**
     *
     */
    dst?: VkAccelerationStructureKHR | null;

    /**
     *
     */
    mode?: VkCopyAccelerationStructureModeKHR;
}

declare interface VkCopyMemoryToAccelerationStructureInfoKHRConstructor {
  readonly prototype: VkCopyMemoryToAccelerationStructureInfoKHR;
  new(param?: VkCopyMemoryToAccelerationStructureInfoKHRInitializer | null): VkCopyMemoryToAccelerationStructureInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCopyMemoryToAccelerationStructureInfoKHR: VkCopyMemoryToAccelerationStructureInfoKHRConstructor;



  /**
   * 
   */
interface VkCopyAccelerationStructureToMemoryInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    src: VkAccelerationStructureKHR | null;

    /**
     *
     */
    dst: VkDeviceOrHostAddressKHR | null;

    /**
     *
     */
    mode: VkCopyAccelerationStructureModeKHR;

}

declare interface VkCopyAccelerationStructureToMemoryInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    src?: VkAccelerationStructureKHR | null;

    /**
     *
     */
    dst?: VkDeviceOrHostAddressKHR | null;

    /**
     *
     */
    mode?: VkCopyAccelerationStructureModeKHR;
}

declare interface VkCopyAccelerationStructureToMemoryInfoKHRConstructor {
  readonly prototype: VkCopyAccelerationStructureToMemoryInfoKHR;
  new(param?: VkCopyAccelerationStructureToMemoryInfoKHRInitializer | null): VkCopyAccelerationStructureToMemoryInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCopyAccelerationStructureToMemoryInfoKHR: VkCopyAccelerationStructureToMemoryInfoKHRConstructor;



  /**
   * 
   */
interface VkCopyAccelerationStructureInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    src: VkAccelerationStructureKHR | null;

    /**
     *
     */
    dst: VkAccelerationStructureKHR | null;

    /**
     *
     */
    mode: VkCopyAccelerationStructureModeKHR;

}

declare interface VkCopyAccelerationStructureInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    src?: VkAccelerationStructureKHR | null;

    /**
     *
     */
    dst?: VkAccelerationStructureKHR | null;

    /**
     *
     */
    mode?: VkCopyAccelerationStructureModeKHR;
}

declare interface VkCopyAccelerationStructureInfoKHRConstructor {
  readonly prototype: VkCopyAccelerationStructureInfoKHR;
  new(param?: VkCopyAccelerationStructureInfoKHRInitializer | null): VkCopyAccelerationStructureInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCopyAccelerationStructureInfoKHR: VkCopyAccelerationStructureInfoKHRConstructor;



  /**
   * 
   */
interface VkAccelerationStructureVersionInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pVersionData: Uint8Array | null;

}

declare interface VkAccelerationStructureVersionInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pVersionData?: Uint8Array | null;
}

declare interface VkAccelerationStructureVersionInfoKHRConstructor {
  readonly prototype: VkAccelerationStructureVersionInfoKHR;
  new(param?: VkAccelerationStructureVersionInfoKHRInitializer | null): VkAccelerationStructureVersionInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureVersionInfoKHR: VkAccelerationStructureVersionInfoKHRConstructor;



  /**
   * 
   */
interface VkAccelerationStructureDeviceAddressInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    accelerationStructure: VkAccelerationStructureKHR | null;

}

declare interface VkAccelerationStructureDeviceAddressInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    accelerationStructure?: VkAccelerationStructureKHR | null;
}

declare interface VkAccelerationStructureDeviceAddressInfoKHRConstructor {
  readonly prototype: VkAccelerationStructureDeviceAddressInfoKHR;
  new(param?: VkAccelerationStructureDeviceAddressInfoKHRInitializer | null): VkAccelerationStructureDeviceAddressInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureDeviceAddressInfoKHR: VkAccelerationStructureDeviceAddressInfoKHRConstructor;



  /**
   * 
   */
interface VkAccelerationStructureInstanceNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    transform: VkTransformMatrixKHR | null;

    /**
     *
     */
    instanceCustomIndex: number;

    /**
     *
     */
    mask: number;

    /**
     *
     */
    instanceShaderBindingTableRecordOffset: number;

    /**
     *
     */
    flags: VkGeometryInstanceFlagBitsKHR;

    /**
     *
     */
    accelerationStructureReference: bigint | number;

}

declare interface VkAccelerationStructureInstanceNVInitializer {
  
    /**
     *
     */
    transform?: VkTransformMatrixKHR | null;

    /**
     *
     */
    instanceCustomIndex?: number;

    /**
     *
     */
    mask?: number;

    /**
     *
     */
    instanceShaderBindingTableRecordOffset?: number;

    /**
     *
     */
    flags?: VkGeometryInstanceFlagBitsKHR;

    /**
     *
     */
    accelerationStructureReference?: bigint | number;
}

declare interface VkAccelerationStructureInstanceNVConstructor {
  readonly prototype: VkAccelerationStructureInstanceNV;
  new(param?: VkAccelerationStructureInstanceNVInitializer | null): VkAccelerationStructureInstanceNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureInstanceNV: VkAccelerationStructureInstanceNVConstructor;



  /**
   * 
   */
interface VkAccelerationStructureInstanceKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    transform: VkTransformMatrixKHR | null;

    /**
     *
     */
    instanceCustomIndex: number;

    /**
     *
     */
    mask: number;

    /**
     *
     */
    instanceShaderBindingTableRecordOffset: number;

    /**
     *
     */
    flags: VkGeometryInstanceFlagBitsKHR;

    /**
     *
     */
    accelerationStructureReference: bigint | number;

}

declare interface VkAccelerationStructureInstanceKHRInitializer {
  
    /**
     *
     */
    transform?: VkTransformMatrixKHR | null;

    /**
     *
     */
    instanceCustomIndex?: number;

    /**
     *
     */
    mask?: number;

    /**
     *
     */
    instanceShaderBindingTableRecordOffset?: number;

    /**
     *
     */
    flags?: VkGeometryInstanceFlagBitsKHR;

    /**
     *
     */
    accelerationStructureReference?: bigint | number;
}

declare interface VkAccelerationStructureInstanceKHRConstructor {
  readonly prototype: VkAccelerationStructureInstanceKHR;
  new(param?: VkAccelerationStructureInstanceKHRInitializer | null): VkAccelerationStructureInstanceKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureInstanceKHR: VkAccelerationStructureInstanceKHRConstructor;



  /**
   * 
   */
interface VkTransformMatrixNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    matrix: number[] | null;

}

declare interface VkTransformMatrixNVInitializer {
  
    /**
     *
     */
    matrix?: number[] | null;
}

declare interface VkTransformMatrixNVConstructor {
  readonly prototype: VkTransformMatrixNV;
  new(param?: VkTransformMatrixNVInitializer | null): VkTransformMatrixNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkTransformMatrixNV: VkTransformMatrixNVConstructor;



  /**
   * 
   */
interface VkTransformMatrixKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    matrix: number[] | null;

}

declare interface VkTransformMatrixKHRInitializer {
  
    /**
     *
     */
    matrix?: number[] | null;
}

declare interface VkTransformMatrixKHRConstructor {
  readonly prototype: VkTransformMatrixKHR;
  new(param?: VkTransformMatrixKHRInitializer | null): VkTransformMatrixKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkTransformMatrixKHR: VkTransformMatrixKHRConstructor;



  /**
   * 
   */
interface VkAabbPositionsNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    minX: number;

    /**
     *
     */
    minY: number;

    /**
     *
     */
    minZ: number;

    /**
     *
     */
    maxX: number;

    /**
     *
     */
    maxY: number;

    /**
     *
     */
    maxZ: number;

}

declare interface VkAabbPositionsNVInitializer {
  
    /**
     *
     */
    minX?: number;

    /**
     *
     */
    minY?: number;

    /**
     *
     */
    minZ?: number;

    /**
     *
     */
    maxX?: number;

    /**
     *
     */
    maxY?: number;

    /**
     *
     */
    maxZ?: number;
}

declare interface VkAabbPositionsNVConstructor {
  readonly prototype: VkAabbPositionsNV;
  new(param?: VkAabbPositionsNVInitializer | null): VkAabbPositionsNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAabbPositionsNV: VkAabbPositionsNVConstructor;



  /**
   * 
   */
interface VkAabbPositionsKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    minX: number;

    /**
     *
     */
    minY: number;

    /**
     *
     */
    minZ: number;

    /**
     *
     */
    maxX: number;

    /**
     *
     */
    maxY: number;

    /**
     *
     */
    maxZ: number;

}

declare interface VkAabbPositionsKHRInitializer {
  
    /**
     *
     */
    minX?: number;

    /**
     *
     */
    minY?: number;

    /**
     *
     */
    minZ?: number;

    /**
     *
     */
    maxX?: number;

    /**
     *
     */
    maxY?: number;

    /**
     *
     */
    maxZ?: number;
}

declare interface VkAabbPositionsKHRConstructor {
  readonly prototype: VkAabbPositionsKHR;
  new(param?: VkAabbPositionsKHRInitializer | null): VkAabbPositionsKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAabbPositionsKHR: VkAabbPositionsKHRConstructor;



  /**
   * 
   */
interface VkAccelerationStructureCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    createFlags: VkAccelerationStructureCreateFlagBitsKHR;

    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    offset: bigint | number;

    /**
     *
     */
    size: bigint | number;

    /**
     *
     */
    type: VkAccelerationStructureTypeKHR;

    /**
     *
     */
    deviceAddress: bigint | number;

}

declare interface VkAccelerationStructureCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    createFlags?: VkAccelerationStructureCreateFlagBitsKHR;

    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    offset?: bigint | number;

    /**
     *
     */
    size?: bigint | number;

    /**
     *
     */
    type?: VkAccelerationStructureTypeKHR;

    /**
     *
     */
    deviceAddress?: bigint | number;
}

declare interface VkAccelerationStructureCreateInfoKHRConstructor {
  readonly prototype: VkAccelerationStructureCreateInfoKHR;
  new(param?: VkAccelerationStructureCreateInfoKHRInitializer | null): VkAccelerationStructureCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureCreateInfoKHR: VkAccelerationStructureCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkAccelerationStructureBuildRangeInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    primitiveCount: number;

    /**
     *
     */
    primitiveOffset: number;

    /**
     *
     */
    firstVertex: number;

    /**
     *
     */
    transformOffset: number;

}

declare interface VkAccelerationStructureBuildRangeInfoKHRInitializer {
  
    /**
     *
     */
    primitiveCount?: number;

    /**
     *
     */
    primitiveOffset?: number;

    /**
     *
     */
    firstVertex?: number;

    /**
     *
     */
    transformOffset?: number;
}

declare interface VkAccelerationStructureBuildRangeInfoKHRConstructor {
  readonly prototype: VkAccelerationStructureBuildRangeInfoKHR;
  new(param?: VkAccelerationStructureBuildRangeInfoKHRInitializer | null): VkAccelerationStructureBuildRangeInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureBuildRangeInfoKHR: VkAccelerationStructureBuildRangeInfoKHRConstructor;



  /**
   * 
   */
interface VkAccelerationStructureBuildGeometryInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    type: VkAccelerationStructureTypeKHR;

    /**
     *
     */
    flags: VkBuildAccelerationStructureFlagBitsKHR;

    /**
     *
     */
    mode: VkBuildAccelerationStructureModeKHR;

    /**
     *
     */
    srcAccelerationStructure: VkAccelerationStructureKHR | null;

    /**
     *
     */
    dstAccelerationStructure: VkAccelerationStructureKHR | null;

    /**
     *
     */
    geometryCount: number;

    /**
     *
     */
    pGeometries: VkAccelerationStructureGeometryKHR[] | null;

    /**
     *
     */
    ppGeometries: VkAccelerationStructureGeometryKHR[] | null;

    /**
     *
     */
    scratchData: VkDeviceOrHostAddressKHR | null;

}

declare interface VkAccelerationStructureBuildGeometryInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    type?: VkAccelerationStructureTypeKHR;

    /**
     *
     */
    flags?: VkBuildAccelerationStructureFlagBitsKHR;

    /**
     *
     */
    mode?: VkBuildAccelerationStructureModeKHR;

    /**
     *
     */
    srcAccelerationStructure?: VkAccelerationStructureKHR | null;

    /**
     *
     */
    dstAccelerationStructure?: VkAccelerationStructureKHR | null;

    /**
     *
     */
    geometryCount?: number;

    /**
     *
     */
    pGeometries?: VkAccelerationStructureGeometryKHR[] | null;

    /**
     *
     */
    ppGeometries?: VkAccelerationStructureGeometryKHR[] | null;

    /**
     *
     */
    scratchData?: VkDeviceOrHostAddressKHR | null;
}

declare interface VkAccelerationStructureBuildGeometryInfoKHRConstructor {
  readonly prototype: VkAccelerationStructureBuildGeometryInfoKHR;
  new(param?: VkAccelerationStructureBuildGeometryInfoKHRInitializer | null): VkAccelerationStructureBuildGeometryInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureBuildGeometryInfoKHR: VkAccelerationStructureBuildGeometryInfoKHRConstructor;



  /**
   * 
   */
interface VkAccelerationStructureGeometryKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    geometryType: VkGeometryTypeKHR;

    /**
     *
     */
    geometry: VkAccelerationStructureGeometryDataKHR | null;

    /**
     *
     */
    flags: VkGeometryFlagBitsKHR;

}

declare interface VkAccelerationStructureGeometryKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    geometryType?: VkGeometryTypeKHR;

    /**
     *
     */
    geometry?: VkAccelerationStructureGeometryDataKHR | null;

    /**
     *
     */
    flags?: VkGeometryFlagBitsKHR;
}

declare interface VkAccelerationStructureGeometryKHRConstructor {
  readonly prototype: VkAccelerationStructureGeometryKHR;
  new(param?: VkAccelerationStructureGeometryKHRInitializer | null): VkAccelerationStructureGeometryKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureGeometryKHR: VkAccelerationStructureGeometryKHRConstructor;



  /**
   * 
   */
interface VkAccelerationStructureGeometryInstancesDataKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    arrayOfPointers: boolean;

    /**
     *
     */
    data: VkDeviceOrHostAddressConstKHR | null;

}

declare interface VkAccelerationStructureGeometryInstancesDataKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    arrayOfPointers?: boolean;

    /**
     *
     */
    data?: VkDeviceOrHostAddressConstKHR | null;
}

declare interface VkAccelerationStructureGeometryInstancesDataKHRConstructor {
  readonly prototype: VkAccelerationStructureGeometryInstancesDataKHR;
  new(param?: VkAccelerationStructureGeometryInstancesDataKHRInitializer | null): VkAccelerationStructureGeometryInstancesDataKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureGeometryInstancesDataKHR: VkAccelerationStructureGeometryInstancesDataKHRConstructor;



  /**
   * 
   */
interface VkAccelerationStructureGeometryAabbsDataKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    data: VkDeviceOrHostAddressConstKHR | null;

    /**
     *
     */
    stride: bigint | number;

}

declare interface VkAccelerationStructureGeometryAabbsDataKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    data?: VkDeviceOrHostAddressConstKHR | null;

    /**
     *
     */
    stride?: bigint | number;
}

declare interface VkAccelerationStructureGeometryAabbsDataKHRConstructor {
  readonly prototype: VkAccelerationStructureGeometryAabbsDataKHR;
  new(param?: VkAccelerationStructureGeometryAabbsDataKHRInitializer | null): VkAccelerationStructureGeometryAabbsDataKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureGeometryAabbsDataKHR: VkAccelerationStructureGeometryAabbsDataKHRConstructor;



  /**
   * 
   */
interface VkAccelerationStructureGeometryTrianglesDataKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    vertexFormat: VkFormat;

    /**
     *
     */
    vertexData: VkDeviceOrHostAddressConstKHR | null;

    /**
     *
     */
    vertexStride: bigint | number;

    /**
     *
     */
    maxVertex: number;

    /**
     *
     */
    indexType: VkIndexType;

    /**
     *
     */
    indexData: VkDeviceOrHostAddressConstKHR | null;

    /**
     *
     */
    transformData: VkDeviceOrHostAddressConstKHR | null;

}

declare interface VkAccelerationStructureGeometryTrianglesDataKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    vertexFormat?: VkFormat;

    /**
     *
     */
    vertexData?: VkDeviceOrHostAddressConstKHR | null;

    /**
     *
     */
    vertexStride?: bigint | number;

    /**
     *
     */
    maxVertex?: number;

    /**
     *
     */
    indexType?: VkIndexType;

    /**
     *
     */
    indexData?: VkDeviceOrHostAddressConstKHR | null;

    /**
     *
     */
    transformData?: VkDeviceOrHostAddressConstKHR | null;
}

declare interface VkAccelerationStructureGeometryTrianglesDataKHRConstructor {
  readonly prototype: VkAccelerationStructureGeometryTrianglesDataKHR;
  new(param?: VkAccelerationStructureGeometryTrianglesDataKHRInitializer | null): VkAccelerationStructureGeometryTrianglesDataKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureGeometryTrianglesDataKHR: VkAccelerationStructureGeometryTrianglesDataKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceCustomBorderColorFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    customBorderColors: boolean;

    /**
     *
     */
    customBorderColorWithoutFormat: boolean;

}

declare interface VkPhysicalDeviceCustomBorderColorFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    customBorderColors?: boolean;

    /**
     *
     */
    customBorderColorWithoutFormat?: boolean;
}

declare interface VkPhysicalDeviceCustomBorderColorFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceCustomBorderColorFeaturesEXT;
  new(param?: VkPhysicalDeviceCustomBorderColorFeaturesEXTInitializer | null): VkPhysicalDeviceCustomBorderColorFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceCustomBorderColorFeaturesEXT: VkPhysicalDeviceCustomBorderColorFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceCustomBorderColorPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxCustomBorderColorSamplers: number;

}

declare interface VkPhysicalDeviceCustomBorderColorPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxCustomBorderColorSamplers?: number;
}

declare interface VkPhysicalDeviceCustomBorderColorPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceCustomBorderColorPropertiesEXT;
  new(param?: VkPhysicalDeviceCustomBorderColorPropertiesEXTInitializer | null): VkPhysicalDeviceCustomBorderColorPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceCustomBorderColorPropertiesEXT: VkPhysicalDeviceCustomBorderColorPropertiesEXTConstructor;



  /**
   * 
   */
interface VkSamplerCustomBorderColorCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    customBorderColor: VkClearColorValue | null;

    /**
     *
     */
    format: VkFormat;

}

declare interface VkSamplerCustomBorderColorCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    customBorderColor?: VkClearColorValue | null;

    /**
     *
     */
    format?: VkFormat;
}

declare interface VkSamplerCustomBorderColorCreateInfoEXTConstructor {
  readonly prototype: VkSamplerCustomBorderColorCreateInfoEXT;
  new(param?: VkSamplerCustomBorderColorCreateInfoEXTInitializer | null): VkSamplerCustomBorderColorCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSamplerCustomBorderColorCreateInfoEXT: VkSamplerCustomBorderColorCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceToolPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly name: string | null;

    /**
     *
     */
    readonly version: string | null;

    /**
     *
     */
    readonly purposes: VkToolPurposeFlagBitsEXT;

    /**
     *
     */
    readonly description: string | null;

    /**
     *
     */
    readonly layer: string | null;

}

declare interface VkPhysicalDeviceToolPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly name?: string | null;

    /**
     *
     */
    readonly version?: string | null;

    /**
     *
     */
    readonly purposes?: VkToolPurposeFlagBitsEXT;

    /**
     *
     */
    readonly description?: string | null;

    /**
     *
     */
    readonly layer?: string | null;
}

declare interface VkPhysicalDeviceToolPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceToolPropertiesEXT;
  new(param?: VkPhysicalDeviceToolPropertiesEXTInitializer | null): VkPhysicalDeviceToolPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceToolPropertiesEXT: VkPhysicalDeviceToolPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceCoherentMemoryFeaturesAMD {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceCoherentMemory: boolean;

}

declare interface VkPhysicalDeviceCoherentMemoryFeaturesAMDInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceCoherentMemory?: boolean;
}

declare interface VkPhysicalDeviceCoherentMemoryFeaturesAMDConstructor {
  readonly prototype: VkPhysicalDeviceCoherentMemoryFeaturesAMD;
  new(param?: VkPhysicalDeviceCoherentMemoryFeaturesAMDInitializer | null): VkPhysicalDeviceCoherentMemoryFeaturesAMD;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceCoherentMemoryFeaturesAMD: VkPhysicalDeviceCoherentMemoryFeaturesAMDConstructor;



  /**
   * 
   */
interface VkPipelineCompilerControlCreateInfoAMD {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    compilerControlFlags: VkPipelineCompilerControlFlagBitsAMD;

}

declare interface VkPipelineCompilerControlCreateInfoAMDInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    compilerControlFlags?: VkPipelineCompilerControlFlagBitsAMD;
}

declare interface VkPipelineCompilerControlCreateInfoAMDConstructor {
  readonly prototype: VkPipelineCompilerControlCreateInfoAMD;
  new(param?: VkPipelineCompilerControlCreateInfoAMDInitializer | null): VkPipelineCompilerControlCreateInfoAMD;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineCompilerControlCreateInfoAMD: VkPipelineCompilerControlCreateInfoAMDConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceVulkan12Properties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly driverID: VkDriverId;

    /**
     *
     */
    readonly driverName: string | null;

    /**
     *
     */
    readonly driverInfo: string | null;

    /**
     *
     */
    readonly conformanceVersion: VkConformanceVersion | null;

    /**
     *
     */
    readonly denormBehaviorIndependence: VkShaderFloatControlsIndependence;

    /**
     *
     */
    readonly roundingModeIndependence: VkShaderFloatControlsIndependence;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat16: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat32: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat64: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat16: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat32: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat64: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat16: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat32: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat64: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat16: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat32: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat64: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat16: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat32: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat64: boolean;

    /**
     *
     */
    readonly maxUpdateAfterBindDescriptorsInAllPools: number;

    /**
     *
     */
    readonly shaderUniformBufferArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderSampledImageArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderStorageBufferArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderStorageImageArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderInputAttachmentArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly robustBufferAccessUpdateAfterBind: boolean;

    /**
     *
     */
    readonly quadDivergentImplicitLod: boolean;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSamplers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindUniformBuffers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageBuffers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSampledImages: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageImages: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindInputAttachments: number;

    /**
     *
     */
    readonly maxPerStageUpdateAfterBindResources: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSamplers: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffers: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffers: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSampledImages: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageImages: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindInputAttachments: number;

    /**
     *
     */
    readonly supportedDepthResolveModes: VkResolveModeFlagBits;

    /**
     *
     */
    readonly supportedStencilResolveModes: VkResolveModeFlagBits;

    /**
     *
     */
    readonly independentResolveNone: boolean;

    /**
     *
     */
    readonly independentResolve: boolean;

    /**
     *
     */
    readonly filterMinmaxSingleComponentFormats: boolean;

    /**
     *
     */
    readonly filterMinmaxImageComponentMapping: boolean;

    /**
     *
     */
    readonly maxTimelineSemaphoreValueDifference: bigint | number;

    /**
     *
     */
    readonly framebufferIntegerColorSampleCounts: VkSampleCountFlagBits;

}

declare interface VkPhysicalDeviceVulkan12PropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly driverID?: VkDriverId;

    /**
     *
     */
    readonly driverName?: string | null;

    /**
     *
     */
    readonly driverInfo?: string | null;

    /**
     *
     */
    readonly conformanceVersion?: VkConformanceVersion | null;

    /**
     *
     */
    readonly denormBehaviorIndependence?: VkShaderFloatControlsIndependence;

    /**
     *
     */
    readonly roundingModeIndependence?: VkShaderFloatControlsIndependence;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat16?: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat32?: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat64?: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat16?: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat32?: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat64?: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat16?: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat32?: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat64?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat16?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat32?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat64?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat16?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat32?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat64?: boolean;

    /**
     *
     */
    readonly maxUpdateAfterBindDescriptorsInAllPools?: number;

    /**
     *
     */
    readonly shaderUniformBufferArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderSampledImageArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderStorageBufferArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderStorageImageArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderInputAttachmentArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly robustBufferAccessUpdateAfterBind?: boolean;

    /**
     *
     */
    readonly quadDivergentImplicitLod?: boolean;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSamplers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindUniformBuffers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageBuffers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSampledImages?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageImages?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindInputAttachments?: number;

    /**
     *
     */
    readonly maxPerStageUpdateAfterBindResources?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSamplers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffersDynamic?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffersDynamic?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSampledImages?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageImages?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindInputAttachments?: number;

    /**
     *
     */
    readonly supportedDepthResolveModes?: VkResolveModeFlagBits;

    /**
     *
     */
    readonly supportedStencilResolveModes?: VkResolveModeFlagBits;

    /**
     *
     */
    readonly independentResolveNone?: boolean;

    /**
     *
     */
    readonly independentResolve?: boolean;

    /**
     *
     */
    readonly filterMinmaxSingleComponentFormats?: boolean;

    /**
     *
     */
    readonly filterMinmaxImageComponentMapping?: boolean;

    /**
     *
     */
    readonly maxTimelineSemaphoreValueDifference?: bigint | number;

    /**
     *
     */
    readonly framebufferIntegerColorSampleCounts?: VkSampleCountFlagBits;
}

declare interface VkPhysicalDeviceVulkan12PropertiesConstructor {
  readonly prototype: VkPhysicalDeviceVulkan12Properties;
  new(param?: VkPhysicalDeviceVulkan12PropertiesInitializer | null): VkPhysicalDeviceVulkan12Properties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceVulkan12Properties: VkPhysicalDeviceVulkan12PropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceVulkan12Features {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    samplerMirrorClampToEdge: boolean;

    /**
     *
     */
    drawIndirectCount: boolean;

    /**
     *
     */
    storageBuffer8BitAccess: boolean;

    /**
     *
     */
    uniformAndStorageBuffer8BitAccess: boolean;

    /**
     *
     */
    storagePushConstant8: boolean;

    /**
     *
     */
    shaderBufferInt64Atomics: boolean;

    /**
     *
     */
    shaderSharedInt64Atomics: boolean;

    /**
     *
     */
    shaderFloat16: boolean;

    /**
     *
     */
    shaderInt8: boolean;

    /**
     *
     */
    descriptorIndexing: boolean;

    /**
     *
     */
    shaderInputAttachmentArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderUniformBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderSampledImageArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderStorageBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderStorageImageArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderInputAttachmentArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    descriptorBindingUniformBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingSampledImageUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingStorageImageUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingStorageBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingUniformTexelBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingStorageTexelBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingUpdateUnusedWhilePending: boolean;

    /**
     *
     */
    descriptorBindingPartiallyBound: boolean;

    /**
     *
     */
    descriptorBindingVariableDescriptorCount: boolean;

    /**
     *
     */
    runtimeDescriptorArray: boolean;

    /**
     *
     */
    samplerFilterMinmax: boolean;

    /**
     *
     */
    scalarBlockLayout: boolean;

    /**
     *
     */
    imagelessFramebuffer: boolean;

    /**
     *
     */
    uniformBufferStandardLayout: boolean;

    /**
     *
     */
    shaderSubgroupExtendedTypes: boolean;

    /**
     *
     */
    separateDepthStencilLayouts: boolean;

    /**
     *
     */
    hostQueryReset: boolean;

    /**
     *
     */
    timelineSemaphore: boolean;

    /**
     *
     */
    bufferDeviceAddress: boolean;

    /**
     *
     */
    bufferDeviceAddressCaptureReplay: boolean;

    /**
     *
     */
    bufferDeviceAddressMultiDevice: boolean;

    /**
     *
     */
    vulkanMemoryModel: boolean;

    /**
     *
     */
    vulkanMemoryModelDeviceScope: boolean;

    /**
     *
     */
    vulkanMemoryModelAvailabilityVisibilityChains: boolean;

    /**
     *
     */
    shaderOutputViewportIndex: boolean;

    /**
     *
     */
    shaderOutputLayer: boolean;

    /**
     *
     */
    subgroupBroadcastDynamicId: boolean;

}

declare interface VkPhysicalDeviceVulkan12FeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    samplerMirrorClampToEdge?: boolean;

    /**
     *
     */
    drawIndirectCount?: boolean;

    /**
     *
     */
    storageBuffer8BitAccess?: boolean;

    /**
     *
     */
    uniformAndStorageBuffer8BitAccess?: boolean;

    /**
     *
     */
    storagePushConstant8?: boolean;

    /**
     *
     */
    shaderBufferInt64Atomics?: boolean;

    /**
     *
     */
    shaderSharedInt64Atomics?: boolean;

    /**
     *
     */
    shaderFloat16?: boolean;

    /**
     *
     */
    shaderInt8?: boolean;

    /**
     *
     */
    descriptorIndexing?: boolean;

    /**
     *
     */
    shaderInputAttachmentArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderUniformBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderSampledImageArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderStorageBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderStorageImageArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderInputAttachmentArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    descriptorBindingUniformBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingSampledImageUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingStorageImageUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingStorageBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingUniformTexelBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingStorageTexelBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingUpdateUnusedWhilePending?: boolean;

    /**
     *
     */
    descriptorBindingPartiallyBound?: boolean;

    /**
     *
     */
    descriptorBindingVariableDescriptorCount?: boolean;

    /**
     *
     */
    runtimeDescriptorArray?: boolean;

    /**
     *
     */
    samplerFilterMinmax?: boolean;

    /**
     *
     */
    scalarBlockLayout?: boolean;

    /**
     *
     */
    imagelessFramebuffer?: boolean;

    /**
     *
     */
    uniformBufferStandardLayout?: boolean;

    /**
     *
     */
    shaderSubgroupExtendedTypes?: boolean;

    /**
     *
     */
    separateDepthStencilLayouts?: boolean;

    /**
     *
     */
    hostQueryReset?: boolean;

    /**
     *
     */
    timelineSemaphore?: boolean;

    /**
     *
     */
    bufferDeviceAddress?: boolean;

    /**
     *
     */
    bufferDeviceAddressCaptureReplay?: boolean;

    /**
     *
     */
    bufferDeviceAddressMultiDevice?: boolean;

    /**
     *
     */
    vulkanMemoryModel?: boolean;

    /**
     *
     */
    vulkanMemoryModelDeviceScope?: boolean;

    /**
     *
     */
    vulkanMemoryModelAvailabilityVisibilityChains?: boolean;

    /**
     *
     */
    shaderOutputViewportIndex?: boolean;

    /**
     *
     */
    shaderOutputLayer?: boolean;

    /**
     *
     */
    subgroupBroadcastDynamicId?: boolean;
}

declare interface VkPhysicalDeviceVulkan12FeaturesConstructor {
  readonly prototype: VkPhysicalDeviceVulkan12Features;
  new(param?: VkPhysicalDeviceVulkan12FeaturesInitializer | null): VkPhysicalDeviceVulkan12Features;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceVulkan12Features: VkPhysicalDeviceVulkan12FeaturesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceVulkan11Properties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly deviceUUID: number[] | null;

    /**
     *
     */
    readonly driverUUID: number[] | null;

    /**
     *
     */
    readonly deviceLUID: number[] | null;

    /**
     *
     */
    readonly deviceNodeMask: number;

    /**
     *
     */
    readonly deviceLUIDValid: boolean;

    /**
     *
     */
    readonly subgroupSize: number;

    /**
     *
     */
    readonly subgroupSupportedStages: VkShaderStageFlagBits;

    /**
     *
     */
    readonly subgroupSupportedOperations: VkSubgroupFeatureFlagBits;

    /**
     *
     */
    readonly subgroupQuadOperationsInAllStages: boolean;

    /**
     *
     */
    readonly pointClippingBehavior: VkPointClippingBehavior;

    /**
     *
     */
    readonly maxMultiviewViewCount: number;

    /**
     *
     */
    readonly maxMultiviewInstanceIndex: number;

    /**
     *
     */
    readonly protectedNoFault: boolean;

    /**
     *
     */
    readonly maxPerSetDescriptors: number;

    /**
     *
     */
    readonly maxMemoryAllocationSize: bigint | number;

}

declare interface VkPhysicalDeviceVulkan11PropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly deviceUUID?: number[] | null;

    /**
     *
     */
    readonly driverUUID?: number[] | null;

    /**
     *
     */
    readonly deviceLUID?: number[] | null;

    /**
     *
     */
    readonly deviceNodeMask?: number;

    /**
     *
     */
    readonly deviceLUIDValid?: boolean;

    /**
     *
     */
    readonly subgroupSize?: number;

    /**
     *
     */
    readonly subgroupSupportedStages?: VkShaderStageFlagBits;

    /**
     *
     */
    readonly subgroupSupportedOperations?: VkSubgroupFeatureFlagBits;

    /**
     *
     */
    readonly subgroupQuadOperationsInAllStages?: boolean;

    /**
     *
     */
    readonly pointClippingBehavior?: VkPointClippingBehavior;

    /**
     *
     */
    readonly maxMultiviewViewCount?: number;

    /**
     *
     */
    readonly maxMultiviewInstanceIndex?: number;

    /**
     *
     */
    readonly protectedNoFault?: boolean;

    /**
     *
     */
    readonly maxPerSetDescriptors?: number;

    /**
     *
     */
    readonly maxMemoryAllocationSize?: bigint | number;
}

declare interface VkPhysicalDeviceVulkan11PropertiesConstructor {
  readonly prototype: VkPhysicalDeviceVulkan11Properties;
  new(param?: VkPhysicalDeviceVulkan11PropertiesInitializer | null): VkPhysicalDeviceVulkan11Properties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceVulkan11Properties: VkPhysicalDeviceVulkan11PropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceVulkan11Features {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    storageBuffer16BitAccess: boolean;

    /**
     *
     */
    uniformAndStorageBuffer16BitAccess: boolean;

    /**
     *
     */
    storagePushConstant16: boolean;

    /**
     *
     */
    storageInputOutput16: boolean;

    /**
     *
     */
    multiview: boolean;

    /**
     *
     */
    multiviewGeometryShader: boolean;

    /**
     *
     */
    multiviewTessellationShader: boolean;

    /**
     *
     */
    variablePointersStorageBuffer: boolean;

    /**
     *
     */
    variablePointers: boolean;

    /**
     *
     */
    protectedMemory: boolean;

    /**
     *
     */
    samplerYcbcrConversion: boolean;

    /**
     *
     */
    shaderDrawParameters: boolean;

}

declare interface VkPhysicalDeviceVulkan11FeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    storageBuffer16BitAccess?: boolean;

    /**
     *
     */
    uniformAndStorageBuffer16BitAccess?: boolean;

    /**
     *
     */
    storagePushConstant16?: boolean;

    /**
     *
     */
    storageInputOutput16?: boolean;

    /**
     *
     */
    multiview?: boolean;

    /**
     *
     */
    multiviewGeometryShader?: boolean;

    /**
     *
     */
    multiviewTessellationShader?: boolean;

    /**
     *
     */
    variablePointersStorageBuffer?: boolean;

    /**
     *
     */
    variablePointers?: boolean;

    /**
     *
     */
    protectedMemory?: boolean;

    /**
     *
     */
    samplerYcbcrConversion?: boolean;

    /**
     *
     */
    shaderDrawParameters?: boolean;
}

declare interface VkPhysicalDeviceVulkan11FeaturesConstructor {
  readonly prototype: VkPhysicalDeviceVulkan11Features;
  new(param?: VkPhysicalDeviceVulkan11FeaturesInitializer | null): VkPhysicalDeviceVulkan11Features;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceVulkan11Features: VkPhysicalDeviceVulkan11FeaturesConstructor;



  /**
   * 
   */
interface VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pipelineCreationCacheControl: boolean;

}

declare interface VkPhysicalDevicePipelineCreationCacheControlFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pipelineCreationCacheControl?: boolean;
}

declare interface VkPhysicalDevicePipelineCreationCacheControlFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT;
  new(param?: VkPhysicalDevicePipelineCreationCacheControlFeaturesEXTInitializer | null): VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT: VkPhysicalDevicePipelineCreationCacheControlFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPipelineRasterizationLineStateCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    lineRasterizationMode: VkLineRasterizationModeEXT;

    /**
     *
     */
    stippledLineEnable: boolean;

    /**
     *
     */
    lineStippleFactor: number;

    /**
     *
     */
    lineStipplePattern: number;

}

declare interface VkPipelineRasterizationLineStateCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    lineRasterizationMode?: VkLineRasterizationModeEXT;

    /**
     *
     */
    stippledLineEnable?: boolean;

    /**
     *
     */
    lineStippleFactor?: number;

    /**
     *
     */
    lineStipplePattern?: number;
}

declare interface VkPipelineRasterizationLineStateCreateInfoEXTConstructor {
  readonly prototype: VkPipelineRasterizationLineStateCreateInfoEXT;
  new(param?: VkPipelineRasterizationLineStateCreateInfoEXTInitializer | null): VkPipelineRasterizationLineStateCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineRasterizationLineStateCreateInfoEXT: VkPipelineRasterizationLineStateCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceLineRasterizationPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly lineSubPixelPrecisionBits: number;

}

declare interface VkPhysicalDeviceLineRasterizationPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly lineSubPixelPrecisionBits?: number;
}

declare interface VkPhysicalDeviceLineRasterizationPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceLineRasterizationPropertiesEXT;
  new(param?: VkPhysicalDeviceLineRasterizationPropertiesEXTInitializer | null): VkPhysicalDeviceLineRasterizationPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceLineRasterizationPropertiesEXT: VkPhysicalDeviceLineRasterizationPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceLineRasterizationFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    rectangularLines: boolean;

    /**
     *
     */
    bresenhamLines: boolean;

    /**
     *
     */
    smoothLines: boolean;

    /**
     *
     */
    stippledRectangularLines: boolean;

    /**
     *
     */
    stippledBresenhamLines: boolean;

    /**
     *
     */
    stippledSmoothLines: boolean;

}

declare interface VkPhysicalDeviceLineRasterizationFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    rectangularLines?: boolean;

    /**
     *
     */
    bresenhamLines?: boolean;

    /**
     *
     */
    smoothLines?: boolean;

    /**
     *
     */
    stippledRectangularLines?: boolean;

    /**
     *
     */
    stippledBresenhamLines?: boolean;

    /**
     *
     */
    stippledSmoothLines?: boolean;
}

declare interface VkPhysicalDeviceLineRasterizationFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceLineRasterizationFeaturesEXT;
  new(param?: VkPhysicalDeviceLineRasterizationFeaturesEXTInitializer | null): VkPhysicalDeviceLineRasterizationFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceLineRasterizationFeaturesEXT: VkPhysicalDeviceLineRasterizationFeaturesEXTConstructor;



  /**
   * 
   */
interface VkDeviceMemoryOpaqueCaptureAddressInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

}

declare interface VkDeviceMemoryOpaqueCaptureAddressInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;
}

declare interface VkDeviceMemoryOpaqueCaptureAddressInfoKHRConstructor {
  readonly prototype: VkDeviceMemoryOpaqueCaptureAddressInfoKHR;
  new(param?: VkDeviceMemoryOpaqueCaptureAddressInfoKHRInitializer | null): VkDeviceMemoryOpaqueCaptureAddressInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceMemoryOpaqueCaptureAddressInfoKHR: VkDeviceMemoryOpaqueCaptureAddressInfoKHRConstructor;



  /**
   * 
   */
interface VkDeviceMemoryOpaqueCaptureAddressInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

}

declare interface VkDeviceMemoryOpaqueCaptureAddressInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;
}

declare interface VkDeviceMemoryOpaqueCaptureAddressInfoConstructor {
  readonly prototype: VkDeviceMemoryOpaqueCaptureAddressInfo;
  new(param?: VkDeviceMemoryOpaqueCaptureAddressInfoInitializer | null): VkDeviceMemoryOpaqueCaptureAddressInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceMemoryOpaqueCaptureAddressInfo: VkDeviceMemoryOpaqueCaptureAddressInfoConstructor;



  /**
   * 
   */
interface VkMemoryOpaqueCaptureAddressAllocateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    opaqueCaptureAddress: bigint | number;

}

declare interface VkMemoryOpaqueCaptureAddressAllocateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    opaqueCaptureAddress?: bigint | number;
}

declare interface VkMemoryOpaqueCaptureAddressAllocateInfoKHRConstructor {
  readonly prototype: VkMemoryOpaqueCaptureAddressAllocateInfoKHR;
  new(param?: VkMemoryOpaqueCaptureAddressAllocateInfoKHRInitializer | null): VkMemoryOpaqueCaptureAddressAllocateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryOpaqueCaptureAddressAllocateInfoKHR: VkMemoryOpaqueCaptureAddressAllocateInfoKHRConstructor;



  /**
   * 
   */
interface VkMemoryOpaqueCaptureAddressAllocateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    opaqueCaptureAddress: bigint | number;

}

declare interface VkMemoryOpaqueCaptureAddressAllocateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    opaqueCaptureAddress?: bigint | number;
}

declare interface VkMemoryOpaqueCaptureAddressAllocateInfoConstructor {
  readonly prototype: VkMemoryOpaqueCaptureAddressAllocateInfo;
  new(param?: VkMemoryOpaqueCaptureAddressAllocateInfoInitializer | null): VkMemoryOpaqueCaptureAddressAllocateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryOpaqueCaptureAddressAllocateInfo: VkMemoryOpaqueCaptureAddressAllocateInfoConstructor;



  /**
   * 
   */
interface VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly requiredSubgroupSize: number;

}

declare interface VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly requiredSubgroupSize?: number;
}

declare interface VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTConstructor {
  readonly prototype: VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT;
  new(param?: VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTInitializer | null): VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT: VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceSubgroupSizeControlPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly minSubgroupSize: number;

    /**
     *
     */
    readonly maxSubgroupSize: number;

    /**
     *
     */
    readonly maxComputeWorkgroupSubgroups: number;

    /**
     *
     */
    readonly requiredSubgroupSizeStages: VkShaderStageFlagBits;

}

declare interface VkPhysicalDeviceSubgroupSizeControlPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly minSubgroupSize?: number;

    /**
     *
     */
    readonly maxSubgroupSize?: number;

    /**
     *
     */
    readonly maxComputeWorkgroupSubgroups?: number;

    /**
     *
     */
    readonly requiredSubgroupSizeStages?: VkShaderStageFlagBits;
}

declare interface VkPhysicalDeviceSubgroupSizeControlPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceSubgroupSizeControlPropertiesEXT;
  new(param?: VkPhysicalDeviceSubgroupSizeControlPropertiesEXTInitializer | null): VkPhysicalDeviceSubgroupSizeControlPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceSubgroupSizeControlPropertiesEXT: VkPhysicalDeviceSubgroupSizeControlPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceSubgroupSizeControlFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    subgroupSizeControl: boolean;

    /**
     *
     */
    computeFullSubgroups: boolean;

}

declare interface VkPhysicalDeviceSubgroupSizeControlFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    subgroupSizeControl?: boolean;

    /**
     *
     */
    computeFullSubgroups?: boolean;
}

declare interface VkPhysicalDeviceSubgroupSizeControlFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceSubgroupSizeControlFeaturesEXT;
  new(param?: VkPhysicalDeviceSubgroupSizeControlFeaturesEXTInitializer | null): VkPhysicalDeviceSubgroupSizeControlFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceSubgroupSizeControlFeaturesEXT: VkPhysicalDeviceSubgroupSizeControlFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly storageTexelBufferOffsetAlignmentBytes: bigint | number;

    /**
     *
     */
    readonly storageTexelBufferOffsetSingleTexelAlignment: boolean;

    /**
     *
     */
    readonly uniformTexelBufferOffsetAlignmentBytes: bigint | number;

    /**
     *
     */
    readonly uniformTexelBufferOffsetSingleTexelAlignment: boolean;

}

declare interface VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly storageTexelBufferOffsetAlignmentBytes?: bigint | number;

    /**
     *
     */
    readonly storageTexelBufferOffsetSingleTexelAlignment?: boolean;

    /**
     *
     */
    readonly uniformTexelBufferOffsetAlignmentBytes?: bigint | number;

    /**
     *
     */
    readonly uniformTexelBufferOffsetSingleTexelAlignment?: boolean;
}

declare interface VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT;
  new(param?: VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTInitializer | null): VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT: VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    texelBufferAlignment: boolean;

}

declare interface VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    texelBufferAlignment?: boolean;
}

declare interface VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;
  new(param?: VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTInitializer | null): VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT: VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderDemoteToHelperInvocation: boolean;

}

declare interface VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderDemoteToHelperInvocation?: boolean;
}

declare interface VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT;
  new(param?: VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTInitializer | null): VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT: VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPipelineExecutableInternalRepresentationKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly name: string | null;

    /**
     *
     */
    readonly description: string | null;

    /**
     *
     */
    readonly isText: boolean;

    /**
     *
     */
    readonly dataSize: bigint | number;

    /**
     *
     */
    readonly pData: ArrayBuffer | null;

}

declare interface VkPipelineExecutableInternalRepresentationKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly name?: string | null;

    /**
     *
     */
    readonly description?: string | null;

    /**
     *
     */
    readonly isText?: boolean;

    /**
     *
     */
    readonly dataSize?: bigint | number;

    /**
     *
     */
    readonly pData?: ArrayBuffer | null;
}

declare interface VkPipelineExecutableInternalRepresentationKHRConstructor {
  readonly prototype: VkPipelineExecutableInternalRepresentationKHR;
  new(param?: VkPipelineExecutableInternalRepresentationKHRInitializer | null): VkPipelineExecutableInternalRepresentationKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineExecutableInternalRepresentationKHR: VkPipelineExecutableInternalRepresentationKHRConstructor;



  /**
   * 
   */
interface VkPipelineExecutableStatisticKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly name: string | null;

    /**
     *
     */
    readonly description: string | null;

    /**
     *
     */
    readonly format: VkPipelineExecutableStatisticFormatKHR;

    /**
     *
     */
    readonly value: VkPipelineExecutableStatisticValueKHR | null;

}

declare interface VkPipelineExecutableStatisticKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly name?: string | null;

    /**
     *
     */
    readonly description?: string | null;

    /**
     *
     */
    readonly format?: VkPipelineExecutableStatisticFormatKHR;

    /**
     *
     */
    readonly value?: VkPipelineExecutableStatisticValueKHR | null;
}

declare interface VkPipelineExecutableStatisticKHRConstructor {
  readonly prototype: VkPipelineExecutableStatisticKHR;
  new(param?: VkPipelineExecutableStatisticKHRInitializer | null): VkPipelineExecutableStatisticKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineExecutableStatisticKHR: VkPipelineExecutableStatisticKHRConstructor;



  /**
   * 
   */
interface VkPipelineExecutableInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pipeline: VkPipeline | null;

    /**
     *
     */
    executableIndex: number;

}

declare interface VkPipelineExecutableInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pipeline?: VkPipeline | null;

    /**
     *
     */
    executableIndex?: number;
}

declare interface VkPipelineExecutableInfoKHRConstructor {
  readonly prototype: VkPipelineExecutableInfoKHR;
  new(param?: VkPipelineExecutableInfoKHRInitializer | null): VkPipelineExecutableInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineExecutableInfoKHR: VkPipelineExecutableInfoKHRConstructor;



  /**
   * 
   */
interface VkPipelineExecutablePropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly stages: VkShaderStageFlagBits;

    /**
     *
     */
    readonly name: string | null;

    /**
     *
     */
    readonly description: string | null;

    /**
     *
     */
    readonly subgroupSize: number;

}

declare interface VkPipelineExecutablePropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly stages?: VkShaderStageFlagBits;

    /**
     *
     */
    readonly name?: string | null;

    /**
     *
     */
    readonly description?: string | null;

    /**
     *
     */
    readonly subgroupSize?: number;
}

declare interface VkPipelineExecutablePropertiesKHRConstructor {
  readonly prototype: VkPipelineExecutablePropertiesKHR;
  new(param?: VkPipelineExecutablePropertiesKHRInitializer | null): VkPipelineExecutablePropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineExecutablePropertiesKHR: VkPipelineExecutablePropertiesKHRConstructor;



  /**
   * 
   */
interface VkPipelineInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pipeline: VkPipeline | null;

}

declare interface VkPipelineInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pipeline?: VkPipeline | null;
}

declare interface VkPipelineInfoKHRConstructor {
  readonly prototype: VkPipelineInfoKHR;
  new(param?: VkPipelineInfoKHRInitializer | null): VkPipelineInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineInfoKHR: VkPipelineInfoKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pipelineExecutableInfo: boolean;

}

declare interface VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pipelineExecutableInfo?: boolean;
}

declare interface VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
  new(param?: VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRInitializer | null): VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR: VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRConstructor;



  /**
   * 
   */
interface VkAttachmentDescriptionStencilLayoutKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    stencilInitialLayout: VkImageLayout;

    /**
     *
     */
    stencilFinalLayout: VkImageLayout;

}

declare interface VkAttachmentDescriptionStencilLayoutKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    stencilInitialLayout?: VkImageLayout;

    /**
     *
     */
    stencilFinalLayout?: VkImageLayout;
}

declare interface VkAttachmentDescriptionStencilLayoutKHRConstructor {
  readonly prototype: VkAttachmentDescriptionStencilLayoutKHR;
  new(param?: VkAttachmentDescriptionStencilLayoutKHRInitializer | null): VkAttachmentDescriptionStencilLayoutKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAttachmentDescriptionStencilLayoutKHR: VkAttachmentDescriptionStencilLayoutKHRConstructor;



  /**
   * 
   */
interface VkAttachmentDescriptionStencilLayout {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    stencilInitialLayout: VkImageLayout;

    /**
     *
     */
    stencilFinalLayout: VkImageLayout;

}

declare interface VkAttachmentDescriptionStencilLayoutInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    stencilInitialLayout?: VkImageLayout;

    /**
     *
     */
    stencilFinalLayout?: VkImageLayout;
}

declare interface VkAttachmentDescriptionStencilLayoutConstructor {
  readonly prototype: VkAttachmentDescriptionStencilLayout;
  new(param?: VkAttachmentDescriptionStencilLayoutInitializer | null): VkAttachmentDescriptionStencilLayout;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAttachmentDescriptionStencilLayout: VkAttachmentDescriptionStencilLayoutConstructor;



  /**
   * 
   */
interface VkAttachmentReferenceStencilLayoutKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    stencilLayout: VkImageLayout;

}

declare interface VkAttachmentReferenceStencilLayoutKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    stencilLayout?: VkImageLayout;
}

declare interface VkAttachmentReferenceStencilLayoutKHRConstructor {
  readonly prototype: VkAttachmentReferenceStencilLayoutKHR;
  new(param?: VkAttachmentReferenceStencilLayoutKHRInitializer | null): VkAttachmentReferenceStencilLayoutKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAttachmentReferenceStencilLayoutKHR: VkAttachmentReferenceStencilLayoutKHRConstructor;



  /**
   * 
   */
interface VkAttachmentReferenceStencilLayout {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    stencilLayout: VkImageLayout;

}

declare interface VkAttachmentReferenceStencilLayoutInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    stencilLayout?: VkImageLayout;
}

declare interface VkAttachmentReferenceStencilLayoutConstructor {
  readonly prototype: VkAttachmentReferenceStencilLayout;
  new(param?: VkAttachmentReferenceStencilLayoutInitializer | null): VkAttachmentReferenceStencilLayout;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAttachmentReferenceStencilLayout: VkAttachmentReferenceStencilLayoutConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    separateDepthStencilLayouts: boolean;

}

declare interface VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    separateDepthStencilLayouts?: boolean;
}

declare interface VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR;
  new(param?: VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHRInitializer | null): VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR: VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    separateDepthStencilLayouts: boolean;

}

declare interface VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    separateDepthStencilLayouts?: boolean;
}

declare interface VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
  new(param?: VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesInitializer | null): VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures: VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fragmentShaderSampleInterlock: boolean;

    /**
     *
     */
    fragmentShaderPixelInterlock: boolean;

    /**
     *
     */
    fragmentShaderShadingRateInterlock: boolean;

}

declare interface VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fragmentShaderSampleInterlock?: boolean;

    /**
     *
     */
    fragmentShaderPixelInterlock?: boolean;

    /**
     *
     */
    fragmentShaderShadingRateInterlock?: boolean;
}

declare interface VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;
  new(param?: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTInitializer | null): VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderSMBuiltins: boolean;

}

declare interface VkPhysicalDeviceShaderSMBuiltinsFeaturesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderSMBuiltins?: boolean;
}

declare interface VkPhysicalDeviceShaderSMBuiltinsFeaturesNVConstructor {
  readonly prototype: VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;
  new(param?: VkPhysicalDeviceShaderSMBuiltinsFeaturesNVInitializer | null): VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderSMBuiltinsFeaturesNV: VkPhysicalDeviceShaderSMBuiltinsFeaturesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly shaderSMCount: number;

    /**
     *
     */
    readonly shaderWarpsPerSM: number;

}

declare interface VkPhysicalDeviceShaderSMBuiltinsPropertiesNVInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly shaderSMCount?: number;

    /**
     *
     */
    readonly shaderWarpsPerSM?: number;
}

declare interface VkPhysicalDeviceShaderSMBuiltinsPropertiesNVConstructor {
  readonly prototype: VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;
  new(param?: VkPhysicalDeviceShaderSMBuiltinsPropertiesNVInitializer | null): VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderSMBuiltinsPropertiesNV: VkPhysicalDeviceShaderSMBuiltinsPropertiesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceIndexTypeUint8FeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    indexTypeUint8: boolean;

}

declare interface VkPhysicalDeviceIndexTypeUint8FeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    indexTypeUint8?: boolean;
}

declare interface VkPhysicalDeviceIndexTypeUint8FeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceIndexTypeUint8FeaturesEXT;
  new(param?: VkPhysicalDeviceIndexTypeUint8FeaturesEXTInitializer | null): VkPhysicalDeviceIndexTypeUint8FeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceIndexTypeUint8FeaturesEXT: VkPhysicalDeviceIndexTypeUint8FeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderClockFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderSubgroupClock: boolean;

    /**
     *
     */
    shaderDeviceClock: boolean;

}

declare interface VkPhysicalDeviceShaderClockFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderSubgroupClock?: boolean;

    /**
     *
     */
    shaderDeviceClock?: boolean;
}

declare interface VkPhysicalDeviceShaderClockFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceShaderClockFeaturesKHR;
  new(param?: VkPhysicalDeviceShaderClockFeaturesKHRInitializer | null): VkPhysicalDeviceShaderClockFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderClockFeaturesKHR: VkPhysicalDeviceShaderClockFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPerformanceConfigurationAcquireInfoINTEL {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    type: VkPerformanceConfigurationTypeINTEL;

}

declare interface VkPerformanceConfigurationAcquireInfoINTELInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    type?: VkPerformanceConfigurationTypeINTEL;
}

declare interface VkPerformanceConfigurationAcquireInfoINTELConstructor {
  readonly prototype: VkPerformanceConfigurationAcquireInfoINTEL;
  new(param?: VkPerformanceConfigurationAcquireInfoINTELInitializer | null): VkPerformanceConfigurationAcquireInfoINTEL;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPerformanceConfigurationAcquireInfoINTEL: VkPerformanceConfigurationAcquireInfoINTELConstructor;



  /**
   * 
   */
interface VkPerformanceOverrideInfoINTEL {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    type: VkPerformanceOverrideTypeINTEL;

    /**
     *
     */
    enable: boolean;

    /**
     *
     */
    parameter: bigint | number;

}

declare interface VkPerformanceOverrideInfoINTELInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    type?: VkPerformanceOverrideTypeINTEL;

    /**
     *
     */
    enable?: boolean;

    /**
     *
     */
    parameter?: bigint | number;
}

declare interface VkPerformanceOverrideInfoINTELConstructor {
  readonly prototype: VkPerformanceOverrideInfoINTEL;
  new(param?: VkPerformanceOverrideInfoINTELInitializer | null): VkPerformanceOverrideInfoINTEL;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPerformanceOverrideInfoINTEL: VkPerformanceOverrideInfoINTELConstructor;



  /**
   * 
   */
interface VkPerformanceStreamMarkerInfoINTEL {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    marker: number;

}

declare interface VkPerformanceStreamMarkerInfoINTELInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    marker?: number;
}

declare interface VkPerformanceStreamMarkerInfoINTELConstructor {
  readonly prototype: VkPerformanceStreamMarkerInfoINTEL;
  new(param?: VkPerformanceStreamMarkerInfoINTELInitializer | null): VkPerformanceStreamMarkerInfoINTEL;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPerformanceStreamMarkerInfoINTEL: VkPerformanceStreamMarkerInfoINTELConstructor;



  /**
   * 
   */
interface VkPerformanceMarkerInfoINTEL {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    marker: bigint | number;

}

declare interface VkPerformanceMarkerInfoINTELInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    marker?: bigint | number;
}

declare interface VkPerformanceMarkerInfoINTELConstructor {
  readonly prototype: VkPerformanceMarkerInfoINTEL;
  new(param?: VkPerformanceMarkerInfoINTELInitializer | null): VkPerformanceMarkerInfoINTEL;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPerformanceMarkerInfoINTEL: VkPerformanceMarkerInfoINTELConstructor;



  /**
   * 
   */
interface VkQueryPoolCreateInfoINTEL {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    performanceCountersSampling: VkQueryPoolSamplingModeINTEL;

}

declare interface VkQueryPoolCreateInfoINTELInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    performanceCountersSampling?: VkQueryPoolSamplingModeINTEL;
}

declare interface VkQueryPoolCreateInfoINTELConstructor {
  readonly prototype: VkQueryPoolCreateInfoINTEL;
  new(param?: VkQueryPoolCreateInfoINTELInitializer | null): VkQueryPoolCreateInfoINTEL;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkQueryPoolCreateInfoINTEL: VkQueryPoolCreateInfoINTELConstructor;



  /**
   * 
   */
interface VkQueryPoolPerformanceQueryCreateInfoINTEL {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    performanceCountersSampling: VkQueryPoolSamplingModeINTEL;

}

declare interface VkQueryPoolPerformanceQueryCreateInfoINTELInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    performanceCountersSampling?: VkQueryPoolSamplingModeINTEL;
}

declare interface VkQueryPoolPerformanceQueryCreateInfoINTELConstructor {
  readonly prototype: VkQueryPoolPerformanceQueryCreateInfoINTEL;
  new(param?: VkQueryPoolPerformanceQueryCreateInfoINTELInitializer | null): VkQueryPoolPerformanceQueryCreateInfoINTEL;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkQueryPoolPerformanceQueryCreateInfoINTEL: VkQueryPoolPerformanceQueryCreateInfoINTELConstructor;



  /**
   * 
   */
interface VkInitializePerformanceApiInfoINTEL {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pUserData: ArrayBuffer | null;

}

declare interface VkInitializePerformanceApiInfoINTELInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pUserData?: ArrayBuffer | null;
}

declare interface VkInitializePerformanceApiInfoINTELConstructor {
  readonly prototype: VkInitializePerformanceApiInfoINTEL;
  new(param?: VkInitializePerformanceApiInfoINTELInitializer | null): VkInitializePerformanceApiInfoINTEL;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkInitializePerformanceApiInfoINTEL: VkInitializePerformanceApiInfoINTELConstructor;



  /**
   * 
   */
interface VkPerformanceValueINTEL {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    type: VkPerformanceValueTypeINTEL;

    /**
     *
     */
    data: VkPerformanceValueDataINTEL | null;

}

declare interface VkPerformanceValueINTELInitializer {
  
    /**
     *
     */
    type?: VkPerformanceValueTypeINTEL;

    /**
     *
     */
    data?: VkPerformanceValueDataINTEL | null;
}

declare interface VkPerformanceValueINTELConstructor {
  readonly prototype: VkPerformanceValueINTEL;
  new(param?: VkPerformanceValueINTELInitializer | null): VkPerformanceValueINTEL;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPerformanceValueINTEL: VkPerformanceValueINTELConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderIntegerFunctions2: boolean;

}

declare interface VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderIntegerFunctions2?: boolean;
}

declare interface VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELConstructor {
  readonly prototype: VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
  new(param?: VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELInitializer | null): VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL: VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELConstructor;



  /**
   * 
   */
interface VkFramebufferMixedSamplesCombinationNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly coverageReductionMode: VkCoverageReductionModeNV;

    /**
     *
     */
    readonly rasterizationSamples: VkSampleCountFlagBits;

    /**
     *
     */
    readonly depthStencilSamples: VkSampleCountFlagBits;

    /**
     *
     */
    readonly colorSamples: VkSampleCountFlagBits;

}

declare interface VkFramebufferMixedSamplesCombinationNVInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly coverageReductionMode?: VkCoverageReductionModeNV;

    /**
     *
     */
    readonly rasterizationSamples?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly depthStencilSamples?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly colorSamples?: VkSampleCountFlagBits;
}

declare interface VkFramebufferMixedSamplesCombinationNVConstructor {
  readonly prototype: VkFramebufferMixedSamplesCombinationNV;
  new(param?: VkFramebufferMixedSamplesCombinationNVInitializer | null): VkFramebufferMixedSamplesCombinationNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkFramebufferMixedSamplesCombinationNV: VkFramebufferMixedSamplesCombinationNVConstructor;



  /**
   * 
   */
interface VkPipelineCoverageReductionStateCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    coverageReductionMode: VkCoverageReductionModeNV;

}

declare interface VkPipelineCoverageReductionStateCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    coverageReductionMode?: VkCoverageReductionModeNV;
}

declare interface VkPipelineCoverageReductionStateCreateInfoNVConstructor {
  readonly prototype: VkPipelineCoverageReductionStateCreateInfoNV;
  new(param?: VkPipelineCoverageReductionStateCreateInfoNVInitializer | null): VkPipelineCoverageReductionStateCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineCoverageReductionStateCreateInfoNV: VkPipelineCoverageReductionStateCreateInfoNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceCoverageReductionModeFeaturesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    coverageReductionMode: boolean;

}

declare interface VkPhysicalDeviceCoverageReductionModeFeaturesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    coverageReductionMode?: boolean;
}

declare interface VkPhysicalDeviceCoverageReductionModeFeaturesNVConstructor {
  readonly prototype: VkPhysicalDeviceCoverageReductionModeFeaturesNV;
  new(param?: VkPhysicalDeviceCoverageReductionModeFeaturesNVInitializer | null): VkPhysicalDeviceCoverageReductionModeFeaturesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceCoverageReductionModeFeaturesNV: VkPhysicalDeviceCoverageReductionModeFeaturesNVConstructor;



  /**
   * 
   */
interface VkHeadlessSurfaceCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

}

declare interface VkHeadlessSurfaceCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;
}

declare interface VkHeadlessSurfaceCreateInfoEXTConstructor {
  readonly prototype: VkHeadlessSurfaceCreateInfoEXT;
  new(param?: VkHeadlessSurfaceCreateInfoEXTInitializer | null): VkHeadlessSurfaceCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkHeadlessSurfaceCreateInfoEXT: VkHeadlessSurfaceCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkPerformanceQuerySubmitInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    counterPassIndex: number;

}

declare interface VkPerformanceQuerySubmitInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    counterPassIndex?: number;
}

declare interface VkPerformanceQuerySubmitInfoKHRConstructor {
  readonly prototype: VkPerformanceQuerySubmitInfoKHR;
  new(param?: VkPerformanceQuerySubmitInfoKHRInitializer | null): VkPerformanceQuerySubmitInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPerformanceQuerySubmitInfoKHR: VkPerformanceQuerySubmitInfoKHRConstructor;



  /**
   * 
   */
interface VkAcquireProfilingLockInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkAcquireProfilingLockFlagBitsKHR;

    /**
     *
     */
    timeout: bigint | number;

}

declare interface VkAcquireProfilingLockInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkAcquireProfilingLockFlagBitsKHR;

    /**
     *
     */
    timeout?: bigint | number;
}

declare interface VkAcquireProfilingLockInfoKHRConstructor {
  readonly prototype: VkAcquireProfilingLockInfoKHR;
  new(param?: VkAcquireProfilingLockInfoKHRInitializer | null): VkAcquireProfilingLockInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAcquireProfilingLockInfoKHR: VkAcquireProfilingLockInfoKHRConstructor;



  /**
   * 
   */
interface VkQueryPoolPerformanceCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    queueFamilyIndex: number;

    /**
     *
     */
    counterIndexCount: number;

    /**
     *
     */
    pCounterIndices: Uint32Array | null;

}

declare interface VkQueryPoolPerformanceCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    queueFamilyIndex?: number;

    /**
     *
     */
    counterIndexCount?: number;

    /**
     *
     */
    pCounterIndices?: Uint32Array | null;
}

declare interface VkQueryPoolPerformanceCreateInfoKHRConstructor {
  readonly prototype: VkQueryPoolPerformanceCreateInfoKHR;
  new(param?: VkQueryPoolPerformanceCreateInfoKHRInitializer | null): VkQueryPoolPerformanceCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkQueryPoolPerformanceCreateInfoKHR: VkQueryPoolPerformanceCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkPerformanceCounterDescriptionKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly flags: VkPerformanceCounterDescriptionFlagBitsKHR;

    /**
     *
     */
    readonly name: string | null;

    /**
     *
     */
    readonly category: string | null;

    /**
     *
     */
    readonly description: string | null;

}

declare interface VkPerformanceCounterDescriptionKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly flags?: VkPerformanceCounterDescriptionFlagBitsKHR;

    /**
     *
     */
    readonly name?: string | null;

    /**
     *
     */
    readonly category?: string | null;

    /**
     *
     */
    readonly description?: string | null;
}

declare interface VkPerformanceCounterDescriptionKHRConstructor {
  readonly prototype: VkPerformanceCounterDescriptionKHR;
  new(param?: VkPerformanceCounterDescriptionKHRInitializer | null): VkPerformanceCounterDescriptionKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPerformanceCounterDescriptionKHR: VkPerformanceCounterDescriptionKHRConstructor;



  /**
   * 
   */
interface VkPerformanceCounterKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly unit: VkPerformanceCounterUnitKHR;

    /**
     *
     */
    readonly scope: VkPerformanceCounterScopeKHR;

    /**
     *
     */
    readonly storage: VkPerformanceCounterStorageKHR;

    /**
     *
     */
    readonly uuid: number[] | null;

}

declare interface VkPerformanceCounterKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly unit?: VkPerformanceCounterUnitKHR;

    /**
     *
     */
    readonly scope?: VkPerformanceCounterScopeKHR;

    /**
     *
     */
    readonly storage?: VkPerformanceCounterStorageKHR;

    /**
     *
     */
    readonly uuid?: number[] | null;
}

declare interface VkPerformanceCounterKHRConstructor {
  readonly prototype: VkPerformanceCounterKHR;
  new(param?: VkPerformanceCounterKHRInitializer | null): VkPerformanceCounterKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPerformanceCounterKHR: VkPerformanceCounterKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDevicePerformanceQueryPropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly allowCommandBufferQueryCopies: boolean;

}

declare interface VkPhysicalDevicePerformanceQueryPropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly allowCommandBufferQueryCopies?: boolean;
}

declare interface VkPhysicalDevicePerformanceQueryPropertiesKHRConstructor {
  readonly prototype: VkPhysicalDevicePerformanceQueryPropertiesKHR;
  new(param?: VkPhysicalDevicePerformanceQueryPropertiesKHRInitializer | null): VkPhysicalDevicePerformanceQueryPropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDevicePerformanceQueryPropertiesKHR: VkPhysicalDevicePerformanceQueryPropertiesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDevicePerformanceQueryFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    performanceCounterQueryPools: boolean;

    /**
     *
     */
    performanceCounterMultipleQueryPools: boolean;

}

declare interface VkPhysicalDevicePerformanceQueryFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    performanceCounterQueryPools?: boolean;

    /**
     *
     */
    performanceCounterMultipleQueryPools?: boolean;
}

declare interface VkPhysicalDevicePerformanceQueryFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDevicePerformanceQueryFeaturesKHR;
  new(param?: VkPhysicalDevicePerformanceQueryFeaturesKHRInitializer | null): VkPhysicalDevicePerformanceQueryFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDevicePerformanceQueryFeaturesKHR: VkPhysicalDevicePerformanceQueryFeaturesKHRConstructor;



  /**
   * 
   */
interface VkSurfaceCapabilitiesFullScreenExclusiveEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fullScreenExclusiveSupported: boolean;

}

declare interface VkSurfaceCapabilitiesFullScreenExclusiveEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fullScreenExclusiveSupported?: boolean;
}

declare interface VkSurfaceCapabilitiesFullScreenExclusiveEXTConstructor {
  readonly prototype: VkSurfaceCapabilitiesFullScreenExclusiveEXT;
  new(param?: VkSurfaceCapabilitiesFullScreenExclusiveEXTInitializer | null): VkSurfaceCapabilitiesFullScreenExclusiveEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSurfaceCapabilitiesFullScreenExclusiveEXT: VkSurfaceCapabilitiesFullScreenExclusiveEXTConstructor;



  /**
   * 
   */
interface VkSurfaceFullScreenExclusiveWin32InfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    hmonitor: null;

}

declare interface VkSurfaceFullScreenExclusiveWin32InfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    hmonitor?: null;
}

declare interface VkSurfaceFullScreenExclusiveWin32InfoEXTConstructor {
  readonly prototype: VkSurfaceFullScreenExclusiveWin32InfoEXT;
  new(param?: VkSurfaceFullScreenExclusiveWin32InfoEXTInitializer | null): VkSurfaceFullScreenExclusiveWin32InfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSurfaceFullScreenExclusiveWin32InfoEXT: VkSurfaceFullScreenExclusiveWin32InfoEXTConstructor;



  /**
   * 
   */
interface VkSurfaceFullScreenExclusiveInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fullScreenExclusive: VkFullScreenExclusiveEXT;

}

declare interface VkSurfaceFullScreenExclusiveInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fullScreenExclusive?: VkFullScreenExclusiveEXT;
}

declare interface VkSurfaceFullScreenExclusiveInfoEXTConstructor {
  readonly prototype: VkSurfaceFullScreenExclusiveInfoEXT;
  new(param?: VkSurfaceFullScreenExclusiveInfoEXTInitializer | null): VkSurfaceFullScreenExclusiveInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSurfaceFullScreenExclusiveInfoEXT: VkSurfaceFullScreenExclusiveInfoEXTConstructor;



  /**
   * 
   */
interface VkPipelineCreationFeedbackCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pPipelineCreationFeedback: VkPipelineCreationFeedbackEXT | null;

    /**
     *
     */
    pipelineStageCreationFeedbackCount: number;

    /**
     *
     */
    pPipelineStageCreationFeedbacks: VkPipelineCreationFeedbackEXT[] | null;

}

declare interface VkPipelineCreationFeedbackCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pPipelineCreationFeedback?: VkPipelineCreationFeedbackEXT | null;

    /**
     *
     */
    pipelineStageCreationFeedbackCount?: number;

    /**
     *
     */
    pPipelineStageCreationFeedbacks?: VkPipelineCreationFeedbackEXT[] | null;
}

declare interface VkPipelineCreationFeedbackCreateInfoEXTConstructor {
  readonly prototype: VkPipelineCreationFeedbackCreateInfoEXT;
  new(param?: VkPipelineCreationFeedbackCreateInfoEXTInitializer | null): VkPipelineCreationFeedbackCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineCreationFeedbackCreateInfoEXT: VkPipelineCreationFeedbackCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkPipelineCreationFeedbackEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly flags: VkPipelineCreationFeedbackFlagBitsEXT;

    /**
     *
     */
    readonly duration: bigint | number;

}

declare interface VkPipelineCreationFeedbackEXTInitializer {
  
    /**
     *
     */
    readonly flags?: VkPipelineCreationFeedbackFlagBitsEXT;

    /**
     *
     */
    readonly duration?: bigint | number;
}

declare interface VkPipelineCreationFeedbackEXTConstructor {
  readonly prototype: VkPipelineCreationFeedbackEXT;
  new(param?: VkPipelineCreationFeedbackEXTInitializer | null): VkPipelineCreationFeedbackEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineCreationFeedbackEXT: VkPipelineCreationFeedbackEXTConstructor;



  /**
   * 
   */
interface VkImageViewAddressPropertiesNVX {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly deviceAddress: bigint | number;

    /**
     *
     */
    readonly size: bigint | number;

}

declare interface VkImageViewAddressPropertiesNVXInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly deviceAddress?: bigint | number;

    /**
     *
     */
    readonly size?: bigint | number;
}

declare interface VkImageViewAddressPropertiesNVXConstructor {
  readonly prototype: VkImageViewAddressPropertiesNVX;
  new(param?: VkImageViewAddressPropertiesNVXInitializer | null): VkImageViewAddressPropertiesNVX;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageViewAddressPropertiesNVX: VkImageViewAddressPropertiesNVXConstructor;



  /**
   * 
   */
interface VkImageViewHandleInfoNVX {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    imageView: VkImageView | null;

    /**
     *
     */
    descriptorType: VkDescriptorType;

    /**
     *
     */
    sampler: VkSampler | null;

}

declare interface VkImageViewHandleInfoNVXInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    imageView?: VkImageView | null;

    /**
     *
     */
    descriptorType?: VkDescriptorType;

    /**
     *
     */
    sampler?: VkSampler | null;
}

declare interface VkImageViewHandleInfoNVXConstructor {
  readonly prototype: VkImageViewHandleInfoNVX;
  new(param?: VkImageViewHandleInfoNVXInitializer | null): VkImageViewHandleInfoNVX;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageViewHandleInfoNVX: VkImageViewHandleInfoNVXConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    ycbcrImageArrays: boolean;

}

declare interface VkPhysicalDeviceYcbcrImageArraysFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    ycbcrImageArrays?: boolean;
}

declare interface VkPhysicalDeviceYcbcrImageArraysFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;
  new(param?: VkPhysicalDeviceYcbcrImageArraysFeaturesEXTInitializer | null): VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceYcbcrImageArraysFeaturesEXT: VkPhysicalDeviceYcbcrImageArraysFeaturesEXTConstructor;



  /**
   * 
   */
interface VkCooperativeMatrixPropertiesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    MSize: number;

    /**
     *
     */
    NSize: number;

    /**
     *
     */
    KSize: number;

    /**
     *
     */
    AType: VkComponentTypeNV;

    /**
     *
     */
    BType: VkComponentTypeNV;

    /**
     *
     */
    CType: VkComponentTypeNV;

    /**
     *
     */
    DType: VkComponentTypeNV;

    /**
     *
     */
    scope: VkScopeNV;

}

declare interface VkCooperativeMatrixPropertiesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    MSize?: number;

    /**
     *
     */
    NSize?: number;

    /**
     *
     */
    KSize?: number;

    /**
     *
     */
    AType?: VkComponentTypeNV;

    /**
     *
     */
    BType?: VkComponentTypeNV;

    /**
     *
     */
    CType?: VkComponentTypeNV;

    /**
     *
     */
    DType?: VkComponentTypeNV;

    /**
     *
     */
    scope?: VkScopeNV;
}

declare interface VkCooperativeMatrixPropertiesNVConstructor {
  readonly prototype: VkCooperativeMatrixPropertiesNV;
  new(param?: VkCooperativeMatrixPropertiesNVInitializer | null): VkCooperativeMatrixPropertiesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCooperativeMatrixPropertiesNV: VkCooperativeMatrixPropertiesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceCooperativeMatrixPropertiesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly cooperativeMatrixSupportedStages: VkShaderStageFlagBits;

}

declare interface VkPhysicalDeviceCooperativeMatrixPropertiesNVInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly cooperativeMatrixSupportedStages?: VkShaderStageFlagBits;
}

declare interface VkPhysicalDeviceCooperativeMatrixPropertiesNVConstructor {
  readonly prototype: VkPhysicalDeviceCooperativeMatrixPropertiesNV;
  new(param?: VkPhysicalDeviceCooperativeMatrixPropertiesNVInitializer | null): VkPhysicalDeviceCooperativeMatrixPropertiesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceCooperativeMatrixPropertiesNV: VkPhysicalDeviceCooperativeMatrixPropertiesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceCooperativeMatrixFeaturesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    cooperativeMatrix: boolean;

    /**
     *
     */
    cooperativeMatrixRobustBufferAccess: boolean;

}

declare interface VkPhysicalDeviceCooperativeMatrixFeaturesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    cooperativeMatrix?: boolean;

    /**
     *
     */
    cooperativeMatrixRobustBufferAccess?: boolean;
}

declare interface VkPhysicalDeviceCooperativeMatrixFeaturesNVConstructor {
  readonly prototype: VkPhysicalDeviceCooperativeMatrixFeaturesNV;
  new(param?: VkPhysicalDeviceCooperativeMatrixFeaturesNVInitializer | null): VkPhysicalDeviceCooperativeMatrixFeaturesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceCooperativeMatrixFeaturesNV: VkPhysicalDeviceCooperativeMatrixFeaturesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    textureCompressionASTC_HDR: boolean;

}

declare interface VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    textureCompressionASTC_HDR?: boolean;
}

declare interface VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT;
  new(param?: VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTInitializer | null): VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT: VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTConstructor;



  /**
   * 
   */
interface VkRenderPassAttachmentBeginInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    attachmentCount: number;

    /**
     *
     */
    pAttachments: VkImageView[] | null;

}

declare interface VkRenderPassAttachmentBeginInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    attachmentCount?: number;

    /**
     *
     */
    pAttachments?: VkImageView[] | null;
}

declare interface VkRenderPassAttachmentBeginInfoKHRConstructor {
  readonly prototype: VkRenderPassAttachmentBeginInfoKHR;
  new(param?: VkRenderPassAttachmentBeginInfoKHRInitializer | null): VkRenderPassAttachmentBeginInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRenderPassAttachmentBeginInfoKHR: VkRenderPassAttachmentBeginInfoKHRConstructor;



  /**
   * 
   */
interface VkRenderPassAttachmentBeginInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    attachmentCount: number;

    /**
     *
     */
    pAttachments: VkImageView[] | null;

}

declare interface VkRenderPassAttachmentBeginInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    attachmentCount?: number;

    /**
     *
     */
    pAttachments?: VkImageView[] | null;
}

declare interface VkRenderPassAttachmentBeginInfoConstructor {
  readonly prototype: VkRenderPassAttachmentBeginInfo;
  new(param?: VkRenderPassAttachmentBeginInfoInitializer | null): VkRenderPassAttachmentBeginInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRenderPassAttachmentBeginInfo: VkRenderPassAttachmentBeginInfoConstructor;



  /**
   * 
   */
interface VkFramebufferAttachmentImageInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkImageCreateFlagBits;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

    /**
     *
     */
    width: number;

    /**
     *
     */
    height: number;

    /**
     *
     */
    layerCount: number;

    /**
     *
     */
    viewFormatCount: number;

    /**
     *
     */
    pViewFormats: Int32Array | null;

}

declare interface VkFramebufferAttachmentImageInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkImageCreateFlagBits;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;

    /**
     *
     */
    width?: number;

    /**
     *
     */
    height?: number;

    /**
     *
     */
    layerCount?: number;

    /**
     *
     */
    viewFormatCount?: number;

    /**
     *
     */
    pViewFormats?: Int32Array | null;
}

declare interface VkFramebufferAttachmentImageInfoKHRConstructor {
  readonly prototype: VkFramebufferAttachmentImageInfoKHR;
  new(param?: VkFramebufferAttachmentImageInfoKHRInitializer | null): VkFramebufferAttachmentImageInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkFramebufferAttachmentImageInfoKHR: VkFramebufferAttachmentImageInfoKHRConstructor;



  /**
   * 
   */
interface VkFramebufferAttachmentImageInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkImageCreateFlagBits;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

    /**
     *
     */
    width: number;

    /**
     *
     */
    height: number;

    /**
     *
     */
    layerCount: number;

    /**
     *
     */
    viewFormatCount: number;

    /**
     *
     */
    pViewFormats: Int32Array | null;

}

declare interface VkFramebufferAttachmentImageInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkImageCreateFlagBits;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;

    /**
     *
     */
    width?: number;

    /**
     *
     */
    height?: number;

    /**
     *
     */
    layerCount?: number;

    /**
     *
     */
    viewFormatCount?: number;

    /**
     *
     */
    pViewFormats?: Int32Array | null;
}

declare interface VkFramebufferAttachmentImageInfoConstructor {
  readonly prototype: VkFramebufferAttachmentImageInfo;
  new(param?: VkFramebufferAttachmentImageInfoInitializer | null): VkFramebufferAttachmentImageInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkFramebufferAttachmentImageInfo: VkFramebufferAttachmentImageInfoConstructor;



  /**
   * 
   */
interface VkFramebufferAttachmentsCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    attachmentImageInfoCount: number;

    /**
     *
     */
    pAttachmentImageInfos: VkFramebufferAttachmentImageInfo[] | null;

}

declare interface VkFramebufferAttachmentsCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    attachmentImageInfoCount?: number;

    /**
     *
     */
    pAttachmentImageInfos?: VkFramebufferAttachmentImageInfo[] | null;
}

declare interface VkFramebufferAttachmentsCreateInfoKHRConstructor {
  readonly prototype: VkFramebufferAttachmentsCreateInfoKHR;
  new(param?: VkFramebufferAttachmentsCreateInfoKHRInitializer | null): VkFramebufferAttachmentsCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkFramebufferAttachmentsCreateInfoKHR: VkFramebufferAttachmentsCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkFramebufferAttachmentsCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    attachmentImageInfoCount: number;

    /**
     *
     */
    pAttachmentImageInfos: VkFramebufferAttachmentImageInfo[] | null;

}

declare interface VkFramebufferAttachmentsCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    attachmentImageInfoCount?: number;

    /**
     *
     */
    pAttachmentImageInfos?: VkFramebufferAttachmentImageInfo[] | null;
}

declare interface VkFramebufferAttachmentsCreateInfoConstructor {
  readonly prototype: VkFramebufferAttachmentsCreateInfo;
  new(param?: VkFramebufferAttachmentsCreateInfoInitializer | null): VkFramebufferAttachmentsCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkFramebufferAttachmentsCreateInfo: VkFramebufferAttachmentsCreateInfoConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceImagelessFramebufferFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    imagelessFramebuffer: boolean;

}

declare interface VkPhysicalDeviceImagelessFramebufferFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    imagelessFramebuffer?: boolean;
}

declare interface VkPhysicalDeviceImagelessFramebufferFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceImagelessFramebufferFeaturesKHR;
  new(param?: VkPhysicalDeviceImagelessFramebufferFeaturesKHRInitializer | null): VkPhysicalDeviceImagelessFramebufferFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceImagelessFramebufferFeaturesKHR: VkPhysicalDeviceImagelessFramebufferFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceImagelessFramebufferFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    imagelessFramebuffer: boolean;

}

declare interface VkPhysicalDeviceImagelessFramebufferFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    imagelessFramebuffer?: boolean;
}

declare interface VkPhysicalDeviceImagelessFramebufferFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceImagelessFramebufferFeatures;
  new(param?: VkPhysicalDeviceImagelessFramebufferFeaturesInitializer | null): VkPhysicalDeviceImagelessFramebufferFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceImagelessFramebufferFeatures: VkPhysicalDeviceImagelessFramebufferFeaturesConstructor;



  /**
   * 
   */
interface VkFilterCubicImageViewImageFormatPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly filterCubic: boolean;

    /**
     *
     */
    readonly filterCubicMinmax: boolean;

}

declare interface VkFilterCubicImageViewImageFormatPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly filterCubic?: boolean;

    /**
     *
     */
    readonly filterCubicMinmax?: boolean;
}

declare interface VkFilterCubicImageViewImageFormatPropertiesEXTConstructor {
  readonly prototype: VkFilterCubicImageViewImageFormatPropertiesEXT;
  new(param?: VkFilterCubicImageViewImageFormatPropertiesEXTInitializer | null): VkFilterCubicImageViewImageFormatPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkFilterCubicImageViewImageFormatPropertiesEXT: VkFilterCubicImageViewImageFormatPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceImageViewImageFormatInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    imageViewType: VkImageViewType;

}

declare interface VkPhysicalDeviceImageViewImageFormatInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    imageViewType?: VkImageViewType;
}

declare interface VkPhysicalDeviceImageViewImageFormatInfoEXTConstructor {
  readonly prototype: VkPhysicalDeviceImageViewImageFormatInfoEXT;
  new(param?: VkPhysicalDeviceImageViewImageFormatInfoEXTInitializer | null): VkPhysicalDeviceImageViewImageFormatInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceImageViewImageFormatInfoEXT: VkPhysicalDeviceImageViewImageFormatInfoEXTConstructor;



  /**
   * 
   */
interface VkBufferDeviceAddressCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceAddress: bigint | number;

}

declare interface VkBufferDeviceAddressCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceAddress?: bigint | number;
}

declare interface VkBufferDeviceAddressCreateInfoEXTConstructor {
  readonly prototype: VkBufferDeviceAddressCreateInfoEXT;
  new(param?: VkBufferDeviceAddressCreateInfoEXTInitializer | null): VkBufferDeviceAddressCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBufferDeviceAddressCreateInfoEXT: VkBufferDeviceAddressCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkBufferOpaqueCaptureAddressCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    opaqueCaptureAddress: bigint | number;

}

declare interface VkBufferOpaqueCaptureAddressCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    opaqueCaptureAddress?: bigint | number;
}

declare interface VkBufferOpaqueCaptureAddressCreateInfoKHRConstructor {
  readonly prototype: VkBufferOpaqueCaptureAddressCreateInfoKHR;
  new(param?: VkBufferOpaqueCaptureAddressCreateInfoKHRInitializer | null): VkBufferOpaqueCaptureAddressCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBufferOpaqueCaptureAddressCreateInfoKHR: VkBufferOpaqueCaptureAddressCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkBufferOpaqueCaptureAddressCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    opaqueCaptureAddress: bigint | number;

}

declare interface VkBufferOpaqueCaptureAddressCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    opaqueCaptureAddress?: bigint | number;
}

declare interface VkBufferOpaqueCaptureAddressCreateInfoConstructor {
  readonly prototype: VkBufferOpaqueCaptureAddressCreateInfo;
  new(param?: VkBufferOpaqueCaptureAddressCreateInfoInitializer | null): VkBufferOpaqueCaptureAddressCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBufferOpaqueCaptureAddressCreateInfo: VkBufferOpaqueCaptureAddressCreateInfoConstructor;



  /**
   * 
   */
interface VkBufferDeviceAddressInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    buffer: VkBuffer | null;

}

declare interface VkBufferDeviceAddressInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    buffer?: VkBuffer | null;
}

declare interface VkBufferDeviceAddressInfoEXTConstructor {
  readonly prototype: VkBufferDeviceAddressInfoEXT;
  new(param?: VkBufferDeviceAddressInfoEXTInitializer | null): VkBufferDeviceAddressInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBufferDeviceAddressInfoEXT: VkBufferDeviceAddressInfoEXTConstructor;



  /**
   * 
   */
interface VkBufferDeviceAddressInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    buffer: VkBuffer | null;

}

declare interface VkBufferDeviceAddressInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    buffer?: VkBuffer | null;
}

declare interface VkBufferDeviceAddressInfoKHRConstructor {
  readonly prototype: VkBufferDeviceAddressInfoKHR;
  new(param?: VkBufferDeviceAddressInfoKHRInitializer | null): VkBufferDeviceAddressInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBufferDeviceAddressInfoKHR: VkBufferDeviceAddressInfoKHRConstructor;



  /**
   * 
   */
interface VkBufferDeviceAddressInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    buffer: VkBuffer | null;

}

declare interface VkBufferDeviceAddressInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    buffer?: VkBuffer | null;
}

declare interface VkBufferDeviceAddressInfoConstructor {
  readonly prototype: VkBufferDeviceAddressInfo;
  new(param?: VkBufferDeviceAddressInfoInitializer | null): VkBufferDeviceAddressInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBufferDeviceAddressInfo: VkBufferDeviceAddressInfoConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceBufferAddressFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    bufferDeviceAddress: boolean;

    /**
     *
     */
    bufferDeviceAddressCaptureReplay: boolean;

    /**
     *
     */
    bufferDeviceAddressMultiDevice: boolean;

}

declare interface VkPhysicalDeviceBufferAddressFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    bufferDeviceAddress?: boolean;

    /**
     *
     */
    bufferDeviceAddressCaptureReplay?: boolean;

    /**
     *
     */
    bufferDeviceAddressMultiDevice?: boolean;
}

declare interface VkPhysicalDeviceBufferAddressFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceBufferAddressFeaturesEXT;
  new(param?: VkPhysicalDeviceBufferAddressFeaturesEXTInitializer | null): VkPhysicalDeviceBufferAddressFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceBufferAddressFeaturesEXT: VkPhysicalDeviceBufferAddressFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    bufferDeviceAddress: boolean;

    /**
     *
     */
    bufferDeviceAddressCaptureReplay: boolean;

    /**
     *
     */
    bufferDeviceAddressMultiDevice: boolean;

}

declare interface VkPhysicalDeviceBufferDeviceAddressFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    bufferDeviceAddress?: boolean;

    /**
     *
     */
    bufferDeviceAddressCaptureReplay?: boolean;

    /**
     *
     */
    bufferDeviceAddressMultiDevice?: boolean;
}

declare interface VkPhysicalDeviceBufferDeviceAddressFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
  new(param?: VkPhysicalDeviceBufferDeviceAddressFeaturesEXTInitializer | null): VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceBufferDeviceAddressFeaturesEXT: VkPhysicalDeviceBufferDeviceAddressFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceBufferDeviceAddressFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    bufferDeviceAddress: boolean;

    /**
     *
     */
    bufferDeviceAddressCaptureReplay: boolean;

    /**
     *
     */
    bufferDeviceAddressMultiDevice: boolean;

}

declare interface VkPhysicalDeviceBufferDeviceAddressFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    bufferDeviceAddress?: boolean;

    /**
     *
     */
    bufferDeviceAddressCaptureReplay?: boolean;

    /**
     *
     */
    bufferDeviceAddressMultiDevice?: boolean;
}

declare interface VkPhysicalDeviceBufferDeviceAddressFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceBufferDeviceAddressFeaturesKHR;
  new(param?: VkPhysicalDeviceBufferDeviceAddressFeaturesKHRInitializer | null): VkPhysicalDeviceBufferDeviceAddressFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceBufferDeviceAddressFeaturesKHR: VkPhysicalDeviceBufferDeviceAddressFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceBufferDeviceAddressFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    bufferDeviceAddress: boolean;

    /**
     *
     */
    bufferDeviceAddressCaptureReplay: boolean;

    /**
     *
     */
    bufferDeviceAddressMultiDevice: boolean;

}

declare interface VkPhysicalDeviceBufferDeviceAddressFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    bufferDeviceAddress?: boolean;

    /**
     *
     */
    bufferDeviceAddressCaptureReplay?: boolean;

    /**
     *
     */
    bufferDeviceAddressMultiDevice?: boolean;
}

declare interface VkPhysicalDeviceBufferDeviceAddressFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceBufferDeviceAddressFeatures;
  new(param?: VkPhysicalDeviceBufferDeviceAddressFeaturesInitializer | null): VkPhysicalDeviceBufferDeviceAddressFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceBufferDeviceAddressFeatures: VkPhysicalDeviceBufferDeviceAddressFeaturesConstructor;



  /**
   * 
   */
interface VkMemoryPriorityAllocateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    priority: number;

}

declare interface VkMemoryPriorityAllocateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    priority?: number;
}

declare interface VkMemoryPriorityAllocateInfoEXTConstructor {
  readonly prototype: VkMemoryPriorityAllocateInfoEXT;
  new(param?: VkMemoryPriorityAllocateInfoEXTInitializer | null): VkMemoryPriorityAllocateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryPriorityAllocateInfoEXT: VkMemoryPriorityAllocateInfoEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceMemoryPriorityFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    memoryPriority: boolean;

}

declare interface VkPhysicalDeviceMemoryPriorityFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    memoryPriority?: boolean;
}

declare interface VkPhysicalDeviceMemoryPriorityFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceMemoryPriorityFeaturesEXT;
  new(param?: VkPhysicalDeviceMemoryPriorityFeaturesEXTInitializer | null): VkPhysicalDeviceMemoryPriorityFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceMemoryPriorityFeaturesEXT: VkPhysicalDeviceMemoryPriorityFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceMemoryBudgetPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly heapBudget: number[] | null;

    /**
     *
     */
    readonly heapUsage: number[] | null;

}

declare interface VkPhysicalDeviceMemoryBudgetPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly heapBudget?: number[] | null;

    /**
     *
     */
    readonly heapUsage?: number[] | null;
}

declare interface VkPhysicalDeviceMemoryBudgetPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceMemoryBudgetPropertiesEXT;
  new(param?: VkPhysicalDeviceMemoryBudgetPropertiesEXTInitializer | null): VkPhysicalDeviceMemoryBudgetPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceMemoryBudgetPropertiesEXT: VkPhysicalDeviceMemoryBudgetPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPipelineRasterizationDepthClipStateCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    depthClipEnable: boolean;

}

declare interface VkPipelineRasterizationDepthClipStateCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    depthClipEnable?: boolean;
}

declare interface VkPipelineRasterizationDepthClipStateCreateInfoEXTConstructor {
  readonly prototype: VkPipelineRasterizationDepthClipStateCreateInfoEXT;
  new(param?: VkPipelineRasterizationDepthClipStateCreateInfoEXTInitializer | null): VkPipelineRasterizationDepthClipStateCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineRasterizationDepthClipStateCreateInfoEXT: VkPipelineRasterizationDepthClipStateCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceDepthClipEnableFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    depthClipEnable: boolean;

}

declare interface VkPhysicalDeviceDepthClipEnableFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    depthClipEnable?: boolean;
}

declare interface VkPhysicalDeviceDepthClipEnableFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceDepthClipEnableFeaturesEXT;
  new(param?: VkPhysicalDeviceDepthClipEnableFeaturesEXTInitializer | null): VkPhysicalDeviceDepthClipEnableFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceDepthClipEnableFeaturesEXT: VkPhysicalDeviceDepthClipEnableFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    uniformBufferStandardLayout: boolean;

}

declare interface VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    uniformBufferStandardLayout?: boolean;
}

declare interface VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR;
  new(param?: VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHRInitializer | null): VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR: VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    uniformBufferStandardLayout: boolean;

}

declare interface VkPhysicalDeviceUniformBufferStandardLayoutFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    uniformBufferStandardLayout?: boolean;
}

declare interface VkPhysicalDeviceUniformBufferStandardLayoutFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
  new(param?: VkPhysicalDeviceUniformBufferStandardLayoutFeaturesInitializer | null): VkPhysicalDeviceUniformBufferStandardLayoutFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceUniformBufferStandardLayoutFeatures: VkPhysicalDeviceUniformBufferStandardLayoutFeaturesConstructor;



  /**
   * 
   */
interface VkSurfaceProtectedCapabilitiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    supportsProtected: boolean;

}

declare interface VkSurfaceProtectedCapabilitiesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    supportsProtected?: boolean;
}

declare interface VkSurfaceProtectedCapabilitiesKHRConstructor {
  readonly prototype: VkSurfaceProtectedCapabilitiesKHR;
  new(param?: VkSurfaceProtectedCapabilitiesKHRInitializer | null): VkSurfaceProtectedCapabilitiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSurfaceProtectedCapabilitiesKHR: VkSurfaceProtectedCapabilitiesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceScalarBlockLayoutFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    scalarBlockLayout: boolean;

}

declare interface VkPhysicalDeviceScalarBlockLayoutFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    scalarBlockLayout?: boolean;
}

declare interface VkPhysicalDeviceScalarBlockLayoutFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceScalarBlockLayoutFeaturesEXT;
  new(param?: VkPhysicalDeviceScalarBlockLayoutFeaturesEXTInitializer | null): VkPhysicalDeviceScalarBlockLayoutFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceScalarBlockLayoutFeaturesEXT: VkPhysicalDeviceScalarBlockLayoutFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceScalarBlockLayoutFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    scalarBlockLayout: boolean;

}

declare interface VkPhysicalDeviceScalarBlockLayoutFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    scalarBlockLayout?: boolean;
}

declare interface VkPhysicalDeviceScalarBlockLayoutFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceScalarBlockLayoutFeatures;
  new(param?: VkPhysicalDeviceScalarBlockLayoutFeaturesInitializer | null): VkPhysicalDeviceScalarBlockLayoutFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceScalarBlockLayoutFeatures: VkPhysicalDeviceScalarBlockLayoutFeaturesConstructor;



  /**
   * 
   */
interface VkRenderPassFragmentDensityMapCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fragmentDensityMapAttachment: VkAttachmentReference | null;

}

declare interface VkRenderPassFragmentDensityMapCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fragmentDensityMapAttachment?: VkAttachmentReference | null;
}

declare interface VkRenderPassFragmentDensityMapCreateInfoEXTConstructor {
  readonly prototype: VkRenderPassFragmentDensityMapCreateInfoEXT;
  new(param?: VkRenderPassFragmentDensityMapCreateInfoEXTInitializer | null): VkRenderPassFragmentDensityMapCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRenderPassFragmentDensityMapCreateInfoEXT: VkRenderPassFragmentDensityMapCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly subsampledLoads: boolean;

    /**
     *
     */
    readonly subsampledCoarseReconstructionEarlyAccess: boolean;

    /**
     *
     */
    readonly maxSubsampledArrayLayers: number;

    /**
     *
     */
    readonly maxDescriptorSetSubsampledSamplers: number;

}

declare interface VkPhysicalDeviceFragmentDensityMap2PropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly subsampledLoads?: boolean;

    /**
     *
     */
    readonly subsampledCoarseReconstructionEarlyAccess?: boolean;

    /**
     *
     */
    readonly maxSubsampledArrayLayers?: number;

    /**
     *
     */
    readonly maxDescriptorSetSubsampledSamplers?: number;
}

declare interface VkPhysicalDeviceFragmentDensityMap2PropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceFragmentDensityMap2PropertiesEXT;
  new(param?: VkPhysicalDeviceFragmentDensityMap2PropertiesEXTInitializer | null): VkPhysicalDeviceFragmentDensityMap2PropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFragmentDensityMap2PropertiesEXT: VkPhysicalDeviceFragmentDensityMap2PropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly minFragmentDensityTexelSize: VkExtent2D | null;

    /**
     *
     */
    readonly maxFragmentDensityTexelSize: VkExtent2D | null;

    /**
     *
     */
    readonly fragmentDensityInvocations: boolean;

}

declare interface VkPhysicalDeviceFragmentDensityMapPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly minFragmentDensityTexelSize?: VkExtent2D | null;

    /**
     *
     */
    readonly maxFragmentDensityTexelSize?: VkExtent2D | null;

    /**
     *
     */
    readonly fragmentDensityInvocations?: boolean;
}

declare interface VkPhysicalDeviceFragmentDensityMapPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceFragmentDensityMapPropertiesEXT;
  new(param?: VkPhysicalDeviceFragmentDensityMapPropertiesEXTInitializer | null): VkPhysicalDeviceFragmentDensityMapPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFragmentDensityMapPropertiesEXT: VkPhysicalDeviceFragmentDensityMapPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fragmentDensityMapDeferred: boolean;

}

declare interface VkPhysicalDeviceFragmentDensityMap2FeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fragmentDensityMapDeferred?: boolean;
}

declare interface VkPhysicalDeviceFragmentDensityMap2FeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceFragmentDensityMap2FeaturesEXT;
  new(param?: VkPhysicalDeviceFragmentDensityMap2FeaturesEXTInitializer | null): VkPhysicalDeviceFragmentDensityMap2FeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFragmentDensityMap2FeaturesEXT: VkPhysicalDeviceFragmentDensityMap2FeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fragmentDensityMap: boolean;

    /**
     *
     */
    fragmentDensityMapDynamic: boolean;

    /**
     *
     */
    fragmentDensityMapNonSubsampledImages: boolean;

}

declare interface VkPhysicalDeviceFragmentDensityMapFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fragmentDensityMap?: boolean;

    /**
     *
     */
    fragmentDensityMapDynamic?: boolean;

    /**
     *
     */
    fragmentDensityMapNonSubsampledImages?: boolean;
}

declare interface VkPhysicalDeviceFragmentDensityMapFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceFragmentDensityMapFeaturesEXT;
  new(param?: VkPhysicalDeviceFragmentDensityMapFeaturesEXTInitializer | null): VkPhysicalDeviceFragmentDensityMapFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFragmentDensityMapFeaturesEXT: VkPhysicalDeviceFragmentDensityMapFeaturesEXTConstructor;



  /**
   * 
   */
interface VkDeviceMemoryOverallocationCreateInfoAMD {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    overallocationBehavior: VkMemoryOverallocationBehaviorAMD;

}

declare interface VkDeviceMemoryOverallocationCreateInfoAMDInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    overallocationBehavior?: VkMemoryOverallocationBehaviorAMD;
}

declare interface VkDeviceMemoryOverallocationCreateInfoAMDConstructor {
  readonly prototype: VkDeviceMemoryOverallocationCreateInfoAMD;
  new(param?: VkDeviceMemoryOverallocationCreateInfoAMDInitializer | null): VkDeviceMemoryOverallocationCreateInfoAMD;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceMemoryOverallocationCreateInfoAMD: VkDeviceMemoryOverallocationCreateInfoAMDConstructor;



  /**
   * 
   */
interface VkImageStencilUsageCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    stencilUsage: VkImageUsageFlagBits;

}

declare interface VkImageStencilUsageCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    stencilUsage?: VkImageUsageFlagBits;
}

declare interface VkImageStencilUsageCreateInfoEXTConstructor {
  readonly prototype: VkImageStencilUsageCreateInfoEXT;
  new(param?: VkImageStencilUsageCreateInfoEXTInitializer | null): VkImageStencilUsageCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageStencilUsageCreateInfoEXT: VkImageStencilUsageCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkImageStencilUsageCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    stencilUsage: VkImageUsageFlagBits;

}

declare interface VkImageStencilUsageCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    stencilUsage?: VkImageUsageFlagBits;
}

declare interface VkImageStencilUsageCreateInfoConstructor {
  readonly prototype: VkImageStencilUsageCreateInfo;
  new(param?: VkImageStencilUsageCreateInfoInitializer | null): VkImageStencilUsageCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageStencilUsageCreateInfo: VkImageStencilUsageCreateInfoConstructor;



  /**
   * 
   */
interface VkImageDrmFormatModifierPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly drmFormatModifier: bigint | number;

}

declare interface VkImageDrmFormatModifierPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly drmFormatModifier?: bigint | number;
}

declare interface VkImageDrmFormatModifierPropertiesEXTConstructor {
  readonly prototype: VkImageDrmFormatModifierPropertiesEXT;
  new(param?: VkImageDrmFormatModifierPropertiesEXTInitializer | null): VkImageDrmFormatModifierPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageDrmFormatModifierPropertiesEXT: VkImageDrmFormatModifierPropertiesEXTConstructor;



  /**
   * 
   */
interface VkImageDrmFormatModifierExplicitCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    drmFormatModifier: bigint | number;

    /**
     *
     */
    drmFormatModifierPlaneCount: number;

    /**
     *
     */
    pPlaneLayouts: VkSubresourceLayout[] | null;

}

declare interface VkImageDrmFormatModifierExplicitCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    drmFormatModifier?: bigint | number;

    /**
     *
     */
    drmFormatModifierPlaneCount?: number;

    /**
     *
     */
    pPlaneLayouts?: VkSubresourceLayout[] | null;
}

declare interface VkImageDrmFormatModifierExplicitCreateInfoEXTConstructor {
  readonly prototype: VkImageDrmFormatModifierExplicitCreateInfoEXT;
  new(param?: VkImageDrmFormatModifierExplicitCreateInfoEXTInitializer | null): VkImageDrmFormatModifierExplicitCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageDrmFormatModifierExplicitCreateInfoEXT: VkImageDrmFormatModifierExplicitCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkImageDrmFormatModifierListCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    drmFormatModifierCount: number;

    /**
     *
     */
    pDrmFormatModifiers: BigUint64Array | null;

}

declare interface VkImageDrmFormatModifierListCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    drmFormatModifierCount?: number;

    /**
     *
     */
    pDrmFormatModifiers?: BigUint64Array | null;
}

declare interface VkImageDrmFormatModifierListCreateInfoEXTConstructor {
  readonly prototype: VkImageDrmFormatModifierListCreateInfoEXT;
  new(param?: VkImageDrmFormatModifierListCreateInfoEXTInitializer | null): VkImageDrmFormatModifierListCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageDrmFormatModifierListCreateInfoEXT: VkImageDrmFormatModifierListCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    drmFormatModifier: bigint | number;

    /**
     *
     */
    sharingMode: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount: number;

    /**
     *
     */
    pQueueFamilyIndices: Uint32Array | null;

}

declare interface VkPhysicalDeviceImageDrmFormatModifierInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    drmFormatModifier?: bigint | number;

    /**
     *
     */
    sharingMode?: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount?: number;

    /**
     *
     */
    pQueueFamilyIndices?: Uint32Array | null;
}

declare interface VkPhysicalDeviceImageDrmFormatModifierInfoEXTConstructor {
  readonly prototype: VkPhysicalDeviceImageDrmFormatModifierInfoEXT;
  new(param?: VkPhysicalDeviceImageDrmFormatModifierInfoEXTInitializer | null): VkPhysicalDeviceImageDrmFormatModifierInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceImageDrmFormatModifierInfoEXT: VkPhysicalDeviceImageDrmFormatModifierInfoEXTConstructor;



  /**
   * 
   */
interface VkDrmFormatModifierPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly drmFormatModifier: bigint | number;

    /**
     *
     */
    readonly drmFormatModifierPlaneCount: number;

    /**
     *
     */
    readonly drmFormatModifierTilingFeatures: VkFormatFeatureFlagBits;

}

declare interface VkDrmFormatModifierPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly drmFormatModifier?: bigint | number;

    /**
     *
     */
    readonly drmFormatModifierPlaneCount?: number;

    /**
     *
     */
    readonly drmFormatModifierTilingFeatures?: VkFormatFeatureFlagBits;
}

declare interface VkDrmFormatModifierPropertiesEXTConstructor {
  readonly prototype: VkDrmFormatModifierPropertiesEXT;
  new(param?: VkDrmFormatModifierPropertiesEXTInitializer | null): VkDrmFormatModifierPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDrmFormatModifierPropertiesEXT: VkDrmFormatModifierPropertiesEXTConstructor;



  /**
   * 
   */
interface VkDrmFormatModifierPropertiesListEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly drmFormatModifierCount: number;

    /**
     *
     */
    readonly pDrmFormatModifierProperties: VkDrmFormatModifierPropertiesEXT[] | null;

}

declare interface VkDrmFormatModifierPropertiesListEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly drmFormatModifierCount?: number;

    /**
     *
     */
    readonly pDrmFormatModifierProperties?: VkDrmFormatModifierPropertiesEXT[] | null;
}

declare interface VkDrmFormatModifierPropertiesListEXTConstructor {
  readonly prototype: VkDrmFormatModifierPropertiesListEXT;
  new(param?: VkDrmFormatModifierPropertiesListEXTInitializer | null): VkDrmFormatModifierPropertiesListEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDrmFormatModifierPropertiesListEXT: VkDrmFormatModifierPropertiesListEXTConstructor;



  /**
   * 
   */
interface VkTraceRaysIndirectCommandKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    width: number;

    /**
     *
     */
    height: number;

    /**
     *
     */
    depth: number;

}

declare interface VkTraceRaysIndirectCommandKHRInitializer {
  
    /**
     *
     */
    width?: number;

    /**
     *
     */
    height?: number;

    /**
     *
     */
    depth?: number;
}

declare interface VkTraceRaysIndirectCommandKHRConstructor {
  readonly prototype: VkTraceRaysIndirectCommandKHR;
  new(param?: VkTraceRaysIndirectCommandKHRInitializer | null): VkTraceRaysIndirectCommandKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkTraceRaysIndirectCommandKHR: VkTraceRaysIndirectCommandKHRConstructor;



  /**
   * 
   */
interface VkStridedDeviceAddressRegionKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    deviceAddress: bigint | number;

    /**
     *
     */
    stride: bigint | number;

    /**
     *
     */
    size: bigint | number;

}

declare interface VkStridedDeviceAddressRegionKHRInitializer {
  
    /**
     *
     */
    deviceAddress?: bigint | number;

    /**
     *
     */
    stride?: bigint | number;

    /**
     *
     */
    size?: bigint | number;
}

declare interface VkStridedDeviceAddressRegionKHRConstructor {
  readonly prototype: VkStridedDeviceAddressRegionKHR;
  new(param?: VkStridedDeviceAddressRegionKHRInitializer | null): VkStridedDeviceAddressRegionKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkStridedDeviceAddressRegionKHR: VkStridedDeviceAddressRegionKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceRayTracingPropertiesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly shaderGroupHandleSize: number;

    /**
     *
     */
    readonly maxRecursionDepth: number;

    /**
     *
     */
    readonly maxShaderGroupStride: number;

    /**
     *
     */
    readonly shaderGroupBaseAlignment: number;

    /**
     *
     */
    readonly maxGeometryCount: bigint | number;

    /**
     *
     */
    readonly maxInstanceCount: bigint | number;

    /**
     *
     */
    readonly maxTriangleCount: bigint | number;

    /**
     *
     */
    readonly maxDescriptorSetAccelerationStructures: number;

}

declare interface VkPhysicalDeviceRayTracingPropertiesNVInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly shaderGroupHandleSize?: number;

    /**
     *
     */
    readonly maxRecursionDepth?: number;

    /**
     *
     */
    readonly maxShaderGroupStride?: number;

    /**
     *
     */
    readonly shaderGroupBaseAlignment?: number;

    /**
     *
     */
    readonly maxGeometryCount?: bigint | number;

    /**
     *
     */
    readonly maxInstanceCount?: bigint | number;

    /**
     *
     */
    readonly maxTriangleCount?: bigint | number;

    /**
     *
     */
    readonly maxDescriptorSetAccelerationStructures?: number;
}

declare interface VkPhysicalDeviceRayTracingPropertiesNVConstructor {
  readonly prototype: VkPhysicalDeviceRayTracingPropertiesNV;
  new(param?: VkPhysicalDeviceRayTracingPropertiesNVInitializer | null): VkPhysicalDeviceRayTracingPropertiesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceRayTracingPropertiesNV: VkPhysicalDeviceRayTracingPropertiesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceRayTracingPipelinePropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly shaderGroupHandleSize: number;

    /**
     *
     */
    readonly maxRayRecursionDepth: number;

    /**
     *
     */
    readonly maxShaderGroupStride: number;

    /**
     *
     */
    readonly shaderGroupBaseAlignment: number;

    /**
     *
     */
    readonly shaderGroupHandleCaptureReplaySize: number;

    /**
     *
     */
    readonly maxRayDispatchInvocationCount: number;

    /**
     *
     */
    readonly shaderGroupHandleAlignment: number;

    /**
     *
     */
    readonly maxRayHitAttributeSize: number;

}

declare interface VkPhysicalDeviceRayTracingPipelinePropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly shaderGroupHandleSize?: number;

    /**
     *
     */
    readonly maxRayRecursionDepth?: number;

    /**
     *
     */
    readonly maxShaderGroupStride?: number;

    /**
     *
     */
    readonly shaderGroupBaseAlignment?: number;

    /**
     *
     */
    readonly shaderGroupHandleCaptureReplaySize?: number;

    /**
     *
     */
    readonly maxRayDispatchInvocationCount?: number;

    /**
     *
     */
    readonly shaderGroupHandleAlignment?: number;

    /**
     *
     */
    readonly maxRayHitAttributeSize?: number;
}

declare interface VkPhysicalDeviceRayTracingPipelinePropertiesKHRConstructor {
  readonly prototype: VkPhysicalDeviceRayTracingPipelinePropertiesKHR;
  new(param?: VkPhysicalDeviceRayTracingPipelinePropertiesKHRInitializer | null): VkPhysicalDeviceRayTracingPipelinePropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceRayTracingPipelinePropertiesKHR: VkPhysicalDeviceRayTracingPipelinePropertiesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceAccelerationStructurePropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxGeometryCount: bigint | number;

    /**
     *
     */
    readonly maxInstanceCount: bigint | number;

    /**
     *
     */
    readonly maxPrimitiveCount: bigint | number;

    /**
     *
     */
    readonly maxPerStageDescriptorAccelerationStructures: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindAccelerationStructures: number;

    /**
     *
     */
    readonly maxDescriptorSetAccelerationStructures: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindAccelerationStructures: number;

    /**
     *
     */
    readonly minAccelerationStructureScratchOffsetAlignment: number;

}

declare interface VkPhysicalDeviceAccelerationStructurePropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxGeometryCount?: bigint | number;

    /**
     *
     */
    readonly maxInstanceCount?: bigint | number;

    /**
     *
     */
    readonly maxPrimitiveCount?: bigint | number;

    /**
     *
     */
    readonly maxPerStageDescriptorAccelerationStructures?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindAccelerationStructures?: number;

    /**
     *
     */
    readonly maxDescriptorSetAccelerationStructures?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindAccelerationStructures?: number;

    /**
     *
     */
    readonly minAccelerationStructureScratchOffsetAlignment?: number;
}

declare interface VkPhysicalDeviceAccelerationStructurePropertiesKHRConstructor {
  readonly prototype: VkPhysicalDeviceAccelerationStructurePropertiesKHR;
  new(param?: VkPhysicalDeviceAccelerationStructurePropertiesKHRInitializer | null): VkPhysicalDeviceAccelerationStructurePropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceAccelerationStructurePropertiesKHR: VkPhysicalDeviceAccelerationStructurePropertiesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceRayQueryFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    rayQuery: boolean;

}

declare interface VkPhysicalDeviceRayQueryFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    rayQuery?: boolean;
}

declare interface VkPhysicalDeviceRayQueryFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceRayQueryFeaturesKHR;
  new(param?: VkPhysicalDeviceRayQueryFeaturesKHRInitializer | null): VkPhysicalDeviceRayQueryFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceRayQueryFeaturesKHR: VkPhysicalDeviceRayQueryFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceRayTracingPipelineFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    rayTracingPipeline: boolean;

    /**
     *
     */
    rayTracingPipelineShaderGroupHandleCaptureReplay: boolean;

    /**
     *
     */
    rayTracingPipelineShaderGroupHandleCaptureReplayMixed: boolean;

    /**
     *
     */
    rayTracingPipelineTraceRaysIndirect: boolean;

    /**
     *
     */
    rayTraversalPrimitiveCulling: boolean;

}

declare interface VkPhysicalDeviceRayTracingPipelineFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    rayTracingPipeline?: boolean;

    /**
     *
     */
    rayTracingPipelineShaderGroupHandleCaptureReplay?: boolean;

    /**
     *
     */
    rayTracingPipelineShaderGroupHandleCaptureReplayMixed?: boolean;

    /**
     *
     */
    rayTracingPipelineTraceRaysIndirect?: boolean;

    /**
     *
     */
    rayTraversalPrimitiveCulling?: boolean;
}

declare interface VkPhysicalDeviceRayTracingPipelineFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceRayTracingPipelineFeaturesKHR;
  new(param?: VkPhysicalDeviceRayTracingPipelineFeaturesKHRInitializer | null): VkPhysicalDeviceRayTracingPipelineFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceRayTracingPipelineFeaturesKHR: VkPhysicalDeviceRayTracingPipelineFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceAccelerationStructureFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    accelerationStructure: boolean;

    /**
     *
     */
    accelerationStructureCaptureReplay: boolean;

    /**
     *
     */
    accelerationStructureIndirectBuild: boolean;

    /**
     *
     */
    accelerationStructureHostCommands: boolean;

    /**
     *
     */
    descriptorBindingAccelerationStructureUpdateAfterBind: boolean;

}

declare interface VkPhysicalDeviceAccelerationStructureFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    accelerationStructure?: boolean;

    /**
     *
     */
    accelerationStructureCaptureReplay?: boolean;

    /**
     *
     */
    accelerationStructureIndirectBuild?: boolean;

    /**
     *
     */
    accelerationStructureHostCommands?: boolean;

    /**
     *
     */
    descriptorBindingAccelerationStructureUpdateAfterBind?: boolean;
}

declare interface VkPhysicalDeviceAccelerationStructureFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceAccelerationStructureFeaturesKHR;
  new(param?: VkPhysicalDeviceAccelerationStructureFeaturesKHRInitializer | null): VkPhysicalDeviceAccelerationStructureFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceAccelerationStructureFeaturesKHR: VkPhysicalDeviceAccelerationStructureFeaturesKHRConstructor;



  /**
   * 
   */
interface VkAccelerationStructureMemoryRequirementsInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    type: VkAccelerationStructureMemoryRequirementsTypeNV;

    /**
     *
     */
    accelerationStructure: VkAccelerationStructureNV | null;

}

declare interface VkAccelerationStructureMemoryRequirementsInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    type?: VkAccelerationStructureMemoryRequirementsTypeNV;

    /**
     *
     */
    accelerationStructure?: VkAccelerationStructureNV | null;
}

declare interface VkAccelerationStructureMemoryRequirementsInfoNVConstructor {
  readonly prototype: VkAccelerationStructureMemoryRequirementsInfoNV;
  new(param?: VkAccelerationStructureMemoryRequirementsInfoNVInitializer | null): VkAccelerationStructureMemoryRequirementsInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureMemoryRequirementsInfoNV: VkAccelerationStructureMemoryRequirementsInfoNVConstructor;



  /**
   * 
   */
interface VkWriteDescriptorSetAccelerationStructureNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    accelerationStructureCount: number;

    /**
     *
     */
    pAccelerationStructures: VkAccelerationStructureNV[] | null;

}

declare interface VkWriteDescriptorSetAccelerationStructureNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    accelerationStructureCount?: number;

    /**
     *
     */
    pAccelerationStructures?: VkAccelerationStructureNV[] | null;
}

declare interface VkWriteDescriptorSetAccelerationStructureNVConstructor {
  readonly prototype: VkWriteDescriptorSetAccelerationStructureNV;
  new(param?: VkWriteDescriptorSetAccelerationStructureNVInitializer | null): VkWriteDescriptorSetAccelerationStructureNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkWriteDescriptorSetAccelerationStructureNV: VkWriteDescriptorSetAccelerationStructureNVConstructor;



  /**
   * 
   */
interface VkWriteDescriptorSetAccelerationStructureKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    accelerationStructureCount: number;

    /**
     *
     */
    pAccelerationStructures: VkAccelerationStructureKHR[] | null;

}

declare interface VkWriteDescriptorSetAccelerationStructureKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    accelerationStructureCount?: number;

    /**
     *
     */
    pAccelerationStructures?: VkAccelerationStructureKHR[] | null;
}

declare interface VkWriteDescriptorSetAccelerationStructureKHRConstructor {
  readonly prototype: VkWriteDescriptorSetAccelerationStructureKHR;
  new(param?: VkWriteDescriptorSetAccelerationStructureKHRInitializer | null): VkWriteDescriptorSetAccelerationStructureKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkWriteDescriptorSetAccelerationStructureKHR: VkWriteDescriptorSetAccelerationStructureKHRConstructor;



  /**
   * 
   */
interface VkBindAccelerationStructureMemoryInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    accelerationStructure: VkAccelerationStructureNV | null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset: bigint | number;

    /**
     *
     */
    deviceIndexCount: number;

    /**
     *
     */
    pDeviceIndices: Uint32Array | null;

}

declare interface VkBindAccelerationStructureMemoryInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    accelerationStructure?: VkAccelerationStructureNV | null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset?: bigint | number;

    /**
     *
     */
    deviceIndexCount?: number;

    /**
     *
     */
    pDeviceIndices?: Uint32Array | null;
}

declare interface VkBindAccelerationStructureMemoryInfoNVConstructor {
  readonly prototype: VkBindAccelerationStructureMemoryInfoNV;
  new(param?: VkBindAccelerationStructureMemoryInfoNVInitializer | null): VkBindAccelerationStructureMemoryInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindAccelerationStructureMemoryInfoNV: VkBindAccelerationStructureMemoryInfoNVConstructor;



  /**
   * 
   */
interface VkAccelerationStructureCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    compactedSize: bigint | number;

    /**
     *
     */
    info: VkAccelerationStructureInfoNV | null;

}

declare interface VkAccelerationStructureCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    compactedSize?: bigint | number;

    /**
     *
     */
    info?: VkAccelerationStructureInfoNV | null;
}

declare interface VkAccelerationStructureCreateInfoNVConstructor {
  readonly prototype: VkAccelerationStructureCreateInfoNV;
  new(param?: VkAccelerationStructureCreateInfoNVInitializer | null): VkAccelerationStructureCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureCreateInfoNV: VkAccelerationStructureCreateInfoNVConstructor;



  /**
   * 
   */
interface VkAccelerationStructureInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    type: VkAccelerationStructureTypeNV;

    /**
     *
     */
    flags: VkBuildAccelerationStructureFlagsNV;

    /**
     *
     */
    instanceCount: number;

    /**
     *
     */
    geometryCount: number;

    /**
     *
     */
    pGeometries: VkGeometryNV[] | null;

}

declare interface VkAccelerationStructureInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    type?: VkAccelerationStructureTypeNV;

    /**
     *
     */
    flags?: VkBuildAccelerationStructureFlagsNV;

    /**
     *
     */
    instanceCount?: number;

    /**
     *
     */
    geometryCount?: number;

    /**
     *
     */
    pGeometries?: VkGeometryNV[] | null;
}

declare interface VkAccelerationStructureInfoNVConstructor {
  readonly prototype: VkAccelerationStructureInfoNV;
  new(param?: VkAccelerationStructureInfoNVInitializer | null): VkAccelerationStructureInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureInfoNV: VkAccelerationStructureInfoNVConstructor;



  /**
   * 
   */
interface VkGeometryNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    geometryType: VkGeometryTypeKHR;

    /**
     *
     */
    geometry: VkGeometryDataNV | null;

    /**
     *
     */
    flags: VkGeometryFlagBitsKHR;

}

declare interface VkGeometryNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    geometryType?: VkGeometryTypeKHR;

    /**
     *
     */
    geometry?: VkGeometryDataNV | null;

    /**
     *
     */
    flags?: VkGeometryFlagBitsKHR;
}

declare interface VkGeometryNVConstructor {
  readonly prototype: VkGeometryNV;
  new(param?: VkGeometryNVInitializer | null): VkGeometryNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkGeometryNV: VkGeometryNVConstructor;



  /**
   * 
   */
interface VkGeometryDataNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    triangles: VkGeometryTrianglesNV | null;

    /**
     *
     */
    aabbs: VkGeometryAABBNV | null;

}

declare interface VkGeometryDataNVInitializer {
  
    /**
     *
     */
    triangles?: VkGeometryTrianglesNV | null;

    /**
     *
     */
    aabbs?: VkGeometryAABBNV | null;
}

declare interface VkGeometryDataNVConstructor {
  readonly prototype: VkGeometryDataNV;
  new(param?: VkGeometryDataNVInitializer | null): VkGeometryDataNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkGeometryDataNV: VkGeometryDataNVConstructor;



  /**
   * 
   */
interface VkGeometryAABBNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    aabbData: VkBuffer | null;

    /**
     *
     */
    numAABBs: number;

    /**
     *
     */
    stride: number;

    /**
     *
     */
    offset: bigint | number;

}

declare interface VkGeometryAABBNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    aabbData?: VkBuffer | null;

    /**
     *
     */
    numAABBs?: number;

    /**
     *
     */
    stride?: number;

    /**
     *
     */
    offset?: bigint | number;
}

declare interface VkGeometryAABBNVConstructor {
  readonly prototype: VkGeometryAABBNV;
  new(param?: VkGeometryAABBNVInitializer | null): VkGeometryAABBNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkGeometryAABBNV: VkGeometryAABBNVConstructor;



  /**
   * 
   */
interface VkGeometryTrianglesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    vertexData: VkBuffer | null;

    /**
     *
     */
    vertexOffset: bigint | number;

    /**
     *
     */
    vertexCount: number;

    /**
     *
     */
    vertexStride: bigint | number;

    /**
     *
     */
    vertexFormat: VkFormat;

    /**
     *
     */
    indexData: VkBuffer | null;

    /**
     *
     */
    indexOffset: bigint | number;

    /**
     *
     */
    indexCount: number;

    /**
     *
     */
    indexType: VkIndexType;

    /**
     *
     */
    transformData: VkBuffer | null;

    /**
     *
     */
    transformOffset: bigint | number;

}

declare interface VkGeometryTrianglesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    vertexData?: VkBuffer | null;

    /**
     *
     */
    vertexOffset?: bigint | number;

    /**
     *
     */
    vertexCount?: number;

    /**
     *
     */
    vertexStride?: bigint | number;

    /**
     *
     */
    vertexFormat?: VkFormat;

    /**
     *
     */
    indexData?: VkBuffer | null;

    /**
     *
     */
    indexOffset?: bigint | number;

    /**
     *
     */
    indexCount?: number;

    /**
     *
     */
    indexType?: VkIndexType;

    /**
     *
     */
    transformData?: VkBuffer | null;

    /**
     *
     */
    transformOffset?: bigint | number;
}

declare interface VkGeometryTrianglesNVConstructor {
  readonly prototype: VkGeometryTrianglesNV;
  new(param?: VkGeometryTrianglesNVInitializer | null): VkGeometryTrianglesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkGeometryTrianglesNV: VkGeometryTrianglesNVConstructor;



  /**
   * 
   */
interface VkRayTracingPipelineCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkPipelineCreateFlagBits;

    /**
     *
     */
    stageCount: number;

    /**
     *
     */
    pStages: VkPipelineShaderStageCreateInfo[] | null;

    /**
     *
     */
    groupCount: number;

    /**
     *
     */
    pGroups: VkRayTracingShaderGroupCreateInfoKHR[] | null;

    /**
     *
     */
    maxPipelineRayRecursionDepth: number;

    /**
     *
     */
    pLibraryInfo: VkPipelineLibraryCreateInfoKHR | null;

    /**
     *
     */
    pLibraryInterface: VkRayTracingPipelineInterfaceCreateInfoKHR | null;

    /**
     *
     */
    pDynamicState: VkPipelineDynamicStateCreateInfo | null;

    /**
     *
     */
    layout: VkPipelineLayout | null;

    /**
     *
     */
    basePipelineHandle: VkPipeline | null;

    /**
     *
     */
    basePipelineIndex: number;

}

declare interface VkRayTracingPipelineCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkPipelineCreateFlagBits;

    /**
     *
     */
    stageCount?: number;

    /**
     *
     */
    pStages?: VkPipelineShaderStageCreateInfo[] | null;

    /**
     *
     */
    groupCount?: number;

    /**
     *
     */
    pGroups?: VkRayTracingShaderGroupCreateInfoKHR[] | null;

    /**
     *
     */
    maxPipelineRayRecursionDepth?: number;

    /**
     *
     */
    pLibraryInfo?: VkPipelineLibraryCreateInfoKHR | null;

    /**
     *
     */
    pLibraryInterface?: VkRayTracingPipelineInterfaceCreateInfoKHR | null;

    /**
     *
     */
    pDynamicState?: VkPipelineDynamicStateCreateInfo | null;

    /**
     *
     */
    layout?: VkPipelineLayout | null;

    /**
     *
     */
    basePipelineHandle?: VkPipeline | null;

    /**
     *
     */
    basePipelineIndex?: number;
}

declare interface VkRayTracingPipelineCreateInfoKHRConstructor {
  readonly prototype: VkRayTracingPipelineCreateInfoKHR;
  new(param?: VkRayTracingPipelineCreateInfoKHRInitializer | null): VkRayTracingPipelineCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRayTracingPipelineCreateInfoKHR: VkRayTracingPipelineCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkRayTracingPipelineCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkPipelineCreateFlagBits;

    /**
     *
     */
    stageCount: number;

    /**
     *
     */
    pStages: VkPipelineShaderStageCreateInfo[] | null;

    /**
     *
     */
    groupCount: number;

    /**
     *
     */
    pGroups: VkRayTracingShaderGroupCreateInfoNV[] | null;

    /**
     *
     */
    maxRecursionDepth: number;

    /**
     *
     */
    layout: VkPipelineLayout | null;

    /**
     *
     */
    basePipelineHandle: VkPipeline | null;

    /**
     *
     */
    basePipelineIndex: number;

}

declare interface VkRayTracingPipelineCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkPipelineCreateFlagBits;

    /**
     *
     */
    stageCount?: number;

    /**
     *
     */
    pStages?: VkPipelineShaderStageCreateInfo[] | null;

    /**
     *
     */
    groupCount?: number;

    /**
     *
     */
    pGroups?: VkRayTracingShaderGroupCreateInfoNV[] | null;

    /**
     *
     */
    maxRecursionDepth?: number;

    /**
     *
     */
    layout?: VkPipelineLayout | null;

    /**
     *
     */
    basePipelineHandle?: VkPipeline | null;

    /**
     *
     */
    basePipelineIndex?: number;
}

declare interface VkRayTracingPipelineCreateInfoNVConstructor {
  readonly prototype: VkRayTracingPipelineCreateInfoNV;
  new(param?: VkRayTracingPipelineCreateInfoNVInitializer | null): VkRayTracingPipelineCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRayTracingPipelineCreateInfoNV: VkRayTracingPipelineCreateInfoNVConstructor;



  /**
   * 
   */
interface VkRayTracingShaderGroupCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    type: VkRayTracingShaderGroupTypeKHR;

    /**
     *
     */
    generalShader: number;

    /**
     *
     */
    closestHitShader: number;

    /**
     *
     */
    anyHitShader: number;

    /**
     *
     */
    intersectionShader: number;

    /**
     *
     */
    pShaderGroupCaptureReplayHandle: ArrayBuffer | null;

}

declare interface VkRayTracingShaderGroupCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    type?: VkRayTracingShaderGroupTypeKHR;

    /**
     *
     */
    generalShader?: number;

    /**
     *
     */
    closestHitShader?: number;

    /**
     *
     */
    anyHitShader?: number;

    /**
     *
     */
    intersectionShader?: number;

    /**
     *
     */
    pShaderGroupCaptureReplayHandle?: ArrayBuffer | null;
}

declare interface VkRayTracingShaderGroupCreateInfoKHRConstructor {
  readonly prototype: VkRayTracingShaderGroupCreateInfoKHR;
  new(param?: VkRayTracingShaderGroupCreateInfoKHRInitializer | null): VkRayTracingShaderGroupCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRayTracingShaderGroupCreateInfoKHR: VkRayTracingShaderGroupCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkRayTracingShaderGroupCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    type: VkRayTracingShaderGroupTypeKHR;

    /**
     *
     */
    generalShader: number;

    /**
     *
     */
    closestHitShader: number;

    /**
     *
     */
    anyHitShader: number;

    /**
     *
     */
    intersectionShader: number;

}

declare interface VkRayTracingShaderGroupCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    type?: VkRayTracingShaderGroupTypeKHR;

    /**
     *
     */
    generalShader?: number;

    /**
     *
     */
    closestHitShader?: number;

    /**
     *
     */
    anyHitShader?: number;

    /**
     *
     */
    intersectionShader?: number;
}

declare interface VkRayTracingShaderGroupCreateInfoNVConstructor {
  readonly prototype: VkRayTracingShaderGroupCreateInfoNV;
  new(param?: VkRayTracingShaderGroupCreateInfoNVInitializer | null): VkRayTracingShaderGroupCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRayTracingShaderGroupCreateInfoNV: VkRayTracingShaderGroupCreateInfoNVConstructor;



  /**
   * 
   */
interface VkDrawMeshTasksIndirectCommandNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    taskCount: number;

    /**
     *
     */
    firstTask: number;

}

declare interface VkDrawMeshTasksIndirectCommandNVInitializer {
  
    /**
     *
     */
    taskCount?: number;

    /**
     *
     */
    firstTask?: number;
}

declare interface VkDrawMeshTasksIndirectCommandNVConstructor {
  readonly prototype: VkDrawMeshTasksIndirectCommandNV;
  new(param?: VkDrawMeshTasksIndirectCommandNVInitializer | null): VkDrawMeshTasksIndirectCommandNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDrawMeshTasksIndirectCommandNV: VkDrawMeshTasksIndirectCommandNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceMeshShaderPropertiesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxDrawMeshTasksCount: number;

    /**
     *
     */
    readonly maxTaskWorkGroupInvocations: number;

    /**
     *
     */
    readonly maxTaskWorkGroupSize: number[] | null;

    /**
     *
     */
    readonly maxTaskTotalMemorySize: number;

    /**
     *
     */
    readonly maxTaskOutputCount: number;

    /**
     *
     */
    readonly maxMeshWorkGroupInvocations: number;

    /**
     *
     */
    readonly maxMeshWorkGroupSize: number[] | null;

    /**
     *
     */
    readonly maxMeshTotalMemorySize: number;

    /**
     *
     */
    readonly maxMeshOutputVertices: number;

    /**
     *
     */
    readonly maxMeshOutputPrimitives: number;

    /**
     *
     */
    readonly maxMeshMultiviewViewCount: number;

    /**
     *
     */
    readonly meshOutputPerVertexGranularity: number;

    /**
     *
     */
    readonly meshOutputPerPrimitiveGranularity: number;

}

declare interface VkPhysicalDeviceMeshShaderPropertiesNVInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxDrawMeshTasksCount?: number;

    /**
     *
     */
    readonly maxTaskWorkGroupInvocations?: number;

    /**
     *
     */
    readonly maxTaskWorkGroupSize?: number[] | null;

    /**
     *
     */
    readonly maxTaskTotalMemorySize?: number;

    /**
     *
     */
    readonly maxTaskOutputCount?: number;

    /**
     *
     */
    readonly maxMeshWorkGroupInvocations?: number;

    /**
     *
     */
    readonly maxMeshWorkGroupSize?: number[] | null;

    /**
     *
     */
    readonly maxMeshTotalMemorySize?: number;

    /**
     *
     */
    readonly maxMeshOutputVertices?: number;

    /**
     *
     */
    readonly maxMeshOutputPrimitives?: number;

    /**
     *
     */
    readonly maxMeshMultiviewViewCount?: number;

    /**
     *
     */
    readonly meshOutputPerVertexGranularity?: number;

    /**
     *
     */
    readonly meshOutputPerPrimitiveGranularity?: number;
}

declare interface VkPhysicalDeviceMeshShaderPropertiesNVConstructor {
  readonly prototype: VkPhysicalDeviceMeshShaderPropertiesNV;
  new(param?: VkPhysicalDeviceMeshShaderPropertiesNVInitializer | null): VkPhysicalDeviceMeshShaderPropertiesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceMeshShaderPropertiesNV: VkPhysicalDeviceMeshShaderPropertiesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceMeshShaderFeaturesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    taskShader: boolean;

    /**
     *
     */
    meshShader: boolean;

}

declare interface VkPhysicalDeviceMeshShaderFeaturesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    taskShader?: boolean;

    /**
     *
     */
    meshShader?: boolean;
}

declare interface VkPhysicalDeviceMeshShaderFeaturesNVConstructor {
  readonly prototype: VkPhysicalDeviceMeshShaderFeaturesNV;
  new(param?: VkPhysicalDeviceMeshShaderFeaturesNVInitializer | null): VkPhysicalDeviceMeshShaderFeaturesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceMeshShaderFeaturesNV: VkPhysicalDeviceMeshShaderFeaturesNVConstructor;



  /**
   * 
   */
interface VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    sampleOrderType: VkCoarseSampleOrderTypeNV;

    /**
     *
     */
    customSampleOrderCount: number;

    /**
     *
     */
    pCustomSampleOrders: VkCoarseSampleOrderCustomNV[] | null;

}

declare interface VkPipelineViewportCoarseSampleOrderStateCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    sampleOrderType?: VkCoarseSampleOrderTypeNV;

    /**
     *
     */
    customSampleOrderCount?: number;

    /**
     *
     */
    pCustomSampleOrders?: VkCoarseSampleOrderCustomNV[] | null;
}

declare interface VkPipelineViewportCoarseSampleOrderStateCreateInfoNVConstructor {
  readonly prototype: VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;
  new(param?: VkPipelineViewportCoarseSampleOrderStateCreateInfoNVInitializer | null): VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineViewportCoarseSampleOrderStateCreateInfoNV: VkPipelineViewportCoarseSampleOrderStateCreateInfoNVConstructor;



  /**
   * 
   */
interface VkCoarseSampleOrderCustomNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    shadingRate: VkShadingRatePaletteEntryNV;

    /**
     *
     */
    sampleCount: number;

    /**
     *
     */
    sampleLocationCount: number;

    /**
     *
     */
    pSampleLocations: VkCoarseSampleLocationNV[] | null;

}

declare interface VkCoarseSampleOrderCustomNVInitializer {
  
    /**
     *
     */
    shadingRate?: VkShadingRatePaletteEntryNV;

    /**
     *
     */
    sampleCount?: number;

    /**
     *
     */
    sampleLocationCount?: number;

    /**
     *
     */
    pSampleLocations?: VkCoarseSampleLocationNV[] | null;
}

declare interface VkCoarseSampleOrderCustomNVConstructor {
  readonly prototype: VkCoarseSampleOrderCustomNV;
  new(param?: VkCoarseSampleOrderCustomNVInitializer | null): VkCoarseSampleOrderCustomNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCoarseSampleOrderCustomNV: VkCoarseSampleOrderCustomNVConstructor;



  /**
   * 
   */
interface VkCoarseSampleLocationNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    pixelX: number;

    /**
     *
     */
    pixelY: number;

    /**
     *
     */
    sample: number;

}

declare interface VkCoarseSampleLocationNVInitializer {
  
    /**
     *
     */
    pixelX?: number;

    /**
     *
     */
    pixelY?: number;

    /**
     *
     */
    sample?: number;
}

declare interface VkCoarseSampleLocationNVConstructor {
  readonly prototype: VkCoarseSampleLocationNV;
  new(param?: VkCoarseSampleLocationNVInitializer | null): VkCoarseSampleLocationNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCoarseSampleLocationNV: VkCoarseSampleLocationNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShadingRateImagePropertiesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly shadingRateTexelSize: VkExtent2D | null;

    /**
     *
     */
    readonly shadingRatePaletteSize: number;

    /**
     *
     */
    readonly shadingRateMaxCoarseSamples: number;

}

declare interface VkPhysicalDeviceShadingRateImagePropertiesNVInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly shadingRateTexelSize?: VkExtent2D | null;

    /**
     *
     */
    readonly shadingRatePaletteSize?: number;

    /**
     *
     */
    readonly shadingRateMaxCoarseSamples?: number;
}

declare interface VkPhysicalDeviceShadingRateImagePropertiesNVConstructor {
  readonly prototype: VkPhysicalDeviceShadingRateImagePropertiesNV;
  new(param?: VkPhysicalDeviceShadingRateImagePropertiesNVInitializer | null): VkPhysicalDeviceShadingRateImagePropertiesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShadingRateImagePropertiesNV: VkPhysicalDeviceShadingRateImagePropertiesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShadingRateImageFeaturesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shadingRateImage: boolean;

    /**
     *
     */
    shadingRateCoarseSampleOrder: boolean;

}

declare interface VkPhysicalDeviceShadingRateImageFeaturesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shadingRateImage?: boolean;

    /**
     *
     */
    shadingRateCoarseSampleOrder?: boolean;
}

declare interface VkPhysicalDeviceShadingRateImageFeaturesNVConstructor {
  readonly prototype: VkPhysicalDeviceShadingRateImageFeaturesNV;
  new(param?: VkPhysicalDeviceShadingRateImageFeaturesNVInitializer | null): VkPhysicalDeviceShadingRateImageFeaturesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShadingRateImageFeaturesNV: VkPhysicalDeviceShadingRateImageFeaturesNVConstructor;



  /**
   * 
   */
interface VkPipelineViewportShadingRateImageStateCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shadingRateImageEnable: boolean;

    /**
     *
     */
    viewportCount: number;

    /**
     *
     */
    pShadingRatePalettes: VkShadingRatePaletteNV[] | null;

}

declare interface VkPipelineViewportShadingRateImageStateCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shadingRateImageEnable?: boolean;

    /**
     *
     */
    viewportCount?: number;

    /**
     *
     */
    pShadingRatePalettes?: VkShadingRatePaletteNV[] | null;
}

declare interface VkPipelineViewportShadingRateImageStateCreateInfoNVConstructor {
  readonly prototype: VkPipelineViewportShadingRateImageStateCreateInfoNV;
  new(param?: VkPipelineViewportShadingRateImageStateCreateInfoNVInitializer | null): VkPipelineViewportShadingRateImageStateCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineViewportShadingRateImageStateCreateInfoNV: VkPipelineViewportShadingRateImageStateCreateInfoNVConstructor;



  /**
   * 
   */
interface VkShadingRatePaletteNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    shadingRatePaletteEntryCount: number;

    /**
     *
     */
    pShadingRatePaletteEntries: Int32Array | null;

}

declare interface VkShadingRatePaletteNVInitializer {
  
    /**
     *
     */
    shadingRatePaletteEntryCount?: number;

    /**
     *
     */
    pShadingRatePaletteEntries?: Int32Array | null;
}

declare interface VkShadingRatePaletteNVConstructor {
  readonly prototype: VkShadingRatePaletteNV;
  new(param?: VkShadingRatePaletteNVInitializer | null): VkShadingRatePaletteNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkShadingRatePaletteNV: VkShadingRatePaletteNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    dedicatedAllocationImageAliasing: boolean;

}

declare interface VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    dedicatedAllocationImageAliasing?: boolean;
}

declare interface VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVConstructor {
  readonly prototype: VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
  new(param?: VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVInitializer | null): VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV: VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderImageFootprintFeaturesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    imageFootprint: boolean;

}

declare interface VkPhysicalDeviceShaderImageFootprintFeaturesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    imageFootprint?: boolean;
}

declare interface VkPhysicalDeviceShaderImageFootprintFeaturesNVConstructor {
  readonly prototype: VkPhysicalDeviceShaderImageFootprintFeaturesNV;
  new(param?: VkPhysicalDeviceShaderImageFootprintFeaturesNVInitializer | null): VkPhysicalDeviceShaderImageFootprintFeaturesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderImageFootprintFeaturesNV: VkPhysicalDeviceShaderImageFootprintFeaturesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fragmentShaderBarycentric: boolean;

}

declare interface VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fragmentShaderBarycentric?: boolean;
}

declare interface VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVConstructor {
  readonly prototype: VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;
  new(param?: VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVInitializer | null): VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV: VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    computeDerivativeGroupQuads: boolean;

    /**
     *
     */
    computeDerivativeGroupLinear: boolean;

}

declare interface VkPhysicalDeviceComputeShaderDerivativesFeaturesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    computeDerivativeGroupQuads?: boolean;

    /**
     *
     */
    computeDerivativeGroupLinear?: boolean;
}

declare interface VkPhysicalDeviceComputeShaderDerivativesFeaturesNVConstructor {
  readonly prototype: VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;
  new(param?: VkPhysicalDeviceComputeShaderDerivativesFeaturesNVInitializer | null): VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceComputeShaderDerivativesFeaturesNV: VkPhysicalDeviceComputeShaderDerivativesFeaturesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceCornerSampledImageFeaturesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    cornerSampledImage: boolean;

}

declare interface VkPhysicalDeviceCornerSampledImageFeaturesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    cornerSampledImage?: boolean;
}

declare interface VkPhysicalDeviceCornerSampledImageFeaturesNVConstructor {
  readonly prototype: VkPhysicalDeviceCornerSampledImageFeaturesNV;
  new(param?: VkPhysicalDeviceCornerSampledImageFeaturesNVInitializer | null): VkPhysicalDeviceCornerSampledImageFeaturesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceCornerSampledImageFeaturesNV: VkPhysicalDeviceCornerSampledImageFeaturesNVConstructor;



  /**
   * 
   */
interface VkPipelineViewportExclusiveScissorStateCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    exclusiveScissorCount: number;

    /**
     *
     */
    pExclusiveScissors: VkRect2D[] | null;

}

declare interface VkPipelineViewportExclusiveScissorStateCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    exclusiveScissorCount?: number;

    /**
     *
     */
    pExclusiveScissors?: VkRect2D[] | null;
}

declare interface VkPipelineViewportExclusiveScissorStateCreateInfoNVConstructor {
  readonly prototype: VkPipelineViewportExclusiveScissorStateCreateInfoNV;
  new(param?: VkPipelineViewportExclusiveScissorStateCreateInfoNVInitializer | null): VkPipelineViewportExclusiveScissorStateCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineViewportExclusiveScissorStateCreateInfoNV: VkPipelineViewportExclusiveScissorStateCreateInfoNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceExclusiveScissorFeaturesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    exclusiveScissor: boolean;

}

declare interface VkPhysicalDeviceExclusiveScissorFeaturesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    exclusiveScissor?: boolean;
}

declare interface VkPhysicalDeviceExclusiveScissorFeaturesNVConstructor {
  readonly prototype: VkPhysicalDeviceExclusiveScissorFeaturesNV;
  new(param?: VkPhysicalDeviceExclusiveScissorFeaturesNVInitializer | null): VkPhysicalDeviceExclusiveScissorFeaturesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceExclusiveScissorFeaturesNV: VkPhysicalDeviceExclusiveScissorFeaturesNVConstructor;



  /**
   * 
   */
interface VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    representativeFragmentTestEnable: boolean;

}

declare interface VkPipelineRepresentativeFragmentTestStateCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    representativeFragmentTestEnable?: boolean;
}

declare interface VkPipelineRepresentativeFragmentTestStateCreateInfoNVConstructor {
  readonly prototype: VkPipelineRepresentativeFragmentTestStateCreateInfoNV;
  new(param?: VkPipelineRepresentativeFragmentTestStateCreateInfoNVInitializer | null): VkPipelineRepresentativeFragmentTestStateCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineRepresentativeFragmentTestStateCreateInfoNV: VkPipelineRepresentativeFragmentTestStateCreateInfoNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    representativeFragmentTest: boolean;

}

declare interface VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    representativeFragmentTest?: boolean;
}

declare interface VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVConstructor {
  readonly prototype: VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;
  new(param?: VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVInitializer | null): VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV: VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVConstructor;



  /**
   * 
   */
interface VkPipelineRasterizationStateStreamCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    rasterizationStream: number;

}

declare interface VkPipelineRasterizationStateStreamCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    rasterizationStream?: number;
}

declare interface VkPipelineRasterizationStateStreamCreateInfoEXTConstructor {
  readonly prototype: VkPipelineRasterizationStateStreamCreateInfoEXT;
  new(param?: VkPipelineRasterizationStateStreamCreateInfoEXTInitializer | null): VkPipelineRasterizationStateStreamCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineRasterizationStateStreamCreateInfoEXT: VkPipelineRasterizationStateStreamCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceTransformFeedbackPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxTransformFeedbackStreams: number;

    /**
     *
     */
    readonly maxTransformFeedbackBuffers: number;

    /**
     *
     */
    readonly maxTransformFeedbackBufferSize: bigint | number;

    /**
     *
     */
    readonly maxTransformFeedbackStreamDataSize: number;

    /**
     *
     */
    readonly maxTransformFeedbackBufferDataSize: number;

    /**
     *
     */
    readonly maxTransformFeedbackBufferDataStride: number;

    /**
     *
     */
    readonly transformFeedbackQueries: boolean;

    /**
     *
     */
    readonly transformFeedbackStreamsLinesTriangles: boolean;

    /**
     *
     */
    readonly transformFeedbackRasterizationStreamSelect: boolean;

    /**
     *
     */
    readonly transformFeedbackDraw: boolean;

}

declare interface VkPhysicalDeviceTransformFeedbackPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxTransformFeedbackStreams?: number;

    /**
     *
     */
    readonly maxTransformFeedbackBuffers?: number;

    /**
     *
     */
    readonly maxTransformFeedbackBufferSize?: bigint | number;

    /**
     *
     */
    readonly maxTransformFeedbackStreamDataSize?: number;

    /**
     *
     */
    readonly maxTransformFeedbackBufferDataSize?: number;

    /**
     *
     */
    readonly maxTransformFeedbackBufferDataStride?: number;

    /**
     *
     */
    readonly transformFeedbackQueries?: boolean;

    /**
     *
     */
    readonly transformFeedbackStreamsLinesTriangles?: boolean;

    /**
     *
     */
    readonly transformFeedbackRasterizationStreamSelect?: boolean;

    /**
     *
     */
    readonly transformFeedbackDraw?: boolean;
}

declare interface VkPhysicalDeviceTransformFeedbackPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceTransformFeedbackPropertiesEXT;
  new(param?: VkPhysicalDeviceTransformFeedbackPropertiesEXTInitializer | null): VkPhysicalDeviceTransformFeedbackPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceTransformFeedbackPropertiesEXT: VkPhysicalDeviceTransformFeedbackPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceTransformFeedbackFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    transformFeedback: boolean;

    /**
     *
     */
    geometryStreams: boolean;

}

declare interface VkPhysicalDeviceTransformFeedbackFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    transformFeedback?: boolean;

    /**
     *
     */
    geometryStreams?: boolean;
}

declare interface VkPhysicalDeviceTransformFeedbackFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceTransformFeedbackFeaturesEXT;
  new(param?: VkPhysicalDeviceTransformFeedbackFeaturesEXTInitializer | null): VkPhysicalDeviceTransformFeedbackFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceTransformFeedbackFeaturesEXT: VkPhysicalDeviceTransformFeedbackFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceASTCDecodeFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    decodeModeSharedExponent: boolean;

}

declare interface VkPhysicalDeviceASTCDecodeFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    decodeModeSharedExponent?: boolean;
}

declare interface VkPhysicalDeviceASTCDecodeFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceASTCDecodeFeaturesEXT;
  new(param?: VkPhysicalDeviceASTCDecodeFeaturesEXTInitializer | null): VkPhysicalDeviceASTCDecodeFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceASTCDecodeFeaturesEXT: VkPhysicalDeviceASTCDecodeFeaturesEXTConstructor;



  /**
   * 
   */
interface VkImageViewASTCDecodeModeEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    decodeMode: VkFormat;

}

declare interface VkImageViewASTCDecodeModeEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    decodeMode?: VkFormat;
}

declare interface VkImageViewASTCDecodeModeEXTConstructor {
  readonly prototype: VkImageViewASTCDecodeModeEXT;
  new(param?: VkImageViewASTCDecodeModeEXTInitializer | null): VkImageViewASTCDecodeModeEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageViewASTCDecodeModeEXT: VkImageViewASTCDecodeModeEXTConstructor;



  /**
   * 
   */
interface VkSubpassDescriptionDepthStencilResolveKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    depthResolveMode: VkResolveModeFlagBits;

    /**
     *
     */
    stencilResolveMode: VkResolveModeFlagBits;

    /**
     *
     */
    pDepthStencilResolveAttachment: VkAttachmentReference2 | null;

}

declare interface VkSubpassDescriptionDepthStencilResolveKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    depthResolveMode?: VkResolveModeFlagBits;

    /**
     *
     */
    stencilResolveMode?: VkResolveModeFlagBits;

    /**
     *
     */
    pDepthStencilResolveAttachment?: VkAttachmentReference2 | null;
}

declare interface VkSubpassDescriptionDepthStencilResolveKHRConstructor {
  readonly prototype: VkSubpassDescriptionDepthStencilResolveKHR;
  new(param?: VkSubpassDescriptionDepthStencilResolveKHRInitializer | null): VkSubpassDescriptionDepthStencilResolveKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSubpassDescriptionDepthStencilResolveKHR: VkSubpassDescriptionDepthStencilResolveKHRConstructor;



  /**
   * 
   */
interface VkSubpassDescriptionDepthStencilResolve {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    depthResolveMode: VkResolveModeFlagBits;

    /**
     *
     */
    stencilResolveMode: VkResolveModeFlagBits;

    /**
     *
     */
    pDepthStencilResolveAttachment: VkAttachmentReference2 | null;

}

declare interface VkSubpassDescriptionDepthStencilResolveInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    depthResolveMode?: VkResolveModeFlagBits;

    /**
     *
     */
    stencilResolveMode?: VkResolveModeFlagBits;

    /**
     *
     */
    pDepthStencilResolveAttachment?: VkAttachmentReference2 | null;
}

declare interface VkSubpassDescriptionDepthStencilResolveConstructor {
  readonly prototype: VkSubpassDescriptionDepthStencilResolve;
  new(param?: VkSubpassDescriptionDepthStencilResolveInitializer | null): VkSubpassDescriptionDepthStencilResolve;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSubpassDescriptionDepthStencilResolve: VkSubpassDescriptionDepthStencilResolveConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceDepthStencilResolvePropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly supportedDepthResolveModes: VkResolveModeFlagBits;

    /**
     *
     */
    readonly supportedStencilResolveModes: VkResolveModeFlagBits;

    /**
     *
     */
    readonly independentResolveNone: boolean;

    /**
     *
     */
    readonly independentResolve: boolean;

}

declare interface VkPhysicalDeviceDepthStencilResolvePropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly supportedDepthResolveModes?: VkResolveModeFlagBits;

    /**
     *
     */
    readonly supportedStencilResolveModes?: VkResolveModeFlagBits;

    /**
     *
     */
    readonly independentResolveNone?: boolean;

    /**
     *
     */
    readonly independentResolve?: boolean;
}

declare interface VkPhysicalDeviceDepthStencilResolvePropertiesKHRConstructor {
  readonly prototype: VkPhysicalDeviceDepthStencilResolvePropertiesKHR;
  new(param?: VkPhysicalDeviceDepthStencilResolvePropertiesKHRInitializer | null): VkPhysicalDeviceDepthStencilResolvePropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceDepthStencilResolvePropertiesKHR: VkPhysicalDeviceDepthStencilResolvePropertiesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceDepthStencilResolveProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly supportedDepthResolveModes: VkResolveModeFlagBits;

    /**
     *
     */
    readonly supportedStencilResolveModes: VkResolveModeFlagBits;

    /**
     *
     */
    readonly independentResolveNone: boolean;

    /**
     *
     */
    readonly independentResolve: boolean;

}

declare interface VkPhysicalDeviceDepthStencilResolvePropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly supportedDepthResolveModes?: VkResolveModeFlagBits;

    /**
     *
     */
    readonly supportedStencilResolveModes?: VkResolveModeFlagBits;

    /**
     *
     */
    readonly independentResolveNone?: boolean;

    /**
     *
     */
    readonly independentResolve?: boolean;
}

declare interface VkPhysicalDeviceDepthStencilResolvePropertiesConstructor {
  readonly prototype: VkPhysicalDeviceDepthStencilResolveProperties;
  new(param?: VkPhysicalDeviceDepthStencilResolvePropertiesInitializer | null): VkPhysicalDeviceDepthStencilResolveProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceDepthStencilResolveProperties: VkPhysicalDeviceDepthStencilResolvePropertiesConstructor;



  /**
   * 
   */
interface VkCheckpointDataNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly stage: VkPipelineStageFlagBits;

    /**
     *
     */
    readonly pCheckpointMarker: ArrayBuffer | null;

}

declare interface VkCheckpointDataNVInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly stage?: VkPipelineStageFlagBits;

    /**
     *
     */
    readonly pCheckpointMarker?: ArrayBuffer | null;
}

declare interface VkCheckpointDataNVConstructor {
  readonly prototype: VkCheckpointDataNV;
  new(param?: VkCheckpointDataNVInitializer | null): VkCheckpointDataNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCheckpointDataNV: VkCheckpointDataNVConstructor;



  /**
   * 
   */
interface VkQueueFamilyCheckpointPropertiesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly checkpointExecutionStageMask: VkPipelineStageFlagBits;

}

declare interface VkQueueFamilyCheckpointPropertiesNVInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly checkpointExecutionStageMask?: VkPipelineStageFlagBits;
}

declare interface VkQueueFamilyCheckpointPropertiesNVConstructor {
  readonly prototype: VkQueueFamilyCheckpointPropertiesNV;
  new(param?: VkQueueFamilyCheckpointPropertiesNVInitializer | null): VkQueueFamilyCheckpointPropertiesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkQueueFamilyCheckpointPropertiesNV: VkQueueFamilyCheckpointPropertiesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    vertexAttributeInstanceRateDivisor: boolean;

    /**
     *
     */
    vertexAttributeInstanceRateZeroDivisor: boolean;

}

declare interface VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    vertexAttributeInstanceRateDivisor?: boolean;

    /**
     *
     */
    vertexAttributeInstanceRateZeroDivisor?: boolean;
}

declare interface VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;
  new(param?: VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTInitializer | null): VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT: VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderBufferFloat32Atomics: boolean;

    /**
     *
     */
    shaderBufferFloat32AtomicAdd: boolean;

    /**
     *
     */
    shaderBufferFloat64Atomics: boolean;

    /**
     *
     */
    shaderBufferFloat64AtomicAdd: boolean;

    /**
     *
     */
    shaderSharedFloat32Atomics: boolean;

    /**
     *
     */
    shaderSharedFloat32AtomicAdd: boolean;

    /**
     *
     */
    shaderSharedFloat64Atomics: boolean;

    /**
     *
     */
    shaderSharedFloat64AtomicAdd: boolean;

    /**
     *
     */
    shaderImageFloat32Atomics: boolean;

    /**
     *
     */
    shaderImageFloat32AtomicAdd: boolean;

    /**
     *
     */
    sparseImageFloat32Atomics: boolean;

    /**
     *
     */
    sparseImageFloat32AtomicAdd: boolean;

}

declare interface VkPhysicalDeviceShaderAtomicFloatFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderBufferFloat32Atomics?: boolean;

    /**
     *
     */
    shaderBufferFloat32AtomicAdd?: boolean;

    /**
     *
     */
    shaderBufferFloat64Atomics?: boolean;

    /**
     *
     */
    shaderBufferFloat64AtomicAdd?: boolean;

    /**
     *
     */
    shaderSharedFloat32Atomics?: boolean;

    /**
     *
     */
    shaderSharedFloat32AtomicAdd?: boolean;

    /**
     *
     */
    shaderSharedFloat64Atomics?: boolean;

    /**
     *
     */
    shaderSharedFloat64AtomicAdd?: boolean;

    /**
     *
     */
    shaderImageFloat32Atomics?: boolean;

    /**
     *
     */
    shaderImageFloat32AtomicAdd?: boolean;

    /**
     *
     */
    sparseImageFloat32Atomics?: boolean;

    /**
     *
     */
    sparseImageFloat32AtomicAdd?: boolean;
}

declare interface VkPhysicalDeviceShaderAtomicFloatFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT;
  new(param?: VkPhysicalDeviceShaderAtomicFloatFeaturesEXTInitializer | null): VkPhysicalDeviceShaderAtomicFloatFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderAtomicFloatFeaturesEXT: VkPhysicalDeviceShaderAtomicFloatFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderAtomicInt64FeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderBufferInt64Atomics: boolean;

    /**
     *
     */
    shaderSharedInt64Atomics: boolean;

}

declare interface VkPhysicalDeviceShaderAtomicInt64FeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderBufferInt64Atomics?: boolean;

    /**
     *
     */
    shaderSharedInt64Atomics?: boolean;
}

declare interface VkPhysicalDeviceShaderAtomicInt64FeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceShaderAtomicInt64FeaturesKHR;
  new(param?: VkPhysicalDeviceShaderAtomicInt64FeaturesKHRInitializer | null): VkPhysicalDeviceShaderAtomicInt64FeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderAtomicInt64FeaturesKHR: VkPhysicalDeviceShaderAtomicInt64FeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderAtomicInt64Features {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderBufferInt64Atomics: boolean;

    /**
     *
     */
    shaderSharedInt64Atomics: boolean;

}

declare interface VkPhysicalDeviceShaderAtomicInt64FeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderBufferInt64Atomics?: boolean;

    /**
     *
     */
    shaderSharedInt64Atomics?: boolean;
}

declare interface VkPhysicalDeviceShaderAtomicInt64FeaturesConstructor {
  readonly prototype: VkPhysicalDeviceShaderAtomicInt64Features;
  new(param?: VkPhysicalDeviceShaderAtomicInt64FeaturesInitializer | null): VkPhysicalDeviceShaderAtomicInt64Features;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderAtomicInt64Features: VkPhysicalDeviceShaderAtomicInt64FeaturesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceVulkanMemoryModelFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    vulkanMemoryModel: boolean;

    /**
     *
     */
    vulkanMemoryModelDeviceScope: boolean;

    /**
     *
     */
    vulkanMemoryModelAvailabilityVisibilityChains: boolean;

}

declare interface VkPhysicalDeviceVulkanMemoryModelFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    vulkanMemoryModel?: boolean;

    /**
     *
     */
    vulkanMemoryModelDeviceScope?: boolean;

    /**
     *
     */
    vulkanMemoryModelAvailabilityVisibilityChains?: boolean;
}

declare interface VkPhysicalDeviceVulkanMemoryModelFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceVulkanMemoryModelFeaturesKHR;
  new(param?: VkPhysicalDeviceVulkanMemoryModelFeaturesKHRInitializer | null): VkPhysicalDeviceVulkanMemoryModelFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceVulkanMemoryModelFeaturesKHR: VkPhysicalDeviceVulkanMemoryModelFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceVulkanMemoryModelFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    vulkanMemoryModel: boolean;

    /**
     *
     */
    vulkanMemoryModelDeviceScope: boolean;

    /**
     *
     */
    vulkanMemoryModelAvailabilityVisibilityChains: boolean;

}

declare interface VkPhysicalDeviceVulkanMemoryModelFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    vulkanMemoryModel?: boolean;

    /**
     *
     */
    vulkanMemoryModelDeviceScope?: boolean;

    /**
     *
     */
    vulkanMemoryModelAvailabilityVisibilityChains?: boolean;
}

declare interface VkPhysicalDeviceVulkanMemoryModelFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceVulkanMemoryModelFeatures;
  new(param?: VkPhysicalDeviceVulkanMemoryModelFeaturesInitializer | null): VkPhysicalDeviceVulkanMemoryModelFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceVulkanMemoryModelFeatures: VkPhysicalDeviceVulkanMemoryModelFeaturesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceConditionalRenderingFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    conditionalRendering: boolean;

    /**
     *
     */
    inheritedConditionalRendering: boolean;

}

declare interface VkPhysicalDeviceConditionalRenderingFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    conditionalRendering?: boolean;

    /**
     *
     */
    inheritedConditionalRendering?: boolean;
}

declare interface VkPhysicalDeviceConditionalRenderingFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceConditionalRenderingFeaturesEXT;
  new(param?: VkPhysicalDeviceConditionalRenderingFeaturesEXTInitializer | null): VkPhysicalDeviceConditionalRenderingFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceConditionalRenderingFeaturesEXT: VkPhysicalDeviceConditionalRenderingFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDevice8BitStorageFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    storageBuffer8BitAccess: boolean;

    /**
     *
     */
    uniformAndStorageBuffer8BitAccess: boolean;

    /**
     *
     */
    storagePushConstant8: boolean;

}

declare interface VkPhysicalDevice8BitStorageFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    storageBuffer8BitAccess?: boolean;

    /**
     *
     */
    uniformAndStorageBuffer8BitAccess?: boolean;

    /**
     *
     */
    storagePushConstant8?: boolean;
}

declare interface VkPhysicalDevice8BitStorageFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDevice8BitStorageFeaturesKHR;
  new(param?: VkPhysicalDevice8BitStorageFeaturesKHRInitializer | null): VkPhysicalDevice8BitStorageFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDevice8BitStorageFeaturesKHR: VkPhysicalDevice8BitStorageFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDevice8BitStorageFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    storageBuffer8BitAccess: boolean;

    /**
     *
     */
    uniformAndStorageBuffer8BitAccess: boolean;

    /**
     *
     */
    storagePushConstant8: boolean;

}

declare interface VkPhysicalDevice8BitStorageFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    storageBuffer8BitAccess?: boolean;

    /**
     *
     */
    uniformAndStorageBuffer8BitAccess?: boolean;

    /**
     *
     */
    storagePushConstant8?: boolean;
}

declare interface VkPhysicalDevice8BitStorageFeaturesConstructor {
  readonly prototype: VkPhysicalDevice8BitStorageFeatures;
  new(param?: VkPhysicalDevice8BitStorageFeaturesInitializer | null): VkPhysicalDevice8BitStorageFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDevice8BitStorageFeatures: VkPhysicalDevice8BitStorageFeaturesConstructor;



  /**
   * 
   */
interface VkCommandBufferInheritanceConditionalRenderingInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    conditionalRenderingEnable: boolean;

}

declare interface VkCommandBufferInheritanceConditionalRenderingInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    conditionalRenderingEnable?: boolean;
}

declare interface VkCommandBufferInheritanceConditionalRenderingInfoEXTConstructor {
  readonly prototype: VkCommandBufferInheritanceConditionalRenderingInfoEXT;
  new(param?: VkCommandBufferInheritanceConditionalRenderingInfoEXTInitializer | null): VkCommandBufferInheritanceConditionalRenderingInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCommandBufferInheritanceConditionalRenderingInfoEXT: VkCommandBufferInheritanceConditionalRenderingInfoEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDevicePCIBusInfoPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly pciDomain: number;

    /**
     *
     */
    readonly pciBus: number;

    /**
     *
     */
    readonly pciDevice: number;

    /**
     *
     */
    readonly pciFunction: number;

}

declare interface VkPhysicalDevicePCIBusInfoPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly pciDomain?: number;

    /**
     *
     */
    readonly pciBus?: number;

    /**
     *
     */
    readonly pciDevice?: number;

    /**
     *
     */
    readonly pciFunction?: number;
}

declare interface VkPhysicalDevicePCIBusInfoPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDevicePCIBusInfoPropertiesEXT;
  new(param?: VkPhysicalDevicePCIBusInfoPropertiesEXTInitializer | null): VkPhysicalDevicePCIBusInfoPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDevicePCIBusInfoPropertiesEXT: VkPhysicalDevicePCIBusInfoPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxVertexAttribDivisor: number;

}

declare interface VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxVertexAttribDivisor?: number;
}

declare interface VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;
  new(param?: VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTInitializer | null): VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT: VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPipelineVertexInputDivisorStateCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    vertexBindingDivisorCount: number;

    /**
     *
     */
    pVertexBindingDivisors: VkVertexInputBindingDivisorDescriptionEXT[] | null;

}

declare interface VkPipelineVertexInputDivisorStateCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    vertexBindingDivisorCount?: number;

    /**
     *
     */
    pVertexBindingDivisors?: VkVertexInputBindingDivisorDescriptionEXT[] | null;
}

declare interface VkPipelineVertexInputDivisorStateCreateInfoEXTConstructor {
  readonly prototype: VkPipelineVertexInputDivisorStateCreateInfoEXT;
  new(param?: VkPipelineVertexInputDivisorStateCreateInfoEXTInitializer | null): VkPipelineVertexInputDivisorStateCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineVertexInputDivisorStateCreateInfoEXT: VkPipelineVertexInputDivisorStateCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkVertexInputBindingDivisorDescriptionEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    binding: number;

    /**
     *
     */
    divisor: number;

}

declare interface VkVertexInputBindingDivisorDescriptionEXTInitializer {
  
    /**
     *
     */
    binding?: number;

    /**
     *
     */
    divisor?: number;
}

declare interface VkVertexInputBindingDivisorDescriptionEXTConstructor {
  readonly prototype: VkVertexInputBindingDivisorDescriptionEXT;
  new(param?: VkVertexInputBindingDivisorDescriptionEXTInitializer | null): VkVertexInputBindingDivisorDescriptionEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkVertexInputBindingDivisorDescriptionEXT: VkVertexInputBindingDivisorDescriptionEXTConstructor;



  /**
   * 
   */
interface VkSemaphoreSignalInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    semaphore: VkSemaphore | null;

    /**
     *
     */
    value: bigint | number;

}

declare interface VkSemaphoreSignalInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    semaphore?: VkSemaphore | null;

    /**
     *
     */
    value?: bigint | number;
}

declare interface VkSemaphoreSignalInfoKHRConstructor {
  readonly prototype: VkSemaphoreSignalInfoKHR;
  new(param?: VkSemaphoreSignalInfoKHRInitializer | null): VkSemaphoreSignalInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSemaphoreSignalInfoKHR: VkSemaphoreSignalInfoKHRConstructor;



  /**
   * 
   */
interface VkSemaphoreSignalInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    semaphore: VkSemaphore | null;

    /**
     *
     */
    value: bigint | number;

}

declare interface VkSemaphoreSignalInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    semaphore?: VkSemaphore | null;

    /**
     *
     */
    value?: bigint | number;
}

declare interface VkSemaphoreSignalInfoConstructor {
  readonly prototype: VkSemaphoreSignalInfo;
  new(param?: VkSemaphoreSignalInfoInitializer | null): VkSemaphoreSignalInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSemaphoreSignalInfo: VkSemaphoreSignalInfoConstructor;



  /**
   * 
   */
interface VkSemaphoreWaitInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkSemaphoreWaitFlagBits;

    /**
     *
     */
    semaphoreCount: number;

    /**
     *
     */
    pSemaphores: VkSemaphore[] | null;

    /**
     *
     */
    pValues: BigUint64Array | null;

}

declare interface VkSemaphoreWaitInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkSemaphoreWaitFlagBits;

    /**
     *
     */
    semaphoreCount?: number;

    /**
     *
     */
    pSemaphores?: VkSemaphore[] | null;

    /**
     *
     */
    pValues?: BigUint64Array | null;
}

declare interface VkSemaphoreWaitInfoKHRConstructor {
  readonly prototype: VkSemaphoreWaitInfoKHR;
  new(param?: VkSemaphoreWaitInfoKHRInitializer | null): VkSemaphoreWaitInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSemaphoreWaitInfoKHR: VkSemaphoreWaitInfoKHRConstructor;



  /**
   * 
   */
interface VkSemaphoreWaitInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkSemaphoreWaitFlagBits;

    /**
     *
     */
    semaphoreCount: number;

    /**
     *
     */
    pSemaphores: VkSemaphore[] | null;

    /**
     *
     */
    pValues: BigUint64Array | null;

}

declare interface VkSemaphoreWaitInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkSemaphoreWaitFlagBits;

    /**
     *
     */
    semaphoreCount?: number;

    /**
     *
     */
    pSemaphores?: VkSemaphore[] | null;

    /**
     *
     */
    pValues?: BigUint64Array | null;
}

declare interface VkSemaphoreWaitInfoConstructor {
  readonly prototype: VkSemaphoreWaitInfo;
  new(param?: VkSemaphoreWaitInfoInitializer | null): VkSemaphoreWaitInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSemaphoreWaitInfo: VkSemaphoreWaitInfoConstructor;



  /**
   * 
   */
interface VkTimelineSemaphoreSubmitInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    waitSemaphoreValueCount: number;

    /**
     *
     */
    pWaitSemaphoreValues: BigUint64Array | null;

    /**
     *
     */
    signalSemaphoreValueCount: number;

    /**
     *
     */
    pSignalSemaphoreValues: BigUint64Array | null;

}

declare interface VkTimelineSemaphoreSubmitInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    waitSemaphoreValueCount?: number;

    /**
     *
     */
    pWaitSemaphoreValues?: BigUint64Array | null;

    /**
     *
     */
    signalSemaphoreValueCount?: number;

    /**
     *
     */
    pSignalSemaphoreValues?: BigUint64Array | null;
}

declare interface VkTimelineSemaphoreSubmitInfoKHRConstructor {
  readonly prototype: VkTimelineSemaphoreSubmitInfoKHR;
  new(param?: VkTimelineSemaphoreSubmitInfoKHRInitializer | null): VkTimelineSemaphoreSubmitInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkTimelineSemaphoreSubmitInfoKHR: VkTimelineSemaphoreSubmitInfoKHRConstructor;



  /**
   * 
   */
interface VkTimelineSemaphoreSubmitInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    waitSemaphoreValueCount: number;

    /**
     *
     */
    pWaitSemaphoreValues: BigUint64Array | null;

    /**
     *
     */
    signalSemaphoreValueCount: number;

    /**
     *
     */
    pSignalSemaphoreValues: BigUint64Array | null;

}

declare interface VkTimelineSemaphoreSubmitInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    waitSemaphoreValueCount?: number;

    /**
     *
     */
    pWaitSemaphoreValues?: BigUint64Array | null;

    /**
     *
     */
    signalSemaphoreValueCount?: number;

    /**
     *
     */
    pSignalSemaphoreValues?: BigUint64Array | null;
}

declare interface VkTimelineSemaphoreSubmitInfoConstructor {
  readonly prototype: VkTimelineSemaphoreSubmitInfo;
  new(param?: VkTimelineSemaphoreSubmitInfoInitializer | null): VkTimelineSemaphoreSubmitInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkTimelineSemaphoreSubmitInfo: VkTimelineSemaphoreSubmitInfoConstructor;



  /**
   * 
   */
interface VkSemaphoreTypeCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    semaphoreType: VkSemaphoreType;

    /**
     *
     */
    initialValue: bigint | number;

}

declare interface VkSemaphoreTypeCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    semaphoreType?: VkSemaphoreType;

    /**
     *
     */
    initialValue?: bigint | number;
}

declare interface VkSemaphoreTypeCreateInfoKHRConstructor {
  readonly prototype: VkSemaphoreTypeCreateInfoKHR;
  new(param?: VkSemaphoreTypeCreateInfoKHRInitializer | null): VkSemaphoreTypeCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSemaphoreTypeCreateInfoKHR: VkSemaphoreTypeCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkSemaphoreTypeCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    semaphoreType: VkSemaphoreType;

    /**
     *
     */
    initialValue: bigint | number;

}

declare interface VkSemaphoreTypeCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    semaphoreType?: VkSemaphoreType;

    /**
     *
     */
    initialValue?: bigint | number;
}

declare interface VkSemaphoreTypeCreateInfoConstructor {
  readonly prototype: VkSemaphoreTypeCreateInfo;
  new(param?: VkSemaphoreTypeCreateInfoInitializer | null): VkSemaphoreTypeCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSemaphoreTypeCreateInfo: VkSemaphoreTypeCreateInfoConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceTimelineSemaphorePropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxTimelineSemaphoreValueDifference: bigint | number;

}

declare interface VkPhysicalDeviceTimelineSemaphorePropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxTimelineSemaphoreValueDifference?: bigint | number;
}

declare interface VkPhysicalDeviceTimelineSemaphorePropertiesKHRConstructor {
  readonly prototype: VkPhysicalDeviceTimelineSemaphorePropertiesKHR;
  new(param?: VkPhysicalDeviceTimelineSemaphorePropertiesKHRInitializer | null): VkPhysicalDeviceTimelineSemaphorePropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceTimelineSemaphorePropertiesKHR: VkPhysicalDeviceTimelineSemaphorePropertiesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceTimelineSemaphoreProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxTimelineSemaphoreValueDifference: bigint | number;

}

declare interface VkPhysicalDeviceTimelineSemaphorePropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxTimelineSemaphoreValueDifference?: bigint | number;
}

declare interface VkPhysicalDeviceTimelineSemaphorePropertiesConstructor {
  readonly prototype: VkPhysicalDeviceTimelineSemaphoreProperties;
  new(param?: VkPhysicalDeviceTimelineSemaphorePropertiesInitializer | null): VkPhysicalDeviceTimelineSemaphoreProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceTimelineSemaphoreProperties: VkPhysicalDeviceTimelineSemaphorePropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceTimelineSemaphoreFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    timelineSemaphore: boolean;

}

declare interface VkPhysicalDeviceTimelineSemaphoreFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    timelineSemaphore?: boolean;
}

declare interface VkPhysicalDeviceTimelineSemaphoreFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceTimelineSemaphoreFeaturesKHR;
  new(param?: VkPhysicalDeviceTimelineSemaphoreFeaturesKHRInitializer | null): VkPhysicalDeviceTimelineSemaphoreFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceTimelineSemaphoreFeaturesKHR: VkPhysicalDeviceTimelineSemaphoreFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceTimelineSemaphoreFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    timelineSemaphore: boolean;

}

declare interface VkPhysicalDeviceTimelineSemaphoreFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    timelineSemaphore?: boolean;
}

declare interface VkPhysicalDeviceTimelineSemaphoreFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceTimelineSemaphoreFeatures;
  new(param?: VkPhysicalDeviceTimelineSemaphoreFeaturesInitializer | null): VkPhysicalDeviceTimelineSemaphoreFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceTimelineSemaphoreFeatures: VkPhysicalDeviceTimelineSemaphoreFeaturesConstructor;



  /**
   * 
   */
interface VkSubpassEndInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

}

declare interface VkSubpassEndInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;
}

declare interface VkSubpassEndInfoKHRConstructor {
  readonly prototype: VkSubpassEndInfoKHR;
  new(param?: VkSubpassEndInfoKHRInitializer | null): VkSubpassEndInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSubpassEndInfoKHR: VkSubpassEndInfoKHRConstructor;



  /**
   * 
   */
interface VkSubpassEndInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

}

declare interface VkSubpassEndInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;
}

declare interface VkSubpassEndInfoConstructor {
  readonly prototype: VkSubpassEndInfo;
  new(param?: VkSubpassEndInfoInitializer | null): VkSubpassEndInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSubpassEndInfo: VkSubpassEndInfoConstructor;



  /**
   * 
   */
interface VkSubpassBeginInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    contents: VkSubpassContents;

}

declare interface VkSubpassBeginInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    contents?: VkSubpassContents;
}

declare interface VkSubpassBeginInfoKHRConstructor {
  readonly prototype: VkSubpassBeginInfoKHR;
  new(param?: VkSubpassBeginInfoKHRInitializer | null): VkSubpassBeginInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSubpassBeginInfoKHR: VkSubpassBeginInfoKHRConstructor;



  /**
   * 
   */
interface VkSubpassBeginInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    contents: VkSubpassContents;

}

declare interface VkSubpassBeginInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    contents?: VkSubpassContents;
}

declare interface VkSubpassBeginInfoConstructor {
  readonly prototype: VkSubpassBeginInfo;
  new(param?: VkSubpassBeginInfoInitializer | null): VkSubpassBeginInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSubpassBeginInfo: VkSubpassBeginInfoConstructor;



  /**
   * 
   */
interface VkRenderPassCreateInfo2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkRenderPassCreateFlagBits;

    /**
     *
     */
    attachmentCount: number;

    /**
     *
     */
    pAttachments: VkAttachmentDescription2[] | null;

    /**
     *
     */
    subpassCount: number;

    /**
     *
     */
    pSubpasses: VkSubpassDescription2[] | null;

    /**
     *
     */
    dependencyCount: number;

    /**
     *
     */
    pDependencies: VkSubpassDependency2[] | null;

    /**
     *
     */
    correlatedViewMaskCount: number;

    /**
     *
     */
    pCorrelatedViewMasks: Uint32Array | null;

}

declare interface VkRenderPassCreateInfo2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkRenderPassCreateFlagBits;

    /**
     *
     */
    attachmentCount?: number;

    /**
     *
     */
    pAttachments?: VkAttachmentDescription2[] | null;

    /**
     *
     */
    subpassCount?: number;

    /**
     *
     */
    pSubpasses?: VkSubpassDescription2[] | null;

    /**
     *
     */
    dependencyCount?: number;

    /**
     *
     */
    pDependencies?: VkSubpassDependency2[] | null;

    /**
     *
     */
    correlatedViewMaskCount?: number;

    /**
     *
     */
    pCorrelatedViewMasks?: Uint32Array | null;
}

declare interface VkRenderPassCreateInfo2KHRConstructor {
  readonly prototype: VkRenderPassCreateInfo2KHR;
  new(param?: VkRenderPassCreateInfo2KHRInitializer | null): VkRenderPassCreateInfo2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRenderPassCreateInfo2KHR: VkRenderPassCreateInfo2KHRConstructor;



  /**
   * 
   */
interface VkRenderPassCreateInfo2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkRenderPassCreateFlagBits;

    /**
     *
     */
    attachmentCount: number;

    /**
     *
     */
    pAttachments: VkAttachmentDescription2[] | null;

    /**
     *
     */
    subpassCount: number;

    /**
     *
     */
    pSubpasses: VkSubpassDescription2[] | null;

    /**
     *
     */
    dependencyCount: number;

    /**
     *
     */
    pDependencies: VkSubpassDependency2[] | null;

    /**
     *
     */
    correlatedViewMaskCount: number;

    /**
     *
     */
    pCorrelatedViewMasks: Uint32Array | null;

}

declare interface VkRenderPassCreateInfo2Initializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkRenderPassCreateFlagBits;

    /**
     *
     */
    attachmentCount?: number;

    /**
     *
     */
    pAttachments?: VkAttachmentDescription2[] | null;

    /**
     *
     */
    subpassCount?: number;

    /**
     *
     */
    pSubpasses?: VkSubpassDescription2[] | null;

    /**
     *
     */
    dependencyCount?: number;

    /**
     *
     */
    pDependencies?: VkSubpassDependency2[] | null;

    /**
     *
     */
    correlatedViewMaskCount?: number;

    /**
     *
     */
    pCorrelatedViewMasks?: Uint32Array | null;
}

declare interface VkRenderPassCreateInfo2Constructor {
  readonly prototype: VkRenderPassCreateInfo2;
  new(param?: VkRenderPassCreateInfo2Initializer | null): VkRenderPassCreateInfo2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRenderPassCreateInfo2: VkRenderPassCreateInfo2Constructor;



  /**
   * 
   */
interface VkSubpassDependency2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcSubpass: number;

    /**
     *
     */
    dstSubpass: number;

    /**
     *
     */
    srcStageMask: VkPipelineStageFlagBits;

    /**
     *
     */
    dstStageMask: VkPipelineStageFlagBits;

    /**
     *
     */
    srcAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dependencyFlags: VkDependencyFlagBits;

    /**
     *
     */
    viewOffset: number;

}

declare interface VkSubpassDependency2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcSubpass?: number;

    /**
     *
     */
    dstSubpass?: number;

    /**
     *
     */
    srcStageMask?: VkPipelineStageFlagBits;

    /**
     *
     */
    dstStageMask?: VkPipelineStageFlagBits;

    /**
     *
     */
    srcAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dependencyFlags?: VkDependencyFlagBits;

    /**
     *
     */
    viewOffset?: number;
}

declare interface VkSubpassDependency2KHRConstructor {
  readonly prototype: VkSubpassDependency2KHR;
  new(param?: VkSubpassDependency2KHRInitializer | null): VkSubpassDependency2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSubpassDependency2KHR: VkSubpassDependency2KHRConstructor;



  /**
   * 
   */
interface VkSubpassDependency2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcSubpass: number;

    /**
     *
     */
    dstSubpass: number;

    /**
     *
     */
    srcStageMask: VkPipelineStageFlagBits;

    /**
     *
     */
    dstStageMask: VkPipelineStageFlagBits;

    /**
     *
     */
    srcAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dependencyFlags: VkDependencyFlagBits;

    /**
     *
     */
    viewOffset: number;

}

declare interface VkSubpassDependency2Initializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcSubpass?: number;

    /**
     *
     */
    dstSubpass?: number;

    /**
     *
     */
    srcStageMask?: VkPipelineStageFlagBits;

    /**
     *
     */
    dstStageMask?: VkPipelineStageFlagBits;

    /**
     *
     */
    srcAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dependencyFlags?: VkDependencyFlagBits;

    /**
     *
     */
    viewOffset?: number;
}

declare interface VkSubpassDependency2Constructor {
  readonly prototype: VkSubpassDependency2;
  new(param?: VkSubpassDependency2Initializer | null): VkSubpassDependency2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSubpassDependency2: VkSubpassDependency2Constructor;



  /**
   * 
   */
interface VkSubpassDescription2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkSubpassDescriptionFlagBits;

    /**
     *
     */
    pipelineBindPoint: VkPipelineBindPoint;

    /**
     *
     */
    viewMask: number;

    /**
     *
     */
    inputAttachmentCount: number;

    /**
     *
     */
    pInputAttachments: VkAttachmentReference2[] | null;

    /**
     *
     */
    colorAttachmentCount: number;

    /**
     *
     */
    pColorAttachments: VkAttachmentReference2[] | null;

    /**
     *
     */
    pResolveAttachments: VkAttachmentReference2[] | null;

    /**
     *
     */
    pDepthStencilAttachment: VkAttachmentReference2 | null;

    /**
     *
     */
    preserveAttachmentCount: number;

    /**
     *
     */
    pPreserveAttachments: Uint32Array | null;

}

declare interface VkSubpassDescription2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkSubpassDescriptionFlagBits;

    /**
     *
     */
    pipelineBindPoint?: VkPipelineBindPoint;

    /**
     *
     */
    viewMask?: number;

    /**
     *
     */
    inputAttachmentCount?: number;

    /**
     *
     */
    pInputAttachments?: VkAttachmentReference2[] | null;

    /**
     *
     */
    colorAttachmentCount?: number;

    /**
     *
     */
    pColorAttachments?: VkAttachmentReference2[] | null;

    /**
     *
     */
    pResolveAttachments?: VkAttachmentReference2[] | null;

    /**
     *
     */
    pDepthStencilAttachment?: VkAttachmentReference2 | null;

    /**
     *
     */
    preserveAttachmentCount?: number;

    /**
     *
     */
    pPreserveAttachments?: Uint32Array | null;
}

declare interface VkSubpassDescription2KHRConstructor {
  readonly prototype: VkSubpassDescription2KHR;
  new(param?: VkSubpassDescription2KHRInitializer | null): VkSubpassDescription2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSubpassDescription2KHR: VkSubpassDescription2KHRConstructor;



  /**
   * 
   */
interface VkSubpassDescription2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkSubpassDescriptionFlagBits;

    /**
     *
     */
    pipelineBindPoint: VkPipelineBindPoint;

    /**
     *
     */
    viewMask: number;

    /**
     *
     */
    inputAttachmentCount: number;

    /**
     *
     */
    pInputAttachments: VkAttachmentReference2[] | null;

    /**
     *
     */
    colorAttachmentCount: number;

    /**
     *
     */
    pColorAttachments: VkAttachmentReference2[] | null;

    /**
     *
     */
    pResolveAttachments: VkAttachmentReference2[] | null;

    /**
     *
     */
    pDepthStencilAttachment: VkAttachmentReference2 | null;

    /**
     *
     */
    preserveAttachmentCount: number;

    /**
     *
     */
    pPreserveAttachments: Uint32Array | null;

}

declare interface VkSubpassDescription2Initializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkSubpassDescriptionFlagBits;

    /**
     *
     */
    pipelineBindPoint?: VkPipelineBindPoint;

    /**
     *
     */
    viewMask?: number;

    /**
     *
     */
    inputAttachmentCount?: number;

    /**
     *
     */
    pInputAttachments?: VkAttachmentReference2[] | null;

    /**
     *
     */
    colorAttachmentCount?: number;

    /**
     *
     */
    pColorAttachments?: VkAttachmentReference2[] | null;

    /**
     *
     */
    pResolveAttachments?: VkAttachmentReference2[] | null;

    /**
     *
     */
    pDepthStencilAttachment?: VkAttachmentReference2 | null;

    /**
     *
     */
    preserveAttachmentCount?: number;

    /**
     *
     */
    pPreserveAttachments?: Uint32Array | null;
}

declare interface VkSubpassDescription2Constructor {
  readonly prototype: VkSubpassDescription2;
  new(param?: VkSubpassDescription2Initializer | null): VkSubpassDescription2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSubpassDescription2: VkSubpassDescription2Constructor;



  /**
   * 
   */
interface VkAttachmentReference2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    attachment: number;

    /**
     *
     */
    layout: VkImageLayout;

    /**
     *
     */
    aspectMask: VkImageAspectFlagBits;

}

declare interface VkAttachmentReference2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    attachment?: number;

    /**
     *
     */
    layout?: VkImageLayout;

    /**
     *
     */
    aspectMask?: VkImageAspectFlagBits;
}

declare interface VkAttachmentReference2KHRConstructor {
  readonly prototype: VkAttachmentReference2KHR;
  new(param?: VkAttachmentReference2KHRInitializer | null): VkAttachmentReference2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAttachmentReference2KHR: VkAttachmentReference2KHRConstructor;



  /**
   * 
   */
interface VkAttachmentReference2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    attachment: number;

    /**
     *
     */
    layout: VkImageLayout;

    /**
     *
     */
    aspectMask: VkImageAspectFlagBits;

}

declare interface VkAttachmentReference2Initializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    attachment?: number;

    /**
     *
     */
    layout?: VkImageLayout;

    /**
     *
     */
    aspectMask?: VkImageAspectFlagBits;
}

declare interface VkAttachmentReference2Constructor {
  readonly prototype: VkAttachmentReference2;
  new(param?: VkAttachmentReference2Initializer | null): VkAttachmentReference2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAttachmentReference2: VkAttachmentReference2Constructor;



  /**
   * 
   */
interface VkAttachmentDescription2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkAttachmentDescriptionFlagBits;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    samples: VkSampleCountFlagBits;

    /**
     *
     */
    loadOp: VkAttachmentLoadOp;

    /**
     *
     */
    storeOp: VkAttachmentStoreOp;

    /**
     *
     */
    stencilLoadOp: VkAttachmentLoadOp;

    /**
     *
     */
    stencilStoreOp: VkAttachmentStoreOp;

    /**
     *
     */
    initialLayout: VkImageLayout;

    /**
     *
     */
    finalLayout: VkImageLayout;

}

declare interface VkAttachmentDescription2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkAttachmentDescriptionFlagBits;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    samples?: VkSampleCountFlagBits;

    /**
     *
     */
    loadOp?: VkAttachmentLoadOp;

    /**
     *
     */
    storeOp?: VkAttachmentStoreOp;

    /**
     *
     */
    stencilLoadOp?: VkAttachmentLoadOp;

    /**
     *
     */
    stencilStoreOp?: VkAttachmentStoreOp;

    /**
     *
     */
    initialLayout?: VkImageLayout;

    /**
     *
     */
    finalLayout?: VkImageLayout;
}

declare interface VkAttachmentDescription2KHRConstructor {
  readonly prototype: VkAttachmentDescription2KHR;
  new(param?: VkAttachmentDescription2KHRInitializer | null): VkAttachmentDescription2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAttachmentDescription2KHR: VkAttachmentDescription2KHRConstructor;



  /**
   * 
   */
interface VkAttachmentDescription2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkAttachmentDescriptionFlagBits;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    samples: VkSampleCountFlagBits;

    /**
     *
     */
    loadOp: VkAttachmentLoadOp;

    /**
     *
     */
    storeOp: VkAttachmentStoreOp;

    /**
     *
     */
    stencilLoadOp: VkAttachmentLoadOp;

    /**
     *
     */
    stencilStoreOp: VkAttachmentStoreOp;

    /**
     *
     */
    initialLayout: VkImageLayout;

    /**
     *
     */
    finalLayout: VkImageLayout;

}

declare interface VkAttachmentDescription2Initializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkAttachmentDescriptionFlagBits;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    samples?: VkSampleCountFlagBits;

    /**
     *
     */
    loadOp?: VkAttachmentLoadOp;

    /**
     *
     */
    storeOp?: VkAttachmentStoreOp;

    /**
     *
     */
    stencilLoadOp?: VkAttachmentLoadOp;

    /**
     *
     */
    stencilStoreOp?: VkAttachmentStoreOp;

    /**
     *
     */
    initialLayout?: VkImageLayout;

    /**
     *
     */
    finalLayout?: VkImageLayout;
}

declare interface VkAttachmentDescription2Constructor {
  readonly prototype: VkAttachmentDescription2;
  new(param?: VkAttachmentDescription2Initializer | null): VkAttachmentDescription2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAttachmentDescription2: VkAttachmentDescription2Constructor;



  /**
   * 
   */
interface VkDescriptorSetVariableDescriptorCountLayoutSupportEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxVariableDescriptorCount: number;

}

declare interface VkDescriptorSetVariableDescriptorCountLayoutSupportEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxVariableDescriptorCount?: number;
}

declare interface VkDescriptorSetVariableDescriptorCountLayoutSupportEXTConstructor {
  readonly prototype: VkDescriptorSetVariableDescriptorCountLayoutSupportEXT;
  new(param?: VkDescriptorSetVariableDescriptorCountLayoutSupportEXTInitializer | null): VkDescriptorSetVariableDescriptorCountLayoutSupportEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorSetVariableDescriptorCountLayoutSupportEXT: VkDescriptorSetVariableDescriptorCountLayoutSupportEXTConstructor;



  /**
   * 
   */
interface VkDescriptorSetVariableDescriptorCountLayoutSupport {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxVariableDescriptorCount: number;

}

declare interface VkDescriptorSetVariableDescriptorCountLayoutSupportInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxVariableDescriptorCount?: number;
}

declare interface VkDescriptorSetVariableDescriptorCountLayoutSupportConstructor {
  readonly prototype: VkDescriptorSetVariableDescriptorCountLayoutSupport;
  new(param?: VkDescriptorSetVariableDescriptorCountLayoutSupportInitializer | null): VkDescriptorSetVariableDescriptorCountLayoutSupport;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorSetVariableDescriptorCountLayoutSupport: VkDescriptorSetVariableDescriptorCountLayoutSupportConstructor;



  /**
   * 
   */
interface VkDescriptorSetVariableDescriptorCountAllocateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    descriptorSetCount: number;

    /**
     *
     */
    pDescriptorCounts: Uint32Array | null;

}

declare interface VkDescriptorSetVariableDescriptorCountAllocateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    descriptorSetCount?: number;

    /**
     *
     */
    pDescriptorCounts?: Uint32Array | null;
}

declare interface VkDescriptorSetVariableDescriptorCountAllocateInfoEXTConstructor {
  readonly prototype: VkDescriptorSetVariableDescriptorCountAllocateInfoEXT;
  new(param?: VkDescriptorSetVariableDescriptorCountAllocateInfoEXTInitializer | null): VkDescriptorSetVariableDescriptorCountAllocateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorSetVariableDescriptorCountAllocateInfoEXT: VkDescriptorSetVariableDescriptorCountAllocateInfoEXTConstructor;



  /**
   * 
   */
interface VkDescriptorSetVariableDescriptorCountAllocateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    descriptorSetCount: number;

    /**
     *
     */
    pDescriptorCounts: Uint32Array | null;

}

declare interface VkDescriptorSetVariableDescriptorCountAllocateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    descriptorSetCount?: number;

    /**
     *
     */
    pDescriptorCounts?: Uint32Array | null;
}

declare interface VkDescriptorSetVariableDescriptorCountAllocateInfoConstructor {
  readonly prototype: VkDescriptorSetVariableDescriptorCountAllocateInfo;
  new(param?: VkDescriptorSetVariableDescriptorCountAllocateInfoInitializer | null): VkDescriptorSetVariableDescriptorCountAllocateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorSetVariableDescriptorCountAllocateInfo: VkDescriptorSetVariableDescriptorCountAllocateInfoConstructor;



  /**
   * 
   */
interface VkDescriptorSetLayoutBindingFlagsCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    bindingCount: number;

    /**
     *
     */
    pBindingFlags: Int32Array | null;

}

declare interface VkDescriptorSetLayoutBindingFlagsCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    bindingCount?: number;

    /**
     *
     */
    pBindingFlags?: Int32Array | null;
}

declare interface VkDescriptorSetLayoutBindingFlagsCreateInfoEXTConstructor {
  readonly prototype: VkDescriptorSetLayoutBindingFlagsCreateInfoEXT;
  new(param?: VkDescriptorSetLayoutBindingFlagsCreateInfoEXTInitializer | null): VkDescriptorSetLayoutBindingFlagsCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorSetLayoutBindingFlagsCreateInfoEXT: VkDescriptorSetLayoutBindingFlagsCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkDescriptorSetLayoutBindingFlagsCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    bindingCount: number;

    /**
     *
     */
    pBindingFlags: Int32Array | null;

}

declare interface VkDescriptorSetLayoutBindingFlagsCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    bindingCount?: number;

    /**
     *
     */
    pBindingFlags?: Int32Array | null;
}

declare interface VkDescriptorSetLayoutBindingFlagsCreateInfoConstructor {
  readonly prototype: VkDescriptorSetLayoutBindingFlagsCreateInfo;
  new(param?: VkDescriptorSetLayoutBindingFlagsCreateInfoInitializer | null): VkDescriptorSetLayoutBindingFlagsCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorSetLayoutBindingFlagsCreateInfo: VkDescriptorSetLayoutBindingFlagsCreateInfoConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceDescriptorIndexingPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxUpdateAfterBindDescriptorsInAllPools: number;

    /**
     *
     */
    readonly shaderUniformBufferArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderSampledImageArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderStorageBufferArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderStorageImageArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderInputAttachmentArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly robustBufferAccessUpdateAfterBind: boolean;

    /**
     *
     */
    readonly quadDivergentImplicitLod: boolean;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSamplers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindUniformBuffers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageBuffers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSampledImages: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageImages: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindInputAttachments: number;

    /**
     *
     */
    readonly maxPerStageUpdateAfterBindResources: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSamplers: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffers: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffers: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSampledImages: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageImages: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindInputAttachments: number;

}

declare interface VkPhysicalDeviceDescriptorIndexingPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxUpdateAfterBindDescriptorsInAllPools?: number;

    /**
     *
     */
    readonly shaderUniformBufferArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderSampledImageArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderStorageBufferArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderStorageImageArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderInputAttachmentArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly robustBufferAccessUpdateAfterBind?: boolean;

    /**
     *
     */
    readonly quadDivergentImplicitLod?: boolean;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSamplers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindUniformBuffers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageBuffers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSampledImages?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageImages?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindInputAttachments?: number;

    /**
     *
     */
    readonly maxPerStageUpdateAfterBindResources?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSamplers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffersDynamic?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffersDynamic?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSampledImages?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageImages?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindInputAttachments?: number;
}

declare interface VkPhysicalDeviceDescriptorIndexingPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceDescriptorIndexingPropertiesEXT;
  new(param?: VkPhysicalDeviceDescriptorIndexingPropertiesEXTInitializer | null): VkPhysicalDeviceDescriptorIndexingPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceDescriptorIndexingPropertiesEXT: VkPhysicalDeviceDescriptorIndexingPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceDescriptorIndexingProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxUpdateAfterBindDescriptorsInAllPools: number;

    /**
     *
     */
    readonly shaderUniformBufferArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderSampledImageArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderStorageBufferArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderStorageImageArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderInputAttachmentArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly robustBufferAccessUpdateAfterBind: boolean;

    /**
     *
     */
    readonly quadDivergentImplicitLod: boolean;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSamplers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindUniformBuffers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageBuffers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSampledImages: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageImages: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindInputAttachments: number;

    /**
     *
     */
    readonly maxPerStageUpdateAfterBindResources: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSamplers: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffers: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffers: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSampledImages: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageImages: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindInputAttachments: number;

}

declare interface VkPhysicalDeviceDescriptorIndexingPropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxUpdateAfterBindDescriptorsInAllPools?: number;

    /**
     *
     */
    readonly shaderUniformBufferArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderSampledImageArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderStorageBufferArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderStorageImageArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderInputAttachmentArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly robustBufferAccessUpdateAfterBind?: boolean;

    /**
     *
     */
    readonly quadDivergentImplicitLod?: boolean;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSamplers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindUniformBuffers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageBuffers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSampledImages?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageImages?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindInputAttachments?: number;

    /**
     *
     */
    readonly maxPerStageUpdateAfterBindResources?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSamplers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffersDynamic?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffersDynamic?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSampledImages?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageImages?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindInputAttachments?: number;
}

declare interface VkPhysicalDeviceDescriptorIndexingPropertiesConstructor {
  readonly prototype: VkPhysicalDeviceDescriptorIndexingProperties;
  new(param?: VkPhysicalDeviceDescriptorIndexingPropertiesInitializer | null): VkPhysicalDeviceDescriptorIndexingProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceDescriptorIndexingProperties: VkPhysicalDeviceDescriptorIndexingPropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceDescriptorIndexingFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderInputAttachmentArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderUniformBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderSampledImageArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderStorageBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderStorageImageArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderInputAttachmentArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    descriptorBindingUniformBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingSampledImageUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingStorageImageUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingStorageBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingUniformTexelBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingStorageTexelBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingUpdateUnusedWhilePending: boolean;

    /**
     *
     */
    descriptorBindingPartiallyBound: boolean;

    /**
     *
     */
    descriptorBindingVariableDescriptorCount: boolean;

    /**
     *
     */
    runtimeDescriptorArray: boolean;

}

declare interface VkPhysicalDeviceDescriptorIndexingFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderInputAttachmentArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderUniformBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderSampledImageArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderStorageBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderStorageImageArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderInputAttachmentArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    descriptorBindingUniformBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingSampledImageUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingStorageImageUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingStorageBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingUniformTexelBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingStorageTexelBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingUpdateUnusedWhilePending?: boolean;

    /**
     *
     */
    descriptorBindingPartiallyBound?: boolean;

    /**
     *
     */
    descriptorBindingVariableDescriptorCount?: boolean;

    /**
     *
     */
    runtimeDescriptorArray?: boolean;
}

declare interface VkPhysicalDeviceDescriptorIndexingFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceDescriptorIndexingFeaturesEXT;
  new(param?: VkPhysicalDeviceDescriptorIndexingFeaturesEXTInitializer | null): VkPhysicalDeviceDescriptorIndexingFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceDescriptorIndexingFeaturesEXT: VkPhysicalDeviceDescriptorIndexingFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceDescriptorIndexingFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderInputAttachmentArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderUniformBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderSampledImageArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderStorageBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderStorageImageArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderInputAttachmentArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    descriptorBindingUniformBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingSampledImageUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingStorageImageUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingStorageBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingUniformTexelBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingStorageTexelBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingUpdateUnusedWhilePending: boolean;

    /**
     *
     */
    descriptorBindingPartiallyBound: boolean;

    /**
     *
     */
    descriptorBindingVariableDescriptorCount: boolean;

    /**
     *
     */
    runtimeDescriptorArray: boolean;

}

declare interface VkPhysicalDeviceDescriptorIndexingFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderInputAttachmentArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderUniformBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderSampledImageArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderStorageBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderStorageImageArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderInputAttachmentArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    descriptorBindingUniformBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingSampledImageUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingStorageImageUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingStorageBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingUniformTexelBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingStorageTexelBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingUpdateUnusedWhilePending?: boolean;

    /**
     *
     */
    descriptorBindingPartiallyBound?: boolean;

    /**
     *
     */
    descriptorBindingVariableDescriptorCount?: boolean;

    /**
     *
     */
    runtimeDescriptorArray?: boolean;
}

declare interface VkPhysicalDeviceDescriptorIndexingFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceDescriptorIndexingFeatures;
  new(param?: VkPhysicalDeviceDescriptorIndexingFeaturesInitializer | null): VkPhysicalDeviceDescriptorIndexingFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceDescriptorIndexingFeatures: VkPhysicalDeviceDescriptorIndexingFeaturesConstructor;



  /**
   * 
   */
interface VkPipelineRasterizationConservativeStateCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    conservativeRasterizationMode: VkConservativeRasterizationModeEXT;

    /**
     *
     */
    extraPrimitiveOverestimationSize: number;

}

declare interface VkPipelineRasterizationConservativeStateCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    conservativeRasterizationMode?: VkConservativeRasterizationModeEXT;

    /**
     *
     */
    extraPrimitiveOverestimationSize?: number;
}

declare interface VkPipelineRasterizationConservativeStateCreateInfoEXTConstructor {
  readonly prototype: VkPipelineRasterizationConservativeStateCreateInfoEXT;
  new(param?: VkPipelineRasterizationConservativeStateCreateInfoEXTInitializer | null): VkPipelineRasterizationConservativeStateCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineRasterizationConservativeStateCreateInfoEXT: VkPipelineRasterizationConservativeStateCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderCoreProperties2AMD {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly shaderCoreFeatures: VkShaderCorePropertiesFlagBitsAMD;

    /**
     *
     */
    readonly activeComputeUnitCount: number;

}

declare interface VkPhysicalDeviceShaderCoreProperties2AMDInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly shaderCoreFeatures?: VkShaderCorePropertiesFlagBitsAMD;

    /**
     *
     */
    readonly activeComputeUnitCount?: number;
}

declare interface VkPhysicalDeviceShaderCoreProperties2AMDConstructor {
  readonly prototype: VkPhysicalDeviceShaderCoreProperties2AMD;
  new(param?: VkPhysicalDeviceShaderCoreProperties2AMDInitializer | null): VkPhysicalDeviceShaderCoreProperties2AMD;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderCoreProperties2AMD: VkPhysicalDeviceShaderCoreProperties2AMDConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderCorePropertiesAMD {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly shaderEngineCount: number;

    /**
     *
     */
    readonly shaderArraysPerEngineCount: number;

    /**
     *
     */
    readonly computeUnitsPerShaderArray: number;

    /**
     *
     */
    readonly simdPerComputeUnit: number;

    /**
     *
     */
    readonly wavefrontsPerSimd: number;

    /**
     *
     */
    readonly wavefrontSize: number;

    /**
     *
     */
    readonly sgprsPerSimd: number;

    /**
     *
     */
    readonly minSgprAllocation: number;

    /**
     *
     */
    readonly maxSgprAllocation: number;

    /**
     *
     */
    readonly sgprAllocationGranularity: number;

    /**
     *
     */
    readonly vgprsPerSimd: number;

    /**
     *
     */
    readonly minVgprAllocation: number;

    /**
     *
     */
    readonly maxVgprAllocation: number;

    /**
     *
     */
    readonly vgprAllocationGranularity: number;

}

declare interface VkPhysicalDeviceShaderCorePropertiesAMDInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly shaderEngineCount?: number;

    /**
     *
     */
    readonly shaderArraysPerEngineCount?: number;

    /**
     *
     */
    readonly computeUnitsPerShaderArray?: number;

    /**
     *
     */
    readonly simdPerComputeUnit?: number;

    /**
     *
     */
    readonly wavefrontsPerSimd?: number;

    /**
     *
     */
    readonly wavefrontSize?: number;

    /**
     *
     */
    readonly sgprsPerSimd?: number;

    /**
     *
     */
    readonly minSgprAllocation?: number;

    /**
     *
     */
    readonly maxSgprAllocation?: number;

    /**
     *
     */
    readonly sgprAllocationGranularity?: number;

    /**
     *
     */
    readonly vgprsPerSimd?: number;

    /**
     *
     */
    readonly minVgprAllocation?: number;

    /**
     *
     */
    readonly maxVgprAllocation?: number;

    /**
     *
     */
    readonly vgprAllocationGranularity?: number;
}

declare interface VkPhysicalDeviceShaderCorePropertiesAMDConstructor {
  readonly prototype: VkPhysicalDeviceShaderCorePropertiesAMD;
  new(param?: VkPhysicalDeviceShaderCorePropertiesAMDInitializer | null): VkPhysicalDeviceShaderCorePropertiesAMD;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderCorePropertiesAMD: VkPhysicalDeviceShaderCorePropertiesAMDConstructor;



  /**
   * 
   */
interface VkCalibratedTimestampInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    timeDomain: VkTimeDomainEXT;

}

declare interface VkCalibratedTimestampInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    timeDomain?: VkTimeDomainEXT;
}

declare interface VkCalibratedTimestampInfoEXTConstructor {
  readonly prototype: VkCalibratedTimestampInfoEXT;
  new(param?: VkCalibratedTimestampInfoEXTInitializer | null): VkCalibratedTimestampInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCalibratedTimestampInfoEXT: VkCalibratedTimestampInfoEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly primitiveOverestimationSize: number;

    /**
     *
     */
    readonly maxExtraPrimitiveOverestimationSize: number;

    /**
     *
     */
    readonly extraPrimitiveOverestimationSizeGranularity: number;

    /**
     *
     */
    readonly primitiveUnderestimation: boolean;

    /**
     *
     */
    readonly conservativePointAndLineRasterization: boolean;

    /**
     *
     */
    readonly degenerateTrianglesRasterized: boolean;

    /**
     *
     */
    readonly degenerateLinesRasterized: boolean;

    /**
     *
     */
    readonly fullyCoveredFragmentShaderInputVariable: boolean;

    /**
     *
     */
    readonly conservativeRasterizationPostDepthCoverage: boolean;

}

declare interface VkPhysicalDeviceConservativeRasterizationPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly primitiveOverestimationSize?: number;

    /**
     *
     */
    readonly maxExtraPrimitiveOverestimationSize?: number;

    /**
     *
     */
    readonly extraPrimitiveOverestimationSizeGranularity?: number;

    /**
     *
     */
    readonly primitiveUnderestimation?: boolean;

    /**
     *
     */
    readonly conservativePointAndLineRasterization?: boolean;

    /**
     *
     */
    readonly degenerateTrianglesRasterized?: boolean;

    /**
     *
     */
    readonly degenerateLinesRasterized?: boolean;

    /**
     *
     */
    readonly fullyCoveredFragmentShaderInputVariable?: boolean;

    /**
     *
     */
    readonly conservativeRasterizationPostDepthCoverage?: boolean;
}

declare interface VkPhysicalDeviceConservativeRasterizationPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceConservativeRasterizationPropertiesEXT;
  new(param?: VkPhysicalDeviceConservativeRasterizationPropertiesEXTInitializer | null): VkPhysicalDeviceConservativeRasterizationPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceConservativeRasterizationPropertiesEXT: VkPhysicalDeviceConservativeRasterizationPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly minImportedHostPointerAlignment: bigint | number;

}

declare interface VkPhysicalDeviceExternalMemoryHostPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly minImportedHostPointerAlignment?: bigint | number;
}

declare interface VkPhysicalDeviceExternalMemoryHostPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceExternalMemoryHostPropertiesEXT;
  new(param?: VkPhysicalDeviceExternalMemoryHostPropertiesEXTInitializer | null): VkPhysicalDeviceExternalMemoryHostPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceExternalMemoryHostPropertiesEXT: VkPhysicalDeviceExternalMemoryHostPropertiesEXTConstructor;



  /**
   * 
   */
interface VkMemoryHostPointerPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryTypeBits: number;

}

declare interface VkMemoryHostPointerPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryTypeBits?: number;
}

declare interface VkMemoryHostPointerPropertiesEXTConstructor {
  readonly prototype: VkMemoryHostPointerPropertiesEXT;
  new(param?: VkMemoryHostPointerPropertiesEXTInitializer | null): VkMemoryHostPointerPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryHostPointerPropertiesEXT: VkMemoryHostPointerPropertiesEXTConstructor;



  /**
   * 
   */
interface VkImportMemoryHostPointerInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    pHostPointer: ArrayBuffer | null;

}

declare interface VkImportMemoryHostPointerInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    pHostPointer?: ArrayBuffer | null;
}

declare interface VkImportMemoryHostPointerInfoEXTConstructor {
  readonly prototype: VkImportMemoryHostPointerInfoEXT;
  new(param?: VkImportMemoryHostPointerInfoEXTInitializer | null): VkImportMemoryHostPointerInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImportMemoryHostPointerInfoEXT: VkImportMemoryHostPointerInfoEXTConstructor;



  /**
   * 
   */
interface VkDeviceMemoryReportCallbackDataEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly flags: number;

    /**
     *
     */
    readonly type: VkDeviceMemoryReportEventTypeEXT;

    /**
     *
     */
    readonly memoryObjectId: bigint | number;

    /**
     *
     */
    readonly size: bigint | number;

    /**
     *
     */
    readonly objectType: VkObjectType;

    /**
     *
     */
    readonly objectHandle: bigint | number;

    /**
     *
     */
    readonly heapIndex: number;

}

declare interface VkDeviceMemoryReportCallbackDataEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly flags?: number;

    /**
     *
     */
    readonly type?: VkDeviceMemoryReportEventTypeEXT;

    /**
     *
     */
    readonly memoryObjectId?: bigint | number;

    /**
     *
     */
    readonly size?: bigint | number;

    /**
     *
     */
    readonly objectType?: VkObjectType;

    /**
     *
     */
    readonly objectHandle?: bigint | number;

    /**
     *
     */
    readonly heapIndex?: number;
}

declare interface VkDeviceMemoryReportCallbackDataEXTConstructor {
  readonly prototype: VkDeviceMemoryReportCallbackDataEXT;
  new(param?: VkDeviceMemoryReportCallbackDataEXTInitializer | null): VkDeviceMemoryReportCallbackDataEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceMemoryReportCallbackDataEXT: VkDeviceMemoryReportCallbackDataEXTConstructor;



  /**
   * 
   */
interface VkDeviceDeviceMemoryReportCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    pfnUserCallback: vkDeviceMemoryReportCallbackEXT | null;

    /**
     *
     */
    pUserData: ArrayBuffer | null;

}

declare interface VkDeviceDeviceMemoryReportCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    pfnUserCallback?: vkDeviceMemoryReportCallbackEXT | null;

    /**
     *
     */
    pUserData?: ArrayBuffer | null;
}

declare interface VkDeviceDeviceMemoryReportCreateInfoEXTConstructor {
  readonly prototype: VkDeviceDeviceMemoryReportCreateInfoEXT;
  new(param?: VkDeviceDeviceMemoryReportCreateInfoEXTInitializer | null): VkDeviceDeviceMemoryReportCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceDeviceMemoryReportCreateInfoEXT: VkDeviceDeviceMemoryReportCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceDeviceMemoryReportFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceMemoryReport: boolean;

}

declare interface VkPhysicalDeviceDeviceMemoryReportFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceMemoryReport?: boolean;
}

declare interface VkPhysicalDeviceDeviceMemoryReportFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceDeviceMemoryReportFeaturesEXT;
  new(param?: VkPhysicalDeviceDeviceMemoryReportFeaturesEXTInitializer | null): VkPhysicalDeviceDeviceMemoryReportFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceDeviceMemoryReportFeaturesEXT: VkPhysicalDeviceDeviceMemoryReportFeaturesEXTConstructor;



  /**
   * 
   */
interface VkDebugUtilsMessengerCallbackDataEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    pMessageIdName: string | null;

    /**
     *
     */
    messageIdNumber: number;

    /**
     *
     */
    pMessage: string | null;

    /**
     *
     */
    queueLabelCount: number;

    /**
     *
     */
    pQueueLabels: VkDebugUtilsLabelEXT[] | null;

    /**
     *
     */
    cmdBufLabelCount: number;

    /**
     *
     */
    pCmdBufLabels: VkDebugUtilsLabelEXT[] | null;

    /**
     *
     */
    objectCount: number;

    /**
     *
     */
    pObjects: VkDebugUtilsObjectNameInfoEXT[] | null;

}

declare interface VkDebugUtilsMessengerCallbackDataEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    pMessageIdName?: string | null;

    /**
     *
     */
    messageIdNumber?: number;

    /**
     *
     */
    pMessage?: string | null;

    /**
     *
     */
    queueLabelCount?: number;

    /**
     *
     */
    pQueueLabels?: VkDebugUtilsLabelEXT[] | null;

    /**
     *
     */
    cmdBufLabelCount?: number;

    /**
     *
     */
    pCmdBufLabels?: VkDebugUtilsLabelEXT[] | null;

    /**
     *
     */
    objectCount?: number;

    /**
     *
     */
    pObjects?: VkDebugUtilsObjectNameInfoEXT[] | null;
}

declare interface VkDebugUtilsMessengerCallbackDataEXTConstructor {
  readonly prototype: VkDebugUtilsMessengerCallbackDataEXT;
  new(param?: VkDebugUtilsMessengerCallbackDataEXTInitializer | null): VkDebugUtilsMessengerCallbackDataEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDebugUtilsMessengerCallbackDataEXT: VkDebugUtilsMessengerCallbackDataEXTConstructor;



  /**
   * 
   */
interface VkDebugUtilsMessengerCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT;

    /**
     *
     */
    messageType: VkDebugUtilsMessageTypeFlagBitsEXT;

    /**
     *
     */
    pfnUserCallback: vkDebugUtilsMessengerCallbackEXT | null;

    /**
     *
     */
    pUserData: ArrayBuffer | null;

}

declare interface VkDebugUtilsMessengerCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    messageSeverity?: VkDebugUtilsMessageSeverityFlagBitsEXT;

    /**
     *
     */
    messageType?: VkDebugUtilsMessageTypeFlagBitsEXT;

    /**
     *
     */
    pfnUserCallback?: vkDebugUtilsMessengerCallbackEXT | null;

    /**
     *
     */
    pUserData?: ArrayBuffer | null;
}

declare interface VkDebugUtilsMessengerCreateInfoEXTConstructor {
  readonly prototype: VkDebugUtilsMessengerCreateInfoEXT;
  new(param?: VkDebugUtilsMessengerCreateInfoEXTInitializer | null): VkDebugUtilsMessengerCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDebugUtilsMessengerCreateInfoEXT: VkDebugUtilsMessengerCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkDebugUtilsLabelEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pLabelName: string | null;

    /**
     *
     */
    color: number[] | null;

}

declare interface VkDebugUtilsLabelEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pLabelName?: string | null;

    /**
     *
     */
    color?: number[] | null;
}

declare interface VkDebugUtilsLabelEXTConstructor {
  readonly prototype: VkDebugUtilsLabelEXT;
  new(param?: VkDebugUtilsLabelEXTInitializer | null): VkDebugUtilsLabelEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDebugUtilsLabelEXT: VkDebugUtilsLabelEXTConstructor;



  /**
   * 
   */
interface VkDebugUtilsObjectTagInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    objectType: VkObjectType;

    /**
     *
     */
    objectHandle: bigint | number;

    /**
     *
     */
    tagName: bigint | number;

    /**
     *
     */
    tagSize: bigint | number;

    /**
     *
     */
    pTag: ArrayBuffer | null;

}

declare interface VkDebugUtilsObjectTagInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    objectType?: VkObjectType;

    /**
     *
     */
    objectHandle?: bigint | number;

    /**
     *
     */
    tagName?: bigint | number;

    /**
     *
     */
    tagSize?: bigint | number;

    /**
     *
     */
    pTag?: ArrayBuffer | null;
}

declare interface VkDebugUtilsObjectTagInfoEXTConstructor {
  readonly prototype: VkDebugUtilsObjectTagInfoEXT;
  new(param?: VkDebugUtilsObjectTagInfoEXTInitializer | null): VkDebugUtilsObjectTagInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDebugUtilsObjectTagInfoEXT: VkDebugUtilsObjectTagInfoEXTConstructor;



  /**
   * 
   */
interface VkDebugUtilsObjectNameInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    objectType: VkObjectType;

    /**
     *
     */
    objectHandle: bigint | number;

    /**
     *
     */
    pObjectName: string | null;

}

declare interface VkDebugUtilsObjectNameInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    objectType?: VkObjectType;

    /**
     *
     */
    objectHandle?: bigint | number;

    /**
     *
     */
    pObjectName?: string | null;
}

declare interface VkDebugUtilsObjectNameInfoEXTConstructor {
  readonly prototype: VkDebugUtilsObjectNameInfoEXT;
  new(param?: VkDebugUtilsObjectNameInfoEXTInitializer | null): VkDebugUtilsObjectNameInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDebugUtilsObjectNameInfoEXT: VkDebugUtilsObjectNameInfoEXTConstructor;



  /**
   * 
   */
interface VkDeviceQueueGlobalPriorityCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    globalPriority: VkQueueGlobalPriorityEXT;

}

declare interface VkDeviceQueueGlobalPriorityCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    globalPriority?: VkQueueGlobalPriorityEXT;
}

declare interface VkDeviceQueueGlobalPriorityCreateInfoEXTConstructor {
  readonly prototype: VkDeviceQueueGlobalPriorityCreateInfoEXT;
  new(param?: VkDeviceQueueGlobalPriorityCreateInfoEXTInitializer | null): VkDeviceQueueGlobalPriorityCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceQueueGlobalPriorityCreateInfoEXT: VkDeviceQueueGlobalPriorityCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkShaderStatisticsInfoAMD {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly shaderStageMask: VkShaderStageFlagBits;

    /**
     *
     */
    readonly resourceUsage: VkShaderResourceUsageAMD | null;

    /**
     *
     */
    readonly numPhysicalVgprs: number;

    /**
     *
     */
    readonly numPhysicalSgprs: number;

    /**
     *
     */
    readonly numAvailableVgprs: number;

    /**
     *
     */
    readonly numAvailableSgprs: number;

    /**
     *
     */
    readonly computeWorkGroupSize: number[] | null;

}

declare interface VkShaderStatisticsInfoAMDInitializer {
  
    /**
     *
     */
    readonly shaderStageMask?: VkShaderStageFlagBits;

    /**
     *
     */
    readonly resourceUsage?: VkShaderResourceUsageAMD | null;

    /**
     *
     */
    readonly numPhysicalVgprs?: number;

    /**
     *
     */
    readonly numPhysicalSgprs?: number;

    /**
     *
     */
    readonly numAvailableVgprs?: number;

    /**
     *
     */
    readonly numAvailableSgprs?: number;

    /**
     *
     */
    readonly computeWorkGroupSize?: number[] | null;
}

declare interface VkShaderStatisticsInfoAMDConstructor {
  readonly prototype: VkShaderStatisticsInfoAMD;
  new(param?: VkShaderStatisticsInfoAMDInitializer | null): VkShaderStatisticsInfoAMD;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkShaderStatisticsInfoAMD: VkShaderStatisticsInfoAMDConstructor;



  /**
   * 
   */
interface VkShaderResourceUsageAMD {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly numUsedVgprs: number;

    /**
     *
     */
    readonly numUsedSgprs: number;

    /**
     *
     */
    readonly ldsSizePerLocalWorkGroup: number;

    /**
     *
     */
    readonly ldsUsageSizeInBytes: bigint | number;

    /**
     *
     */
    readonly scratchMemUsageInBytes: bigint | number;

}

declare interface VkShaderResourceUsageAMDInitializer {
  
    /**
     *
     */
    readonly numUsedVgprs?: number;

    /**
     *
     */
    readonly numUsedSgprs?: number;

    /**
     *
     */
    readonly ldsSizePerLocalWorkGroup?: number;

    /**
     *
     */
    readonly ldsUsageSizeInBytes?: bigint | number;

    /**
     *
     */
    readonly scratchMemUsageInBytes?: bigint | number;
}

declare interface VkShaderResourceUsageAMDConstructor {
  readonly prototype: VkShaderResourceUsageAMD;
  new(param?: VkShaderResourceUsageAMDInitializer | null): VkShaderResourceUsageAMD;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkShaderResourceUsageAMD: VkShaderResourceUsageAMDConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceHostQueryResetFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    hostQueryReset: boolean;

}

declare interface VkPhysicalDeviceHostQueryResetFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    hostQueryReset?: boolean;
}

declare interface VkPhysicalDeviceHostQueryResetFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceHostQueryResetFeaturesEXT;
  new(param?: VkPhysicalDeviceHostQueryResetFeaturesEXTInitializer | null): VkPhysicalDeviceHostQueryResetFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceHostQueryResetFeaturesEXT: VkPhysicalDeviceHostQueryResetFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceHostQueryResetFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    hostQueryReset: boolean;

}

declare interface VkPhysicalDeviceHostQueryResetFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    hostQueryReset?: boolean;
}

declare interface VkPhysicalDeviceHostQueryResetFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceHostQueryResetFeatures;
  new(param?: VkPhysicalDeviceHostQueryResetFeaturesInitializer | null): VkPhysicalDeviceHostQueryResetFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceHostQueryResetFeatures: VkPhysicalDeviceHostQueryResetFeaturesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFloatControlsPropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly denormBehaviorIndependence: VkShaderFloatControlsIndependence;

    /**
     *
     */
    readonly roundingModeIndependence: VkShaderFloatControlsIndependence;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat16: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat32: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat64: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat16: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat32: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat64: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat16: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat32: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat64: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat16: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat32: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat64: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat16: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat32: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat64: boolean;

}

declare interface VkPhysicalDeviceFloatControlsPropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly denormBehaviorIndependence?: VkShaderFloatControlsIndependence;

    /**
     *
     */
    readonly roundingModeIndependence?: VkShaderFloatControlsIndependence;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat16?: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat32?: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat64?: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat16?: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat32?: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat64?: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat16?: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat32?: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat64?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat16?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat32?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat64?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat16?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat32?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat64?: boolean;
}

declare interface VkPhysicalDeviceFloatControlsPropertiesKHRConstructor {
  readonly prototype: VkPhysicalDeviceFloatControlsPropertiesKHR;
  new(param?: VkPhysicalDeviceFloatControlsPropertiesKHRInitializer | null): VkPhysicalDeviceFloatControlsPropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFloatControlsPropertiesKHR: VkPhysicalDeviceFloatControlsPropertiesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFloatControlsProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly denormBehaviorIndependence: VkShaderFloatControlsIndependence;

    /**
     *
     */
    readonly roundingModeIndependence: VkShaderFloatControlsIndependence;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat16: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat32: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat64: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat16: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat32: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat64: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat16: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat32: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat64: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat16: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat32: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat64: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat16: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat32: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat64: boolean;

}

declare interface VkPhysicalDeviceFloatControlsPropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly denormBehaviorIndependence?: VkShaderFloatControlsIndependence;

    /**
     *
     */
    readonly roundingModeIndependence?: VkShaderFloatControlsIndependence;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat16?: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat32?: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat64?: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat16?: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat32?: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat64?: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat16?: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat32?: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat64?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat16?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat32?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat64?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat16?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat32?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat64?: boolean;
}

declare interface VkPhysicalDeviceFloatControlsPropertiesConstructor {
  readonly prototype: VkPhysicalDeviceFloatControlsProperties;
  new(param?: VkPhysicalDeviceFloatControlsPropertiesInitializer | null): VkPhysicalDeviceFloatControlsProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFloatControlsProperties: VkPhysicalDeviceFloatControlsPropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFloat16Int8FeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderFloat16: boolean;

    /**
     *
     */
    shaderInt8: boolean;

}

declare interface VkPhysicalDeviceFloat16Int8FeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderFloat16?: boolean;

    /**
     *
     */
    shaderInt8?: boolean;
}

declare interface VkPhysicalDeviceFloat16Int8FeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceFloat16Int8FeaturesKHR;
  new(param?: VkPhysicalDeviceFloat16Int8FeaturesKHRInitializer | null): VkPhysicalDeviceFloat16Int8FeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFloat16Int8FeaturesKHR: VkPhysicalDeviceFloat16Int8FeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderFloat16Int8FeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderFloat16: boolean;

    /**
     *
     */
    shaderInt8: boolean;

}

declare interface VkPhysicalDeviceShaderFloat16Int8FeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderFloat16?: boolean;

    /**
     *
     */
    shaderInt8?: boolean;
}

declare interface VkPhysicalDeviceShaderFloat16Int8FeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceShaderFloat16Int8FeaturesKHR;
  new(param?: VkPhysicalDeviceShaderFloat16Int8FeaturesKHRInitializer | null): VkPhysicalDeviceShaderFloat16Int8FeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderFloat16Int8FeaturesKHR: VkPhysicalDeviceShaderFloat16Int8FeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderFloat16Int8Features {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderFloat16: boolean;

    /**
     *
     */
    shaderInt8: boolean;

}

declare interface VkPhysicalDeviceShaderFloat16Int8FeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderFloat16?: boolean;

    /**
     *
     */
    shaderInt8?: boolean;
}

declare interface VkPhysicalDeviceShaderFloat16Int8FeaturesConstructor {
  readonly prototype: VkPhysicalDeviceShaderFloat16Int8Features;
  new(param?: VkPhysicalDeviceShaderFloat16Int8FeaturesInitializer | null): VkPhysicalDeviceShaderFloat16Int8Features;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderFloat16Int8Features: VkPhysicalDeviceShaderFloat16Int8FeaturesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderDrawParameterFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderDrawParameters: boolean;

}

declare interface VkPhysicalDeviceShaderDrawParameterFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderDrawParameters?: boolean;
}

declare interface VkPhysicalDeviceShaderDrawParameterFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceShaderDrawParameterFeatures;
  new(param?: VkPhysicalDeviceShaderDrawParameterFeaturesInitializer | null): VkPhysicalDeviceShaderDrawParameterFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderDrawParameterFeatures: VkPhysicalDeviceShaderDrawParameterFeaturesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderDrawParametersFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderDrawParameters: boolean;

}

declare interface VkPhysicalDeviceShaderDrawParametersFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderDrawParameters?: boolean;
}

declare interface VkPhysicalDeviceShaderDrawParametersFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceShaderDrawParametersFeatures;
  new(param?: VkPhysicalDeviceShaderDrawParametersFeaturesInitializer | null): VkPhysicalDeviceShaderDrawParametersFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderDrawParametersFeatures: VkPhysicalDeviceShaderDrawParametersFeaturesConstructor;



  /**
   * 
   */
interface VkDescriptorSetLayoutSupportKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly supported: boolean;

}

declare interface VkDescriptorSetLayoutSupportKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly supported?: boolean;
}

declare interface VkDescriptorSetLayoutSupportKHRConstructor {
  readonly prototype: VkDescriptorSetLayoutSupportKHR;
  new(param?: VkDescriptorSetLayoutSupportKHRInitializer | null): VkDescriptorSetLayoutSupportKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorSetLayoutSupportKHR: VkDescriptorSetLayoutSupportKHRConstructor;



  /**
   * 
   */
interface VkDescriptorSetLayoutSupport {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly supported: boolean;

}

declare interface VkDescriptorSetLayoutSupportInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly supported?: boolean;
}

declare interface VkDescriptorSetLayoutSupportConstructor {
  readonly prototype: VkDescriptorSetLayoutSupport;
  new(param?: VkDescriptorSetLayoutSupportInitializer | null): VkDescriptorSetLayoutSupport;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorSetLayoutSupport: VkDescriptorSetLayoutSupportConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceMaintenance3PropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxPerSetDescriptors: number;

    /**
     *
     */
    readonly maxMemoryAllocationSize: bigint | number;

}

declare interface VkPhysicalDeviceMaintenance3PropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxPerSetDescriptors?: number;

    /**
     *
     */
    readonly maxMemoryAllocationSize?: bigint | number;
}

declare interface VkPhysicalDeviceMaintenance3PropertiesKHRConstructor {
  readonly prototype: VkPhysicalDeviceMaintenance3PropertiesKHR;
  new(param?: VkPhysicalDeviceMaintenance3PropertiesKHRInitializer | null): VkPhysicalDeviceMaintenance3PropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceMaintenance3PropertiesKHR: VkPhysicalDeviceMaintenance3PropertiesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceMaintenance3Properties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxPerSetDescriptors: number;

    /**
     *
     */
    readonly maxMemoryAllocationSize: bigint | number;

}

declare interface VkPhysicalDeviceMaintenance3PropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxPerSetDescriptors?: number;

    /**
     *
     */
    readonly maxMemoryAllocationSize?: bigint | number;
}

declare interface VkPhysicalDeviceMaintenance3PropertiesConstructor {
  readonly prototype: VkPhysicalDeviceMaintenance3Properties;
  new(param?: VkPhysicalDeviceMaintenance3PropertiesInitializer | null): VkPhysicalDeviceMaintenance3Properties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceMaintenance3Properties: VkPhysicalDeviceMaintenance3PropertiesConstructor;



  /**
   * 
   */
interface VkShaderModuleValidationCacheCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    validationCache: VkValidationCacheEXT | null;

}

declare interface VkShaderModuleValidationCacheCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    validationCache?: VkValidationCacheEXT | null;
}

declare interface VkShaderModuleValidationCacheCreateInfoEXTConstructor {
  readonly prototype: VkShaderModuleValidationCacheCreateInfoEXT;
  new(param?: VkShaderModuleValidationCacheCreateInfoEXTInitializer | null): VkShaderModuleValidationCacheCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkShaderModuleValidationCacheCreateInfoEXT: VkShaderModuleValidationCacheCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkValidationCacheCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    initialDataSize: bigint | number;

    /**
     *
     */
    pInitialData: ArrayBuffer | null;

}

declare interface VkValidationCacheCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    initialDataSize?: bigint | number;

    /**
     *
     */
    pInitialData?: ArrayBuffer | null;
}

declare interface VkValidationCacheCreateInfoEXTConstructor {
  readonly prototype: VkValidationCacheCreateInfoEXT;
  new(param?: VkValidationCacheCreateInfoEXTInitializer | null): VkValidationCacheCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkValidationCacheCreateInfoEXT: VkValidationCacheCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkImageFormatListCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    viewFormatCount: number;

    /**
     *
     */
    pViewFormats: Int32Array | null;

}

declare interface VkImageFormatListCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    viewFormatCount?: number;

    /**
     *
     */
    pViewFormats?: Int32Array | null;
}

declare interface VkImageFormatListCreateInfoKHRConstructor {
  readonly prototype: VkImageFormatListCreateInfoKHR;
  new(param?: VkImageFormatListCreateInfoKHRInitializer | null): VkImageFormatListCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageFormatListCreateInfoKHR: VkImageFormatListCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkImageFormatListCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    viewFormatCount: number;

    /**
     *
     */
    pViewFormats: Int32Array | null;

}

declare interface VkImageFormatListCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    viewFormatCount?: number;

    /**
     *
     */
    pViewFormats?: Int32Array | null;
}

declare interface VkImageFormatListCreateInfoConstructor {
  readonly prototype: VkImageFormatListCreateInfo;
  new(param?: VkImageFormatListCreateInfoInitializer | null): VkImageFormatListCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageFormatListCreateInfo: VkImageFormatListCreateInfoConstructor;



  /**
   * 
   */
interface VkPipelineCoverageModulationStateCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    coverageModulationMode: VkCoverageModulationModeNV;

    /**
     *
     */
    coverageModulationTableEnable: boolean;

    /**
     *
     */
    coverageModulationTableCount: number;

    /**
     *
     */
    pCoverageModulationTable: Float32Array | null;

}

declare interface VkPipelineCoverageModulationStateCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    coverageModulationMode?: VkCoverageModulationModeNV;

    /**
     *
     */
    coverageModulationTableEnable?: boolean;

    /**
     *
     */
    coverageModulationTableCount?: number;

    /**
     *
     */
    pCoverageModulationTable?: Float32Array | null;
}

declare interface VkPipelineCoverageModulationStateCreateInfoNVConstructor {
  readonly prototype: VkPipelineCoverageModulationStateCreateInfoNV;
  new(param?: VkPipelineCoverageModulationStateCreateInfoNVInitializer | null): VkPipelineCoverageModulationStateCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineCoverageModulationStateCreateInfoNV: VkPipelineCoverageModulationStateCreateInfoNVConstructor;



  /**
   * 
   */
interface VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    maxInlineUniformBlockBindings: number;

}

declare interface VkDescriptorPoolInlineUniformBlockCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    maxInlineUniformBlockBindings?: number;
}

declare interface VkDescriptorPoolInlineUniformBlockCreateInfoEXTConstructor {
  readonly prototype: VkDescriptorPoolInlineUniformBlockCreateInfoEXT;
  new(param?: VkDescriptorPoolInlineUniformBlockCreateInfoEXTInitializer | null): VkDescriptorPoolInlineUniformBlockCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorPoolInlineUniformBlockCreateInfoEXT: VkDescriptorPoolInlineUniformBlockCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkWriteDescriptorSetInlineUniformBlockEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    dataSize: number;

    /**
     *
     */
    pData: ArrayBuffer | null;

}

declare interface VkWriteDescriptorSetInlineUniformBlockEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    dataSize?: number;

    /**
     *
     */
    pData?: ArrayBuffer | null;
}

declare interface VkWriteDescriptorSetInlineUniformBlockEXTConstructor {
  readonly prototype: VkWriteDescriptorSetInlineUniformBlockEXT;
  new(param?: VkWriteDescriptorSetInlineUniformBlockEXTInitializer | null): VkWriteDescriptorSetInlineUniformBlockEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkWriteDescriptorSetInlineUniformBlockEXT: VkWriteDescriptorSetInlineUniformBlockEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxInlineUniformBlockSize: number;

    /**
     *
     */
    readonly maxPerStageDescriptorInlineUniformBlocks: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: number;

    /**
     *
     */
    readonly maxDescriptorSetInlineUniformBlocks: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindInlineUniformBlocks: number;

}

declare interface VkPhysicalDeviceInlineUniformBlockPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxInlineUniformBlockSize?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorInlineUniformBlocks?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks?: number;

    /**
     *
     */
    readonly maxDescriptorSetInlineUniformBlocks?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindInlineUniformBlocks?: number;
}

declare interface VkPhysicalDeviceInlineUniformBlockPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceInlineUniformBlockPropertiesEXT;
  new(param?: VkPhysicalDeviceInlineUniformBlockPropertiesEXTInitializer | null): VkPhysicalDeviceInlineUniformBlockPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceInlineUniformBlockPropertiesEXT: VkPhysicalDeviceInlineUniformBlockPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    inlineUniformBlock: boolean;

    /**
     *
     */
    descriptorBindingInlineUniformBlockUpdateAfterBind: boolean;

}

declare interface VkPhysicalDeviceInlineUniformBlockFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    inlineUniformBlock?: boolean;

    /**
     *
     */
    descriptorBindingInlineUniformBlockUpdateAfterBind?: boolean;
}

declare interface VkPhysicalDeviceInlineUniformBlockFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceInlineUniformBlockFeaturesEXT;
  new(param?: VkPhysicalDeviceInlineUniformBlockFeaturesEXTInitializer | null): VkPhysicalDeviceInlineUniformBlockFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceInlineUniformBlockFeaturesEXT: VkPhysicalDeviceInlineUniformBlockFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPipelineColorBlendAdvancedStateCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcPremultiplied: boolean;

    /**
     *
     */
    dstPremultiplied: boolean;

    /**
     *
     */
    blendOverlap: VkBlendOverlapEXT;

}

declare interface VkPipelineColorBlendAdvancedStateCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcPremultiplied?: boolean;

    /**
     *
     */
    dstPremultiplied?: boolean;

    /**
     *
     */
    blendOverlap?: VkBlendOverlapEXT;
}

declare interface VkPipelineColorBlendAdvancedStateCreateInfoEXTConstructor {
  readonly prototype: VkPipelineColorBlendAdvancedStateCreateInfoEXT;
  new(param?: VkPipelineColorBlendAdvancedStateCreateInfoEXTInitializer | null): VkPipelineColorBlendAdvancedStateCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineColorBlendAdvancedStateCreateInfoEXT: VkPipelineColorBlendAdvancedStateCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly advancedBlendMaxColorAttachments: number;

    /**
     *
     */
    readonly advancedBlendIndependentBlend: boolean;

    /**
     *
     */
    readonly advancedBlendNonPremultipliedSrcColor: boolean;

    /**
     *
     */
    readonly advancedBlendNonPremultipliedDstColor: boolean;

    /**
     *
     */
    readonly advancedBlendCorrelatedOverlap: boolean;

    /**
     *
     */
    readonly advancedBlendAllOperations: boolean;

}

declare interface VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly advancedBlendMaxColorAttachments?: number;

    /**
     *
     */
    readonly advancedBlendIndependentBlend?: boolean;

    /**
     *
     */
    readonly advancedBlendNonPremultipliedSrcColor?: boolean;

    /**
     *
     */
    readonly advancedBlendNonPremultipliedDstColor?: boolean;

    /**
     *
     */
    readonly advancedBlendCorrelatedOverlap?: boolean;

    /**
     *
     */
    readonly advancedBlendAllOperations?: boolean;
}

declare interface VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;
  new(param?: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTInitializer | null): VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    advancedBlendCoherentOperations: boolean;

}

declare interface VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    advancedBlendCoherentOperations?: boolean;
}

declare interface VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;
  new(param?: VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTInitializer | null): VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT: VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTConstructor;



  /**
   * 
   */
interface VkSamplerReductionModeCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    reductionMode: VkSamplerReductionMode;

}

declare interface VkSamplerReductionModeCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    reductionMode?: VkSamplerReductionMode;
}

declare interface VkSamplerReductionModeCreateInfoEXTConstructor {
  readonly prototype: VkSamplerReductionModeCreateInfoEXT;
  new(param?: VkSamplerReductionModeCreateInfoEXTInitializer | null): VkSamplerReductionModeCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSamplerReductionModeCreateInfoEXT: VkSamplerReductionModeCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkSamplerReductionModeCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    reductionMode: VkSamplerReductionMode;

}

declare interface VkSamplerReductionModeCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    reductionMode?: VkSamplerReductionMode;
}

declare interface VkSamplerReductionModeCreateInfoConstructor {
  readonly prototype: VkSamplerReductionModeCreateInfo;
  new(param?: VkSamplerReductionModeCreateInfoInitializer | null): VkSamplerReductionModeCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSamplerReductionModeCreateInfo: VkSamplerReductionModeCreateInfoConstructor;



  /**
   * 
   */
interface VkMultisamplePropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxSampleLocationGridSize: VkExtent2D | null;

}

declare interface VkMultisamplePropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxSampleLocationGridSize?: VkExtent2D | null;
}

declare interface VkMultisamplePropertiesEXTConstructor {
  readonly prototype: VkMultisamplePropertiesEXT;
  new(param?: VkMultisamplePropertiesEXTInitializer | null): VkMultisamplePropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMultisamplePropertiesEXT: VkMultisamplePropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceSampleLocationsPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly sampleLocationSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxSampleLocationGridSize: VkExtent2D | null;

    /**
     *
     */
    readonly sampleLocationCoordinateRange: number[] | null;

    /**
     *
     */
    readonly sampleLocationSubPixelBits: number;

    /**
     *
     */
    readonly variableSampleLocations: boolean;

}

declare interface VkPhysicalDeviceSampleLocationsPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly sampleLocationSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxSampleLocationGridSize?: VkExtent2D | null;

    /**
     *
     */
    readonly sampleLocationCoordinateRange?: number[] | null;

    /**
     *
     */
    readonly sampleLocationSubPixelBits?: number;

    /**
     *
     */
    readonly variableSampleLocations?: boolean;
}

declare interface VkPhysicalDeviceSampleLocationsPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceSampleLocationsPropertiesEXT;
  new(param?: VkPhysicalDeviceSampleLocationsPropertiesEXTInitializer | null): VkPhysicalDeviceSampleLocationsPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceSampleLocationsPropertiesEXT: VkPhysicalDeviceSampleLocationsPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPipelineSampleLocationsStateCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    sampleLocationsEnable: boolean;

    /**
     *
     */
    sampleLocationsInfo: VkSampleLocationsInfoEXT | null;

}

declare interface VkPipelineSampleLocationsStateCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    sampleLocationsEnable?: boolean;

    /**
     *
     */
    sampleLocationsInfo?: VkSampleLocationsInfoEXT | null;
}

declare interface VkPipelineSampleLocationsStateCreateInfoEXTConstructor {
  readonly prototype: VkPipelineSampleLocationsStateCreateInfoEXT;
  new(param?: VkPipelineSampleLocationsStateCreateInfoEXTInitializer | null): VkPipelineSampleLocationsStateCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineSampleLocationsStateCreateInfoEXT: VkPipelineSampleLocationsStateCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkRenderPassSampleLocationsBeginInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    attachmentInitialSampleLocationsCount: number;

    /**
     *
     */
    pAttachmentInitialSampleLocations: VkAttachmentSampleLocationsEXT[] | null;

    /**
     *
     */
    postSubpassSampleLocationsCount: number;

    /**
     *
     */
    pPostSubpassSampleLocations: VkSubpassSampleLocationsEXT[] | null;

}

declare interface VkRenderPassSampleLocationsBeginInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    attachmentInitialSampleLocationsCount?: number;

    /**
     *
     */
    pAttachmentInitialSampleLocations?: VkAttachmentSampleLocationsEXT[] | null;

    /**
     *
     */
    postSubpassSampleLocationsCount?: number;

    /**
     *
     */
    pPostSubpassSampleLocations?: VkSubpassSampleLocationsEXT[] | null;
}

declare interface VkRenderPassSampleLocationsBeginInfoEXTConstructor {
  readonly prototype: VkRenderPassSampleLocationsBeginInfoEXT;
  new(param?: VkRenderPassSampleLocationsBeginInfoEXTInitializer | null): VkRenderPassSampleLocationsBeginInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRenderPassSampleLocationsBeginInfoEXT: VkRenderPassSampleLocationsBeginInfoEXTConstructor;



  /**
   * 
   */
interface VkSubpassSampleLocationsEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    subpassIndex: number;

    /**
     *
     */
    sampleLocationsInfo: VkSampleLocationsInfoEXT | null;

}

declare interface VkSubpassSampleLocationsEXTInitializer {
  
    /**
     *
     */
    subpassIndex?: number;

    /**
     *
     */
    sampleLocationsInfo?: VkSampleLocationsInfoEXT | null;
}

declare interface VkSubpassSampleLocationsEXTConstructor {
  readonly prototype: VkSubpassSampleLocationsEXT;
  new(param?: VkSubpassSampleLocationsEXTInitializer | null): VkSubpassSampleLocationsEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSubpassSampleLocationsEXT: VkSubpassSampleLocationsEXTConstructor;



  /**
   * 
   */
interface VkAttachmentSampleLocationsEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    attachmentIndex: number;

    /**
     *
     */
    sampleLocationsInfo: VkSampleLocationsInfoEXT | null;

}

declare interface VkAttachmentSampleLocationsEXTInitializer {
  
    /**
     *
     */
    attachmentIndex?: number;

    /**
     *
     */
    sampleLocationsInfo?: VkSampleLocationsInfoEXT | null;
}

declare interface VkAttachmentSampleLocationsEXTConstructor {
  readonly prototype: VkAttachmentSampleLocationsEXT;
  new(param?: VkAttachmentSampleLocationsEXTInitializer | null): VkAttachmentSampleLocationsEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAttachmentSampleLocationsEXT: VkAttachmentSampleLocationsEXTConstructor;



  /**
   * 
   */
interface VkSampleLocationsInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    sampleLocationsPerPixel: VkSampleCountFlagBits;

    /**
     *
     */
    sampleLocationGridSize: VkExtent2D | null;

    /**
     *
     */
    sampleLocationsCount: number;

    /**
     *
     */
    pSampleLocations: VkSampleLocationEXT[] | null;

}

declare interface VkSampleLocationsInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    sampleLocationsPerPixel?: VkSampleCountFlagBits;

    /**
     *
     */
    sampleLocationGridSize?: VkExtent2D | null;

    /**
     *
     */
    sampleLocationsCount?: number;

    /**
     *
     */
    pSampleLocations?: VkSampleLocationEXT[] | null;
}

declare interface VkSampleLocationsInfoEXTConstructor {
  readonly prototype: VkSampleLocationsInfoEXT;
  new(param?: VkSampleLocationsInfoEXTInitializer | null): VkSampleLocationsInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSampleLocationsInfoEXT: VkSampleLocationsInfoEXTConstructor;



  /**
   * 
   */
interface VkSampleLocationEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    x: number;

    /**
     *
     */
    y: number;

}

declare interface VkSampleLocationEXTInitializer {
  
    /**
     *
     */
    x?: number;

    /**
     *
     */
    y?: number;
}

declare interface VkSampleLocationEXTConstructor {
  readonly prototype: VkSampleLocationEXT;
  new(param?: VkSampleLocationEXTInitializer | null): VkSampleLocationEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSampleLocationEXT: VkSampleLocationEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly filterMinmaxSingleComponentFormats: boolean;

    /**
     *
     */
    readonly filterMinmaxImageComponentMapping: boolean;

}

declare interface VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly filterMinmaxSingleComponentFormats?: boolean;

    /**
     *
     */
    readonly filterMinmaxImageComponentMapping?: boolean;
}

declare interface VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;
  new(param?: VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTInitializer | null): VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT: VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceSamplerFilterMinmaxProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly filterMinmaxSingleComponentFormats: boolean;

    /**
     *
     */
    readonly filterMinmaxImageComponentMapping: boolean;

}

declare interface VkPhysicalDeviceSamplerFilterMinmaxPropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly filterMinmaxSingleComponentFormats?: boolean;

    /**
     *
     */
    readonly filterMinmaxImageComponentMapping?: boolean;
}

declare interface VkPhysicalDeviceSamplerFilterMinmaxPropertiesConstructor {
  readonly prototype: VkPhysicalDeviceSamplerFilterMinmaxProperties;
  new(param?: VkPhysicalDeviceSamplerFilterMinmaxPropertiesInitializer | null): VkPhysicalDeviceSamplerFilterMinmaxProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceSamplerFilterMinmaxProperties: VkPhysicalDeviceSamplerFilterMinmaxPropertiesConstructor;



  /**
   * 
   */
interface VkPipelineCoverageToColorStateCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    coverageToColorEnable: boolean;

    /**
     *
     */
    coverageToColorLocation: number;

}

declare interface VkPipelineCoverageToColorStateCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    coverageToColorEnable?: boolean;

    /**
     *
     */
    coverageToColorLocation?: number;
}

declare interface VkPipelineCoverageToColorStateCreateInfoNVConstructor {
  readonly prototype: VkPipelineCoverageToColorStateCreateInfoNV;
  new(param?: VkPipelineCoverageToColorStateCreateInfoNVInitializer | null): VkPipelineCoverageToColorStateCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineCoverageToColorStateCreateInfoNV: VkPipelineCoverageToColorStateCreateInfoNVConstructor;



  /**
   * 
   */
interface VkDeviceQueueInfo2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkDeviceQueueCreateFlagBits;

    /**
     *
     */
    queueFamilyIndex: number;

    /**
     *
     */
    queueIndex: number;

}

declare interface VkDeviceQueueInfo2Initializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkDeviceQueueCreateFlagBits;

    /**
     *
     */
    queueFamilyIndex?: number;

    /**
     *
     */
    queueIndex?: number;
}

declare interface VkDeviceQueueInfo2Constructor {
  readonly prototype: VkDeviceQueueInfo2;
  new(param?: VkDeviceQueueInfo2Initializer | null): VkDeviceQueueInfo2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceQueueInfo2: VkDeviceQueueInfo2Constructor;



  /**
   * 
   */
interface VkPhysicalDeviceProtectedMemoryProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly protectedNoFault: boolean;

}

declare interface VkPhysicalDeviceProtectedMemoryPropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly protectedNoFault?: boolean;
}

declare interface VkPhysicalDeviceProtectedMemoryPropertiesConstructor {
  readonly prototype: VkPhysicalDeviceProtectedMemoryProperties;
  new(param?: VkPhysicalDeviceProtectedMemoryPropertiesInitializer | null): VkPhysicalDeviceProtectedMemoryProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceProtectedMemoryProperties: VkPhysicalDeviceProtectedMemoryPropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceProtectedMemoryFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    protectedMemory: boolean;

}

declare interface VkPhysicalDeviceProtectedMemoryFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    protectedMemory?: boolean;
}

declare interface VkPhysicalDeviceProtectedMemoryFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceProtectedMemoryFeatures;
  new(param?: VkPhysicalDeviceProtectedMemoryFeaturesInitializer | null): VkPhysicalDeviceProtectedMemoryFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceProtectedMemoryFeatures: VkPhysicalDeviceProtectedMemoryFeaturesConstructor;



  /**
   * 
   */
interface VkProtectedSubmitInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    protectedSubmit: boolean;

}

declare interface VkProtectedSubmitInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    protectedSubmit?: boolean;
}

declare interface VkProtectedSubmitInfoConstructor {
  readonly prototype: VkProtectedSubmitInfo;
  new(param?: VkProtectedSubmitInfoInitializer | null): VkProtectedSubmitInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkProtectedSubmitInfo: VkProtectedSubmitInfoConstructor;



  /**
   * 
   */
interface VkConditionalRenderingBeginInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    offset: bigint | number;

    /**
     *
     */
    flags: VkConditionalRenderingFlagBitsEXT;

}

declare interface VkConditionalRenderingBeginInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    offset?: bigint | number;

    /**
     *
     */
    flags?: VkConditionalRenderingFlagBitsEXT;
}

declare interface VkConditionalRenderingBeginInfoEXTConstructor {
  readonly prototype: VkConditionalRenderingBeginInfoEXT;
  new(param?: VkConditionalRenderingBeginInfoEXTInitializer | null): VkConditionalRenderingBeginInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkConditionalRenderingBeginInfoEXT: VkConditionalRenderingBeginInfoEXTConstructor;



  /**
   * 
   */
interface VkTextureLODGatherFormatPropertiesAMD {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly supportsTextureGatherLODBiasAMD: boolean;

}

declare interface VkTextureLODGatherFormatPropertiesAMDInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly supportsTextureGatherLODBiasAMD?: boolean;
}

declare interface VkTextureLODGatherFormatPropertiesAMDConstructor {
  readonly prototype: VkTextureLODGatherFormatPropertiesAMD;
  new(param?: VkTextureLODGatherFormatPropertiesAMDInitializer | null): VkTextureLODGatherFormatPropertiesAMD;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkTextureLODGatherFormatPropertiesAMD: VkTextureLODGatherFormatPropertiesAMDConstructor;



  /**
   * 
   */
interface VkSamplerYcbcrConversionImageFormatPropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly combinedImageSamplerDescriptorCount: number;

}

declare interface VkSamplerYcbcrConversionImageFormatPropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly combinedImageSamplerDescriptorCount?: number;
}

declare interface VkSamplerYcbcrConversionImageFormatPropertiesKHRConstructor {
  readonly prototype: VkSamplerYcbcrConversionImageFormatPropertiesKHR;
  new(param?: VkSamplerYcbcrConversionImageFormatPropertiesKHRInitializer | null): VkSamplerYcbcrConversionImageFormatPropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSamplerYcbcrConversionImageFormatPropertiesKHR: VkSamplerYcbcrConversionImageFormatPropertiesKHRConstructor;



  /**
   * 
   */
interface VkSamplerYcbcrConversionImageFormatProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly combinedImageSamplerDescriptorCount: number;

}

declare interface VkSamplerYcbcrConversionImageFormatPropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly combinedImageSamplerDescriptorCount?: number;
}

declare interface VkSamplerYcbcrConversionImageFormatPropertiesConstructor {
  readonly prototype: VkSamplerYcbcrConversionImageFormatProperties;
  new(param?: VkSamplerYcbcrConversionImageFormatPropertiesInitializer | null): VkSamplerYcbcrConversionImageFormatProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSamplerYcbcrConversionImageFormatProperties: VkSamplerYcbcrConversionImageFormatPropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    samplerYcbcrConversion: boolean;

}

declare interface VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    samplerYcbcrConversion?: boolean;
}

declare interface VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;
  new(param?: VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHRInitializer | null): VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR: VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceSamplerYcbcrConversionFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    samplerYcbcrConversion: boolean;

}

declare interface VkPhysicalDeviceSamplerYcbcrConversionFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    samplerYcbcrConversion?: boolean;
}

declare interface VkPhysicalDeviceSamplerYcbcrConversionFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceSamplerYcbcrConversionFeatures;
  new(param?: VkPhysicalDeviceSamplerYcbcrConversionFeaturesInitializer | null): VkPhysicalDeviceSamplerYcbcrConversionFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceSamplerYcbcrConversionFeatures: VkPhysicalDeviceSamplerYcbcrConversionFeaturesConstructor;



  /**
   * 
   */
interface VkImagePlaneMemoryRequirementsInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    planeAspect: VkImageAspectFlagBits;

}

declare interface VkImagePlaneMemoryRequirementsInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    planeAspect?: VkImageAspectFlagBits;
}

declare interface VkImagePlaneMemoryRequirementsInfoKHRConstructor {
  readonly prototype: VkImagePlaneMemoryRequirementsInfoKHR;
  new(param?: VkImagePlaneMemoryRequirementsInfoKHRInitializer | null): VkImagePlaneMemoryRequirementsInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImagePlaneMemoryRequirementsInfoKHR: VkImagePlaneMemoryRequirementsInfoKHRConstructor;



  /**
   * 
   */
interface VkImagePlaneMemoryRequirementsInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    planeAspect: VkImageAspectFlagBits;

}

declare interface VkImagePlaneMemoryRequirementsInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    planeAspect?: VkImageAspectFlagBits;
}

declare interface VkImagePlaneMemoryRequirementsInfoConstructor {
  readonly prototype: VkImagePlaneMemoryRequirementsInfo;
  new(param?: VkImagePlaneMemoryRequirementsInfoInitializer | null): VkImagePlaneMemoryRequirementsInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImagePlaneMemoryRequirementsInfo: VkImagePlaneMemoryRequirementsInfoConstructor;



  /**
   * 
   */
interface VkBindImagePlaneMemoryInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    planeAspect: VkImageAspectFlagBits;

}

declare interface VkBindImagePlaneMemoryInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    planeAspect?: VkImageAspectFlagBits;
}

declare interface VkBindImagePlaneMemoryInfoKHRConstructor {
  readonly prototype: VkBindImagePlaneMemoryInfoKHR;
  new(param?: VkBindImagePlaneMemoryInfoKHRInitializer | null): VkBindImagePlaneMemoryInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindImagePlaneMemoryInfoKHR: VkBindImagePlaneMemoryInfoKHRConstructor;



  /**
   * 
   */
interface VkBindImagePlaneMemoryInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    planeAspect: VkImageAspectFlagBits;

}

declare interface VkBindImagePlaneMemoryInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    planeAspect?: VkImageAspectFlagBits;
}

declare interface VkBindImagePlaneMemoryInfoConstructor {
  readonly prototype: VkBindImagePlaneMemoryInfo;
  new(param?: VkBindImagePlaneMemoryInfoInitializer | null): VkBindImagePlaneMemoryInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindImagePlaneMemoryInfo: VkBindImagePlaneMemoryInfoConstructor;



  /**
   * 
   */
interface VkSamplerYcbcrConversionCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    ycbcrModel: VkSamplerYcbcrModelConversion;

    /**
     *
     */
    ycbcrRange: VkSamplerYcbcrRange;

    /**
     *
     */
    components: VkComponentMapping | null;

    /**
     *
     */
    xChromaOffset: VkChromaLocation;

    /**
     *
     */
    yChromaOffset: VkChromaLocation;

    /**
     *
     */
    chromaFilter: VkFilter;

    /**
     *
     */
    forceExplicitReconstruction: boolean;

}

declare interface VkSamplerYcbcrConversionCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    ycbcrModel?: VkSamplerYcbcrModelConversion;

    /**
     *
     */
    ycbcrRange?: VkSamplerYcbcrRange;

    /**
     *
     */
    components?: VkComponentMapping | null;

    /**
     *
     */
    xChromaOffset?: VkChromaLocation;

    /**
     *
     */
    yChromaOffset?: VkChromaLocation;

    /**
     *
     */
    chromaFilter?: VkFilter;

    /**
     *
     */
    forceExplicitReconstruction?: boolean;
}

declare interface VkSamplerYcbcrConversionCreateInfoKHRConstructor {
  readonly prototype: VkSamplerYcbcrConversionCreateInfoKHR;
  new(param?: VkSamplerYcbcrConversionCreateInfoKHRInitializer | null): VkSamplerYcbcrConversionCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSamplerYcbcrConversionCreateInfoKHR: VkSamplerYcbcrConversionCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkSamplerYcbcrConversionCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    ycbcrModel: VkSamplerYcbcrModelConversion;

    /**
     *
     */
    ycbcrRange: VkSamplerYcbcrRange;

    /**
     *
     */
    components: VkComponentMapping | null;

    /**
     *
     */
    xChromaOffset: VkChromaLocation;

    /**
     *
     */
    yChromaOffset: VkChromaLocation;

    /**
     *
     */
    chromaFilter: VkFilter;

    /**
     *
     */
    forceExplicitReconstruction: boolean;

}

declare interface VkSamplerYcbcrConversionCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    ycbcrModel?: VkSamplerYcbcrModelConversion;

    /**
     *
     */
    ycbcrRange?: VkSamplerYcbcrRange;

    /**
     *
     */
    components?: VkComponentMapping | null;

    /**
     *
     */
    xChromaOffset?: VkChromaLocation;

    /**
     *
     */
    yChromaOffset?: VkChromaLocation;

    /**
     *
     */
    chromaFilter?: VkFilter;

    /**
     *
     */
    forceExplicitReconstruction?: boolean;
}

declare interface VkSamplerYcbcrConversionCreateInfoConstructor {
  readonly prototype: VkSamplerYcbcrConversionCreateInfo;
  new(param?: VkSamplerYcbcrConversionCreateInfoInitializer | null): VkSamplerYcbcrConversionCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSamplerYcbcrConversionCreateInfo: VkSamplerYcbcrConversionCreateInfoConstructor;



  /**
   * 
   */
interface VkSamplerYcbcrConversionInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    conversion: VkSamplerYcbcrConversion | null;

}

declare interface VkSamplerYcbcrConversionInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    conversion?: VkSamplerYcbcrConversion | null;
}

declare interface VkSamplerYcbcrConversionInfoKHRConstructor {
  readonly prototype: VkSamplerYcbcrConversionInfoKHR;
  new(param?: VkSamplerYcbcrConversionInfoKHRInitializer | null): VkSamplerYcbcrConversionInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSamplerYcbcrConversionInfoKHR: VkSamplerYcbcrConversionInfoKHRConstructor;



  /**
   * 
   */
interface VkSamplerYcbcrConversionInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    conversion: VkSamplerYcbcrConversion | null;

}

declare interface VkSamplerYcbcrConversionInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    conversion?: VkSamplerYcbcrConversion | null;
}

declare interface VkSamplerYcbcrConversionInfoConstructor {
  readonly prototype: VkSamplerYcbcrConversionInfo;
  new(param?: VkSamplerYcbcrConversionInfoInitializer | null): VkSamplerYcbcrConversionInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSamplerYcbcrConversionInfo: VkSamplerYcbcrConversionInfoConstructor;



  /**
   * 
   */
interface VkPipelineTessellationDomainOriginStateCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    domainOrigin: VkTessellationDomainOrigin;

}

declare interface VkPipelineTessellationDomainOriginStateCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    domainOrigin?: VkTessellationDomainOrigin;
}

declare interface VkPipelineTessellationDomainOriginStateCreateInfoKHRConstructor {
  readonly prototype: VkPipelineTessellationDomainOriginStateCreateInfoKHR;
  new(param?: VkPipelineTessellationDomainOriginStateCreateInfoKHRInitializer | null): VkPipelineTessellationDomainOriginStateCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineTessellationDomainOriginStateCreateInfoKHR: VkPipelineTessellationDomainOriginStateCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkPipelineTessellationDomainOriginStateCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    domainOrigin: VkTessellationDomainOrigin;

}

declare interface VkPipelineTessellationDomainOriginStateCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    domainOrigin?: VkTessellationDomainOrigin;
}

declare interface VkPipelineTessellationDomainOriginStateCreateInfoConstructor {
  readonly prototype: VkPipelineTessellationDomainOriginStateCreateInfo;
  new(param?: VkPipelineTessellationDomainOriginStateCreateInfoInitializer | null): VkPipelineTessellationDomainOriginStateCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineTessellationDomainOriginStateCreateInfo: VkPipelineTessellationDomainOriginStateCreateInfoConstructor;



  /**
   * 
   */
interface VkImageViewUsageCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

}

declare interface VkImageViewUsageCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;
}

declare interface VkImageViewUsageCreateInfoKHRConstructor {
  readonly prototype: VkImageViewUsageCreateInfoKHR;
  new(param?: VkImageViewUsageCreateInfoKHRInitializer | null): VkImageViewUsageCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageViewUsageCreateInfoKHR: VkImageViewUsageCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkImageViewUsageCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

}

declare interface VkImageViewUsageCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;
}

declare interface VkImageViewUsageCreateInfoConstructor {
  readonly prototype: VkImageViewUsageCreateInfo;
  new(param?: VkImageViewUsageCreateInfoInitializer | null): VkImageViewUsageCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageViewUsageCreateInfo: VkImageViewUsageCreateInfoConstructor;



  /**
   * 
   */
interface VkMemoryDedicatedAllocateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    buffer: VkBuffer | null;

}

declare interface VkMemoryDedicatedAllocateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    buffer?: VkBuffer | null;
}

declare interface VkMemoryDedicatedAllocateInfoKHRConstructor {
  readonly prototype: VkMemoryDedicatedAllocateInfoKHR;
  new(param?: VkMemoryDedicatedAllocateInfoKHRInitializer | null): VkMemoryDedicatedAllocateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryDedicatedAllocateInfoKHR: VkMemoryDedicatedAllocateInfoKHRConstructor;



  /**
   * 
   */
interface VkMemoryDedicatedAllocateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    buffer: VkBuffer | null;

}

declare interface VkMemoryDedicatedAllocateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    buffer?: VkBuffer | null;
}

declare interface VkMemoryDedicatedAllocateInfoConstructor {
  readonly prototype: VkMemoryDedicatedAllocateInfo;
  new(param?: VkMemoryDedicatedAllocateInfoInitializer | null): VkMemoryDedicatedAllocateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryDedicatedAllocateInfo: VkMemoryDedicatedAllocateInfoConstructor;



  /**
   * 
   */
interface VkMemoryDedicatedRequirementsKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly prefersDedicatedAllocation: boolean;

    /**
     *
     */
    readonly requiresDedicatedAllocation: boolean;

}

declare interface VkMemoryDedicatedRequirementsKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly prefersDedicatedAllocation?: boolean;

    /**
     *
     */
    readonly requiresDedicatedAllocation?: boolean;
}

declare interface VkMemoryDedicatedRequirementsKHRConstructor {
  readonly prototype: VkMemoryDedicatedRequirementsKHR;
  new(param?: VkMemoryDedicatedRequirementsKHRInitializer | null): VkMemoryDedicatedRequirementsKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryDedicatedRequirementsKHR: VkMemoryDedicatedRequirementsKHRConstructor;



  /**
   * 
   */
interface VkMemoryDedicatedRequirements {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly prefersDedicatedAllocation: boolean;

    /**
     *
     */
    readonly requiresDedicatedAllocation: boolean;

}

declare interface VkMemoryDedicatedRequirementsInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly prefersDedicatedAllocation?: boolean;

    /**
     *
     */
    readonly requiresDedicatedAllocation?: boolean;
}

declare interface VkMemoryDedicatedRequirementsConstructor {
  readonly prototype: VkMemoryDedicatedRequirements;
  new(param?: VkMemoryDedicatedRequirementsInitializer | null): VkMemoryDedicatedRequirements;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryDedicatedRequirements: VkMemoryDedicatedRequirementsConstructor;



  /**
   * 
   */
interface VkPhysicalDevicePointClippingPropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly pointClippingBehavior: VkPointClippingBehavior;

}

declare interface VkPhysicalDevicePointClippingPropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly pointClippingBehavior?: VkPointClippingBehavior;
}

declare interface VkPhysicalDevicePointClippingPropertiesKHRConstructor {
  readonly prototype: VkPhysicalDevicePointClippingPropertiesKHR;
  new(param?: VkPhysicalDevicePointClippingPropertiesKHRInitializer | null): VkPhysicalDevicePointClippingPropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDevicePointClippingPropertiesKHR: VkPhysicalDevicePointClippingPropertiesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDevicePointClippingProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly pointClippingBehavior: VkPointClippingBehavior;

}

declare interface VkPhysicalDevicePointClippingPropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly pointClippingBehavior?: VkPointClippingBehavior;
}

declare interface VkPhysicalDevicePointClippingPropertiesConstructor {
  readonly prototype: VkPhysicalDevicePointClippingProperties;
  new(param?: VkPhysicalDevicePointClippingPropertiesInitializer | null): VkPhysicalDevicePointClippingProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDevicePointClippingProperties: VkPhysicalDevicePointClippingPropertiesConstructor;



  /**
   * 
   */
interface VkSparseImageMemoryRequirements2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryRequirements: VkSparseImageMemoryRequirements | null;

}

declare interface VkSparseImageMemoryRequirements2KHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryRequirements?: VkSparseImageMemoryRequirements | null;
}

declare interface VkSparseImageMemoryRequirements2KHRConstructor {
  readonly prototype: VkSparseImageMemoryRequirements2KHR;
  new(param?: VkSparseImageMemoryRequirements2KHRInitializer | null): VkSparseImageMemoryRequirements2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSparseImageMemoryRequirements2KHR: VkSparseImageMemoryRequirements2KHRConstructor;



  /**
   * 
   */
interface VkSparseImageMemoryRequirements2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryRequirements: VkSparseImageMemoryRequirements | null;

}

declare interface VkSparseImageMemoryRequirements2Initializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryRequirements?: VkSparseImageMemoryRequirements | null;
}

declare interface VkSparseImageMemoryRequirements2Constructor {
  readonly prototype: VkSparseImageMemoryRequirements2;
  new(param?: VkSparseImageMemoryRequirements2Initializer | null): VkSparseImageMemoryRequirements2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSparseImageMemoryRequirements2: VkSparseImageMemoryRequirements2Constructor;



  /**
   * 
   */
interface VkMemoryRequirements2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryRequirements: VkMemoryRequirements | null;

}

declare interface VkMemoryRequirements2KHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryRequirements?: VkMemoryRequirements | null;
}

declare interface VkMemoryRequirements2KHRConstructor {
  readonly prototype: VkMemoryRequirements2KHR;
  new(param?: VkMemoryRequirements2KHRInitializer | null): VkMemoryRequirements2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryRequirements2KHR: VkMemoryRequirements2KHRConstructor;



  /**
   * 
   */
interface VkMemoryRequirements2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryRequirements: VkMemoryRequirements | null;

}

declare interface VkMemoryRequirements2Initializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryRequirements?: VkMemoryRequirements | null;
}

declare interface VkMemoryRequirements2Constructor {
  readonly prototype: VkMemoryRequirements2;
  new(param?: VkMemoryRequirements2Initializer | null): VkMemoryRequirements2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryRequirements2: VkMemoryRequirements2Constructor;



  /**
   * 
   */
interface VkImageSparseMemoryRequirementsInfo2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

}

declare interface VkImageSparseMemoryRequirementsInfo2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;
}

declare interface VkImageSparseMemoryRequirementsInfo2KHRConstructor {
  readonly prototype: VkImageSparseMemoryRequirementsInfo2KHR;
  new(param?: VkImageSparseMemoryRequirementsInfo2KHRInitializer | null): VkImageSparseMemoryRequirementsInfo2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageSparseMemoryRequirementsInfo2KHR: VkImageSparseMemoryRequirementsInfo2KHRConstructor;



  /**
   * 
   */
interface VkImageSparseMemoryRequirementsInfo2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

}

declare interface VkImageSparseMemoryRequirementsInfo2Initializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;
}

declare interface VkImageSparseMemoryRequirementsInfo2Constructor {
  readonly prototype: VkImageSparseMemoryRequirementsInfo2;
  new(param?: VkImageSparseMemoryRequirementsInfo2Initializer | null): VkImageSparseMemoryRequirementsInfo2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageSparseMemoryRequirementsInfo2: VkImageSparseMemoryRequirementsInfo2Constructor;



  /**
   * 
   */
interface VkImageMemoryRequirementsInfo2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

}

declare interface VkImageMemoryRequirementsInfo2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;
}

declare interface VkImageMemoryRequirementsInfo2KHRConstructor {
  readonly prototype: VkImageMemoryRequirementsInfo2KHR;
  new(param?: VkImageMemoryRequirementsInfo2KHRInitializer | null): VkImageMemoryRequirementsInfo2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageMemoryRequirementsInfo2KHR: VkImageMemoryRequirementsInfo2KHRConstructor;



  /**
   * 
   */
interface VkImageMemoryRequirementsInfo2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

}

declare interface VkImageMemoryRequirementsInfo2Initializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;
}

declare interface VkImageMemoryRequirementsInfo2Constructor {
  readonly prototype: VkImageMemoryRequirementsInfo2;
  new(param?: VkImageMemoryRequirementsInfo2Initializer | null): VkImageMemoryRequirementsInfo2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageMemoryRequirementsInfo2: VkImageMemoryRequirementsInfo2Constructor;



  /**
   * 
   */
interface VkBufferMemoryRequirementsInfo2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    buffer: VkBuffer | null;

}

declare interface VkBufferMemoryRequirementsInfo2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    buffer?: VkBuffer | null;
}

declare interface VkBufferMemoryRequirementsInfo2KHRConstructor {
  readonly prototype: VkBufferMemoryRequirementsInfo2KHR;
  new(param?: VkBufferMemoryRequirementsInfo2KHRInitializer | null): VkBufferMemoryRequirementsInfo2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBufferMemoryRequirementsInfo2KHR: VkBufferMemoryRequirementsInfo2KHRConstructor;



  /**
   * 
   */
interface VkBufferMemoryRequirementsInfo2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    buffer: VkBuffer | null;

}

declare interface VkBufferMemoryRequirementsInfo2Initializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    buffer?: VkBuffer | null;
}

declare interface VkBufferMemoryRequirementsInfo2Constructor {
  readonly prototype: VkBufferMemoryRequirementsInfo2;
  new(param?: VkBufferMemoryRequirementsInfo2Initializer | null): VkBufferMemoryRequirementsInfo2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBufferMemoryRequirementsInfo2: VkBufferMemoryRequirementsInfo2Constructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderSubgroupExtendedTypes: boolean;

}

declare interface VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderSubgroupExtendedTypes?: boolean;
}

declare interface VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR;
  new(param?: VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHRInitializer | null): VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR: VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderSubgroupExtendedTypes: boolean;

}

declare interface VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderSubgroupExtendedTypes?: boolean;
}

declare interface VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
  new(param?: VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesInitializer | null): VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures: VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceSubgroupProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly subgroupSize: number;

    /**
     *
     */
    readonly supportedStages: VkShaderStageFlagBits;

    /**
     *
     */
    readonly supportedOperations: VkSubgroupFeatureFlagBits;

    /**
     *
     */
    readonly quadOperationsInAllStages: boolean;

}

declare interface VkPhysicalDeviceSubgroupPropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly subgroupSize?: number;

    /**
     *
     */
    readonly supportedStages?: VkShaderStageFlagBits;

    /**
     *
     */
    readonly supportedOperations?: VkSubgroupFeatureFlagBits;

    /**
     *
     */
    readonly quadOperationsInAllStages?: boolean;
}

declare interface VkPhysicalDeviceSubgroupPropertiesConstructor {
  readonly prototype: VkPhysicalDeviceSubgroupProperties;
  new(param?: VkPhysicalDeviceSubgroupPropertiesInitializer | null): VkPhysicalDeviceSubgroupProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceSubgroupProperties: VkPhysicalDeviceSubgroupPropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDevice16BitStorageFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    storageBuffer16BitAccess: boolean;

    /**
     *
     */
    uniformAndStorageBuffer16BitAccess: boolean;

    /**
     *
     */
    storagePushConstant16: boolean;

    /**
     *
     */
    storageInputOutput16: boolean;

}

declare interface VkPhysicalDevice16BitStorageFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    storageBuffer16BitAccess?: boolean;

    /**
     *
     */
    uniformAndStorageBuffer16BitAccess?: boolean;

    /**
     *
     */
    storagePushConstant16?: boolean;

    /**
     *
     */
    storageInputOutput16?: boolean;
}

declare interface VkPhysicalDevice16BitStorageFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDevice16BitStorageFeaturesKHR;
  new(param?: VkPhysicalDevice16BitStorageFeaturesKHRInitializer | null): VkPhysicalDevice16BitStorageFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDevice16BitStorageFeaturesKHR: VkPhysicalDevice16BitStorageFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDevice16BitStorageFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    storageBuffer16BitAccess: boolean;

    /**
     *
     */
    uniformAndStorageBuffer16BitAccess: boolean;

    /**
     *
     */
    storagePushConstant16: boolean;

    /**
     *
     */
    storageInputOutput16: boolean;

}

declare interface VkPhysicalDevice16BitStorageFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    storageBuffer16BitAccess?: boolean;

    /**
     *
     */
    uniformAndStorageBuffer16BitAccess?: boolean;

    /**
     *
     */
    storagePushConstant16?: boolean;

    /**
     *
     */
    storageInputOutput16?: boolean;
}

declare interface VkPhysicalDevice16BitStorageFeaturesConstructor {
  readonly prototype: VkPhysicalDevice16BitStorageFeatures;
  new(param?: VkPhysicalDevice16BitStorageFeaturesInitializer | null): VkPhysicalDevice16BitStorageFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDevice16BitStorageFeatures: VkPhysicalDevice16BitStorageFeaturesConstructor;



  /**
   * 
   */
interface VkSharedPresentSurfaceCapabilitiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly sharedPresentSupportedUsageFlags: VkImageUsageFlagBits;

}

declare interface VkSharedPresentSurfaceCapabilitiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly sharedPresentSupportedUsageFlags?: VkImageUsageFlagBits;
}

declare interface VkSharedPresentSurfaceCapabilitiesKHRConstructor {
  readonly prototype: VkSharedPresentSurfaceCapabilitiesKHR;
  new(param?: VkSharedPresentSurfaceCapabilitiesKHRInitializer | null): VkSharedPresentSurfaceCapabilitiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSharedPresentSurfaceCapabilitiesKHR: VkSharedPresentSurfaceCapabilitiesKHRConstructor;



  /**
   * 
   */
interface VkDisplayPlaneCapabilities2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly capabilities: VkDisplayPlaneCapabilitiesKHR | null;

}

declare interface VkDisplayPlaneCapabilities2KHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly capabilities?: VkDisplayPlaneCapabilitiesKHR | null;
}

declare interface VkDisplayPlaneCapabilities2KHRConstructor {
  readonly prototype: VkDisplayPlaneCapabilities2KHR;
  new(param?: VkDisplayPlaneCapabilities2KHRInitializer | null): VkDisplayPlaneCapabilities2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplayPlaneCapabilities2KHR: VkDisplayPlaneCapabilities2KHRConstructor;



  /**
   * 
   */
interface VkDisplayPlaneInfo2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    mode: VkDisplayModeKHR | null;

    /**
     *
     */
    planeIndex: number;

}

declare interface VkDisplayPlaneInfo2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    mode?: VkDisplayModeKHR | null;

    /**
     *
     */
    planeIndex?: number;
}

declare interface VkDisplayPlaneInfo2KHRConstructor {
  readonly prototype: VkDisplayPlaneInfo2KHR;
  new(param?: VkDisplayPlaneInfo2KHRInitializer | null): VkDisplayPlaneInfo2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplayPlaneInfo2KHR: VkDisplayPlaneInfo2KHRConstructor;



  /**
   * 
   */
interface VkDisplayModeProperties2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly displayModeProperties: VkDisplayModePropertiesKHR | null;

}

declare interface VkDisplayModeProperties2KHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly displayModeProperties?: VkDisplayModePropertiesKHR | null;
}

declare interface VkDisplayModeProperties2KHRConstructor {
  readonly prototype: VkDisplayModeProperties2KHR;
  new(param?: VkDisplayModeProperties2KHRInitializer | null): VkDisplayModeProperties2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplayModeProperties2KHR: VkDisplayModeProperties2KHRConstructor;



  /**
   * 
   */
interface VkDisplayPlaneProperties2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly displayPlaneProperties: VkDisplayPlanePropertiesKHR | null;

}

declare interface VkDisplayPlaneProperties2KHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly displayPlaneProperties?: VkDisplayPlanePropertiesKHR | null;
}

declare interface VkDisplayPlaneProperties2KHRConstructor {
  readonly prototype: VkDisplayPlaneProperties2KHR;
  new(param?: VkDisplayPlaneProperties2KHRInitializer | null): VkDisplayPlaneProperties2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplayPlaneProperties2KHR: VkDisplayPlaneProperties2KHRConstructor;



  /**
   * 
   */
interface VkDisplayProperties2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly displayProperties: VkDisplayPropertiesKHR | null;

}

declare interface VkDisplayProperties2KHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly displayProperties?: VkDisplayPropertiesKHR | null;
}

declare interface VkDisplayProperties2KHRConstructor {
  readonly prototype: VkDisplayProperties2KHR;
  new(param?: VkDisplayProperties2KHRInitializer | null): VkDisplayProperties2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplayProperties2KHR: VkDisplayProperties2KHRConstructor;



  /**
   * 
   */
interface VkSurfaceFormat2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly surfaceFormat: VkSurfaceFormatKHR | null;

}

declare interface VkSurfaceFormat2KHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly surfaceFormat?: VkSurfaceFormatKHR | null;
}

declare interface VkSurfaceFormat2KHRConstructor {
  readonly prototype: VkSurfaceFormat2KHR;
  new(param?: VkSurfaceFormat2KHRInitializer | null): VkSurfaceFormat2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSurfaceFormat2KHR: VkSurfaceFormat2KHRConstructor;



  /**
   * 
   */
interface VkSurfaceCapabilities2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly surfaceCapabilities: VkSurfaceCapabilitiesKHR | null;

}

declare interface VkSurfaceCapabilities2KHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly surfaceCapabilities?: VkSurfaceCapabilitiesKHR | null;
}

declare interface VkSurfaceCapabilities2KHRConstructor {
  readonly prototype: VkSurfaceCapabilities2KHR;
  new(param?: VkSurfaceCapabilities2KHRInitializer | null): VkSurfaceCapabilities2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSurfaceCapabilities2KHR: VkSurfaceCapabilities2KHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceSurfaceInfo2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    surface: VkSurfaceKHR | null;

}

declare interface VkPhysicalDeviceSurfaceInfo2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    surface?: VkSurfaceKHR | null;
}

declare interface VkPhysicalDeviceSurfaceInfo2KHRConstructor {
  readonly prototype: VkPhysicalDeviceSurfaceInfo2KHR;
  new(param?: VkPhysicalDeviceSurfaceInfo2KHRInitializer | null): VkPhysicalDeviceSurfaceInfo2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceSurfaceInfo2KHR: VkPhysicalDeviceSurfaceInfo2KHRConstructor;



  /**
   * 
   */
interface VkRenderPassInputAttachmentAspectCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    aspectReferenceCount: number;

    /**
     *
     */
    pAspectReferences: VkInputAttachmentAspectReference[] | null;

}

declare interface VkRenderPassInputAttachmentAspectCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    aspectReferenceCount?: number;

    /**
     *
     */
    pAspectReferences?: VkInputAttachmentAspectReference[] | null;
}

declare interface VkRenderPassInputAttachmentAspectCreateInfoKHRConstructor {
  readonly prototype: VkRenderPassInputAttachmentAspectCreateInfoKHR;
  new(param?: VkRenderPassInputAttachmentAspectCreateInfoKHRInitializer | null): VkRenderPassInputAttachmentAspectCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRenderPassInputAttachmentAspectCreateInfoKHR: VkRenderPassInputAttachmentAspectCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkRenderPassInputAttachmentAspectCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    aspectReferenceCount: number;

    /**
     *
     */
    pAspectReferences: VkInputAttachmentAspectReference[] | null;

}

declare interface VkRenderPassInputAttachmentAspectCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    aspectReferenceCount?: number;

    /**
     *
     */
    pAspectReferences?: VkInputAttachmentAspectReference[] | null;
}

declare interface VkRenderPassInputAttachmentAspectCreateInfoConstructor {
  readonly prototype: VkRenderPassInputAttachmentAspectCreateInfo;
  new(param?: VkRenderPassInputAttachmentAspectCreateInfoInitializer | null): VkRenderPassInputAttachmentAspectCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRenderPassInputAttachmentAspectCreateInfo: VkRenderPassInputAttachmentAspectCreateInfoConstructor;



  /**
   * 
   */
interface VkInputAttachmentAspectReferenceKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    subpass: number;

    /**
     *
     */
    inputAttachmentIndex: number;

    /**
     *
     */
    aspectMask: VkImageAspectFlagBits;

}

declare interface VkInputAttachmentAspectReferenceKHRInitializer {
  
    /**
     *
     */
    subpass?: number;

    /**
     *
     */
    inputAttachmentIndex?: number;

    /**
     *
     */
    aspectMask?: VkImageAspectFlagBits;
}

declare interface VkInputAttachmentAspectReferenceKHRConstructor {
  readonly prototype: VkInputAttachmentAspectReferenceKHR;
  new(param?: VkInputAttachmentAspectReferenceKHRInitializer | null): VkInputAttachmentAspectReferenceKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkInputAttachmentAspectReferenceKHR: VkInputAttachmentAspectReferenceKHRConstructor;



  /**
   * 
   */
interface VkInputAttachmentAspectReference {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    subpass: number;

    /**
     *
     */
    inputAttachmentIndex: number;

    /**
     *
     */
    aspectMask: VkImageAspectFlagBits;

}

declare interface VkInputAttachmentAspectReferenceInitializer {
  
    /**
     *
     */
    subpass?: number;

    /**
     *
     */
    inputAttachmentIndex?: number;

    /**
     *
     */
    aspectMask?: VkImageAspectFlagBits;
}

declare interface VkInputAttachmentAspectReferenceConstructor {
  readonly prototype: VkInputAttachmentAspectReference;
  new(param?: VkInputAttachmentAspectReferenceInitializer | null): VkInputAttachmentAspectReference;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkInputAttachmentAspectReference: VkInputAttachmentAspectReferenceConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly perViewPositionAllComponents: boolean;

}

declare interface VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly perViewPositionAllComponents?: boolean;
}

declare interface VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXConstructor {
  readonly prototype: VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
  new(param?: VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXInitializer | null): VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX: VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXConstructor;



  /**
   * 
   */
interface VkPipelineDiscardRectangleStateCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    discardRectangleMode: VkDiscardRectangleModeEXT;

    /**
     *
     */
    discardRectangleCount: number;

    /**
     *
     */
    pDiscardRectangles: VkRect2D[] | null;

}

declare interface VkPipelineDiscardRectangleStateCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    discardRectangleMode?: VkDiscardRectangleModeEXT;

    /**
     *
     */
    discardRectangleCount?: number;

    /**
     *
     */
    pDiscardRectangles?: VkRect2D[] | null;
}

declare interface VkPipelineDiscardRectangleStateCreateInfoEXTConstructor {
  readonly prototype: VkPipelineDiscardRectangleStateCreateInfoEXT;
  new(param?: VkPipelineDiscardRectangleStateCreateInfoEXTInitializer | null): VkPipelineDiscardRectangleStateCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineDiscardRectangleStateCreateInfoEXT: VkPipelineDiscardRectangleStateCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceDiscardRectanglePropertiesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxDiscardRectangles: number;

}

declare interface VkPhysicalDeviceDiscardRectanglePropertiesEXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxDiscardRectangles?: number;
}

declare interface VkPhysicalDeviceDiscardRectanglePropertiesEXTConstructor {
  readonly prototype: VkPhysicalDeviceDiscardRectanglePropertiesEXT;
  new(param?: VkPhysicalDeviceDiscardRectanglePropertiesEXTInitializer | null): VkPhysicalDeviceDiscardRectanglePropertiesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceDiscardRectanglePropertiesEXT: VkPhysicalDeviceDiscardRectanglePropertiesEXTConstructor;



  /**
   * 
   */
interface VkPipelineViewportSwizzleStateCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    viewportCount: number;

    /**
     *
     */
    pViewportSwizzles: VkViewportSwizzleNV[] | null;

}

declare interface VkPipelineViewportSwizzleStateCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    viewportCount?: number;

    /**
     *
     */
    pViewportSwizzles?: VkViewportSwizzleNV[] | null;
}

declare interface VkPipelineViewportSwizzleStateCreateInfoNVConstructor {
  readonly prototype: VkPipelineViewportSwizzleStateCreateInfoNV;
  new(param?: VkPipelineViewportSwizzleStateCreateInfoNVInitializer | null): VkPipelineViewportSwizzleStateCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineViewportSwizzleStateCreateInfoNV: VkPipelineViewportSwizzleStateCreateInfoNVConstructor;



  /**
   * 
   */
interface VkViewportSwizzleNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    x: VkViewportCoordinateSwizzleNV;

    /**
     *
     */
    y: VkViewportCoordinateSwizzleNV;

    /**
     *
     */
    z: VkViewportCoordinateSwizzleNV;

    /**
     *
     */
    w: VkViewportCoordinateSwizzleNV;

}

declare interface VkViewportSwizzleNVInitializer {
  
    /**
     *
     */
    x?: VkViewportCoordinateSwizzleNV;

    /**
     *
     */
    y?: VkViewportCoordinateSwizzleNV;

    /**
     *
     */
    z?: VkViewportCoordinateSwizzleNV;

    /**
     *
     */
    w?: VkViewportCoordinateSwizzleNV;
}

declare interface VkViewportSwizzleNVConstructor {
  readonly prototype: VkViewportSwizzleNV;
  new(param?: VkViewportSwizzleNVInitializer | null): VkViewportSwizzleNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkViewportSwizzleNV: VkViewportSwizzleNVConstructor;



  /**
   * 
   */
interface VkPipelineViewportWScalingStateCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    viewportWScalingEnable: boolean;

    /**
     *
     */
    viewportCount: number;

    /**
     *
     */
    pViewportWScalings: VkViewportWScalingNV[] | null;

}

declare interface VkPipelineViewportWScalingStateCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    viewportWScalingEnable?: boolean;

    /**
     *
     */
    viewportCount?: number;

    /**
     *
     */
    pViewportWScalings?: VkViewportWScalingNV[] | null;
}

declare interface VkPipelineViewportWScalingStateCreateInfoNVConstructor {
  readonly prototype: VkPipelineViewportWScalingStateCreateInfoNV;
  new(param?: VkPipelineViewportWScalingStateCreateInfoNVInitializer | null): VkPipelineViewportWScalingStateCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineViewportWScalingStateCreateInfoNV: VkPipelineViewportWScalingStateCreateInfoNVConstructor;



  /**
   * 
   */
interface VkViewportWScalingNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    xcoeff: number;

    /**
     *
     */
    ycoeff: number;

}

declare interface VkViewportWScalingNVInitializer {
  
    /**
     *
     */
    xcoeff?: number;

    /**
     *
     */
    ycoeff?: number;
}

declare interface VkViewportWScalingNVConstructor {
  readonly prototype: VkViewportWScalingNV;
  new(param?: VkViewportWScalingNVInitializer | null): VkViewportWScalingNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkViewportWScalingNV: VkViewportWScalingNVConstructor;



  /**
   * 
   */
interface VkPresentTimeGOOGLE {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    presentID: number;

    /**
     *
     */
    desiredPresentTime: bigint | number;

}

declare interface VkPresentTimeGOOGLEInitializer {
  
    /**
     *
     */
    presentID?: number;

    /**
     *
     */
    desiredPresentTime?: bigint | number;
}

declare interface VkPresentTimeGOOGLEConstructor {
  readonly prototype: VkPresentTimeGOOGLE;
  new(param?: VkPresentTimeGOOGLEInitializer | null): VkPresentTimeGOOGLE;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPresentTimeGOOGLE: VkPresentTimeGOOGLEConstructor;



  /**
   * 
   */
interface VkPresentTimesInfoGOOGLE {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    swapchainCount: number;

    /**
     *
     */
    pTimes: VkPresentTimeGOOGLE[] | null;

}

declare interface VkPresentTimesInfoGOOGLEInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    swapchainCount?: number;

    /**
     *
     */
    pTimes?: VkPresentTimeGOOGLE[] | null;
}

declare interface VkPresentTimesInfoGOOGLEConstructor {
  readonly prototype: VkPresentTimesInfoGOOGLE;
  new(param?: VkPresentTimesInfoGOOGLEInitializer | null): VkPresentTimesInfoGOOGLE;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPresentTimesInfoGOOGLE: VkPresentTimesInfoGOOGLEConstructor;



  /**
   * 
   */
interface VkPastPresentationTimingGOOGLE {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly presentID: number;

    /**
     *
     */
    readonly desiredPresentTime: bigint | number;

    /**
     *
     */
    readonly actualPresentTime: bigint | number;

    /**
     *
     */
    readonly earliestPresentTime: bigint | number;

    /**
     *
     */
    readonly presentMargin: bigint | number;

}

declare interface VkPastPresentationTimingGOOGLEInitializer {
  
    /**
     *
     */
    readonly presentID?: number;

    /**
     *
     */
    readonly desiredPresentTime?: bigint | number;

    /**
     *
     */
    readonly actualPresentTime?: bigint | number;

    /**
     *
     */
    readonly earliestPresentTime?: bigint | number;

    /**
     *
     */
    readonly presentMargin?: bigint | number;
}

declare interface VkPastPresentationTimingGOOGLEConstructor {
  readonly prototype: VkPastPresentationTimingGOOGLE;
  new(param?: VkPastPresentationTimingGOOGLEInitializer | null): VkPastPresentationTimingGOOGLE;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPastPresentationTimingGOOGLE: VkPastPresentationTimingGOOGLEConstructor;



  /**
   * 
   */
interface VkRefreshCycleDurationGOOGLE {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly refreshDuration: bigint | number;

}

declare interface VkRefreshCycleDurationGOOGLEInitializer {
  
    /**
     *
     */
    readonly refreshDuration?: bigint | number;
}

declare interface VkRefreshCycleDurationGOOGLEConstructor {
  readonly prototype: VkRefreshCycleDurationGOOGLE;
  new(param?: VkRefreshCycleDurationGOOGLEInitializer | null): VkRefreshCycleDurationGOOGLE;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRefreshCycleDurationGOOGLE: VkRefreshCycleDurationGOOGLEConstructor;



  /**
   * 
   */
interface VkSwapchainDisplayNativeHdrCreateInfoAMD {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    localDimmingEnable: boolean;

}

declare interface VkSwapchainDisplayNativeHdrCreateInfoAMDInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    localDimmingEnable?: boolean;
}

declare interface VkSwapchainDisplayNativeHdrCreateInfoAMDConstructor {
  readonly prototype: VkSwapchainDisplayNativeHdrCreateInfoAMD;
  new(param?: VkSwapchainDisplayNativeHdrCreateInfoAMDInitializer | null): VkSwapchainDisplayNativeHdrCreateInfoAMD;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSwapchainDisplayNativeHdrCreateInfoAMD: VkSwapchainDisplayNativeHdrCreateInfoAMDConstructor;



  /**
   * 
   */
interface VkDisplayNativeHdrSurfaceCapabilitiesAMD {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly localDimmingSupport: boolean;

}

declare interface VkDisplayNativeHdrSurfaceCapabilitiesAMDInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly localDimmingSupport?: boolean;
}

declare interface VkDisplayNativeHdrSurfaceCapabilitiesAMDConstructor {
  readonly prototype: VkDisplayNativeHdrSurfaceCapabilitiesAMD;
  new(param?: VkDisplayNativeHdrSurfaceCapabilitiesAMDInitializer | null): VkDisplayNativeHdrSurfaceCapabilitiesAMD;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplayNativeHdrSurfaceCapabilitiesAMD: VkDisplayNativeHdrSurfaceCapabilitiesAMDConstructor;



  /**
   * 
   */
interface VkHdrMetadataEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    displayPrimaryRed: VkXYColorEXT | null;

    /**
     *
     */
    displayPrimaryGreen: VkXYColorEXT | null;

    /**
     *
     */
    displayPrimaryBlue: VkXYColorEXT | null;

    /**
     *
     */
    whitePoint: VkXYColorEXT | null;

    /**
     *
     */
    maxLuminance: number;

    /**
     *
     */
    minLuminance: number;

    /**
     *
     */
    maxContentLightLevel: number;

    /**
     *
     */
    maxFrameAverageLightLevel: number;

}

declare interface VkHdrMetadataEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    displayPrimaryRed?: VkXYColorEXT | null;

    /**
     *
     */
    displayPrimaryGreen?: VkXYColorEXT | null;

    /**
     *
     */
    displayPrimaryBlue?: VkXYColorEXT | null;

    /**
     *
     */
    whitePoint?: VkXYColorEXT | null;

    /**
     *
     */
    maxLuminance?: number;

    /**
     *
     */
    minLuminance?: number;

    /**
     *
     */
    maxContentLightLevel?: number;

    /**
     *
     */
    maxFrameAverageLightLevel?: number;
}

declare interface VkHdrMetadataEXTConstructor {
  readonly prototype: VkHdrMetadataEXT;
  new(param?: VkHdrMetadataEXTInitializer | null): VkHdrMetadataEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkHdrMetadataEXT: VkHdrMetadataEXTConstructor;



  /**
   * 
   */
interface VkXYColorEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    x: number;

    /**
     *
     */
    y: number;

}

declare interface VkXYColorEXTInitializer {
  
    /**
     *
     */
    x?: number;

    /**
     *
     */
    y?: number;
}

declare interface VkXYColorEXTConstructor {
  readonly prototype: VkXYColorEXT;
  new(param?: VkXYColorEXTInitializer | null): VkXYColorEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkXYColorEXT: VkXYColorEXTConstructor;



  /**
   * 
   */
interface VkDescriptorUpdateTemplateCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    descriptorUpdateEntryCount: number;

    /**
     *
     */
    pDescriptorUpdateEntries: VkDescriptorUpdateTemplateEntry[] | null;

    /**
     *
     */
    templateType: VkDescriptorUpdateTemplateType;

    /**
     *
     */
    descriptorSetLayout: VkDescriptorSetLayout | null;

    /**
     *
     */
    pipelineBindPoint: VkPipelineBindPoint;

    /**
     *
     */
    pipelineLayout: VkPipelineLayout | null;

    /**
     *
     */
    set: number;

}

declare interface VkDescriptorUpdateTemplateCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    descriptorUpdateEntryCount?: number;

    /**
     *
     */
    pDescriptorUpdateEntries?: VkDescriptorUpdateTemplateEntry[] | null;

    /**
     *
     */
    templateType?: VkDescriptorUpdateTemplateType;

    /**
     *
     */
    descriptorSetLayout?: VkDescriptorSetLayout | null;

    /**
     *
     */
    pipelineBindPoint?: VkPipelineBindPoint;

    /**
     *
     */
    pipelineLayout?: VkPipelineLayout | null;

    /**
     *
     */
    set?: number;
}

declare interface VkDescriptorUpdateTemplateCreateInfoKHRConstructor {
  readonly prototype: VkDescriptorUpdateTemplateCreateInfoKHR;
  new(param?: VkDescriptorUpdateTemplateCreateInfoKHRInitializer | null): VkDescriptorUpdateTemplateCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorUpdateTemplateCreateInfoKHR: VkDescriptorUpdateTemplateCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkDescriptorUpdateTemplateCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    descriptorUpdateEntryCount: number;

    /**
     *
     */
    pDescriptorUpdateEntries: VkDescriptorUpdateTemplateEntry[] | null;

    /**
     *
     */
    templateType: VkDescriptorUpdateTemplateType;

    /**
     *
     */
    descriptorSetLayout: VkDescriptorSetLayout | null;

    /**
     *
     */
    pipelineBindPoint: VkPipelineBindPoint;

    /**
     *
     */
    pipelineLayout: VkPipelineLayout | null;

    /**
     *
     */
    set: number;

}

declare interface VkDescriptorUpdateTemplateCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    descriptorUpdateEntryCount?: number;

    /**
     *
     */
    pDescriptorUpdateEntries?: VkDescriptorUpdateTemplateEntry[] | null;

    /**
     *
     */
    templateType?: VkDescriptorUpdateTemplateType;

    /**
     *
     */
    descriptorSetLayout?: VkDescriptorSetLayout | null;

    /**
     *
     */
    pipelineBindPoint?: VkPipelineBindPoint;

    /**
     *
     */
    pipelineLayout?: VkPipelineLayout | null;

    /**
     *
     */
    set?: number;
}

declare interface VkDescriptorUpdateTemplateCreateInfoConstructor {
  readonly prototype: VkDescriptorUpdateTemplateCreateInfo;
  new(param?: VkDescriptorUpdateTemplateCreateInfoInitializer | null): VkDescriptorUpdateTemplateCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorUpdateTemplateCreateInfo: VkDescriptorUpdateTemplateCreateInfoConstructor;



  /**
   * 
   */
interface VkDescriptorUpdateTemplateEntryKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    dstBinding: number;

    /**
     *
     */
    dstArrayElement: number;

    /**
     *
     */
    descriptorCount: number;

    /**
     *
     */
    descriptorType: VkDescriptorType;

    /**
     *
     */
    offset: bigint | number;

    /**
     *
     */
    stride: bigint | number;

}

declare interface VkDescriptorUpdateTemplateEntryKHRInitializer {
  
    /**
     *
     */
    dstBinding?: number;

    /**
     *
     */
    dstArrayElement?: number;

    /**
     *
     */
    descriptorCount?: number;

    /**
     *
     */
    descriptorType?: VkDescriptorType;

    /**
     *
     */
    offset?: bigint | number;

    /**
     *
     */
    stride?: bigint | number;
}

declare interface VkDescriptorUpdateTemplateEntryKHRConstructor {
  readonly prototype: VkDescriptorUpdateTemplateEntryKHR;
  new(param?: VkDescriptorUpdateTemplateEntryKHRInitializer | null): VkDescriptorUpdateTemplateEntryKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorUpdateTemplateEntryKHR: VkDescriptorUpdateTemplateEntryKHRConstructor;



  /**
   * 
   */
interface VkDescriptorUpdateTemplateEntry {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    dstBinding: number;

    /**
     *
     */
    dstArrayElement: number;

    /**
     *
     */
    descriptorCount: number;

    /**
     *
     */
    descriptorType: VkDescriptorType;

    /**
     *
     */
    offset: bigint | number;

    /**
     *
     */
    stride: bigint | number;

}

declare interface VkDescriptorUpdateTemplateEntryInitializer {
  
    /**
     *
     */
    dstBinding?: number;

    /**
     *
     */
    dstArrayElement?: number;

    /**
     *
     */
    descriptorCount?: number;

    /**
     *
     */
    descriptorType?: VkDescriptorType;

    /**
     *
     */
    offset?: bigint | number;

    /**
     *
     */
    stride?: bigint | number;
}

declare interface VkDescriptorUpdateTemplateEntryConstructor {
  readonly prototype: VkDescriptorUpdateTemplateEntry;
  new(param?: VkDescriptorUpdateTemplateEntryInitializer | null): VkDescriptorUpdateTemplateEntry;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorUpdateTemplateEntry: VkDescriptorUpdateTemplateEntryConstructor;



  /**
   * 
   */
interface VkDeviceGroupSwapchainCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    modes: VkDeviceGroupPresentModeFlagBitsKHR;

}

declare interface VkDeviceGroupSwapchainCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    modes?: VkDeviceGroupPresentModeFlagBitsKHR;
}

declare interface VkDeviceGroupSwapchainCreateInfoKHRConstructor {
  readonly prototype: VkDeviceGroupSwapchainCreateInfoKHR;
  new(param?: VkDeviceGroupSwapchainCreateInfoKHRInitializer | null): VkDeviceGroupSwapchainCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceGroupSwapchainCreateInfoKHR: VkDeviceGroupSwapchainCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkDeviceGroupDeviceCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    physicalDeviceCount: number;

    /**
     *
     */
    pPhysicalDevices: VkPhysicalDevice[] | null;

}

declare interface VkDeviceGroupDeviceCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    physicalDeviceCount?: number;

    /**
     *
     */
    pPhysicalDevices?: VkPhysicalDevice[] | null;
}

declare interface VkDeviceGroupDeviceCreateInfoKHRConstructor {
  readonly prototype: VkDeviceGroupDeviceCreateInfoKHR;
  new(param?: VkDeviceGroupDeviceCreateInfoKHRInitializer | null): VkDeviceGroupDeviceCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceGroupDeviceCreateInfoKHR: VkDeviceGroupDeviceCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkDeviceGroupDeviceCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    physicalDeviceCount: number;

    /**
     *
     */
    pPhysicalDevices: VkPhysicalDevice[] | null;

}

declare interface VkDeviceGroupDeviceCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    physicalDeviceCount?: number;

    /**
     *
     */
    pPhysicalDevices?: VkPhysicalDevice[] | null;
}

declare interface VkDeviceGroupDeviceCreateInfoConstructor {
  readonly prototype: VkDeviceGroupDeviceCreateInfo;
  new(param?: VkDeviceGroupDeviceCreateInfoInitializer | null): VkDeviceGroupDeviceCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceGroupDeviceCreateInfo: VkDeviceGroupDeviceCreateInfoConstructor;



  /**
   * 
   */
interface VkDeviceGroupPresentInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    swapchainCount: number;

    /**
     *
     */
    pDeviceMasks: Uint32Array | null;

    /**
     *
     */
    mode: VkDeviceGroupPresentModeFlagBitsKHR;

}

declare interface VkDeviceGroupPresentInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    swapchainCount?: number;

    /**
     *
     */
    pDeviceMasks?: Uint32Array | null;

    /**
     *
     */
    mode?: VkDeviceGroupPresentModeFlagBitsKHR;
}

declare interface VkDeviceGroupPresentInfoKHRConstructor {
  readonly prototype: VkDeviceGroupPresentInfoKHR;
  new(param?: VkDeviceGroupPresentInfoKHRInitializer | null): VkDeviceGroupPresentInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceGroupPresentInfoKHR: VkDeviceGroupPresentInfoKHRConstructor;



  /**
   * 
   */
interface VkAcquireNextImageInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    swapchain: VkSwapchainKHR | null;

    /**
     *
     */
    timeout: bigint | number;

    /**
     *
     */
    semaphore: VkSemaphore | null;

    /**
     *
     */
    fence: VkFence | null;

    /**
     *
     */
    deviceMask: number;

}

declare interface VkAcquireNextImageInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    swapchain?: VkSwapchainKHR | null;

    /**
     *
     */
    timeout?: bigint | number;

    /**
     *
     */
    semaphore?: VkSemaphore | null;

    /**
     *
     */
    fence?: VkFence | null;

    /**
     *
     */
    deviceMask?: number;
}

declare interface VkAcquireNextImageInfoKHRConstructor {
  readonly prototype: VkAcquireNextImageInfoKHR;
  new(param?: VkAcquireNextImageInfoKHRInitializer | null): VkAcquireNextImageInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAcquireNextImageInfoKHR: VkAcquireNextImageInfoKHRConstructor;



  /**
   * 
   */
interface VkBindImageMemorySwapchainInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    swapchain: VkSwapchainKHR | null;

    /**
     *
     */
    imageIndex: number;

}

declare interface VkBindImageMemorySwapchainInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    swapchain?: VkSwapchainKHR | null;

    /**
     *
     */
    imageIndex?: number;
}

declare interface VkBindImageMemorySwapchainInfoKHRConstructor {
  readonly prototype: VkBindImageMemorySwapchainInfoKHR;
  new(param?: VkBindImageMemorySwapchainInfoKHRInitializer | null): VkBindImageMemorySwapchainInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindImageMemorySwapchainInfoKHR: VkBindImageMemorySwapchainInfoKHRConstructor;



  /**
   * 
   */
interface VkImageSwapchainCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    swapchain: VkSwapchainKHR | null;

}

declare interface VkImageSwapchainCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    swapchain?: VkSwapchainKHR | null;
}

declare interface VkImageSwapchainCreateInfoKHRConstructor {
  readonly prototype: VkImageSwapchainCreateInfoKHR;
  new(param?: VkImageSwapchainCreateInfoKHRInitializer | null): VkImageSwapchainCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageSwapchainCreateInfoKHR: VkImageSwapchainCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkDeviceGroupPresentCapabilitiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly presentMask: number[] | null;

    /**
     *
     */
    readonly modes: VkDeviceGroupPresentModeFlagBitsKHR;

}

declare interface VkDeviceGroupPresentCapabilitiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly presentMask?: number[] | null;

    /**
     *
     */
    readonly modes?: VkDeviceGroupPresentModeFlagBitsKHR;
}

declare interface VkDeviceGroupPresentCapabilitiesKHRConstructor {
  readonly prototype: VkDeviceGroupPresentCapabilitiesKHR;
  new(param?: VkDeviceGroupPresentCapabilitiesKHRInitializer | null): VkDeviceGroupPresentCapabilitiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceGroupPresentCapabilitiesKHR: VkDeviceGroupPresentCapabilitiesKHRConstructor;



  /**
   * 
   */
interface VkDeviceGroupBindSparseInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    resourceDeviceIndex: number;

    /**
     *
     */
    memoryDeviceIndex: number;

}

declare interface VkDeviceGroupBindSparseInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    resourceDeviceIndex?: number;

    /**
     *
     */
    memoryDeviceIndex?: number;
}

declare interface VkDeviceGroupBindSparseInfoKHRConstructor {
  readonly prototype: VkDeviceGroupBindSparseInfoKHR;
  new(param?: VkDeviceGroupBindSparseInfoKHRInitializer | null): VkDeviceGroupBindSparseInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceGroupBindSparseInfoKHR: VkDeviceGroupBindSparseInfoKHRConstructor;



  /**
   * 
   */
interface VkDeviceGroupBindSparseInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    resourceDeviceIndex: number;

    /**
     *
     */
    memoryDeviceIndex: number;

}

declare interface VkDeviceGroupBindSparseInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    resourceDeviceIndex?: number;

    /**
     *
     */
    memoryDeviceIndex?: number;
}

declare interface VkDeviceGroupBindSparseInfoConstructor {
  readonly prototype: VkDeviceGroupBindSparseInfo;
  new(param?: VkDeviceGroupBindSparseInfoInitializer | null): VkDeviceGroupBindSparseInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceGroupBindSparseInfo: VkDeviceGroupBindSparseInfoConstructor;



  /**
   * 
   */
interface VkDeviceGroupSubmitInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    waitSemaphoreCount: number;

    /**
     *
     */
    pWaitSemaphoreDeviceIndices: Uint32Array | null;

    /**
     *
     */
    commandBufferCount: number;

    /**
     *
     */
    pCommandBufferDeviceMasks: Uint32Array | null;

    /**
     *
     */
    signalSemaphoreCount: number;

    /**
     *
     */
    pSignalSemaphoreDeviceIndices: Uint32Array | null;

}

declare interface VkDeviceGroupSubmitInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    waitSemaphoreCount?: number;

    /**
     *
     */
    pWaitSemaphoreDeviceIndices?: Uint32Array | null;

    /**
     *
     */
    commandBufferCount?: number;

    /**
     *
     */
    pCommandBufferDeviceMasks?: Uint32Array | null;

    /**
     *
     */
    signalSemaphoreCount?: number;

    /**
     *
     */
    pSignalSemaphoreDeviceIndices?: Uint32Array | null;
}

declare interface VkDeviceGroupSubmitInfoKHRConstructor {
  readonly prototype: VkDeviceGroupSubmitInfoKHR;
  new(param?: VkDeviceGroupSubmitInfoKHRInitializer | null): VkDeviceGroupSubmitInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceGroupSubmitInfoKHR: VkDeviceGroupSubmitInfoKHRConstructor;



  /**
   * 
   */
interface VkDeviceGroupSubmitInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    waitSemaphoreCount: number;

    /**
     *
     */
    pWaitSemaphoreDeviceIndices: Uint32Array | null;

    /**
     *
     */
    commandBufferCount: number;

    /**
     *
     */
    pCommandBufferDeviceMasks: Uint32Array | null;

    /**
     *
     */
    signalSemaphoreCount: number;

    /**
     *
     */
    pSignalSemaphoreDeviceIndices: Uint32Array | null;

}

declare interface VkDeviceGroupSubmitInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    waitSemaphoreCount?: number;

    /**
     *
     */
    pWaitSemaphoreDeviceIndices?: Uint32Array | null;

    /**
     *
     */
    commandBufferCount?: number;

    /**
     *
     */
    pCommandBufferDeviceMasks?: Uint32Array | null;

    /**
     *
     */
    signalSemaphoreCount?: number;

    /**
     *
     */
    pSignalSemaphoreDeviceIndices?: Uint32Array | null;
}

declare interface VkDeviceGroupSubmitInfoConstructor {
  readonly prototype: VkDeviceGroupSubmitInfo;
  new(param?: VkDeviceGroupSubmitInfoInitializer | null): VkDeviceGroupSubmitInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceGroupSubmitInfo: VkDeviceGroupSubmitInfoConstructor;



  /**
   * 
   */
interface VkDeviceGroupCommandBufferBeginInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceMask: number;

}

declare interface VkDeviceGroupCommandBufferBeginInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceMask?: number;
}

declare interface VkDeviceGroupCommandBufferBeginInfoKHRConstructor {
  readonly prototype: VkDeviceGroupCommandBufferBeginInfoKHR;
  new(param?: VkDeviceGroupCommandBufferBeginInfoKHRInitializer | null): VkDeviceGroupCommandBufferBeginInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceGroupCommandBufferBeginInfoKHR: VkDeviceGroupCommandBufferBeginInfoKHRConstructor;



  /**
   * 
   */
interface VkDeviceGroupCommandBufferBeginInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceMask: number;

}

declare interface VkDeviceGroupCommandBufferBeginInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceMask?: number;
}

declare interface VkDeviceGroupCommandBufferBeginInfoConstructor {
  readonly prototype: VkDeviceGroupCommandBufferBeginInfo;
  new(param?: VkDeviceGroupCommandBufferBeginInfoInitializer | null): VkDeviceGroupCommandBufferBeginInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceGroupCommandBufferBeginInfo: VkDeviceGroupCommandBufferBeginInfoConstructor;



  /**
   * 
   */
interface VkDeviceGroupRenderPassBeginInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceMask: number;

    /**
     *
     */
    deviceRenderAreaCount: number;

    /**
     *
     */
    pDeviceRenderAreas: VkRect2D[] | null;

}

declare interface VkDeviceGroupRenderPassBeginInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceMask?: number;

    /**
     *
     */
    deviceRenderAreaCount?: number;

    /**
     *
     */
    pDeviceRenderAreas?: VkRect2D[] | null;
}

declare interface VkDeviceGroupRenderPassBeginInfoKHRConstructor {
  readonly prototype: VkDeviceGroupRenderPassBeginInfoKHR;
  new(param?: VkDeviceGroupRenderPassBeginInfoKHRInitializer | null): VkDeviceGroupRenderPassBeginInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceGroupRenderPassBeginInfoKHR: VkDeviceGroupRenderPassBeginInfoKHRConstructor;



  /**
   * 
   */
interface VkDeviceGroupRenderPassBeginInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceMask: number;

    /**
     *
     */
    deviceRenderAreaCount: number;

    /**
     *
     */
    pDeviceRenderAreas: VkRect2D[] | null;

}

declare interface VkDeviceGroupRenderPassBeginInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceMask?: number;

    /**
     *
     */
    deviceRenderAreaCount?: number;

    /**
     *
     */
    pDeviceRenderAreas?: VkRect2D[] | null;
}

declare interface VkDeviceGroupRenderPassBeginInfoConstructor {
  readonly prototype: VkDeviceGroupRenderPassBeginInfo;
  new(param?: VkDeviceGroupRenderPassBeginInfoInitializer | null): VkDeviceGroupRenderPassBeginInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceGroupRenderPassBeginInfo: VkDeviceGroupRenderPassBeginInfoConstructor;



  /**
   * 
   */
interface VkBindImageMemoryDeviceGroupInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceIndexCount: number;

    /**
     *
     */
    pDeviceIndices: Uint32Array | null;

    /**
     *
     */
    splitInstanceBindRegionCount: number;

    /**
     *
     */
    pSplitInstanceBindRegions: VkRect2D[] | null;

}

declare interface VkBindImageMemoryDeviceGroupInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceIndexCount?: number;

    /**
     *
     */
    pDeviceIndices?: Uint32Array | null;

    /**
     *
     */
    splitInstanceBindRegionCount?: number;

    /**
     *
     */
    pSplitInstanceBindRegions?: VkRect2D[] | null;
}

declare interface VkBindImageMemoryDeviceGroupInfoKHRConstructor {
  readonly prototype: VkBindImageMemoryDeviceGroupInfoKHR;
  new(param?: VkBindImageMemoryDeviceGroupInfoKHRInitializer | null): VkBindImageMemoryDeviceGroupInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindImageMemoryDeviceGroupInfoKHR: VkBindImageMemoryDeviceGroupInfoKHRConstructor;



  /**
   * 
   */
interface VkBindImageMemoryDeviceGroupInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceIndexCount: number;

    /**
     *
     */
    pDeviceIndices: Uint32Array | null;

    /**
     *
     */
    splitInstanceBindRegionCount: number;

    /**
     *
     */
    pSplitInstanceBindRegions: VkRect2D[] | null;

}

declare interface VkBindImageMemoryDeviceGroupInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceIndexCount?: number;

    /**
     *
     */
    pDeviceIndices?: Uint32Array | null;

    /**
     *
     */
    splitInstanceBindRegionCount?: number;

    /**
     *
     */
    pSplitInstanceBindRegions?: VkRect2D[] | null;
}

declare interface VkBindImageMemoryDeviceGroupInfoConstructor {
  readonly prototype: VkBindImageMemoryDeviceGroupInfo;
  new(param?: VkBindImageMemoryDeviceGroupInfoInitializer | null): VkBindImageMemoryDeviceGroupInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindImageMemoryDeviceGroupInfo: VkBindImageMemoryDeviceGroupInfoConstructor;



  /**
   * 
   */
interface VkBindImageMemoryInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset: bigint | number;

}

declare interface VkBindImageMemoryInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset?: bigint | number;
}

declare interface VkBindImageMemoryInfoKHRConstructor {
  readonly prototype: VkBindImageMemoryInfoKHR;
  new(param?: VkBindImageMemoryInfoKHRInitializer | null): VkBindImageMemoryInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindImageMemoryInfoKHR: VkBindImageMemoryInfoKHRConstructor;



  /**
   * 
   */
interface VkBindImageMemoryInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset: bigint | number;

}

declare interface VkBindImageMemoryInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset?: bigint | number;
}

declare interface VkBindImageMemoryInfoConstructor {
  readonly prototype: VkBindImageMemoryInfo;
  new(param?: VkBindImageMemoryInfoInitializer | null): VkBindImageMemoryInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindImageMemoryInfo: VkBindImageMemoryInfoConstructor;



  /**
   * 
   */
interface VkBindBufferMemoryDeviceGroupInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceIndexCount: number;

    /**
     *
     */
    pDeviceIndices: Uint32Array | null;

}

declare interface VkBindBufferMemoryDeviceGroupInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceIndexCount?: number;

    /**
     *
     */
    pDeviceIndices?: Uint32Array | null;
}

declare interface VkBindBufferMemoryDeviceGroupInfoKHRConstructor {
  readonly prototype: VkBindBufferMemoryDeviceGroupInfoKHR;
  new(param?: VkBindBufferMemoryDeviceGroupInfoKHRInitializer | null): VkBindBufferMemoryDeviceGroupInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindBufferMemoryDeviceGroupInfoKHR: VkBindBufferMemoryDeviceGroupInfoKHRConstructor;



  /**
   * 
   */
interface VkBindBufferMemoryDeviceGroupInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceIndexCount: number;

    /**
     *
     */
    pDeviceIndices: Uint32Array | null;

}

declare interface VkBindBufferMemoryDeviceGroupInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceIndexCount?: number;

    /**
     *
     */
    pDeviceIndices?: Uint32Array | null;
}

declare interface VkBindBufferMemoryDeviceGroupInfoConstructor {
  readonly prototype: VkBindBufferMemoryDeviceGroupInfo;
  new(param?: VkBindBufferMemoryDeviceGroupInfoInitializer | null): VkBindBufferMemoryDeviceGroupInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindBufferMemoryDeviceGroupInfo: VkBindBufferMemoryDeviceGroupInfoConstructor;



  /**
   * 
   */
interface VkBindBufferMemoryInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset: bigint | number;

}

declare interface VkBindBufferMemoryInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset?: bigint | number;
}

declare interface VkBindBufferMemoryInfoKHRConstructor {
  readonly prototype: VkBindBufferMemoryInfoKHR;
  new(param?: VkBindBufferMemoryInfoKHRInitializer | null): VkBindBufferMemoryInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindBufferMemoryInfoKHR: VkBindBufferMemoryInfoKHRConstructor;



  /**
   * 
   */
interface VkBindBufferMemoryInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset: bigint | number;

}

declare interface VkBindBufferMemoryInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset?: bigint | number;
}

declare interface VkBindBufferMemoryInfoConstructor {
  readonly prototype: VkBindBufferMemoryInfo;
  new(param?: VkBindBufferMemoryInfoInitializer | null): VkBindBufferMemoryInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindBufferMemoryInfo: VkBindBufferMemoryInfoConstructor;



  /**
   * 
   */
interface VkMemoryAllocateFlagsInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkMemoryAllocateFlagBits;

    /**
     *
     */
    deviceMask: number;

}

declare interface VkMemoryAllocateFlagsInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkMemoryAllocateFlagBits;

    /**
     *
     */
    deviceMask?: number;
}

declare interface VkMemoryAllocateFlagsInfoKHRConstructor {
  readonly prototype: VkMemoryAllocateFlagsInfoKHR;
  new(param?: VkMemoryAllocateFlagsInfoKHRInitializer | null): VkMemoryAllocateFlagsInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryAllocateFlagsInfoKHR: VkMemoryAllocateFlagsInfoKHRConstructor;



  /**
   * 
   */
interface VkMemoryAllocateFlagsInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkMemoryAllocateFlagBits;

    /**
     *
     */
    deviceMask: number;

}

declare interface VkMemoryAllocateFlagsInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkMemoryAllocateFlagBits;

    /**
     *
     */
    deviceMask?: number;
}

declare interface VkMemoryAllocateFlagsInfoConstructor {
  readonly prototype: VkMemoryAllocateFlagsInfo;
  new(param?: VkMemoryAllocateFlagsInfoInitializer | null): VkMemoryAllocateFlagsInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryAllocateFlagsInfo: VkMemoryAllocateFlagsInfoConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceGroupPropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly physicalDeviceCount: number;

    /**
     *
     */
    readonly physicalDevices: VkPhysicalDevice[] | null;

    /**
     *
     */
    readonly subsetAllocation: boolean;

}

declare interface VkPhysicalDeviceGroupPropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly physicalDeviceCount?: number;

    /**
     *
     */
    readonly physicalDevices?: VkPhysicalDevice[] | null;

    /**
     *
     */
    readonly subsetAllocation?: boolean;
}

declare interface VkPhysicalDeviceGroupPropertiesKHRConstructor {
  readonly prototype: VkPhysicalDeviceGroupPropertiesKHR;
  new(param?: VkPhysicalDeviceGroupPropertiesKHRInitializer | null): VkPhysicalDeviceGroupPropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceGroupPropertiesKHR: VkPhysicalDeviceGroupPropertiesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceGroupProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly physicalDeviceCount: number;

    /**
     *
     */
    readonly physicalDevices: VkPhysicalDevice[] | null;

    /**
     *
     */
    readonly subsetAllocation: boolean;

}

declare interface VkPhysicalDeviceGroupPropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly physicalDeviceCount?: number;

    /**
     *
     */
    readonly physicalDevices?: VkPhysicalDevice[] | null;

    /**
     *
     */
    readonly subsetAllocation?: boolean;
}

declare interface VkPhysicalDeviceGroupPropertiesConstructor {
  readonly prototype: VkPhysicalDeviceGroupProperties;
  new(param?: VkPhysicalDeviceGroupPropertiesInitializer | null): VkPhysicalDeviceGroupProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceGroupProperties: VkPhysicalDeviceGroupPropertiesConstructor;



  /**
   * 
   */
interface VkSwapchainCounterCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    surfaceCounters: VkSurfaceCounterFlagBitsEXT;

}

declare interface VkSwapchainCounterCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    surfaceCounters?: VkSurfaceCounterFlagBitsEXT;
}

declare interface VkSwapchainCounterCreateInfoEXTConstructor {
  readonly prototype: VkSwapchainCounterCreateInfoEXT;
  new(param?: VkSwapchainCounterCreateInfoEXTInitializer | null): VkSwapchainCounterCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSwapchainCounterCreateInfoEXT: VkSwapchainCounterCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkDisplayEventInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    displayEvent: VkDisplayEventTypeEXT;

}

declare interface VkDisplayEventInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    displayEvent?: VkDisplayEventTypeEXT;
}

declare interface VkDisplayEventInfoEXTConstructor {
  readonly prototype: VkDisplayEventInfoEXT;
  new(param?: VkDisplayEventInfoEXTInitializer | null): VkDisplayEventInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplayEventInfoEXT: VkDisplayEventInfoEXTConstructor;



  /**
   * 
   */
interface VkDeviceEventInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceEvent: VkDeviceEventTypeEXT;

}

declare interface VkDeviceEventInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceEvent?: VkDeviceEventTypeEXT;
}

declare interface VkDeviceEventInfoEXTConstructor {
  readonly prototype: VkDeviceEventInfoEXT;
  new(param?: VkDeviceEventInfoEXTInitializer | null): VkDeviceEventInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceEventInfoEXT: VkDeviceEventInfoEXTConstructor;



  /**
   * 
   */
interface VkDisplayPowerInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    powerState: VkDisplayPowerStateEXT;

}

declare interface VkDisplayPowerInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    powerState?: VkDisplayPowerStateEXT;
}

declare interface VkDisplayPowerInfoEXTConstructor {
  readonly prototype: VkDisplayPowerInfoEXT;
  new(param?: VkDisplayPowerInfoEXTInitializer | null): VkDisplayPowerInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplayPowerInfoEXT: VkDisplayPowerInfoEXTConstructor;



  /**
   * 
   */
interface VkSurfaceCapabilities2EXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly minImageCount: number;

    /**
     *
     */
    readonly maxImageCount: number;

    /**
     *
     */
    readonly currentExtent: VkExtent2D | null;

    /**
     *
     */
    readonly minImageExtent: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageExtent: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageArrayLayers: number;

    /**
     *
     */
    readonly supportedTransforms: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly currentTransform: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly supportedCompositeAlpha: VkCompositeAlphaFlagBitsKHR;

    /**
     *
     */
    readonly supportedUsageFlags: VkImageUsageFlagBits;

    /**
     *
     */
    readonly supportedSurfaceCounters: VkSurfaceCounterFlagBitsEXT;

}

declare interface VkSurfaceCapabilities2EXTInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly minImageCount?: number;

    /**
     *
     */
    readonly maxImageCount?: number;

    /**
     *
     */
    readonly currentExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly minImageExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageArrayLayers?: number;

    /**
     *
     */
    readonly supportedTransforms?: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly currentTransform?: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly supportedCompositeAlpha?: VkCompositeAlphaFlagBitsKHR;

    /**
     *
     */
    readonly supportedUsageFlags?: VkImageUsageFlagBits;

    /**
     *
     */
    readonly supportedSurfaceCounters?: VkSurfaceCounterFlagBitsEXT;
}

declare interface VkSurfaceCapabilities2EXTConstructor {
  readonly prototype: VkSurfaceCapabilities2EXT;
  new(param?: VkSurfaceCapabilities2EXTInitializer | null): VkSurfaceCapabilities2EXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSurfaceCapabilities2EXT: VkSurfaceCapabilities2EXTConstructor;



  /**
   * 
   */
interface VkRenderPassMultiviewCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    subpassCount: number;

    /**
     *
     */
    pViewMasks: Uint32Array | null;

    /**
     *
     */
    dependencyCount: number;

    /**
     *
     */
    pViewOffsets: Int32Array | null;

    /**
     *
     */
    correlationMaskCount: number;

    /**
     *
     */
    pCorrelationMasks: Uint32Array | null;

}

declare interface VkRenderPassMultiviewCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    subpassCount?: number;

    /**
     *
     */
    pViewMasks?: Uint32Array | null;

    /**
     *
     */
    dependencyCount?: number;

    /**
     *
     */
    pViewOffsets?: Int32Array | null;

    /**
     *
     */
    correlationMaskCount?: number;

    /**
     *
     */
    pCorrelationMasks?: Uint32Array | null;
}

declare interface VkRenderPassMultiviewCreateInfoKHRConstructor {
  readonly prototype: VkRenderPassMultiviewCreateInfoKHR;
  new(param?: VkRenderPassMultiviewCreateInfoKHRInitializer | null): VkRenderPassMultiviewCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRenderPassMultiviewCreateInfoKHR: VkRenderPassMultiviewCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkRenderPassMultiviewCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    subpassCount: number;

    /**
     *
     */
    pViewMasks: Uint32Array | null;

    /**
     *
     */
    dependencyCount: number;

    /**
     *
     */
    pViewOffsets: Int32Array | null;

    /**
     *
     */
    correlationMaskCount: number;

    /**
     *
     */
    pCorrelationMasks: Uint32Array | null;

}

declare interface VkRenderPassMultiviewCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    subpassCount?: number;

    /**
     *
     */
    pViewMasks?: Uint32Array | null;

    /**
     *
     */
    dependencyCount?: number;

    /**
     *
     */
    pViewOffsets?: Int32Array | null;

    /**
     *
     */
    correlationMaskCount?: number;

    /**
     *
     */
    pCorrelationMasks?: Uint32Array | null;
}

declare interface VkRenderPassMultiviewCreateInfoConstructor {
  readonly prototype: VkRenderPassMultiviewCreateInfo;
  new(param?: VkRenderPassMultiviewCreateInfoInitializer | null): VkRenderPassMultiviewCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRenderPassMultiviewCreateInfo: VkRenderPassMultiviewCreateInfoConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceMultiviewPropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxMultiviewViewCount: number;

    /**
     *
     */
    readonly maxMultiviewInstanceIndex: number;

}

declare interface VkPhysicalDeviceMultiviewPropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxMultiviewViewCount?: number;

    /**
     *
     */
    readonly maxMultiviewInstanceIndex?: number;
}

declare interface VkPhysicalDeviceMultiviewPropertiesKHRConstructor {
  readonly prototype: VkPhysicalDeviceMultiviewPropertiesKHR;
  new(param?: VkPhysicalDeviceMultiviewPropertiesKHRInitializer | null): VkPhysicalDeviceMultiviewPropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceMultiviewPropertiesKHR: VkPhysicalDeviceMultiviewPropertiesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceMultiviewProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxMultiviewViewCount: number;

    /**
     *
     */
    readonly maxMultiviewInstanceIndex: number;

}

declare interface VkPhysicalDeviceMultiviewPropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxMultiviewViewCount?: number;

    /**
     *
     */
    readonly maxMultiviewInstanceIndex?: number;
}

declare interface VkPhysicalDeviceMultiviewPropertiesConstructor {
  readonly prototype: VkPhysicalDeviceMultiviewProperties;
  new(param?: VkPhysicalDeviceMultiviewPropertiesInitializer | null): VkPhysicalDeviceMultiviewProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceMultiviewProperties: VkPhysicalDeviceMultiviewPropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceMultiviewFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    multiview: boolean;

    /**
     *
     */
    multiviewGeometryShader: boolean;

    /**
     *
     */
    multiviewTessellationShader: boolean;

}

declare interface VkPhysicalDeviceMultiviewFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    multiview?: boolean;

    /**
     *
     */
    multiviewGeometryShader?: boolean;

    /**
     *
     */
    multiviewTessellationShader?: boolean;
}

declare interface VkPhysicalDeviceMultiviewFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceMultiviewFeaturesKHR;
  new(param?: VkPhysicalDeviceMultiviewFeaturesKHRInitializer | null): VkPhysicalDeviceMultiviewFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceMultiviewFeaturesKHR: VkPhysicalDeviceMultiviewFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceMultiviewFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    multiview: boolean;

    /**
     *
     */
    multiviewGeometryShader: boolean;

    /**
     *
     */
    multiviewTessellationShader: boolean;

}

declare interface VkPhysicalDeviceMultiviewFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    multiview?: boolean;

    /**
     *
     */
    multiviewGeometryShader?: boolean;

    /**
     *
     */
    multiviewTessellationShader?: boolean;
}

declare interface VkPhysicalDeviceMultiviewFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceMultiviewFeatures;
  new(param?: VkPhysicalDeviceMultiviewFeaturesInitializer | null): VkPhysicalDeviceMultiviewFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceMultiviewFeatures: VkPhysicalDeviceMultiviewFeaturesConstructor;



  /**
   * 
   */
interface VkFenceGetFdInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fence: VkFence | null;

    /**
     *
     */
    handleType: VkExternalFenceHandleTypeFlagBits;

}

declare interface VkFenceGetFdInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fence?: VkFence | null;

    /**
     *
     */
    handleType?: VkExternalFenceHandleTypeFlagBits;
}

declare interface VkFenceGetFdInfoKHRConstructor {
  readonly prototype: VkFenceGetFdInfoKHR;
  new(param?: VkFenceGetFdInfoKHRInitializer | null): VkFenceGetFdInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkFenceGetFdInfoKHR: VkFenceGetFdInfoKHRConstructor;



  /**
   * 
   */
interface VkImportFenceFdInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fence: VkFence | null;

    /**
     *
     */
    flags: VkFenceImportFlagBits;

    /**
     *
     */
    handleType: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    fd: number;

}

declare interface VkImportFenceFdInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fence?: VkFence | null;

    /**
     *
     */
    flags?: VkFenceImportFlagBits;

    /**
     *
     */
    handleType?: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    fd?: number;
}

declare interface VkImportFenceFdInfoKHRConstructor {
  readonly prototype: VkImportFenceFdInfoKHR;
  new(param?: VkImportFenceFdInfoKHRInitializer | null): VkImportFenceFdInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImportFenceFdInfoKHR: VkImportFenceFdInfoKHRConstructor;



  /**
   * 
   */
interface VkFenceGetWin32HandleInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fence: VkFence | null;

    /**
     *
     */
    handleType: VkExternalFenceHandleTypeFlagBits;

}

declare interface VkFenceGetWin32HandleInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fence?: VkFence | null;

    /**
     *
     */
    handleType?: VkExternalFenceHandleTypeFlagBits;
}

declare interface VkFenceGetWin32HandleInfoKHRConstructor {
  readonly prototype: VkFenceGetWin32HandleInfoKHR;
  new(param?: VkFenceGetWin32HandleInfoKHRInitializer | null): VkFenceGetWin32HandleInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkFenceGetWin32HandleInfoKHR: VkFenceGetWin32HandleInfoKHRConstructor;



  /**
   * 
   */
interface VkExportFenceWin32HandleInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pAttributes: bigint | number;

    /**
     *
     */
    dwAccess: number;

    /**
     *
     */
    name: string | null;

}

declare interface VkExportFenceWin32HandleInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pAttributes?: bigint | number;

    /**
     *
     */
    dwAccess?: number;

    /**
     *
     */
    name?: string | null;
}

declare interface VkExportFenceWin32HandleInfoKHRConstructor {
  readonly prototype: VkExportFenceWin32HandleInfoKHR;
  new(param?: VkExportFenceWin32HandleInfoKHRInitializer | null): VkExportFenceWin32HandleInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExportFenceWin32HandleInfoKHR: VkExportFenceWin32HandleInfoKHRConstructor;



  /**
   * 
   */
interface VkImportFenceWin32HandleInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fence: VkFence | null;

    /**
     *
     */
    flags: VkFenceImportFlagBits;

    /**
     *
     */
    handleType: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    handle: bigint | number;

    /**
     *
     */
    name: string | null;

}

declare interface VkImportFenceWin32HandleInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fence?: VkFence | null;

    /**
     *
     */
    flags?: VkFenceImportFlagBits;

    /**
     *
     */
    handleType?: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    handle?: bigint | number;

    /**
     *
     */
    name?: string | null;
}

declare interface VkImportFenceWin32HandleInfoKHRConstructor {
  readonly prototype: VkImportFenceWin32HandleInfoKHR;
  new(param?: VkImportFenceWin32HandleInfoKHRInitializer | null): VkImportFenceWin32HandleInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImportFenceWin32HandleInfoKHR: VkImportFenceWin32HandleInfoKHRConstructor;



  /**
   * 
   */
interface VkExportFenceCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalFenceHandleTypeFlagBits;

}

declare interface VkExportFenceCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalFenceHandleTypeFlagBits;
}

declare interface VkExportFenceCreateInfoKHRConstructor {
  readonly prototype: VkExportFenceCreateInfoKHR;
  new(param?: VkExportFenceCreateInfoKHRInitializer | null): VkExportFenceCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExportFenceCreateInfoKHR: VkExportFenceCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkExportFenceCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalFenceHandleTypeFlagBits;

}

declare interface VkExportFenceCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalFenceHandleTypeFlagBits;
}

declare interface VkExportFenceCreateInfoConstructor {
  readonly prototype: VkExportFenceCreateInfo;
  new(param?: VkExportFenceCreateInfoInitializer | null): VkExportFenceCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExportFenceCreateInfo: VkExportFenceCreateInfoConstructor;



  /**
   * 
   */
interface VkExternalFencePropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly externalFenceFeatures: VkExternalFenceFeatureFlagBits;

}

declare interface VkExternalFencePropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes?: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes?: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly externalFenceFeatures?: VkExternalFenceFeatureFlagBits;
}

declare interface VkExternalFencePropertiesKHRConstructor {
  readonly prototype: VkExternalFencePropertiesKHR;
  new(param?: VkExternalFencePropertiesKHRInitializer | null): VkExternalFencePropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalFencePropertiesKHR: VkExternalFencePropertiesKHRConstructor;



  /**
   * 
   */
interface VkExternalFenceProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly externalFenceFeatures: VkExternalFenceFeatureFlagBits;

}

declare interface VkExternalFencePropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes?: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes?: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly externalFenceFeatures?: VkExternalFenceFeatureFlagBits;
}

declare interface VkExternalFencePropertiesConstructor {
  readonly prototype: VkExternalFenceProperties;
  new(param?: VkExternalFencePropertiesInitializer | null): VkExternalFenceProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalFenceProperties: VkExternalFencePropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceExternalFenceInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalFenceHandleTypeFlagBits;

}

declare interface VkPhysicalDeviceExternalFenceInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalFenceHandleTypeFlagBits;
}

declare interface VkPhysicalDeviceExternalFenceInfoKHRConstructor {
  readonly prototype: VkPhysicalDeviceExternalFenceInfoKHR;
  new(param?: VkPhysicalDeviceExternalFenceInfoKHRInitializer | null): VkPhysicalDeviceExternalFenceInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceExternalFenceInfoKHR: VkPhysicalDeviceExternalFenceInfoKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceExternalFenceInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalFenceHandleTypeFlagBits;

}

declare interface VkPhysicalDeviceExternalFenceInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalFenceHandleTypeFlagBits;
}

declare interface VkPhysicalDeviceExternalFenceInfoConstructor {
  readonly prototype: VkPhysicalDeviceExternalFenceInfo;
  new(param?: VkPhysicalDeviceExternalFenceInfoInitializer | null): VkPhysicalDeviceExternalFenceInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceExternalFenceInfo: VkPhysicalDeviceExternalFenceInfoConstructor;



  /**
   * 
   */
interface VkSemaphoreGetFdInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    semaphore: VkSemaphore | null;

    /**
     *
     */
    handleType: VkExternalSemaphoreHandleTypeFlagBits;

}

declare interface VkSemaphoreGetFdInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    semaphore?: VkSemaphore | null;

    /**
     *
     */
    handleType?: VkExternalSemaphoreHandleTypeFlagBits;
}

declare interface VkSemaphoreGetFdInfoKHRConstructor {
  readonly prototype: VkSemaphoreGetFdInfoKHR;
  new(param?: VkSemaphoreGetFdInfoKHRInitializer | null): VkSemaphoreGetFdInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSemaphoreGetFdInfoKHR: VkSemaphoreGetFdInfoKHRConstructor;



  /**
   * 
   */
interface VkImportSemaphoreFdInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    semaphore: VkSemaphore | null;

    /**
     *
     */
    flags: VkSemaphoreImportFlagBits;

    /**
     *
     */
    handleType: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    fd: number;

}

declare interface VkImportSemaphoreFdInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    semaphore?: VkSemaphore | null;

    /**
     *
     */
    flags?: VkSemaphoreImportFlagBits;

    /**
     *
     */
    handleType?: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    fd?: number;
}

declare interface VkImportSemaphoreFdInfoKHRConstructor {
  readonly prototype: VkImportSemaphoreFdInfoKHR;
  new(param?: VkImportSemaphoreFdInfoKHRInitializer | null): VkImportSemaphoreFdInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImportSemaphoreFdInfoKHR: VkImportSemaphoreFdInfoKHRConstructor;



  /**
   * 
   */
interface VkSemaphoreGetWin32HandleInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    semaphore: VkSemaphore | null;

    /**
     *
     */
    handleType: VkExternalSemaphoreHandleTypeFlagBits;

}

declare interface VkSemaphoreGetWin32HandleInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    semaphore?: VkSemaphore | null;

    /**
     *
     */
    handleType?: VkExternalSemaphoreHandleTypeFlagBits;
}

declare interface VkSemaphoreGetWin32HandleInfoKHRConstructor {
  readonly prototype: VkSemaphoreGetWin32HandleInfoKHR;
  new(param?: VkSemaphoreGetWin32HandleInfoKHRInitializer | null): VkSemaphoreGetWin32HandleInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSemaphoreGetWin32HandleInfoKHR: VkSemaphoreGetWin32HandleInfoKHRConstructor;



  /**
   * 
   */
interface VkD3D12FenceSubmitInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    waitSemaphoreValuesCount: number;

    /**
     *
     */
    pWaitSemaphoreValues: BigUint64Array | null;

    /**
     *
     */
    signalSemaphoreValuesCount: number;

    /**
     *
     */
    pSignalSemaphoreValues: BigUint64Array | null;

}

declare interface VkD3D12FenceSubmitInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    waitSemaphoreValuesCount?: number;

    /**
     *
     */
    pWaitSemaphoreValues?: BigUint64Array | null;

    /**
     *
     */
    signalSemaphoreValuesCount?: number;

    /**
     *
     */
    pSignalSemaphoreValues?: BigUint64Array | null;
}

declare interface VkD3D12FenceSubmitInfoKHRConstructor {
  readonly prototype: VkD3D12FenceSubmitInfoKHR;
  new(param?: VkD3D12FenceSubmitInfoKHRInitializer | null): VkD3D12FenceSubmitInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkD3D12FenceSubmitInfoKHR: VkD3D12FenceSubmitInfoKHRConstructor;



  /**
   * 
   */
interface VkExportSemaphoreWin32HandleInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pAttributes: bigint | number;

    /**
     *
     */
    dwAccess: number;

    /**
     *
     */
    name: string | null;

}

declare interface VkExportSemaphoreWin32HandleInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pAttributes?: bigint | number;

    /**
     *
     */
    dwAccess?: number;

    /**
     *
     */
    name?: string | null;
}

declare interface VkExportSemaphoreWin32HandleInfoKHRConstructor {
  readonly prototype: VkExportSemaphoreWin32HandleInfoKHR;
  new(param?: VkExportSemaphoreWin32HandleInfoKHRInitializer | null): VkExportSemaphoreWin32HandleInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExportSemaphoreWin32HandleInfoKHR: VkExportSemaphoreWin32HandleInfoKHRConstructor;



  /**
   * 
   */
interface VkImportSemaphoreWin32HandleInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    semaphore: VkSemaphore | null;

    /**
     *
     */
    flags: VkSemaphoreImportFlagBits;

    /**
     *
     */
    handleType: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    handle: bigint | number;

    /**
     *
     */
    name: string | null;

}

declare interface VkImportSemaphoreWin32HandleInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    semaphore?: VkSemaphore | null;

    /**
     *
     */
    flags?: VkSemaphoreImportFlagBits;

    /**
     *
     */
    handleType?: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    handle?: bigint | number;

    /**
     *
     */
    name?: string | null;
}

declare interface VkImportSemaphoreWin32HandleInfoKHRConstructor {
  readonly prototype: VkImportSemaphoreWin32HandleInfoKHR;
  new(param?: VkImportSemaphoreWin32HandleInfoKHRInitializer | null): VkImportSemaphoreWin32HandleInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImportSemaphoreWin32HandleInfoKHR: VkImportSemaphoreWin32HandleInfoKHRConstructor;



  /**
   * 
   */
interface VkExportSemaphoreCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalSemaphoreHandleTypeFlagBits;

}

declare interface VkExportSemaphoreCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalSemaphoreHandleTypeFlagBits;
}

declare interface VkExportSemaphoreCreateInfoKHRConstructor {
  readonly prototype: VkExportSemaphoreCreateInfoKHR;
  new(param?: VkExportSemaphoreCreateInfoKHRInitializer | null): VkExportSemaphoreCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExportSemaphoreCreateInfoKHR: VkExportSemaphoreCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkExportSemaphoreCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalSemaphoreHandleTypeFlagBits;

}

declare interface VkExportSemaphoreCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalSemaphoreHandleTypeFlagBits;
}

declare interface VkExportSemaphoreCreateInfoConstructor {
  readonly prototype: VkExportSemaphoreCreateInfo;
  new(param?: VkExportSemaphoreCreateInfoInitializer | null): VkExportSemaphoreCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExportSemaphoreCreateInfo: VkExportSemaphoreCreateInfoConstructor;



  /**
   * 
   */
interface VkExternalSemaphorePropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlagBits;

}

declare interface VkExternalSemaphorePropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes?: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes?: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly externalSemaphoreFeatures?: VkExternalSemaphoreFeatureFlagBits;
}

declare interface VkExternalSemaphorePropertiesKHRConstructor {
  readonly prototype: VkExternalSemaphorePropertiesKHR;
  new(param?: VkExternalSemaphorePropertiesKHRInitializer | null): VkExternalSemaphorePropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalSemaphorePropertiesKHR: VkExternalSemaphorePropertiesKHRConstructor;



  /**
   * 
   */
interface VkExternalSemaphoreProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlagBits;

}

declare interface VkExternalSemaphorePropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes?: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes?: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly externalSemaphoreFeatures?: VkExternalSemaphoreFeatureFlagBits;
}

declare interface VkExternalSemaphorePropertiesConstructor {
  readonly prototype: VkExternalSemaphoreProperties;
  new(param?: VkExternalSemaphorePropertiesInitializer | null): VkExternalSemaphoreProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalSemaphoreProperties: VkExternalSemaphorePropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceExternalSemaphoreInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalSemaphoreHandleTypeFlagBits;

}

declare interface VkPhysicalDeviceExternalSemaphoreInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalSemaphoreHandleTypeFlagBits;
}

declare interface VkPhysicalDeviceExternalSemaphoreInfoKHRConstructor {
  readonly prototype: VkPhysicalDeviceExternalSemaphoreInfoKHR;
  new(param?: VkPhysicalDeviceExternalSemaphoreInfoKHRInitializer | null): VkPhysicalDeviceExternalSemaphoreInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceExternalSemaphoreInfoKHR: VkPhysicalDeviceExternalSemaphoreInfoKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceExternalSemaphoreInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalSemaphoreHandleTypeFlagBits;

}

declare interface VkPhysicalDeviceExternalSemaphoreInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalSemaphoreHandleTypeFlagBits;
}

declare interface VkPhysicalDeviceExternalSemaphoreInfoConstructor {
  readonly prototype: VkPhysicalDeviceExternalSemaphoreInfo;
  new(param?: VkPhysicalDeviceExternalSemaphoreInfoInitializer | null): VkPhysicalDeviceExternalSemaphoreInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceExternalSemaphoreInfo: VkPhysicalDeviceExternalSemaphoreInfoConstructor;



  /**
   * 
   */
interface VkWin32KeyedMutexAcquireReleaseInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    acquireCount: number;

    /**
     *
     */
    pAcquireSyncs: VkDeviceMemory[] | null;

    /**
     *
     */
    pAcquireKeys: BigUint64Array | null;

    /**
     *
     */
    pAcquireTimeouts: Uint32Array | null;

    /**
     *
     */
    releaseCount: number;

    /**
     *
     */
    pReleaseSyncs: VkDeviceMemory[] | null;

    /**
     *
     */
    pReleaseKeys: BigUint64Array | null;

}

declare interface VkWin32KeyedMutexAcquireReleaseInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    acquireCount?: number;

    /**
     *
     */
    pAcquireSyncs?: VkDeviceMemory[] | null;

    /**
     *
     */
    pAcquireKeys?: BigUint64Array | null;

    /**
     *
     */
    pAcquireTimeouts?: Uint32Array | null;

    /**
     *
     */
    releaseCount?: number;

    /**
     *
     */
    pReleaseSyncs?: VkDeviceMemory[] | null;

    /**
     *
     */
    pReleaseKeys?: BigUint64Array | null;
}

declare interface VkWin32KeyedMutexAcquireReleaseInfoKHRConstructor {
  readonly prototype: VkWin32KeyedMutexAcquireReleaseInfoKHR;
  new(param?: VkWin32KeyedMutexAcquireReleaseInfoKHRInitializer | null): VkWin32KeyedMutexAcquireReleaseInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkWin32KeyedMutexAcquireReleaseInfoKHR: VkWin32KeyedMutexAcquireReleaseInfoKHRConstructor;



  /**
   * 
   */
interface VkMemoryGetFdInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

}

declare interface VkMemoryGetFdInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;
}

declare interface VkMemoryGetFdInfoKHRConstructor {
  readonly prototype: VkMemoryGetFdInfoKHR;
  new(param?: VkMemoryGetFdInfoKHRInitializer | null): VkMemoryGetFdInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryGetFdInfoKHR: VkMemoryGetFdInfoKHRConstructor;



  /**
   * 
   */
interface VkMemoryFdPropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryTypeBits: number;

}

declare interface VkMemoryFdPropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryTypeBits?: number;
}

declare interface VkMemoryFdPropertiesKHRConstructor {
  readonly prototype: VkMemoryFdPropertiesKHR;
  new(param?: VkMemoryFdPropertiesKHRInitializer | null): VkMemoryFdPropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryFdPropertiesKHR: VkMemoryFdPropertiesKHRConstructor;



  /**
   * 
   */
interface VkImportMemoryFdInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    fd: number;

}

declare interface VkImportMemoryFdInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    fd?: number;
}

declare interface VkImportMemoryFdInfoKHRConstructor {
  readonly prototype: VkImportMemoryFdInfoKHR;
  new(param?: VkImportMemoryFdInfoKHRInitializer | null): VkImportMemoryFdInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImportMemoryFdInfoKHR: VkImportMemoryFdInfoKHRConstructor;



  /**
   * 
   */
interface VkMemoryGetWin32HandleInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

}

declare interface VkMemoryGetWin32HandleInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;
}

declare interface VkMemoryGetWin32HandleInfoKHRConstructor {
  readonly prototype: VkMemoryGetWin32HandleInfoKHR;
  new(param?: VkMemoryGetWin32HandleInfoKHRInitializer | null): VkMemoryGetWin32HandleInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryGetWin32HandleInfoKHR: VkMemoryGetWin32HandleInfoKHRConstructor;



  /**
   * 
   */
interface VkMemoryWin32HandlePropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryTypeBits: number;

}

declare interface VkMemoryWin32HandlePropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryTypeBits?: number;
}

declare interface VkMemoryWin32HandlePropertiesKHRConstructor {
  readonly prototype: VkMemoryWin32HandlePropertiesKHR;
  new(param?: VkMemoryWin32HandlePropertiesKHRInitializer | null): VkMemoryWin32HandlePropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryWin32HandlePropertiesKHR: VkMemoryWin32HandlePropertiesKHRConstructor;



  /**
   * 
   */
interface VkExportMemoryWin32HandleInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pAttributes: bigint | number;

    /**
     *
     */
    dwAccess: number;

    /**
     *
     */
    name: string | null;

}

declare interface VkExportMemoryWin32HandleInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pAttributes?: bigint | number;

    /**
     *
     */
    dwAccess?: number;

    /**
     *
     */
    name?: string | null;
}

declare interface VkExportMemoryWin32HandleInfoKHRConstructor {
  readonly prototype: VkExportMemoryWin32HandleInfoKHR;
  new(param?: VkExportMemoryWin32HandleInfoKHRInitializer | null): VkExportMemoryWin32HandleInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExportMemoryWin32HandleInfoKHR: VkExportMemoryWin32HandleInfoKHRConstructor;



  /**
   * 
   */
interface VkImportMemoryWin32HandleInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    handle: bigint | number;

    /**
     *
     */
    name: string | null;

}

declare interface VkImportMemoryWin32HandleInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    handle?: bigint | number;

    /**
     *
     */
    name?: string | null;
}

declare interface VkImportMemoryWin32HandleInfoKHRConstructor {
  readonly prototype: VkImportMemoryWin32HandleInfoKHR;
  new(param?: VkImportMemoryWin32HandleInfoKHRInitializer | null): VkImportMemoryWin32HandleInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImportMemoryWin32HandleInfoKHR: VkImportMemoryWin32HandleInfoKHRConstructor;



  /**
   * 
   */
interface VkExportMemoryAllocateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBits;

}

declare interface VkExportMemoryAllocateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare interface VkExportMemoryAllocateInfoKHRConstructor {
  readonly prototype: VkExportMemoryAllocateInfoKHR;
  new(param?: VkExportMemoryAllocateInfoKHRInitializer | null): VkExportMemoryAllocateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExportMemoryAllocateInfoKHR: VkExportMemoryAllocateInfoKHRConstructor;



  /**
   * 
   */
interface VkExportMemoryAllocateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBits;

}

declare interface VkExportMemoryAllocateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare interface VkExportMemoryAllocateInfoConstructor {
  readonly prototype: VkExportMemoryAllocateInfo;
  new(param?: VkExportMemoryAllocateInfoInitializer | null): VkExportMemoryAllocateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExportMemoryAllocateInfo: VkExportMemoryAllocateInfoConstructor;



  /**
   * 
   */
interface VkExternalMemoryBufferCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBits;

}

declare interface VkExternalMemoryBufferCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare interface VkExternalMemoryBufferCreateInfoKHRConstructor {
  readonly prototype: VkExternalMemoryBufferCreateInfoKHR;
  new(param?: VkExternalMemoryBufferCreateInfoKHRInitializer | null): VkExternalMemoryBufferCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalMemoryBufferCreateInfoKHR: VkExternalMemoryBufferCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkExternalMemoryBufferCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBits;

}

declare interface VkExternalMemoryBufferCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare interface VkExternalMemoryBufferCreateInfoConstructor {
  readonly prototype: VkExternalMemoryBufferCreateInfo;
  new(param?: VkExternalMemoryBufferCreateInfoInitializer | null): VkExternalMemoryBufferCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalMemoryBufferCreateInfo: VkExternalMemoryBufferCreateInfoConstructor;



  /**
   * 
   */
interface VkExternalMemoryImageCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBits;

}

declare interface VkExternalMemoryImageCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare interface VkExternalMemoryImageCreateInfoKHRConstructor {
  readonly prototype: VkExternalMemoryImageCreateInfoKHR;
  new(param?: VkExternalMemoryImageCreateInfoKHRInitializer | null): VkExternalMemoryImageCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalMemoryImageCreateInfoKHR: VkExternalMemoryImageCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkExternalMemoryImageCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBits;

}

declare interface VkExternalMemoryImageCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare interface VkExternalMemoryImageCreateInfoConstructor {
  readonly prototype: VkExternalMemoryImageCreateInfo;
  new(param?: VkExternalMemoryImageCreateInfoInitializer | null): VkExternalMemoryImageCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalMemoryImageCreateInfo: VkExternalMemoryImageCreateInfoConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceIDPropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly deviceUUID: number[] | null;

    /**
     *
     */
    readonly driverUUID: number[] | null;

    /**
     *
     */
    readonly deviceLUID: number[] | null;

    /**
     *
     */
    readonly deviceNodeMask: number;

    /**
     *
     */
    readonly deviceLUIDValid: boolean;

}

declare interface VkPhysicalDeviceIDPropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly deviceUUID?: number[] | null;

    /**
     *
     */
    readonly driverUUID?: number[] | null;

    /**
     *
     */
    readonly deviceLUID?: number[] | null;

    /**
     *
     */
    readonly deviceNodeMask?: number;

    /**
     *
     */
    readonly deviceLUIDValid?: boolean;
}

declare interface VkPhysicalDeviceIDPropertiesKHRConstructor {
  readonly prototype: VkPhysicalDeviceIDPropertiesKHR;
  new(param?: VkPhysicalDeviceIDPropertiesKHRInitializer | null): VkPhysicalDeviceIDPropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceIDPropertiesKHR: VkPhysicalDeviceIDPropertiesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceIDProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly deviceUUID: number[] | null;

    /**
     *
     */
    readonly driverUUID: number[] | null;

    /**
     *
     */
    readonly deviceLUID: number[] | null;

    /**
     *
     */
    readonly deviceNodeMask: number;

    /**
     *
     */
    readonly deviceLUIDValid: boolean;

}

declare interface VkPhysicalDeviceIDPropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly deviceUUID?: number[] | null;

    /**
     *
     */
    readonly driverUUID?: number[] | null;

    /**
     *
     */
    readonly deviceLUID?: number[] | null;

    /**
     *
     */
    readonly deviceNodeMask?: number;

    /**
     *
     */
    readonly deviceLUIDValid?: boolean;
}

declare interface VkPhysicalDeviceIDPropertiesConstructor {
  readonly prototype: VkPhysicalDeviceIDProperties;
  new(param?: VkPhysicalDeviceIDPropertiesInitializer | null): VkPhysicalDeviceIDProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceIDProperties: VkPhysicalDeviceIDPropertiesConstructor;



  /**
   * 
   */
interface VkExternalBufferPropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly externalMemoryProperties: VkExternalMemoryProperties | null;

}

declare interface VkExternalBufferPropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly externalMemoryProperties?: VkExternalMemoryProperties | null;
}

declare interface VkExternalBufferPropertiesKHRConstructor {
  readonly prototype: VkExternalBufferPropertiesKHR;
  new(param?: VkExternalBufferPropertiesKHRInitializer | null): VkExternalBufferPropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalBufferPropertiesKHR: VkExternalBufferPropertiesKHRConstructor;



  /**
   * 
   */
interface VkExternalBufferProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly externalMemoryProperties: VkExternalMemoryProperties | null;

}

declare interface VkExternalBufferPropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly externalMemoryProperties?: VkExternalMemoryProperties | null;
}

declare interface VkExternalBufferPropertiesConstructor {
  readonly prototype: VkExternalBufferProperties;
  new(param?: VkExternalBufferPropertiesInitializer | null): VkExternalBufferProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalBufferProperties: VkExternalBufferPropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceExternalBufferInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkBufferCreateFlagBits;

    /**
     *
     */
    usage: VkBufferUsageFlagBits;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

}

declare interface VkPhysicalDeviceExternalBufferInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkBufferCreateFlagBits;

    /**
     *
     */
    usage?: VkBufferUsageFlagBits;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;
}

declare interface VkPhysicalDeviceExternalBufferInfoKHRConstructor {
  readonly prototype: VkPhysicalDeviceExternalBufferInfoKHR;
  new(param?: VkPhysicalDeviceExternalBufferInfoKHRInitializer | null): VkPhysicalDeviceExternalBufferInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceExternalBufferInfoKHR: VkPhysicalDeviceExternalBufferInfoKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceExternalBufferInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkBufferCreateFlagBits;

    /**
     *
     */
    usage: VkBufferUsageFlagBits;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

}

declare interface VkPhysicalDeviceExternalBufferInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkBufferCreateFlagBits;

    /**
     *
     */
    usage?: VkBufferUsageFlagBits;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;
}

declare interface VkPhysicalDeviceExternalBufferInfoConstructor {
  readonly prototype: VkPhysicalDeviceExternalBufferInfo;
  new(param?: VkPhysicalDeviceExternalBufferInfoInitializer | null): VkPhysicalDeviceExternalBufferInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceExternalBufferInfo: VkPhysicalDeviceExternalBufferInfoConstructor;



  /**
   * 
   */
interface VkExternalImageFormatPropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly externalMemoryProperties: VkExternalMemoryProperties | null;

}

declare interface VkExternalImageFormatPropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly externalMemoryProperties?: VkExternalMemoryProperties | null;
}

declare interface VkExternalImageFormatPropertiesKHRConstructor {
  readonly prototype: VkExternalImageFormatPropertiesKHR;
  new(param?: VkExternalImageFormatPropertiesKHRInitializer | null): VkExternalImageFormatPropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalImageFormatPropertiesKHR: VkExternalImageFormatPropertiesKHRConstructor;



  /**
   * 
   */
interface VkExternalImageFormatProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly externalMemoryProperties: VkExternalMemoryProperties | null;

}

declare interface VkExternalImageFormatPropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly externalMemoryProperties?: VkExternalMemoryProperties | null;
}

declare interface VkExternalImageFormatPropertiesConstructor {
  readonly prototype: VkExternalImageFormatProperties;
  new(param?: VkExternalImageFormatPropertiesInitializer | null): VkExternalImageFormatProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalImageFormatProperties: VkExternalImageFormatPropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceExternalImageFormatInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

}

declare interface VkPhysicalDeviceExternalImageFormatInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;
}

declare interface VkPhysicalDeviceExternalImageFormatInfoKHRConstructor {
  readonly prototype: VkPhysicalDeviceExternalImageFormatInfoKHR;
  new(param?: VkPhysicalDeviceExternalImageFormatInfoKHRInitializer | null): VkPhysicalDeviceExternalImageFormatInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceExternalImageFormatInfoKHR: VkPhysicalDeviceExternalImageFormatInfoKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceExternalImageFormatInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

}

declare interface VkPhysicalDeviceExternalImageFormatInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;
}

declare interface VkPhysicalDeviceExternalImageFormatInfoConstructor {
  readonly prototype: VkPhysicalDeviceExternalImageFormatInfo;
  new(param?: VkPhysicalDeviceExternalImageFormatInfoInitializer | null): VkPhysicalDeviceExternalImageFormatInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceExternalImageFormatInfo: VkPhysicalDeviceExternalImageFormatInfoConstructor;



  /**
   * 
   */
interface VkExternalMemoryPropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly externalMemoryFeatures: VkExternalMemoryFeatureFlagBits;

    /**
     *
     */
    readonly exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes: VkExternalMemoryHandleTypeFlagBits;

}

declare interface VkExternalMemoryPropertiesKHRInitializer {
  
    /**
     *
     */
    readonly externalMemoryFeatures?: VkExternalMemoryFeatureFlagBits;

    /**
     *
     */
    readonly exportFromImportedHandleTypes?: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare interface VkExternalMemoryPropertiesKHRConstructor {
  readonly prototype: VkExternalMemoryPropertiesKHR;
  new(param?: VkExternalMemoryPropertiesKHRInitializer | null): VkExternalMemoryPropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalMemoryPropertiesKHR: VkExternalMemoryPropertiesKHRConstructor;



  /**
   * 
   */
interface VkExternalMemoryProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly externalMemoryFeatures: VkExternalMemoryFeatureFlagBits;

    /**
     *
     */
    readonly exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes: VkExternalMemoryHandleTypeFlagBits;

}

declare interface VkExternalMemoryPropertiesInitializer {
  
    /**
     *
     */
    readonly externalMemoryFeatures?: VkExternalMemoryFeatureFlagBits;

    /**
     *
     */
    readonly exportFromImportedHandleTypes?: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare interface VkExternalMemoryPropertiesConstructor {
  readonly prototype: VkExternalMemoryProperties;
  new(param?: VkExternalMemoryPropertiesInitializer | null): VkExternalMemoryProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalMemoryProperties: VkExternalMemoryPropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceVariablePointerFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    variablePointersStorageBuffer: boolean;

    /**
     *
     */
    variablePointers: boolean;

}

declare interface VkPhysicalDeviceVariablePointerFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    variablePointersStorageBuffer?: boolean;

    /**
     *
     */
    variablePointers?: boolean;
}

declare interface VkPhysicalDeviceVariablePointerFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceVariablePointerFeatures;
  new(param?: VkPhysicalDeviceVariablePointerFeaturesInitializer | null): VkPhysicalDeviceVariablePointerFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceVariablePointerFeatures: VkPhysicalDeviceVariablePointerFeaturesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceVariablePointerFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    variablePointersStorageBuffer: boolean;

    /**
     *
     */
    variablePointers: boolean;

}

declare interface VkPhysicalDeviceVariablePointerFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    variablePointersStorageBuffer?: boolean;

    /**
     *
     */
    variablePointers?: boolean;
}

declare interface VkPhysicalDeviceVariablePointerFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceVariablePointerFeaturesKHR;
  new(param?: VkPhysicalDeviceVariablePointerFeaturesKHRInitializer | null): VkPhysicalDeviceVariablePointerFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceVariablePointerFeaturesKHR: VkPhysicalDeviceVariablePointerFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceVariablePointersFeaturesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    variablePointersStorageBuffer: boolean;

    /**
     *
     */
    variablePointers: boolean;

}

declare interface VkPhysicalDeviceVariablePointersFeaturesKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    variablePointersStorageBuffer?: boolean;

    /**
     *
     */
    variablePointers?: boolean;
}

declare interface VkPhysicalDeviceVariablePointersFeaturesKHRConstructor {
  readonly prototype: VkPhysicalDeviceVariablePointersFeaturesKHR;
  new(param?: VkPhysicalDeviceVariablePointersFeaturesKHRInitializer | null): VkPhysicalDeviceVariablePointersFeaturesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceVariablePointersFeaturesKHR: VkPhysicalDeviceVariablePointersFeaturesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceVariablePointersFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    variablePointersStorageBuffer: boolean;

    /**
     *
     */
    variablePointers: boolean;

}

declare interface VkPhysicalDeviceVariablePointersFeaturesInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    variablePointersStorageBuffer?: boolean;

    /**
     *
     */
    variablePointers?: boolean;
}

declare interface VkPhysicalDeviceVariablePointersFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceVariablePointersFeatures;
  new(param?: VkPhysicalDeviceVariablePointersFeaturesInitializer | null): VkPhysicalDeviceVariablePointersFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceVariablePointersFeatures: VkPhysicalDeviceVariablePointersFeaturesConstructor;



  /**
   * 
   */
interface VkRectLayerKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    offset: VkOffset2D | null;

    /**
     *
     */
    extent: VkExtent2D | null;

    /**
     *
     */
    layer: number;

}

declare interface VkRectLayerKHRInitializer {
  
    /**
     *
     */
    offset?: VkOffset2D | null;

    /**
     *
     */
    extent?: VkExtent2D | null;

    /**
     *
     */
    layer?: number;
}

declare interface VkRectLayerKHRConstructor {
  readonly prototype: VkRectLayerKHR;
  new(param?: VkRectLayerKHRInitializer | null): VkRectLayerKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRectLayerKHR: VkRectLayerKHRConstructor;



  /**
   * 
   */
interface VkPresentRegionKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    rectangleCount: number;

    /**
     *
     */
    pRectangles: VkRectLayerKHR[] | null;

}

declare interface VkPresentRegionKHRInitializer {
  
    /**
     *
     */
    rectangleCount?: number;

    /**
     *
     */
    pRectangles?: VkRectLayerKHR[] | null;
}

declare interface VkPresentRegionKHRConstructor {
  readonly prototype: VkPresentRegionKHR;
  new(param?: VkPresentRegionKHRInitializer | null): VkPresentRegionKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPresentRegionKHR: VkPresentRegionKHRConstructor;



  /**
   * 
   */
interface VkPresentRegionsKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    swapchainCount: number;

    /**
     *
     */
    pRegions: VkPresentRegionKHR[] | null;

}

declare interface VkPresentRegionsKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    swapchainCount?: number;

    /**
     *
     */
    pRegions?: VkPresentRegionKHR[] | null;
}

declare interface VkPresentRegionsKHRConstructor {
  readonly prototype: VkPresentRegionsKHR;
  new(param?: VkPresentRegionsKHRInitializer | null): VkPresentRegionsKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPresentRegionsKHR: VkPresentRegionsKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceDriverPropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly driverID: VkDriverId;

    /**
     *
     */
    readonly driverName: string | null;

    /**
     *
     */
    readonly driverInfo: string | null;

    /**
     *
     */
    readonly conformanceVersion: VkConformanceVersion | null;

}

declare interface VkPhysicalDeviceDriverPropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly driverID?: VkDriverId;

    /**
     *
     */
    readonly driverName?: string | null;

    /**
     *
     */
    readonly driverInfo?: string | null;

    /**
     *
     */
    readonly conformanceVersion?: VkConformanceVersion | null;
}

declare interface VkPhysicalDeviceDriverPropertiesKHRConstructor {
  readonly prototype: VkPhysicalDeviceDriverPropertiesKHR;
  new(param?: VkPhysicalDeviceDriverPropertiesKHRInitializer | null): VkPhysicalDeviceDriverPropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceDriverPropertiesKHR: VkPhysicalDeviceDriverPropertiesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceDriverProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly driverID: VkDriverId;

    /**
     *
     */
    readonly driverName: string | null;

    /**
     *
     */
    readonly driverInfo: string | null;

    /**
     *
     */
    readonly conformanceVersion: VkConformanceVersion | null;

}

declare interface VkPhysicalDeviceDriverPropertiesInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly driverID?: VkDriverId;

    /**
     *
     */
    readonly driverName?: string | null;

    /**
     *
     */
    readonly driverInfo?: string | null;

    /**
     *
     */
    readonly conformanceVersion?: VkConformanceVersion | null;
}

declare interface VkPhysicalDeviceDriverPropertiesConstructor {
  readonly prototype: VkPhysicalDeviceDriverProperties;
  new(param?: VkPhysicalDeviceDriverPropertiesInitializer | null): VkPhysicalDeviceDriverProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceDriverProperties: VkPhysicalDeviceDriverPropertiesConstructor;



  /**
   * 
   */
interface VkConformanceVersionKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    major: number;

    /**
     *
     */
    minor: number;

    /**
     *
     */
    subminor: number;

    /**
     *
     */
    patch: number;

}

declare interface VkConformanceVersionKHRInitializer {
  
    /**
     *
     */
    major?: number;

    /**
     *
     */
    minor?: number;

    /**
     *
     */
    subminor?: number;

    /**
     *
     */
    patch?: number;
}

declare interface VkConformanceVersionKHRConstructor {
  readonly prototype: VkConformanceVersionKHR;
  new(param?: VkConformanceVersionKHRInitializer | null): VkConformanceVersionKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkConformanceVersionKHR: VkConformanceVersionKHRConstructor;



  /**
   * 
   */
interface VkConformanceVersion {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    major: number;

    /**
     *
     */
    minor: number;

    /**
     *
     */
    subminor: number;

    /**
     *
     */
    patch: number;

}

declare interface VkConformanceVersionInitializer {
  
    /**
     *
     */
    major?: number;

    /**
     *
     */
    minor?: number;

    /**
     *
     */
    subminor?: number;

    /**
     *
     */
    patch?: number;
}

declare interface VkConformanceVersionConstructor {
  readonly prototype: VkConformanceVersion;
  new(param?: VkConformanceVersionInitializer | null): VkConformanceVersion;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkConformanceVersion: VkConformanceVersionConstructor;



  /**
   * 
   */
interface VkPhysicalDevicePushDescriptorPropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxPushDescriptors: number;

}

declare interface VkPhysicalDevicePushDescriptorPropertiesKHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxPushDescriptors?: number;
}

declare interface VkPhysicalDevicePushDescriptorPropertiesKHRConstructor {
  readonly prototype: VkPhysicalDevicePushDescriptorPropertiesKHR;
  new(param?: VkPhysicalDevicePushDescriptorPropertiesKHRInitializer | null): VkPhysicalDevicePushDescriptorPropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDevicePushDescriptorPropertiesKHR: VkPhysicalDevicePushDescriptorPropertiesKHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceSparseImageFormatInfo2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    type: VkImageType;

    /**
     *
     */
    samples: VkSampleCountFlagBits;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

    /**
     *
     */
    tiling: VkImageTiling;

}

declare interface VkPhysicalDeviceSparseImageFormatInfo2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    type?: VkImageType;

    /**
     *
     */
    samples?: VkSampleCountFlagBits;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;

    /**
     *
     */
    tiling?: VkImageTiling;
}

declare interface VkPhysicalDeviceSparseImageFormatInfo2KHRConstructor {
  readonly prototype: VkPhysicalDeviceSparseImageFormatInfo2KHR;
  new(param?: VkPhysicalDeviceSparseImageFormatInfo2KHRInitializer | null): VkPhysicalDeviceSparseImageFormatInfo2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceSparseImageFormatInfo2KHR: VkPhysicalDeviceSparseImageFormatInfo2KHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceSparseImageFormatInfo2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    type: VkImageType;

    /**
     *
     */
    samples: VkSampleCountFlagBits;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

    /**
     *
     */
    tiling: VkImageTiling;

}

declare interface VkPhysicalDeviceSparseImageFormatInfo2Initializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    type?: VkImageType;

    /**
     *
     */
    samples?: VkSampleCountFlagBits;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;

    /**
     *
     */
    tiling?: VkImageTiling;
}

declare interface VkPhysicalDeviceSparseImageFormatInfo2Constructor {
  readonly prototype: VkPhysicalDeviceSparseImageFormatInfo2;
  new(param?: VkPhysicalDeviceSparseImageFormatInfo2Initializer | null): VkPhysicalDeviceSparseImageFormatInfo2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceSparseImageFormatInfo2: VkPhysicalDeviceSparseImageFormatInfo2Constructor;



  /**
   * 
   */
interface VkSparseImageFormatProperties2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly properties: VkSparseImageFormatProperties | null;

}

declare interface VkSparseImageFormatProperties2KHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly properties?: VkSparseImageFormatProperties | null;
}

declare interface VkSparseImageFormatProperties2KHRConstructor {
  readonly prototype: VkSparseImageFormatProperties2KHR;
  new(param?: VkSparseImageFormatProperties2KHRInitializer | null): VkSparseImageFormatProperties2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSparseImageFormatProperties2KHR: VkSparseImageFormatProperties2KHRConstructor;



  /**
   * 
   */
interface VkSparseImageFormatProperties2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly properties: VkSparseImageFormatProperties | null;

}

declare interface VkSparseImageFormatProperties2Initializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly properties?: VkSparseImageFormatProperties | null;
}

declare interface VkSparseImageFormatProperties2Constructor {
  readonly prototype: VkSparseImageFormatProperties2;
  new(param?: VkSparseImageFormatProperties2Initializer | null): VkSparseImageFormatProperties2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSparseImageFormatProperties2: VkSparseImageFormatProperties2Constructor;



  /**
   * 
   */
interface VkPhysicalDeviceMemoryProperties2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryProperties: VkPhysicalDeviceMemoryProperties | null;

}

declare interface VkPhysicalDeviceMemoryProperties2KHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryProperties?: VkPhysicalDeviceMemoryProperties | null;
}

declare interface VkPhysicalDeviceMemoryProperties2KHRConstructor {
  readonly prototype: VkPhysicalDeviceMemoryProperties2KHR;
  new(param?: VkPhysicalDeviceMemoryProperties2KHRInitializer | null): VkPhysicalDeviceMemoryProperties2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceMemoryProperties2KHR: VkPhysicalDeviceMemoryProperties2KHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceMemoryProperties2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryProperties: VkPhysicalDeviceMemoryProperties | null;

}

declare interface VkPhysicalDeviceMemoryProperties2Initializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryProperties?: VkPhysicalDeviceMemoryProperties | null;
}

declare interface VkPhysicalDeviceMemoryProperties2Constructor {
  readonly prototype: VkPhysicalDeviceMemoryProperties2;
  new(param?: VkPhysicalDeviceMemoryProperties2Initializer | null): VkPhysicalDeviceMemoryProperties2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceMemoryProperties2: VkPhysicalDeviceMemoryProperties2Constructor;



  /**
   * 
   */
interface VkQueueFamilyProperties2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly queueFamilyProperties: VkQueueFamilyProperties | null;

}

declare interface VkQueueFamilyProperties2KHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly queueFamilyProperties?: VkQueueFamilyProperties | null;
}

declare interface VkQueueFamilyProperties2KHRConstructor {
  readonly prototype: VkQueueFamilyProperties2KHR;
  new(param?: VkQueueFamilyProperties2KHRInitializer | null): VkQueueFamilyProperties2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkQueueFamilyProperties2KHR: VkQueueFamilyProperties2KHRConstructor;



  /**
   * 
   */
interface VkQueueFamilyProperties2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly queueFamilyProperties: VkQueueFamilyProperties | null;

}

declare interface VkQueueFamilyProperties2Initializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly queueFamilyProperties?: VkQueueFamilyProperties | null;
}

declare interface VkQueueFamilyProperties2Constructor {
  readonly prototype: VkQueueFamilyProperties2;
  new(param?: VkQueueFamilyProperties2Initializer | null): VkQueueFamilyProperties2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkQueueFamilyProperties2: VkQueueFamilyProperties2Constructor;



  /**
   * 
   */
interface VkPhysicalDeviceImageFormatInfo2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    type: VkImageType;

    /**
     *
     */
    tiling: VkImageTiling;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

    /**
     *
     */
    flags: VkImageCreateFlagBits;

}

declare interface VkPhysicalDeviceImageFormatInfo2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    type?: VkImageType;

    /**
     *
     */
    tiling?: VkImageTiling;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;

    /**
     *
     */
    flags?: VkImageCreateFlagBits;
}

declare interface VkPhysicalDeviceImageFormatInfo2KHRConstructor {
  readonly prototype: VkPhysicalDeviceImageFormatInfo2KHR;
  new(param?: VkPhysicalDeviceImageFormatInfo2KHRInitializer | null): VkPhysicalDeviceImageFormatInfo2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceImageFormatInfo2KHR: VkPhysicalDeviceImageFormatInfo2KHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceImageFormatInfo2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    type: VkImageType;

    /**
     *
     */
    tiling: VkImageTiling;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

    /**
     *
     */
    flags: VkImageCreateFlagBits;

}

declare interface VkPhysicalDeviceImageFormatInfo2Initializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    type?: VkImageType;

    /**
     *
     */
    tiling?: VkImageTiling;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;

    /**
     *
     */
    flags?: VkImageCreateFlagBits;
}

declare interface VkPhysicalDeviceImageFormatInfo2Constructor {
  readonly prototype: VkPhysicalDeviceImageFormatInfo2;
  new(param?: VkPhysicalDeviceImageFormatInfo2Initializer | null): VkPhysicalDeviceImageFormatInfo2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceImageFormatInfo2: VkPhysicalDeviceImageFormatInfo2Constructor;



  /**
   * 
   */
interface VkImageFormatProperties2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly imageFormatProperties: VkImageFormatProperties | null;

}

declare interface VkImageFormatProperties2KHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly imageFormatProperties?: VkImageFormatProperties | null;
}

declare interface VkImageFormatProperties2KHRConstructor {
  readonly prototype: VkImageFormatProperties2KHR;
  new(param?: VkImageFormatProperties2KHRInitializer | null): VkImageFormatProperties2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageFormatProperties2KHR: VkImageFormatProperties2KHRConstructor;



  /**
   * 
   */
interface VkImageFormatProperties2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly imageFormatProperties: VkImageFormatProperties | null;

}

declare interface VkImageFormatProperties2Initializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly imageFormatProperties?: VkImageFormatProperties | null;
}

declare interface VkImageFormatProperties2Constructor {
  readonly prototype: VkImageFormatProperties2;
  new(param?: VkImageFormatProperties2Initializer | null): VkImageFormatProperties2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageFormatProperties2: VkImageFormatProperties2Constructor;



  /**
   * 
   */
interface VkFormatProperties2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly formatProperties: VkFormatProperties | null;

}

declare interface VkFormatProperties2KHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly formatProperties?: VkFormatProperties | null;
}

declare interface VkFormatProperties2KHRConstructor {
  readonly prototype: VkFormatProperties2KHR;
  new(param?: VkFormatProperties2KHRInitializer | null): VkFormatProperties2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkFormatProperties2KHR: VkFormatProperties2KHRConstructor;



  /**
   * 
   */
interface VkFormatProperties2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly formatProperties: VkFormatProperties | null;

}

declare interface VkFormatProperties2Initializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly formatProperties?: VkFormatProperties | null;
}

declare interface VkFormatProperties2Constructor {
  readonly prototype: VkFormatProperties2;
  new(param?: VkFormatProperties2Initializer | null): VkFormatProperties2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkFormatProperties2: VkFormatProperties2Constructor;



  /**
   * 
   */
interface VkPhysicalDeviceProperties2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly properties: VkPhysicalDeviceProperties | null;

}

declare interface VkPhysicalDeviceProperties2KHRInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly properties?: VkPhysicalDeviceProperties | null;
}

declare interface VkPhysicalDeviceProperties2KHRConstructor {
  readonly prototype: VkPhysicalDeviceProperties2KHR;
  new(param?: VkPhysicalDeviceProperties2KHRInitializer | null): VkPhysicalDeviceProperties2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceProperties2KHR: VkPhysicalDeviceProperties2KHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceProperties2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly properties: VkPhysicalDeviceProperties | null;

}

declare interface VkPhysicalDeviceProperties2Initializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly properties?: VkPhysicalDeviceProperties | null;
}

declare interface VkPhysicalDeviceProperties2Constructor {
  readonly prototype: VkPhysicalDeviceProperties2;
  new(param?: VkPhysicalDeviceProperties2Initializer | null): VkPhysicalDeviceProperties2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceProperties2: VkPhysicalDeviceProperties2Constructor;



  /**
   * 
   */
interface VkPhysicalDeviceFeatures2KHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    features: VkPhysicalDeviceFeatures | null;

}

declare interface VkPhysicalDeviceFeatures2KHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    features?: VkPhysicalDeviceFeatures | null;
}

declare interface VkPhysicalDeviceFeatures2KHRConstructor {
  readonly prototype: VkPhysicalDeviceFeatures2KHR;
  new(param?: VkPhysicalDeviceFeatures2KHRInitializer | null): VkPhysicalDeviceFeatures2KHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFeatures2KHR: VkPhysicalDeviceFeatures2KHRConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFeatures2 {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    features: VkPhysicalDeviceFeatures | null;

}

declare interface VkPhysicalDeviceFeatures2Initializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    features?: VkPhysicalDeviceFeatures | null;
}

declare interface VkPhysicalDeviceFeatures2Constructor {
  readonly prototype: VkPhysicalDeviceFeatures2;
  new(param?: VkPhysicalDeviceFeatures2Initializer | null): VkPhysicalDeviceFeatures2;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFeatures2: VkPhysicalDeviceFeatures2Constructor;



  /**
   * 
   */
interface VkGeneratedCommandsMemoryRequirementsInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pipelineBindPoint: VkPipelineBindPoint;

    /**
     *
     */
    pipeline: VkPipeline | null;

    /**
     *
     */
    indirectCommandsLayout: VkIndirectCommandsLayoutNV | null;

    /**
     *
     */
    maxSequencesCount: number;

}

declare interface VkGeneratedCommandsMemoryRequirementsInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pipelineBindPoint?: VkPipelineBindPoint;

    /**
     *
     */
    pipeline?: VkPipeline | null;

    /**
     *
     */
    indirectCommandsLayout?: VkIndirectCommandsLayoutNV | null;

    /**
     *
     */
    maxSequencesCount?: number;
}

declare interface VkGeneratedCommandsMemoryRequirementsInfoNVConstructor {
  readonly prototype: VkGeneratedCommandsMemoryRequirementsInfoNV;
  new(param?: VkGeneratedCommandsMemoryRequirementsInfoNVInitializer | null): VkGeneratedCommandsMemoryRequirementsInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkGeneratedCommandsMemoryRequirementsInfoNV: VkGeneratedCommandsMemoryRequirementsInfoNVConstructor;



  /**
   * 
   */
interface VkGeneratedCommandsInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pipelineBindPoint: VkPipelineBindPoint;

    /**
     *
     */
    pipeline: VkPipeline | null;

    /**
     *
     */
    indirectCommandsLayout: VkIndirectCommandsLayoutNV | null;

    /**
     *
     */
    streamCount: number;

    /**
     *
     */
    pStreams: VkIndirectCommandsStreamNV[] | null;

    /**
     *
     */
    sequencesCount: number;

    /**
     *
     */
    preprocessBuffer: VkBuffer | null;

    /**
     *
     */
    preprocessOffset: bigint | number;

    /**
     *
     */
    preprocessSize: bigint | number;

    /**
     *
     */
    sequencesCountBuffer: VkBuffer | null;

    /**
     *
     */
    sequencesCountOffset: bigint | number;

    /**
     *
     */
    sequencesIndexBuffer: VkBuffer | null;

    /**
     *
     */
    sequencesIndexOffset: bigint | number;

}

declare interface VkGeneratedCommandsInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pipelineBindPoint?: VkPipelineBindPoint;

    /**
     *
     */
    pipeline?: VkPipeline | null;

    /**
     *
     */
    indirectCommandsLayout?: VkIndirectCommandsLayoutNV | null;

    /**
     *
     */
    streamCount?: number;

    /**
     *
     */
    pStreams?: VkIndirectCommandsStreamNV[] | null;

    /**
     *
     */
    sequencesCount?: number;

    /**
     *
     */
    preprocessBuffer?: VkBuffer | null;

    /**
     *
     */
    preprocessOffset?: bigint | number;

    /**
     *
     */
    preprocessSize?: bigint | number;

    /**
     *
     */
    sequencesCountBuffer?: VkBuffer | null;

    /**
     *
     */
    sequencesCountOffset?: bigint | number;

    /**
     *
     */
    sequencesIndexBuffer?: VkBuffer | null;

    /**
     *
     */
    sequencesIndexOffset?: bigint | number;
}

declare interface VkGeneratedCommandsInfoNVConstructor {
  readonly prototype: VkGeneratedCommandsInfoNV;
  new(param?: VkGeneratedCommandsInfoNVInitializer | null): VkGeneratedCommandsInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkGeneratedCommandsInfoNV: VkGeneratedCommandsInfoNVConstructor;



  /**
   * 
   */
interface VkIndirectCommandsLayoutCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkIndirectCommandsLayoutUsageFlagBitsNV;

    /**
     *
     */
    pipelineBindPoint: VkPipelineBindPoint;

    /**
     *
     */
    tokenCount: number;

    /**
     *
     */
    pTokens: VkIndirectCommandsLayoutTokenNV[] | null;

    /**
     *
     */
    streamCount: number;

    /**
     *
     */
    pStreamStrides: Uint32Array | null;

}

declare interface VkIndirectCommandsLayoutCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkIndirectCommandsLayoutUsageFlagBitsNV;

    /**
     *
     */
    pipelineBindPoint?: VkPipelineBindPoint;

    /**
     *
     */
    tokenCount?: number;

    /**
     *
     */
    pTokens?: VkIndirectCommandsLayoutTokenNV[] | null;

    /**
     *
     */
    streamCount?: number;

    /**
     *
     */
    pStreamStrides?: Uint32Array | null;
}

declare interface VkIndirectCommandsLayoutCreateInfoNVConstructor {
  readonly prototype: VkIndirectCommandsLayoutCreateInfoNV;
  new(param?: VkIndirectCommandsLayoutCreateInfoNVInitializer | null): VkIndirectCommandsLayoutCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkIndirectCommandsLayoutCreateInfoNV: VkIndirectCommandsLayoutCreateInfoNVConstructor;



  /**
   * 
   */
interface VkIndirectCommandsLayoutTokenNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    tokenType: VkIndirectCommandsTokenTypeNV;

    /**
     *
     */
    stream: number;

    /**
     *
     */
    offset: number;

    /**
     *
     */
    vertexBindingUnit: number;

    /**
     *
     */
    vertexDynamicStride: boolean;

    /**
     *
     */
    pushconstantPipelineLayout: VkPipelineLayout | null;

    /**
     *
     */
    pushconstantShaderStageFlags: VkShaderStageFlagBits;

    /**
     *
     */
    pushconstantOffset: number;

    /**
     *
     */
    pushconstantSize: number;

    /**
     *
     */
    indirectStateFlags: VkIndirectStateFlagBitsNV;

    /**
     *
     */
    indexTypeCount: number;

    /**
     *
     */
    pIndexTypes: Int32Array | null;

    /**
     *
     */
    pIndexTypeValues: Uint32Array | null;

}

declare interface VkIndirectCommandsLayoutTokenNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    tokenType?: VkIndirectCommandsTokenTypeNV;

    /**
     *
     */
    stream?: number;

    /**
     *
     */
    offset?: number;

    /**
     *
     */
    vertexBindingUnit?: number;

    /**
     *
     */
    vertexDynamicStride?: boolean;

    /**
     *
     */
    pushconstantPipelineLayout?: VkPipelineLayout | null;

    /**
     *
     */
    pushconstantShaderStageFlags?: VkShaderStageFlagBits;

    /**
     *
     */
    pushconstantOffset?: number;

    /**
     *
     */
    pushconstantSize?: number;

    /**
     *
     */
    indirectStateFlags?: VkIndirectStateFlagBitsNV;

    /**
     *
     */
    indexTypeCount?: number;

    /**
     *
     */
    pIndexTypes?: Int32Array | null;

    /**
     *
     */
    pIndexTypeValues?: Uint32Array | null;
}

declare interface VkIndirectCommandsLayoutTokenNVConstructor {
  readonly prototype: VkIndirectCommandsLayoutTokenNV;
  new(param?: VkIndirectCommandsLayoutTokenNVInitializer | null): VkIndirectCommandsLayoutTokenNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkIndirectCommandsLayoutTokenNV: VkIndirectCommandsLayoutTokenNVConstructor;



  /**
   * 
   */
interface VkIndirectCommandsStreamNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    offset: bigint | number;

}

declare interface VkIndirectCommandsStreamNVInitializer {
  
    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    offset?: bigint | number;
}

declare interface VkIndirectCommandsStreamNVConstructor {
  readonly prototype: VkIndirectCommandsStreamNV;
  new(param?: VkIndirectCommandsStreamNVInitializer | null): VkIndirectCommandsStreamNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkIndirectCommandsStreamNV: VkIndirectCommandsStreamNVConstructor;



  /**
   * 
   */
interface VkSetStateFlagsIndirectCommandNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    data: number;

}

declare interface VkSetStateFlagsIndirectCommandNVInitializer {
  
    /**
     *
     */
    data?: number;
}

declare interface VkSetStateFlagsIndirectCommandNVConstructor {
  readonly prototype: VkSetStateFlagsIndirectCommandNV;
  new(param?: VkSetStateFlagsIndirectCommandNVInitializer | null): VkSetStateFlagsIndirectCommandNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSetStateFlagsIndirectCommandNV: VkSetStateFlagsIndirectCommandNVConstructor;



  /**
   * 
   */
interface VkBindVertexBufferIndirectCommandNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    bufferAddress: bigint | number;

    /**
     *
     */
    size: number;

    /**
     *
     */
    stride: number;

}

declare interface VkBindVertexBufferIndirectCommandNVInitializer {
  
    /**
     *
     */
    bufferAddress?: bigint | number;

    /**
     *
     */
    size?: number;

    /**
     *
     */
    stride?: number;
}

declare interface VkBindVertexBufferIndirectCommandNVConstructor {
  readonly prototype: VkBindVertexBufferIndirectCommandNV;
  new(param?: VkBindVertexBufferIndirectCommandNVInitializer | null): VkBindVertexBufferIndirectCommandNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindVertexBufferIndirectCommandNV: VkBindVertexBufferIndirectCommandNVConstructor;



  /**
   * 
   */
interface VkBindIndexBufferIndirectCommandNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    bufferAddress: bigint | number;

    /**
     *
     */
    size: number;

    /**
     *
     */
    indexType: VkIndexType;

}

declare interface VkBindIndexBufferIndirectCommandNVInitializer {
  
    /**
     *
     */
    bufferAddress?: bigint | number;

    /**
     *
     */
    size?: number;

    /**
     *
     */
    indexType?: VkIndexType;
}

declare interface VkBindIndexBufferIndirectCommandNVConstructor {
  readonly prototype: VkBindIndexBufferIndirectCommandNV;
  new(param?: VkBindIndexBufferIndirectCommandNVInitializer | null): VkBindIndexBufferIndirectCommandNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindIndexBufferIndirectCommandNV: VkBindIndexBufferIndirectCommandNVConstructor;



  /**
   * 
   */
interface VkBindShaderGroupIndirectCommandNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    groupIndex: number;

}

declare interface VkBindShaderGroupIndirectCommandNVInitializer {
  
    /**
     *
     */
    groupIndex?: number;
}

declare interface VkBindShaderGroupIndirectCommandNVConstructor {
  readonly prototype: VkBindShaderGroupIndirectCommandNV;
  new(param?: VkBindShaderGroupIndirectCommandNVInitializer | null): VkBindShaderGroupIndirectCommandNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindShaderGroupIndirectCommandNV: VkBindShaderGroupIndirectCommandNVConstructor;



  /**
   * 
   */
interface VkGraphicsPipelineShaderGroupsCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    groupCount: number;

    /**
     *
     */
    pGroups: VkGraphicsShaderGroupCreateInfoNV[] | null;

    /**
     *
     */
    pipelineCount: number;

    /**
     *
     */
    pPipelines: VkPipeline[] | null;

}

declare interface VkGraphicsPipelineShaderGroupsCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    groupCount?: number;

    /**
     *
     */
    pGroups?: VkGraphicsShaderGroupCreateInfoNV[] | null;

    /**
     *
     */
    pipelineCount?: number;

    /**
     *
     */
    pPipelines?: VkPipeline[] | null;
}

declare interface VkGraphicsPipelineShaderGroupsCreateInfoNVConstructor {
  readonly prototype: VkGraphicsPipelineShaderGroupsCreateInfoNV;
  new(param?: VkGraphicsPipelineShaderGroupsCreateInfoNVInitializer | null): VkGraphicsPipelineShaderGroupsCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkGraphicsPipelineShaderGroupsCreateInfoNV: VkGraphicsPipelineShaderGroupsCreateInfoNVConstructor;



  /**
   * 
   */
interface VkGraphicsShaderGroupCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    stageCount: number;

    /**
     *
     */
    pStages: VkPipelineShaderStageCreateInfo[] | null;

    /**
     *
     */
    pVertexInputState: VkPipelineVertexInputStateCreateInfo | null;

    /**
     *
     */
    pTessellationState: VkPipelineTessellationStateCreateInfo | null;

}

declare interface VkGraphicsShaderGroupCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    stageCount?: number;

    /**
     *
     */
    pStages?: VkPipelineShaderStageCreateInfo[] | null;

    /**
     *
     */
    pVertexInputState?: VkPipelineVertexInputStateCreateInfo | null;

    /**
     *
     */
    pTessellationState?: VkPipelineTessellationStateCreateInfo | null;
}

declare interface VkGraphicsShaderGroupCreateInfoNVConstructor {
  readonly prototype: VkGraphicsShaderGroupCreateInfoNV;
  new(param?: VkGraphicsShaderGroupCreateInfoNVInitializer | null): VkGraphicsShaderGroupCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkGraphicsShaderGroupCreateInfoNV: VkGraphicsShaderGroupCreateInfoNVConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxGraphicsShaderGroupCount: number;

    /**
     *
     */
    readonly maxIndirectSequenceCount: number;

    /**
     *
     */
    readonly maxIndirectCommandsTokenCount: number;

    /**
     *
     */
    readonly maxIndirectCommandsStreamCount: number;

    /**
     *
     */
    readonly maxIndirectCommandsTokenOffset: number;

    /**
     *
     */
    readonly maxIndirectCommandsStreamStride: number;

    /**
     *
     */
    readonly minSequencesCountBufferOffsetAlignment: number;

    /**
     *
     */
    readonly minSequencesIndexBufferOffsetAlignment: number;

    /**
     *
     */
    readonly minIndirectCommandsBufferOffsetAlignment: number;

}

declare interface VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNVInitializer {
  
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxGraphicsShaderGroupCount?: number;

    /**
     *
     */
    readonly maxIndirectSequenceCount?: number;

    /**
     *
     */
    readonly maxIndirectCommandsTokenCount?: number;

    /**
     *
     */
    readonly maxIndirectCommandsStreamCount?: number;

    /**
     *
     */
    readonly maxIndirectCommandsTokenOffset?: number;

    /**
     *
     */
    readonly maxIndirectCommandsStreamStride?: number;

    /**
     *
     */
    readonly minSequencesCountBufferOffsetAlignment?: number;

    /**
     *
     */
    readonly minSequencesIndexBufferOffsetAlignment?: number;

    /**
     *
     */
    readonly minIndirectCommandsBufferOffsetAlignment?: number;
}

declare interface VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNVConstructor {
  readonly prototype: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV;
  new(param?: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNVInitializer | null): VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNVConstructor;



  /**
   * 
   */
interface VkPhysicalDevicePrivateDataFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    privateData: boolean;

}

declare interface VkPhysicalDevicePrivateDataFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    privateData?: boolean;
}

declare interface VkPhysicalDevicePrivateDataFeaturesEXTConstructor {
  readonly prototype: VkPhysicalDevicePrivateDataFeaturesEXT;
  new(param?: VkPhysicalDevicePrivateDataFeaturesEXTInitializer | null): VkPhysicalDevicePrivateDataFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDevicePrivateDataFeaturesEXT: VkPhysicalDevicePrivateDataFeaturesEXTConstructor;



  /**
   * 
   */
interface VkPrivateDataSlotCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkPrivateDataSlotCreateFlagBitsEXT;

}

declare interface VkPrivateDataSlotCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkPrivateDataSlotCreateFlagBitsEXT;
}

declare interface VkPrivateDataSlotCreateInfoEXTConstructor {
  readonly prototype: VkPrivateDataSlotCreateInfoEXT;
  new(param?: VkPrivateDataSlotCreateInfoEXTInitializer | null): VkPrivateDataSlotCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPrivateDataSlotCreateInfoEXT: VkPrivateDataSlotCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkDevicePrivateDataCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    privateDataSlotRequestCount: number;

}

declare interface VkDevicePrivateDataCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    privateDataSlotRequestCount?: number;
}

declare interface VkDevicePrivateDataCreateInfoEXTConstructor {
  readonly prototype: VkDevicePrivateDataCreateInfoEXT;
  new(param?: VkDevicePrivateDataCreateInfoEXTInitializer | null): VkDevicePrivateDataCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDevicePrivateDataCreateInfoEXT: VkDevicePrivateDataCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceGeneratedCommands: boolean;

}

declare interface VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceGeneratedCommands?: boolean;
}

declare interface VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNVConstructor {
  readonly prototype: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV;
  new(param?: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNVInitializer | null): VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNVConstructor;



  /**
   * 
   */
interface VkWin32KeyedMutexAcquireReleaseInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    acquireCount: number;

    /**
     *
     */
    pAcquireSyncs: VkDeviceMemory[] | null;

    /**
     *
     */
    pAcquireKeys: BigUint64Array | null;

    /**
     *
     */
    pAcquireTimeoutMilliseconds: Uint32Array | null;

    /**
     *
     */
    releaseCount: number;

    /**
     *
     */
    pReleaseSyncs: VkDeviceMemory[] | null;

    /**
     *
     */
    pReleaseKeys: BigUint64Array | null;

}

declare interface VkWin32KeyedMutexAcquireReleaseInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    acquireCount?: number;

    /**
     *
     */
    pAcquireSyncs?: VkDeviceMemory[] | null;

    /**
     *
     */
    pAcquireKeys?: BigUint64Array | null;

    /**
     *
     */
    pAcquireTimeoutMilliseconds?: Uint32Array | null;

    /**
     *
     */
    releaseCount?: number;

    /**
     *
     */
    pReleaseSyncs?: VkDeviceMemory[] | null;

    /**
     *
     */
    pReleaseKeys?: BigUint64Array | null;
}

declare interface VkWin32KeyedMutexAcquireReleaseInfoNVConstructor {
  readonly prototype: VkWin32KeyedMutexAcquireReleaseInfoNV;
  new(param?: VkWin32KeyedMutexAcquireReleaseInfoNVInitializer | null): VkWin32KeyedMutexAcquireReleaseInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkWin32KeyedMutexAcquireReleaseInfoNV: VkWin32KeyedMutexAcquireReleaseInfoNVConstructor;



  /**
   * 
   */
interface VkExportMemoryWin32HandleInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pAttributes: bigint | number;

    /**
     *
     */
    dwAccess: number;

}

declare interface VkExportMemoryWin32HandleInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pAttributes?: bigint | number;

    /**
     *
     */
    dwAccess?: number;
}

declare interface VkExportMemoryWin32HandleInfoNVConstructor {
  readonly prototype: VkExportMemoryWin32HandleInfoNV;
  new(param?: VkExportMemoryWin32HandleInfoNVInitializer | null): VkExportMemoryWin32HandleInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExportMemoryWin32HandleInfoNV: VkExportMemoryWin32HandleInfoNVConstructor;



  /**
   * 
   */
interface VkImportMemoryWin32HandleInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBitsNV;

    /**
     *
     */
    handle: bigint | number;

}

declare interface VkImportMemoryWin32HandleInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBitsNV;

    /**
     *
     */
    handle?: bigint | number;
}

declare interface VkImportMemoryWin32HandleInfoNVConstructor {
  readonly prototype: VkImportMemoryWin32HandleInfoNV;
  new(param?: VkImportMemoryWin32HandleInfoNVInitializer | null): VkImportMemoryWin32HandleInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImportMemoryWin32HandleInfoNV: VkImportMemoryWin32HandleInfoNVConstructor;



  /**
   * 
   */
interface VkExportMemoryAllocateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBitsNV;

}

declare interface VkExportMemoryAllocateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBitsNV;
}

declare interface VkExportMemoryAllocateInfoNVConstructor {
  readonly prototype: VkExportMemoryAllocateInfoNV;
  new(param?: VkExportMemoryAllocateInfoNVInitializer | null): VkExportMemoryAllocateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExportMemoryAllocateInfoNV: VkExportMemoryAllocateInfoNVConstructor;



  /**
   * 
   */
interface VkExternalMemoryImageCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBitsNV;

}

declare interface VkExternalMemoryImageCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBitsNV;
}

declare interface VkExternalMemoryImageCreateInfoNVConstructor {
  readonly prototype: VkExternalMemoryImageCreateInfoNV;
  new(param?: VkExternalMemoryImageCreateInfoNVInitializer | null): VkExternalMemoryImageCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalMemoryImageCreateInfoNV: VkExternalMemoryImageCreateInfoNVConstructor;



  /**
   * 
   */
interface VkExternalImageFormatPropertiesNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly imageFormatProperties: VkImageFormatProperties | null;

    /**
     *
     */
    readonly externalMemoryFeatures: VkExternalMemoryFeatureFlagBitsNV;

    /**
     *
     */
    readonly exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagBitsNV;

    /**
     *
     */
    readonly compatibleHandleTypes: VkExternalMemoryHandleTypeFlagBitsNV;

}

declare interface VkExternalImageFormatPropertiesNVInitializer {
  
    /**
     *
     */
    readonly imageFormatProperties?: VkImageFormatProperties | null;

    /**
     *
     */
    readonly externalMemoryFeatures?: VkExternalMemoryFeatureFlagBitsNV;

    /**
     *
     */
    readonly exportFromImportedHandleTypes?: VkExternalMemoryHandleTypeFlagBitsNV;

    /**
     *
     */
    readonly compatibleHandleTypes?: VkExternalMemoryHandleTypeFlagBitsNV;
}

declare interface VkExternalImageFormatPropertiesNVConstructor {
  readonly prototype: VkExternalImageFormatPropertiesNV;
  new(param?: VkExternalImageFormatPropertiesNVInitializer | null): VkExternalImageFormatPropertiesNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExternalImageFormatPropertiesNV: VkExternalImageFormatPropertiesNVConstructor;



  /**
   * 
   */
interface VkDedicatedAllocationMemoryAllocateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    buffer: VkBuffer | null;

}

declare interface VkDedicatedAllocationMemoryAllocateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    buffer?: VkBuffer | null;
}

declare interface VkDedicatedAllocationMemoryAllocateInfoNVConstructor {
  readonly prototype: VkDedicatedAllocationMemoryAllocateInfoNV;
  new(param?: VkDedicatedAllocationMemoryAllocateInfoNVInitializer | null): VkDedicatedAllocationMemoryAllocateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDedicatedAllocationMemoryAllocateInfoNV: VkDedicatedAllocationMemoryAllocateInfoNVConstructor;



  /**
   * 
   */
interface VkDedicatedAllocationBufferCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    dedicatedAllocation: boolean;

}

declare interface VkDedicatedAllocationBufferCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    dedicatedAllocation?: boolean;
}

declare interface VkDedicatedAllocationBufferCreateInfoNVConstructor {
  readonly prototype: VkDedicatedAllocationBufferCreateInfoNV;
  new(param?: VkDedicatedAllocationBufferCreateInfoNVInitializer | null): VkDedicatedAllocationBufferCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDedicatedAllocationBufferCreateInfoNV: VkDedicatedAllocationBufferCreateInfoNVConstructor;



  /**
   * 
   */
interface VkDedicatedAllocationImageCreateInfoNV {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    dedicatedAllocation: boolean;

}

declare interface VkDedicatedAllocationImageCreateInfoNVInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    dedicatedAllocation?: boolean;
}

declare interface VkDedicatedAllocationImageCreateInfoNVConstructor {
  readonly prototype: VkDedicatedAllocationImageCreateInfoNV;
  new(param?: VkDedicatedAllocationImageCreateInfoNVInitializer | null): VkDedicatedAllocationImageCreateInfoNV;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDedicatedAllocationImageCreateInfoNV: VkDedicatedAllocationImageCreateInfoNVConstructor;



  /**
   * 
   */
interface VkDebugMarkerMarkerInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pMarkerName: string | null;

    /**
     *
     */
    color: number[] | null;

}

declare interface VkDebugMarkerMarkerInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pMarkerName?: string | null;

    /**
     *
     */
    color?: number[] | null;
}

declare interface VkDebugMarkerMarkerInfoEXTConstructor {
  readonly prototype: VkDebugMarkerMarkerInfoEXT;
  new(param?: VkDebugMarkerMarkerInfoEXTInitializer | null): VkDebugMarkerMarkerInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDebugMarkerMarkerInfoEXT: VkDebugMarkerMarkerInfoEXTConstructor;



  /**
   * 
   */
interface VkDebugMarkerObjectTagInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    objectType: VkDebugReportObjectTypeEXT;

    /**
     *
     */
    object: bigint | number;

    /**
     *
     */
    tagName: bigint | number;

    /**
     *
     */
    tagSize: bigint | number;

    /**
     *
     */
    pTag: ArrayBuffer | null;

}

declare interface VkDebugMarkerObjectTagInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    objectType?: VkDebugReportObjectTypeEXT;

    /**
     *
     */
    object?: bigint | number;

    /**
     *
     */
    tagName?: bigint | number;

    /**
     *
     */
    tagSize?: bigint | number;

    /**
     *
     */
    pTag?: ArrayBuffer | null;
}

declare interface VkDebugMarkerObjectTagInfoEXTConstructor {
  readonly prototype: VkDebugMarkerObjectTagInfoEXT;
  new(param?: VkDebugMarkerObjectTagInfoEXTInitializer | null): VkDebugMarkerObjectTagInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDebugMarkerObjectTagInfoEXT: VkDebugMarkerObjectTagInfoEXTConstructor;



  /**
   * 
   */
interface VkDebugMarkerObjectNameInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    objectType: VkDebugReportObjectTypeEXT;

    /**
     *
     */
    object: bigint | number;

    /**
     *
     */
    pObjectName: string | null;

}

declare interface VkDebugMarkerObjectNameInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    objectType?: VkDebugReportObjectTypeEXT;

    /**
     *
     */
    object?: bigint | number;

    /**
     *
     */
    pObjectName?: string | null;
}

declare interface VkDebugMarkerObjectNameInfoEXTConstructor {
  readonly prototype: VkDebugMarkerObjectNameInfoEXT;
  new(param?: VkDebugMarkerObjectNameInfoEXTInitializer | null): VkDebugMarkerObjectNameInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDebugMarkerObjectNameInfoEXT: VkDebugMarkerObjectNameInfoEXTConstructor;



  /**
   * 
   */
interface VkPipelineRasterizationStateRasterizationOrderAMD {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    rasterizationOrder: VkRasterizationOrderAMD;

}

declare interface VkPipelineRasterizationStateRasterizationOrderAMDInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    rasterizationOrder?: VkRasterizationOrderAMD;
}

declare interface VkPipelineRasterizationStateRasterizationOrderAMDConstructor {
  readonly prototype: VkPipelineRasterizationStateRasterizationOrderAMD;
  new(param?: VkPipelineRasterizationStateRasterizationOrderAMDInitializer | null): VkPipelineRasterizationStateRasterizationOrderAMD;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineRasterizationStateRasterizationOrderAMD: VkPipelineRasterizationStateRasterizationOrderAMDConstructor;



  /**
   * 
   */
interface VkValidationFeaturesEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    enabledValidationFeatureCount: number;

    /**
     *
     */
    pEnabledValidationFeatures: Int32Array | null;

    /**
     *
     */
    disabledValidationFeatureCount: number;

    /**
     *
     */
    pDisabledValidationFeatures: Int32Array | null;

}

declare interface VkValidationFeaturesEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    enabledValidationFeatureCount?: number;

    /**
     *
     */
    pEnabledValidationFeatures?: Int32Array | null;

    /**
     *
     */
    disabledValidationFeatureCount?: number;

    /**
     *
     */
    pDisabledValidationFeatures?: Int32Array | null;
}

declare interface VkValidationFeaturesEXTConstructor {
  readonly prototype: VkValidationFeaturesEXT;
  new(param?: VkValidationFeaturesEXTInitializer | null): VkValidationFeaturesEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkValidationFeaturesEXT: VkValidationFeaturesEXTConstructor;



  /**
   * 
   */
interface VkValidationFlagsEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    disabledValidationCheckCount: number;

    /**
     *
     */
    pDisabledValidationChecks: Int32Array | null;

}

declare interface VkValidationFlagsEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    disabledValidationCheckCount?: number;

    /**
     *
     */
    pDisabledValidationChecks?: Int32Array | null;
}

declare interface VkValidationFlagsEXTConstructor {
  readonly prototype: VkValidationFlagsEXT;
  new(param?: VkValidationFlagsEXTInitializer | null): VkValidationFlagsEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkValidationFlagsEXT: VkValidationFlagsEXTConstructor;



  /**
   * 
   */
interface VkDebugReportCallbackCreateInfoEXT {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkDebugReportFlagBitsEXT;

    /**
     *
     */
    pfnCallback: vkDebugReportCallbackEXT | null;

    /**
     *
     */
    pUserData: ArrayBuffer | null;

}

declare interface VkDebugReportCallbackCreateInfoEXTInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkDebugReportFlagBitsEXT;

    /**
     *
     */
    pfnCallback?: vkDebugReportCallbackEXT | null;

    /**
     *
     */
    pUserData?: ArrayBuffer | null;
}

declare interface VkDebugReportCallbackCreateInfoEXTConstructor {
  readonly prototype: VkDebugReportCallbackCreateInfoEXT;
  new(param?: VkDebugReportCallbackCreateInfoEXTInitializer | null): VkDebugReportCallbackCreateInfoEXT;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDebugReportCallbackCreateInfoEXT: VkDebugReportCallbackCreateInfoEXTConstructor;



  /**
   * 
   */
interface VkPresentInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    waitSemaphoreCount: number;

    /**
     *
     */
    pWaitSemaphores: VkSemaphore[] | null;

    /**
     *
     */
    swapchainCount: number;

    /**
     *
     */
    pSwapchains: VkSwapchainKHR[] | null;

    /**
     *
     */
    pImageIndices: Uint32Array | null;

    /**
     *
     */
    pResults: Int32Array | null;

}

declare interface VkPresentInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    waitSemaphoreCount?: number;

    /**
     *
     */
    pWaitSemaphores?: VkSemaphore[] | null;

    /**
     *
     */
    swapchainCount?: number;

    /**
     *
     */
    pSwapchains?: VkSwapchainKHR[] | null;

    /**
     *
     */
    pImageIndices?: Uint32Array | null;

    /**
     *
     */
    pResults?: Int32Array | null;
}

declare interface VkPresentInfoKHRConstructor {
  readonly prototype: VkPresentInfoKHR;
  new(param?: VkPresentInfoKHRInitializer | null): VkPresentInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPresentInfoKHR: VkPresentInfoKHRConstructor;



  /**
   * 
   */
interface VkSwapchainCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkSwapchainCreateFlagBitsKHR;

    /**
     *
     */
    surface: VkSurfaceKHR | null;

    /**
     *
     */
    minImageCount: number;

    /**
     *
     */
    imageFormat: VkFormat;

    /**
     *
     */
    imageColorSpace: VkColorSpaceKHR;

    /**
     *
     */
    imageExtent: VkExtent2D | null;

    /**
     *
     */
    imageArrayLayers: number;

    /**
     *
     */
    imageUsage: VkImageUsageFlagBits;

    /**
     *
     */
    imageSharingMode: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount: number;

    /**
     *
     */
    pQueueFamilyIndices: Uint32Array | null;

    /**
     *
     */
    preTransform: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    compositeAlpha: VkCompositeAlphaFlagBitsKHR;

    /**
     *
     */
    presentMode: VkPresentModeKHR;

    /**
     *
     */
    clipped: boolean;

    /**
     *
     */
    oldSwapchain: VkSwapchainKHR | null;

}

declare interface VkSwapchainCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkSwapchainCreateFlagBitsKHR;

    /**
     *
     */
    surface?: VkSurfaceKHR | null;

    /**
     *
     */
    minImageCount?: number;

    /**
     *
     */
    imageFormat?: VkFormat;

    /**
     *
     */
    imageColorSpace?: VkColorSpaceKHR;

    /**
     *
     */
    imageExtent?: VkExtent2D | null;

    /**
     *
     */
    imageArrayLayers?: number;

    /**
     *
     */
    imageUsage?: VkImageUsageFlagBits;

    /**
     *
     */
    imageSharingMode?: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount?: number;

    /**
     *
     */
    pQueueFamilyIndices?: Uint32Array | null;

    /**
     *
     */
    preTransform?: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    compositeAlpha?: VkCompositeAlphaFlagBitsKHR;

    /**
     *
     */
    presentMode?: VkPresentModeKHR;

    /**
     *
     */
    clipped?: boolean;

    /**
     *
     */
    oldSwapchain?: VkSwapchainKHR | null;
}

declare interface VkSwapchainCreateInfoKHRConstructor {
  readonly prototype: VkSwapchainCreateInfoKHR;
  new(param?: VkSwapchainCreateInfoKHRInitializer | null): VkSwapchainCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSwapchainCreateInfoKHR: VkSwapchainCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkSurfaceFormatKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly format: VkFormat;

    /**
     *
     */
    readonly colorSpace: VkColorSpaceKHR;

}

declare interface VkSurfaceFormatKHRInitializer {
  
    /**
     *
     */
    readonly format?: VkFormat;

    /**
     *
     */
    readonly colorSpace?: VkColorSpaceKHR;
}

declare interface VkSurfaceFormatKHRConstructor {
  readonly prototype: VkSurfaceFormatKHR;
  new(param?: VkSurfaceFormatKHRInitializer | null): VkSurfaceFormatKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSurfaceFormatKHR: VkSurfaceFormatKHRConstructor;



  /**
   * 
   */
interface VkWin32SurfaceCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    hinstance: bigint | number;

    /**
     *
     */
    hwnd: bigint | number;

}

declare interface VkWin32SurfaceCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    hinstance?: bigint | number;

    /**
     *
     */
    hwnd?: bigint | number;
}

declare interface VkWin32SurfaceCreateInfoKHRConstructor {
  readonly prototype: VkWin32SurfaceCreateInfoKHR;
  new(param?: VkWin32SurfaceCreateInfoKHRInitializer | null): VkWin32SurfaceCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkWin32SurfaceCreateInfoKHR: VkWin32SurfaceCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkSurfaceCapabilitiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly minImageCount: number;

    /**
     *
     */
    readonly maxImageCount: number;

    /**
     *
     */
    readonly currentExtent: VkExtent2D | null;

    /**
     *
     */
    readonly minImageExtent: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageExtent: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageArrayLayers: number;

    /**
     *
     */
    readonly supportedTransforms: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly currentTransform: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly supportedCompositeAlpha: VkCompositeAlphaFlagBitsKHR;

    /**
     *
     */
    readonly supportedUsageFlags: VkImageUsageFlagBits;

}

declare interface VkSurfaceCapabilitiesKHRInitializer {
  
    /**
     *
     */
    readonly minImageCount?: number;

    /**
     *
     */
    readonly maxImageCount?: number;

    /**
     *
     */
    readonly currentExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly minImageExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageArrayLayers?: number;

    /**
     *
     */
    readonly supportedTransforms?: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly currentTransform?: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly supportedCompositeAlpha?: VkCompositeAlphaFlagBitsKHR;

    /**
     *
     */
    readonly supportedUsageFlags?: VkImageUsageFlagBits;
}

declare interface VkSurfaceCapabilitiesKHRConstructor {
  readonly prototype: VkSurfaceCapabilitiesKHR;
  new(param?: VkSurfaceCapabilitiesKHRInitializer | null): VkSurfaceCapabilitiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSurfaceCapabilitiesKHR: VkSurfaceCapabilitiesKHRConstructor;



  /**
   * 
   */
interface VkDisplayPresentInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcRect: VkRect2D | null;

    /**
     *
     */
    dstRect: VkRect2D | null;

    /**
     *
     */
    persistent: boolean;

}

declare interface VkDisplayPresentInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcRect?: VkRect2D | null;

    /**
     *
     */
    dstRect?: VkRect2D | null;

    /**
     *
     */
    persistent?: boolean;
}

declare interface VkDisplayPresentInfoKHRConstructor {
  readonly prototype: VkDisplayPresentInfoKHR;
  new(param?: VkDisplayPresentInfoKHRInitializer | null): VkDisplayPresentInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplayPresentInfoKHR: VkDisplayPresentInfoKHRConstructor;



  /**
   * 
   */
interface VkDisplaySurfaceCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    displayMode: VkDisplayModeKHR | null;

    /**
     *
     */
    planeIndex: number;

    /**
     *
     */
    planeStackIndex: number;

    /**
     *
     */
    transform: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    globalAlpha: number;

    /**
     *
     */
    alphaMode: VkDisplayPlaneAlphaFlagBitsKHR;

    /**
     *
     */
    imageExtent: VkExtent2D | null;

}

declare interface VkDisplaySurfaceCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    displayMode?: VkDisplayModeKHR | null;

    /**
     *
     */
    planeIndex?: number;

    /**
     *
     */
    planeStackIndex?: number;

    /**
     *
     */
    transform?: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    globalAlpha?: number;

    /**
     *
     */
    alphaMode?: VkDisplayPlaneAlphaFlagBitsKHR;

    /**
     *
     */
    imageExtent?: VkExtent2D | null;
}

declare interface VkDisplaySurfaceCreateInfoKHRConstructor {
  readonly prototype: VkDisplaySurfaceCreateInfoKHR;
  new(param?: VkDisplaySurfaceCreateInfoKHRInitializer | null): VkDisplaySurfaceCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplaySurfaceCreateInfoKHR: VkDisplaySurfaceCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkDisplayPlaneCapabilitiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly supportedAlpha: VkDisplayPlaneAlphaFlagBitsKHR;

    /**
     *
     */
    readonly minSrcPosition: VkOffset2D | null;

    /**
     *
     */
    readonly maxSrcPosition: VkOffset2D | null;

    /**
     *
     */
    readonly minSrcExtent: VkExtent2D | null;

    /**
     *
     */
    readonly maxSrcExtent: VkExtent2D | null;

    /**
     *
     */
    readonly minDstPosition: VkOffset2D | null;

    /**
     *
     */
    readonly maxDstPosition: VkOffset2D | null;

    /**
     *
     */
    readonly minDstExtent: VkExtent2D | null;

    /**
     *
     */
    readonly maxDstExtent: VkExtent2D | null;

}

declare interface VkDisplayPlaneCapabilitiesKHRInitializer {
  
    /**
     *
     */
    readonly supportedAlpha?: VkDisplayPlaneAlphaFlagBitsKHR;

    /**
     *
     */
    readonly minSrcPosition?: VkOffset2D | null;

    /**
     *
     */
    readonly maxSrcPosition?: VkOffset2D | null;

    /**
     *
     */
    readonly minSrcExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly maxSrcExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly minDstPosition?: VkOffset2D | null;

    /**
     *
     */
    readonly maxDstPosition?: VkOffset2D | null;

    /**
     *
     */
    readonly minDstExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly maxDstExtent?: VkExtent2D | null;
}

declare interface VkDisplayPlaneCapabilitiesKHRConstructor {
  readonly prototype: VkDisplayPlaneCapabilitiesKHR;
  new(param?: VkDisplayPlaneCapabilitiesKHRInitializer | null): VkDisplayPlaneCapabilitiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplayPlaneCapabilitiesKHR: VkDisplayPlaneCapabilitiesKHRConstructor;



  /**
   * 
   */
interface VkDisplayModeCreateInfoKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    parameters: VkDisplayModeParametersKHR | null;

}

declare interface VkDisplayModeCreateInfoKHRInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    parameters?: VkDisplayModeParametersKHR | null;
}

declare interface VkDisplayModeCreateInfoKHRConstructor {
  readonly prototype: VkDisplayModeCreateInfoKHR;
  new(param?: VkDisplayModeCreateInfoKHRInitializer | null): VkDisplayModeCreateInfoKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplayModeCreateInfoKHR: VkDisplayModeCreateInfoKHRConstructor;



  /**
   * 
   */
interface VkDisplayModePropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly displayMode: VkDisplayModeKHR | null;

    /**
     *
     */
    readonly parameters: VkDisplayModeParametersKHR | null;

}

declare interface VkDisplayModePropertiesKHRInitializer {
  
    /**
     *
     */
    readonly displayMode?: VkDisplayModeKHR | null;

    /**
     *
     */
    readonly parameters?: VkDisplayModeParametersKHR | null;
}

declare interface VkDisplayModePropertiesKHRConstructor {
  readonly prototype: VkDisplayModePropertiesKHR;
  new(param?: VkDisplayModePropertiesKHRInitializer | null): VkDisplayModePropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplayModePropertiesKHR: VkDisplayModePropertiesKHRConstructor;



  /**
   * 
   */
interface VkDisplayModeParametersKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    visibleRegion: VkExtent2D | null;

    /**
     *
     */
    refreshRate: number;

}

declare interface VkDisplayModeParametersKHRInitializer {
  
    /**
     *
     */
    visibleRegion?: VkExtent2D | null;

    /**
     *
     */
    refreshRate?: number;
}

declare interface VkDisplayModeParametersKHRConstructor {
  readonly prototype: VkDisplayModeParametersKHR;
  new(param?: VkDisplayModeParametersKHRInitializer | null): VkDisplayModeParametersKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplayModeParametersKHR: VkDisplayModeParametersKHRConstructor;



  /**
   * 
   */
interface VkDisplayPlanePropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly currentDisplay: VkDisplayKHR | null;

    /**
     *
     */
    readonly currentStackIndex: number;

}

declare interface VkDisplayPlanePropertiesKHRInitializer {
  
    /**
     *
     */
    readonly currentDisplay?: VkDisplayKHR | null;

    /**
     *
     */
    readonly currentStackIndex?: number;
}

declare interface VkDisplayPlanePropertiesKHRConstructor {
  readonly prototype: VkDisplayPlanePropertiesKHR;
  new(param?: VkDisplayPlanePropertiesKHRInitializer | null): VkDisplayPlanePropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplayPlanePropertiesKHR: VkDisplayPlanePropertiesKHRConstructor;



  /**
   * 
   */
interface VkDisplayPropertiesKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly display: VkDisplayKHR | null;

    /**
     *
     */
    readonly displayName: string | null;

    /**
     *
     */
    readonly physicalDimensions: VkExtent2D | null;

    /**
     *
     */
    readonly physicalResolution: VkExtent2D | null;

    /**
     *
     */
    readonly supportedTransforms: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly planeReorderPossible: boolean;

    /**
     *
     */
    readonly persistentContent: boolean;

}

declare interface VkDisplayPropertiesKHRInitializer {
  
    /**
     *
     */
    readonly display?: VkDisplayKHR | null;

    /**
     *
     */
    readonly displayName?: string | null;

    /**
     *
     */
    readonly physicalDimensions?: VkExtent2D | null;

    /**
     *
     */
    readonly physicalResolution?: VkExtent2D | null;

    /**
     *
     */
    readonly supportedTransforms?: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly planeReorderPossible?: boolean;

    /**
     *
     */
    readonly persistentContent?: boolean;
}

declare interface VkDisplayPropertiesKHRConstructor {
  readonly prototype: VkDisplayPropertiesKHR;
  new(param?: VkDisplayPropertiesKHRInitializer | null): VkDisplayPropertiesKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDisplayPropertiesKHR: VkDisplayPropertiesKHRConstructor;



  /**
   * 
   */
interface VkSubmitInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    waitSemaphoreCount: number;

    /**
     *
     */
    pWaitSemaphores: VkSemaphore[] | null;

    /**
     *
     */
    pWaitDstStageMask: Int32Array | null;

    /**
     *
     */
    commandBufferCount: number;

    /**
     *
     */
    pCommandBuffers: VkCommandBuffer[] | null;

    /**
     *
     */
    signalSemaphoreCount: number;

    /**
     *
     */
    pSignalSemaphores: VkSemaphore[] | null;

}

declare interface VkSubmitInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    waitSemaphoreCount?: number;

    /**
     *
     */
    pWaitSemaphores?: VkSemaphore[] | null;

    /**
     *
     */
    pWaitDstStageMask?: Int32Array | null;

    /**
     *
     */
    commandBufferCount?: number;

    /**
     *
     */
    pCommandBuffers?: VkCommandBuffer[] | null;

    /**
     *
     */
    signalSemaphoreCount?: number;

    /**
     *
     */
    pSignalSemaphores?: VkSemaphore[] | null;
}

declare interface VkSubmitInfoConstructor {
  readonly prototype: VkSubmitInfo;
  new(param?: VkSubmitInfoInitializer | null): VkSubmitInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSubmitInfo: VkSubmitInfoConstructor;



  /**
   * 
   */
interface VkDispatchIndirectCommand {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    x: number;

    /**
     *
     */
    y: number;

    /**
     *
     */
    z: number;

}

declare interface VkDispatchIndirectCommandInitializer {
  
    /**
     *
     */
    x?: number;

    /**
     *
     */
    y?: number;

    /**
     *
     */
    z?: number;
}

declare interface VkDispatchIndirectCommandConstructor {
  readonly prototype: VkDispatchIndirectCommand;
  new(param?: VkDispatchIndirectCommandInitializer | null): VkDispatchIndirectCommand;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDispatchIndirectCommand: VkDispatchIndirectCommandConstructor;



  /**
   * 
   */
interface VkDrawIndexedIndirectCommand {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    indexCount: number;

    /**
     *
     */
    instanceCount: number;

    /**
     *
     */
    firstIndex: number;

    /**
     *
     */
    vertexOffset: number;

    /**
     *
     */
    firstInstance: number;

}

declare interface VkDrawIndexedIndirectCommandInitializer {
  
    /**
     *
     */
    indexCount?: number;

    /**
     *
     */
    instanceCount?: number;

    /**
     *
     */
    firstIndex?: number;

    /**
     *
     */
    vertexOffset?: number;

    /**
     *
     */
    firstInstance?: number;
}

declare interface VkDrawIndexedIndirectCommandConstructor {
  readonly prototype: VkDrawIndexedIndirectCommand;
  new(param?: VkDrawIndexedIndirectCommandInitializer | null): VkDrawIndexedIndirectCommand;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDrawIndexedIndirectCommand: VkDrawIndexedIndirectCommandConstructor;



  /**
   * 
   */
interface VkDrawIndirectCommand {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    vertexCount: number;

    /**
     *
     */
    instanceCount: number;

    /**
     *
     */
    firstVertex: number;

    /**
     *
     */
    firstInstance: number;

}

declare interface VkDrawIndirectCommandInitializer {
  
    /**
     *
     */
    vertexCount?: number;

    /**
     *
     */
    instanceCount?: number;

    /**
     *
     */
    firstVertex?: number;

    /**
     *
     */
    firstInstance?: number;
}

declare interface VkDrawIndirectCommandConstructor {
  readonly prototype: VkDrawIndirectCommand;
  new(param?: VkDrawIndirectCommandInitializer | null): VkDrawIndirectCommand;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDrawIndirectCommand: VkDrawIndirectCommandConstructor;



  /**
   * 
   */
interface VkFramebufferCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkFramebufferCreateFlagBits;

    /**
     *
     */
    renderPass: VkRenderPass | null;

    /**
     *
     */
    attachmentCount: number;

    /**
     *
     */
    pAttachments: VkImageView[] | null;

    /**
     *
     */
    width: number;

    /**
     *
     */
    height: number;

    /**
     *
     */
    layers: number;

}

declare interface VkFramebufferCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkFramebufferCreateFlagBits;

    /**
     *
     */
    renderPass?: VkRenderPass | null;

    /**
     *
     */
    attachmentCount?: number;

    /**
     *
     */
    pAttachments?: VkImageView[] | null;

    /**
     *
     */
    width?: number;

    /**
     *
     */
    height?: number;

    /**
     *
     */
    layers?: number;
}

declare interface VkFramebufferCreateInfoConstructor {
  readonly prototype: VkFramebufferCreateInfo;
  new(param?: VkFramebufferCreateInfoInitializer | null): VkFramebufferCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkFramebufferCreateInfo: VkFramebufferCreateInfoConstructor;



  /**
   * 
   */
interface VkQueryPoolCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    queryType: VkQueryType;

    /**
     *
     */
    queryCount: number;

    /**
     *
     */
    pipelineStatistics: VkQueryPipelineStatisticFlagBits;

}

declare interface VkQueryPoolCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    queryType?: VkQueryType;

    /**
     *
     */
    queryCount?: number;

    /**
     *
     */
    pipelineStatistics?: VkQueryPipelineStatisticFlagBits;
}

declare interface VkQueryPoolCreateInfoConstructor {
  readonly prototype: VkQueryPoolCreateInfo;
  new(param?: VkQueryPoolCreateInfoInitializer | null): VkQueryPoolCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkQueryPoolCreateInfo: VkQueryPoolCreateInfoConstructor;



  /**
   * 
   */
interface VkSemaphoreCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

}

declare interface VkSemaphoreCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;
}

declare interface VkSemaphoreCreateInfoConstructor {
  readonly prototype: VkSemaphoreCreateInfo;
  new(param?: VkSemaphoreCreateInfoInitializer | null): VkSemaphoreCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSemaphoreCreateInfo: VkSemaphoreCreateInfoConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceLimits {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly maxImageDimension1D: number;

    /**
     *
     */
    readonly maxImageDimension2D: number;

    /**
     *
     */
    readonly maxImageDimension3D: number;

    /**
     *
     */
    readonly maxImageDimensionCube: number;

    /**
     *
     */
    readonly maxImageArrayLayers: number;

    /**
     *
     */
    readonly maxTexelBufferElements: number;

    /**
     *
     */
    readonly maxUniformBufferRange: number;

    /**
     *
     */
    readonly maxStorageBufferRange: number;

    /**
     *
     */
    readonly maxPushConstantsSize: number;

    /**
     *
     */
    readonly maxMemoryAllocationCount: number;

    /**
     *
     */
    readonly maxSamplerAllocationCount: number;

    /**
     *
     */
    readonly bufferImageGranularity: bigint | number;

    /**
     *
     */
    readonly sparseAddressSpaceSize: bigint | number;

    /**
     *
     */
    readonly maxBoundDescriptorSets: number;

    /**
     *
     */
    readonly maxPerStageDescriptorSamplers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUniformBuffers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorStorageBuffers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorSampledImages: number;

    /**
     *
     */
    readonly maxPerStageDescriptorStorageImages: number;

    /**
     *
     */
    readonly maxPerStageDescriptorInputAttachments: number;

    /**
     *
     */
    readonly maxPerStageResources: number;

    /**
     *
     */
    readonly maxDescriptorSetSamplers: number;

    /**
     *
     */
    readonly maxDescriptorSetUniformBuffers: number;

    /**
     *
     */
    readonly maxDescriptorSetUniformBuffersDynamic: number;

    /**
     *
     */
    readonly maxDescriptorSetStorageBuffers: number;

    /**
     *
     */
    readonly maxDescriptorSetStorageBuffersDynamic: number;

    /**
     *
     */
    readonly maxDescriptorSetSampledImages: number;

    /**
     *
     */
    readonly maxDescriptorSetStorageImages: number;

    /**
     *
     */
    readonly maxDescriptorSetInputAttachments: number;

    /**
     *
     */
    readonly maxVertexInputAttributes: number;

    /**
     *
     */
    readonly maxVertexInputBindings: number;

    /**
     *
     */
    readonly maxVertexInputAttributeOffset: number;

    /**
     *
     */
    readonly maxVertexInputBindingStride: number;

    /**
     *
     */
    readonly maxVertexOutputComponents: number;

    /**
     *
     */
    readonly maxTessellationGenerationLevel: number;

    /**
     *
     */
    readonly maxTessellationPatchSize: number;

    /**
     *
     */
    readonly maxTessellationControlPerVertexInputComponents: number;

    /**
     *
     */
    readonly maxTessellationControlPerVertexOutputComponents: number;

    /**
     *
     */
    readonly maxTessellationControlPerPatchOutputComponents: number;

    /**
     *
     */
    readonly maxTessellationControlTotalOutputComponents: number;

    /**
     *
     */
    readonly maxTessellationEvaluationInputComponents: number;

    /**
     *
     */
    readonly maxTessellationEvaluationOutputComponents: number;

    /**
     *
     */
    readonly maxGeometryShaderInvocations: number;

    /**
     *
     */
    readonly maxGeometryInputComponents: number;

    /**
     *
     */
    readonly maxGeometryOutputComponents: number;

    /**
     *
     */
    readonly maxGeometryOutputVertices: number;

    /**
     *
     */
    readonly maxGeometryTotalOutputComponents: number;

    /**
     *
     */
    readonly maxFragmentInputComponents: number;

    /**
     *
     */
    readonly maxFragmentOutputAttachments: number;

    /**
     *
     */
    readonly maxFragmentDualSrcAttachments: number;

    /**
     *
     */
    readonly maxFragmentCombinedOutputResources: number;

    /**
     *
     */
    readonly maxComputeSharedMemorySize: number;

    /**
     *
     */
    readonly maxComputeWorkGroupCount: number[] | null;

    /**
     *
     */
    readonly maxComputeWorkGroupInvocations: number;

    /**
     *
     */
    readonly maxComputeWorkGroupSize: number[] | null;

    /**
     *
     */
    readonly subPixelPrecisionBits: number;

    /**
     *
     */
    readonly subTexelPrecisionBits: number;

    /**
     *
     */
    readonly mipmapPrecisionBits: number;

    /**
     *
     */
    readonly maxDrawIndexedIndexValue: number;

    /**
     *
     */
    readonly maxDrawIndirectCount: number;

    /**
     *
     */
    readonly maxSamplerLodBias: number;

    /**
     *
     */
    readonly maxSamplerAnisotropy: number;

    /**
     *
     */
    readonly maxViewports: number;

    /**
     *
     */
    readonly maxViewportDimensions: number[] | null;

    /**
     *
     */
    readonly viewportBoundsRange: number[] | null;

    /**
     *
     */
    readonly viewportSubPixelBits: number;

    /**
     *
     */
    readonly minMemoryMapAlignment: bigint | number;

    /**
     *
     */
    readonly minTexelBufferOffsetAlignment: bigint | number;

    /**
     *
     */
    readonly minUniformBufferOffsetAlignment: bigint | number;

    /**
     *
     */
    readonly minStorageBufferOffsetAlignment: bigint | number;

    /**
     *
     */
    readonly minTexelOffset: number;

    /**
     *
     */
    readonly maxTexelOffset: number;

    /**
     *
     */
    readonly minTexelGatherOffset: number;

    /**
     *
     */
    readonly maxTexelGatherOffset: number;

    /**
     *
     */
    readonly minInterpolationOffset: number;

    /**
     *
     */
    readonly maxInterpolationOffset: number;

    /**
     *
     */
    readonly subPixelInterpolationOffsetBits: number;

    /**
     *
     */
    readonly maxFramebufferWidth: number;

    /**
     *
     */
    readonly maxFramebufferHeight: number;

    /**
     *
     */
    readonly maxFramebufferLayers: number;

    /**
     *
     */
    readonly framebufferColorSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly framebufferDepthSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly framebufferStencilSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly framebufferNoAttachmentsSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxColorAttachments: number;

    /**
     *
     */
    readonly sampledImageColorSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly sampledImageIntegerSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly sampledImageDepthSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly sampledImageStencilSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly storageImageSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxSampleMaskWords: number;

    /**
     *
     */
    readonly timestampComputeAndGraphics: boolean;

    /**
     *
     */
    readonly timestampPeriod: number;

    /**
     *
     */
    readonly maxClipDistances: number;

    /**
     *
     */
    readonly maxCullDistances: number;

    /**
     *
     */
    readonly maxCombinedClipAndCullDistances: number;

    /**
     *
     */
    readonly discreteQueuePriorities: number;

    /**
     *
     */
    readonly pointSizeRange: number[] | null;

    /**
     *
     */
    readonly lineWidthRange: number[] | null;

    /**
     *
     */
    readonly pointSizeGranularity: number;

    /**
     *
     */
    readonly lineWidthGranularity: number;

    /**
     *
     */
    readonly strictLines: boolean;

    /**
     *
     */
    readonly standardSampleLocations: boolean;

    /**
     *
     */
    readonly optimalBufferCopyOffsetAlignment: bigint | number;

    /**
     *
     */
    readonly optimalBufferCopyRowPitchAlignment: bigint | number;

    /**
     *
     */
    readonly nonCoherentAtomSize: bigint | number;

}

declare interface VkPhysicalDeviceLimitsInitializer {
  
    /**
     *
     */
    readonly maxImageDimension1D?: number;

    /**
     *
     */
    readonly maxImageDimension2D?: number;

    /**
     *
     */
    readonly maxImageDimension3D?: number;

    /**
     *
     */
    readonly maxImageDimensionCube?: number;

    /**
     *
     */
    readonly maxImageArrayLayers?: number;

    /**
     *
     */
    readonly maxTexelBufferElements?: number;

    /**
     *
     */
    readonly maxUniformBufferRange?: number;

    /**
     *
     */
    readonly maxStorageBufferRange?: number;

    /**
     *
     */
    readonly maxPushConstantsSize?: number;

    /**
     *
     */
    readonly maxMemoryAllocationCount?: number;

    /**
     *
     */
    readonly maxSamplerAllocationCount?: number;

    /**
     *
     */
    readonly bufferImageGranularity?: bigint | number;

    /**
     *
     */
    readonly sparseAddressSpaceSize?: bigint | number;

    /**
     *
     */
    readonly maxBoundDescriptorSets?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorSamplers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUniformBuffers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorStorageBuffers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorSampledImages?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorStorageImages?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorInputAttachments?: number;

    /**
     *
     */
    readonly maxPerStageResources?: number;

    /**
     *
     */
    readonly maxDescriptorSetSamplers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUniformBuffers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUniformBuffersDynamic?: number;

    /**
     *
     */
    readonly maxDescriptorSetStorageBuffers?: number;

    /**
     *
     */
    readonly maxDescriptorSetStorageBuffersDynamic?: number;

    /**
     *
     */
    readonly maxDescriptorSetSampledImages?: number;

    /**
     *
     */
    readonly maxDescriptorSetStorageImages?: number;

    /**
     *
     */
    readonly maxDescriptorSetInputAttachments?: number;

    /**
     *
     */
    readonly maxVertexInputAttributes?: number;

    /**
     *
     */
    readonly maxVertexInputBindings?: number;

    /**
     *
     */
    readonly maxVertexInputAttributeOffset?: number;

    /**
     *
     */
    readonly maxVertexInputBindingStride?: number;

    /**
     *
     */
    readonly maxVertexOutputComponents?: number;

    /**
     *
     */
    readonly maxTessellationGenerationLevel?: number;

    /**
     *
     */
    readonly maxTessellationPatchSize?: number;

    /**
     *
     */
    readonly maxTessellationControlPerVertexInputComponents?: number;

    /**
     *
     */
    readonly maxTessellationControlPerVertexOutputComponents?: number;

    /**
     *
     */
    readonly maxTessellationControlPerPatchOutputComponents?: number;

    /**
     *
     */
    readonly maxTessellationControlTotalOutputComponents?: number;

    /**
     *
     */
    readonly maxTessellationEvaluationInputComponents?: number;

    /**
     *
     */
    readonly maxTessellationEvaluationOutputComponents?: number;

    /**
     *
     */
    readonly maxGeometryShaderInvocations?: number;

    /**
     *
     */
    readonly maxGeometryInputComponents?: number;

    /**
     *
     */
    readonly maxGeometryOutputComponents?: number;

    /**
     *
     */
    readonly maxGeometryOutputVertices?: number;

    /**
     *
     */
    readonly maxGeometryTotalOutputComponents?: number;

    /**
     *
     */
    readonly maxFragmentInputComponents?: number;

    /**
     *
     */
    readonly maxFragmentOutputAttachments?: number;

    /**
     *
     */
    readonly maxFragmentDualSrcAttachments?: number;

    /**
     *
     */
    readonly maxFragmentCombinedOutputResources?: number;

    /**
     *
     */
    readonly maxComputeSharedMemorySize?: number;

    /**
     *
     */
    readonly maxComputeWorkGroupCount?: number[] | null;

    /**
     *
     */
    readonly maxComputeWorkGroupInvocations?: number;

    /**
     *
     */
    readonly maxComputeWorkGroupSize?: number[] | null;

    /**
     *
     */
    readonly subPixelPrecisionBits?: number;

    /**
     *
     */
    readonly subTexelPrecisionBits?: number;

    /**
     *
     */
    readonly mipmapPrecisionBits?: number;

    /**
     *
     */
    readonly maxDrawIndexedIndexValue?: number;

    /**
     *
     */
    readonly maxDrawIndirectCount?: number;

    /**
     *
     */
    readonly maxSamplerLodBias?: number;

    /**
     *
     */
    readonly maxSamplerAnisotropy?: number;

    /**
     *
     */
    readonly maxViewports?: number;

    /**
     *
     */
    readonly maxViewportDimensions?: number[] | null;

    /**
     *
     */
    readonly viewportBoundsRange?: number[] | null;

    /**
     *
     */
    readonly viewportSubPixelBits?: number;

    /**
     *
     */
    readonly minMemoryMapAlignment?: bigint | number;

    /**
     *
     */
    readonly minTexelBufferOffsetAlignment?: bigint | number;

    /**
     *
     */
    readonly minUniformBufferOffsetAlignment?: bigint | number;

    /**
     *
     */
    readonly minStorageBufferOffsetAlignment?: bigint | number;

    /**
     *
     */
    readonly minTexelOffset?: number;

    /**
     *
     */
    readonly maxTexelOffset?: number;

    /**
     *
     */
    readonly minTexelGatherOffset?: number;

    /**
     *
     */
    readonly maxTexelGatherOffset?: number;

    /**
     *
     */
    readonly minInterpolationOffset?: number;

    /**
     *
     */
    readonly maxInterpolationOffset?: number;

    /**
     *
     */
    readonly subPixelInterpolationOffsetBits?: number;

    /**
     *
     */
    readonly maxFramebufferWidth?: number;

    /**
     *
     */
    readonly maxFramebufferHeight?: number;

    /**
     *
     */
    readonly maxFramebufferLayers?: number;

    /**
     *
     */
    readonly framebufferColorSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly framebufferDepthSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly framebufferStencilSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly framebufferNoAttachmentsSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxColorAttachments?: number;

    /**
     *
     */
    readonly sampledImageColorSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly sampledImageIntegerSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly sampledImageDepthSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly sampledImageStencilSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly storageImageSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxSampleMaskWords?: number;

    /**
     *
     */
    readonly timestampComputeAndGraphics?: boolean;

    /**
     *
     */
    readonly timestampPeriod?: number;

    /**
     *
     */
    readonly maxClipDistances?: number;

    /**
     *
     */
    readonly maxCullDistances?: number;

    /**
     *
     */
    readonly maxCombinedClipAndCullDistances?: number;

    /**
     *
     */
    readonly discreteQueuePriorities?: number;

    /**
     *
     */
    readonly pointSizeRange?: number[] | null;

    /**
     *
     */
    readonly lineWidthRange?: number[] | null;

    /**
     *
     */
    readonly pointSizeGranularity?: number;

    /**
     *
     */
    readonly lineWidthGranularity?: number;

    /**
     *
     */
    readonly strictLines?: boolean;

    /**
     *
     */
    readonly standardSampleLocations?: boolean;

    /**
     *
     */
    readonly optimalBufferCopyOffsetAlignment?: bigint | number;

    /**
     *
     */
    readonly optimalBufferCopyRowPitchAlignment?: bigint | number;

    /**
     *
     */
    readonly nonCoherentAtomSize?: bigint | number;
}

declare interface VkPhysicalDeviceLimitsConstructor {
  readonly prototype: VkPhysicalDeviceLimits;
  new(param?: VkPhysicalDeviceLimitsInitializer | null): VkPhysicalDeviceLimits;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceLimits: VkPhysicalDeviceLimitsConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceSparseProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly residencyStandard2DBlockShape: boolean;

    /**
     *
     */
    readonly residencyStandard2DMultisampleBlockShape: boolean;

    /**
     *
     */
    readonly residencyStandard3DBlockShape: boolean;

    /**
     *
     */
    readonly residencyAlignedMipSize: boolean;

    /**
     *
     */
    readonly residencyNonResidentStrict: boolean;

}

declare interface VkPhysicalDeviceSparsePropertiesInitializer {
  
    /**
     *
     */
    readonly residencyStandard2DBlockShape?: boolean;

    /**
     *
     */
    readonly residencyStandard2DMultisampleBlockShape?: boolean;

    /**
     *
     */
    readonly residencyStandard3DBlockShape?: boolean;

    /**
     *
     */
    readonly residencyAlignedMipSize?: boolean;

    /**
     *
     */
    readonly residencyNonResidentStrict?: boolean;
}

declare interface VkPhysicalDeviceSparsePropertiesConstructor {
  readonly prototype: VkPhysicalDeviceSparseProperties;
  new(param?: VkPhysicalDeviceSparsePropertiesInitializer | null): VkPhysicalDeviceSparseProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceSparseProperties: VkPhysicalDeviceSparsePropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceFeatures {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    robustBufferAccess: boolean;

    /**
     *
     */
    fullDrawIndexUint32: boolean;

    /**
     *
     */
    imageCubeArray: boolean;

    /**
     *
     */
    independentBlend: boolean;

    /**
     *
     */
    geometryShader: boolean;

    /**
     *
     */
    tessellationShader: boolean;

    /**
     *
     */
    sampleRateShading: boolean;

    /**
     *
     */
    dualSrcBlend: boolean;

    /**
     *
     */
    logicOp: boolean;

    /**
     *
     */
    multiDrawIndirect: boolean;

    /**
     *
     */
    drawIndirectFirstInstance: boolean;

    /**
     *
     */
    depthClamp: boolean;

    /**
     *
     */
    depthBiasClamp: boolean;

    /**
     *
     */
    fillModeNonSolid: boolean;

    /**
     *
     */
    depthBounds: boolean;

    /**
     *
     */
    wideLines: boolean;

    /**
     *
     */
    largePoints: boolean;

    /**
     *
     */
    alphaToOne: boolean;

    /**
     *
     */
    multiViewport: boolean;

    /**
     *
     */
    samplerAnisotropy: boolean;

    /**
     *
     */
    textureCompressionETC2: boolean;

    /**
     *
     */
    textureCompressionASTC_LDR: boolean;

    /**
     *
     */
    textureCompressionBC: boolean;

    /**
     *
     */
    occlusionQueryPrecise: boolean;

    /**
     *
     */
    pipelineStatisticsQuery: boolean;

    /**
     *
     */
    vertexPipelineStoresAndAtomics: boolean;

    /**
     *
     */
    fragmentStoresAndAtomics: boolean;

    /**
     *
     */
    shaderTessellationAndGeometryPointSize: boolean;

    /**
     *
     */
    shaderImageGatherExtended: boolean;

    /**
     *
     */
    shaderStorageImageExtendedFormats: boolean;

    /**
     *
     */
    shaderStorageImageMultisample: boolean;

    /**
     *
     */
    shaderStorageImageReadWithoutFormat: boolean;

    /**
     *
     */
    shaderStorageImageWriteWithoutFormat: boolean;

    /**
     *
     */
    shaderUniformBufferArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderSampledImageArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderStorageBufferArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderStorageImageArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderClipDistance: boolean;

    /**
     *
     */
    shaderCullDistance: boolean;

    /**
     *
     */
    shaderFloat64: boolean;

    /**
     *
     */
    shaderInt64: boolean;

    /**
     *
     */
    shaderInt16: boolean;

    /**
     *
     */
    shaderResourceResidency: boolean;

    /**
     *
     */
    shaderResourceMinLod: boolean;

    /**
     *
     */
    sparseBinding: boolean;

    /**
     *
     */
    sparseResidencyBuffer: boolean;

    /**
     *
     */
    sparseResidencyImage2D: boolean;

    /**
     *
     */
    sparseResidencyImage3D: boolean;

    /**
     *
     */
    sparseResidency2Samples: boolean;

    /**
     *
     */
    sparseResidency4Samples: boolean;

    /**
     *
     */
    sparseResidency8Samples: boolean;

    /**
     *
     */
    sparseResidency16Samples: boolean;

    /**
     *
     */
    sparseResidencyAliased: boolean;

    /**
     *
     */
    variableMultisampleRate: boolean;

    /**
     *
     */
    inheritedQueries: boolean;

}

declare interface VkPhysicalDeviceFeaturesInitializer {
  
    /**
     *
     */
    robustBufferAccess?: boolean;

    /**
     *
     */
    fullDrawIndexUint32?: boolean;

    /**
     *
     */
    imageCubeArray?: boolean;

    /**
     *
     */
    independentBlend?: boolean;

    /**
     *
     */
    geometryShader?: boolean;

    /**
     *
     */
    tessellationShader?: boolean;

    /**
     *
     */
    sampleRateShading?: boolean;

    /**
     *
     */
    dualSrcBlend?: boolean;

    /**
     *
     */
    logicOp?: boolean;

    /**
     *
     */
    multiDrawIndirect?: boolean;

    /**
     *
     */
    drawIndirectFirstInstance?: boolean;

    /**
     *
     */
    depthClamp?: boolean;

    /**
     *
     */
    depthBiasClamp?: boolean;

    /**
     *
     */
    fillModeNonSolid?: boolean;

    /**
     *
     */
    depthBounds?: boolean;

    /**
     *
     */
    wideLines?: boolean;

    /**
     *
     */
    largePoints?: boolean;

    /**
     *
     */
    alphaToOne?: boolean;

    /**
     *
     */
    multiViewport?: boolean;

    /**
     *
     */
    samplerAnisotropy?: boolean;

    /**
     *
     */
    textureCompressionETC2?: boolean;

    /**
     *
     */
    textureCompressionASTC_LDR?: boolean;

    /**
     *
     */
    textureCompressionBC?: boolean;

    /**
     *
     */
    occlusionQueryPrecise?: boolean;

    /**
     *
     */
    pipelineStatisticsQuery?: boolean;

    /**
     *
     */
    vertexPipelineStoresAndAtomics?: boolean;

    /**
     *
     */
    fragmentStoresAndAtomics?: boolean;

    /**
     *
     */
    shaderTessellationAndGeometryPointSize?: boolean;

    /**
     *
     */
    shaderImageGatherExtended?: boolean;

    /**
     *
     */
    shaderStorageImageExtendedFormats?: boolean;

    /**
     *
     */
    shaderStorageImageMultisample?: boolean;

    /**
     *
     */
    shaderStorageImageReadWithoutFormat?: boolean;

    /**
     *
     */
    shaderStorageImageWriteWithoutFormat?: boolean;

    /**
     *
     */
    shaderUniformBufferArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderSampledImageArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderStorageBufferArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderStorageImageArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderClipDistance?: boolean;

    /**
     *
     */
    shaderCullDistance?: boolean;

    /**
     *
     */
    shaderFloat64?: boolean;

    /**
     *
     */
    shaderInt64?: boolean;

    /**
     *
     */
    shaderInt16?: boolean;

    /**
     *
     */
    shaderResourceResidency?: boolean;

    /**
     *
     */
    shaderResourceMinLod?: boolean;

    /**
     *
     */
    sparseBinding?: boolean;

    /**
     *
     */
    sparseResidencyBuffer?: boolean;

    /**
     *
     */
    sparseResidencyImage2D?: boolean;

    /**
     *
     */
    sparseResidencyImage3D?: boolean;

    /**
     *
     */
    sparseResidency2Samples?: boolean;

    /**
     *
     */
    sparseResidency4Samples?: boolean;

    /**
     *
     */
    sparseResidency8Samples?: boolean;

    /**
     *
     */
    sparseResidency16Samples?: boolean;

    /**
     *
     */
    sparseResidencyAliased?: boolean;

    /**
     *
     */
    variableMultisampleRate?: boolean;

    /**
     *
     */
    inheritedQueries?: boolean;
}

declare interface VkPhysicalDeviceFeaturesConstructor {
  readonly prototype: VkPhysicalDeviceFeatures;
  new(param?: VkPhysicalDeviceFeaturesInitializer | null): VkPhysicalDeviceFeatures;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceFeatures: VkPhysicalDeviceFeaturesConstructor;



  /**
   * 
   */
interface VkFenceCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkFenceCreateFlagBits;

}

declare interface VkFenceCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkFenceCreateFlagBits;
}

declare interface VkFenceCreateInfoConstructor {
  readonly prototype: VkFenceCreateInfo;
  new(param?: VkFenceCreateInfoInitializer | null): VkFenceCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkFenceCreateInfo: VkFenceCreateInfoConstructor;



  /**
   * 
   */
interface VkEventCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

}

declare interface VkEventCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;
}

declare interface VkEventCreateInfoConstructor {
  readonly prototype: VkEventCreateInfo;
  new(param?: VkEventCreateInfoInitializer | null): VkEventCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkEventCreateInfo: VkEventCreateInfoConstructor;



  /**
   * 
   */
interface VkRenderPassCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkRenderPassCreateFlagBits;

    /**
     *
     */
    attachmentCount: number;

    /**
     *
     */
    pAttachments: VkAttachmentDescription[] | null;

    /**
     *
     */
    subpassCount: number;

    /**
     *
     */
    pSubpasses: VkSubpassDescription[] | null;

    /**
     *
     */
    dependencyCount: number;

    /**
     *
     */
    pDependencies: VkSubpassDependency[] | null;

}

declare interface VkRenderPassCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkRenderPassCreateFlagBits;

    /**
     *
     */
    attachmentCount?: number;

    /**
     *
     */
    pAttachments?: VkAttachmentDescription[] | null;

    /**
     *
     */
    subpassCount?: number;

    /**
     *
     */
    pSubpasses?: VkSubpassDescription[] | null;

    /**
     *
     */
    dependencyCount?: number;

    /**
     *
     */
    pDependencies?: VkSubpassDependency[] | null;
}

declare interface VkRenderPassCreateInfoConstructor {
  readonly prototype: VkRenderPassCreateInfo;
  new(param?: VkRenderPassCreateInfoInitializer | null): VkRenderPassCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRenderPassCreateInfo: VkRenderPassCreateInfoConstructor;



  /**
   * 
   */
interface VkSubpassDependency {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    srcSubpass: number;

    /**
     *
     */
    dstSubpass: number;

    /**
     *
     */
    srcStageMask: VkPipelineStageFlagBits;

    /**
     *
     */
    dstStageMask: VkPipelineStageFlagBits;

    /**
     *
     */
    srcAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dependencyFlags: VkDependencyFlagBits;

}

declare interface VkSubpassDependencyInitializer {
  
    /**
     *
     */
    srcSubpass?: number;

    /**
     *
     */
    dstSubpass?: number;

    /**
     *
     */
    srcStageMask?: VkPipelineStageFlagBits;

    /**
     *
     */
    dstStageMask?: VkPipelineStageFlagBits;

    /**
     *
     */
    srcAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dependencyFlags?: VkDependencyFlagBits;
}

declare interface VkSubpassDependencyConstructor {
  readonly prototype: VkSubpassDependency;
  new(param?: VkSubpassDependencyInitializer | null): VkSubpassDependency;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSubpassDependency: VkSubpassDependencyConstructor;



  /**
   * 
   */
interface VkSubpassDescription {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    flags: VkSubpassDescriptionFlagBits;

    /**
     *
     */
    pipelineBindPoint: VkPipelineBindPoint;

    /**
     *
     */
    inputAttachmentCount: number;

    /**
     *
     */
    pInputAttachments: VkAttachmentReference[] | null;

    /**
     *
     */
    colorAttachmentCount: number;

    /**
     *
     */
    pColorAttachments: VkAttachmentReference[] | null;

    /**
     *
     */
    pResolveAttachments: VkAttachmentReference[] | null;

    /**
     *
     */
    pDepthStencilAttachment: VkAttachmentReference | null;

    /**
     *
     */
    preserveAttachmentCount: number;

    /**
     *
     */
    pPreserveAttachments: Uint32Array | null;

}

declare interface VkSubpassDescriptionInitializer {
  
    /**
     *
     */
    flags?: VkSubpassDescriptionFlagBits;

    /**
     *
     */
    pipelineBindPoint?: VkPipelineBindPoint;

    /**
     *
     */
    inputAttachmentCount?: number;

    /**
     *
     */
    pInputAttachments?: VkAttachmentReference[] | null;

    /**
     *
     */
    colorAttachmentCount?: number;

    /**
     *
     */
    pColorAttachments?: VkAttachmentReference[] | null;

    /**
     *
     */
    pResolveAttachments?: VkAttachmentReference[] | null;

    /**
     *
     */
    pDepthStencilAttachment?: VkAttachmentReference | null;

    /**
     *
     */
    preserveAttachmentCount?: number;

    /**
     *
     */
    pPreserveAttachments?: Uint32Array | null;
}

declare interface VkSubpassDescriptionConstructor {
  readonly prototype: VkSubpassDescription;
  new(param?: VkSubpassDescriptionInitializer | null): VkSubpassDescription;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSubpassDescription: VkSubpassDescriptionConstructor;



  /**
   * 
   */
interface VkAttachmentReference {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    attachment: number;

    /**
     *
     */
    layout: VkImageLayout;

}

declare interface VkAttachmentReferenceInitializer {
  
    /**
     *
     */
    attachment?: number;

    /**
     *
     */
    layout?: VkImageLayout;
}

declare interface VkAttachmentReferenceConstructor {
  readonly prototype: VkAttachmentReference;
  new(param?: VkAttachmentReferenceInitializer | null): VkAttachmentReference;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAttachmentReference: VkAttachmentReferenceConstructor;



  /**
   * 
   */
interface VkAttachmentDescription {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    flags: VkAttachmentDescriptionFlagBits;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    samples: VkSampleCountFlagBits;

    /**
     *
     */
    loadOp: VkAttachmentLoadOp;

    /**
     *
     */
    storeOp: VkAttachmentStoreOp;

    /**
     *
     */
    stencilLoadOp: VkAttachmentLoadOp;

    /**
     *
     */
    stencilStoreOp: VkAttachmentStoreOp;

    /**
     *
     */
    initialLayout: VkImageLayout;

    /**
     *
     */
    finalLayout: VkImageLayout;

}

declare interface VkAttachmentDescriptionInitializer {
  
    /**
     *
     */
    flags?: VkAttachmentDescriptionFlagBits;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    samples?: VkSampleCountFlagBits;

    /**
     *
     */
    loadOp?: VkAttachmentLoadOp;

    /**
     *
     */
    storeOp?: VkAttachmentStoreOp;

    /**
     *
     */
    stencilLoadOp?: VkAttachmentLoadOp;

    /**
     *
     */
    stencilStoreOp?: VkAttachmentStoreOp;

    /**
     *
     */
    initialLayout?: VkImageLayout;

    /**
     *
     */
    finalLayout?: VkImageLayout;
}

declare interface VkAttachmentDescriptionConstructor {
  readonly prototype: VkAttachmentDescription;
  new(param?: VkAttachmentDescriptionInitializer | null): VkAttachmentDescription;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAttachmentDescription: VkAttachmentDescriptionConstructor;



  /**
   * 
   */
interface VkClearAttachment {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    aspectMask: VkImageAspectFlagBits;

    /**
     *
     */
    colorAttachment: number;

    /**
     *
     */
    clearValue: VkClearValue | null;

}

declare interface VkClearAttachmentInitializer {
  
    /**
     *
     */
    aspectMask?: VkImageAspectFlagBits;

    /**
     *
     */
    colorAttachment?: number;

    /**
     *
     */
    clearValue?: VkClearValue | null;
}

declare interface VkClearAttachmentConstructor {
  readonly prototype: VkClearAttachment;
  new(param?: VkClearAttachmentInitializer | null): VkClearAttachment;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkClearAttachment: VkClearAttachmentConstructor;



  /**
   * 
   */
interface VkClearDepthStencilValue {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    depth: number;

    /**
     *
     */
    stencil: number;

}

declare interface VkClearDepthStencilValueInitializer {
  
    /**
     *
     */
    depth?: number;

    /**
     *
     */
    stencil?: number;
}

declare interface VkClearDepthStencilValueConstructor {
  readonly prototype: VkClearDepthStencilValue;
  new(param?: VkClearDepthStencilValueInitializer | null): VkClearDepthStencilValue;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkClearDepthStencilValue: VkClearDepthStencilValueConstructor;



  /**
   * 
   */
interface VkRenderPassBeginInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    renderPass: VkRenderPass | null;

    /**
     *
     */
    framebuffer: VkFramebuffer | null;

    /**
     *
     */
    renderArea: VkRect2D | null;

    /**
     *
     */
    clearValueCount: number;

    /**
     *
     */
    pClearValues: VkClearValue[] | null;

}

declare interface VkRenderPassBeginInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    renderPass?: VkRenderPass | null;

    /**
     *
     */
    framebuffer?: VkFramebuffer | null;

    /**
     *
     */
    renderArea?: VkRect2D | null;

    /**
     *
     */
    clearValueCount?: number;

    /**
     *
     */
    pClearValues?: VkClearValue[] | null;
}

declare interface VkRenderPassBeginInfoConstructor {
  readonly prototype: VkRenderPassBeginInfo;
  new(param?: VkRenderPassBeginInfoInitializer | null): VkRenderPassBeginInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRenderPassBeginInfo: VkRenderPassBeginInfoConstructor;



  /**
   * 
   */
interface VkCommandBufferBeginInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkCommandBufferUsageFlagBits;

    /**
     *
     */
    pInheritanceInfo: VkCommandBufferInheritanceInfo | null;

}

declare interface VkCommandBufferBeginInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkCommandBufferUsageFlagBits;

    /**
     *
     */
    pInheritanceInfo?: VkCommandBufferInheritanceInfo | null;
}

declare interface VkCommandBufferBeginInfoConstructor {
  readonly prototype: VkCommandBufferBeginInfo;
  new(param?: VkCommandBufferBeginInfoInitializer | null): VkCommandBufferBeginInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCommandBufferBeginInfo: VkCommandBufferBeginInfoConstructor;



  /**
   * 
   */
interface VkCommandBufferInheritanceInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    renderPass: VkRenderPass | null;

    /**
     *
     */
    subpass: number;

    /**
     *
     */
    framebuffer: VkFramebuffer | null;

    /**
     *
     */
    occlusionQueryEnable: boolean;

    /**
     *
     */
    queryFlags: VkQueryControlFlagBits;

    /**
     *
     */
    pipelineStatistics: VkQueryPipelineStatisticFlagBits;

}

declare interface VkCommandBufferInheritanceInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    renderPass?: VkRenderPass | null;

    /**
     *
     */
    subpass?: number;

    /**
     *
     */
    framebuffer?: VkFramebuffer | null;

    /**
     *
     */
    occlusionQueryEnable?: boolean;

    /**
     *
     */
    queryFlags?: VkQueryControlFlagBits;

    /**
     *
     */
    pipelineStatistics?: VkQueryPipelineStatisticFlagBits;
}

declare interface VkCommandBufferInheritanceInfoConstructor {
  readonly prototype: VkCommandBufferInheritanceInfo;
  new(param?: VkCommandBufferInheritanceInfoInitializer | null): VkCommandBufferInheritanceInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCommandBufferInheritanceInfo: VkCommandBufferInheritanceInfoConstructor;



  /**
   * 
   */
interface VkCommandBufferAllocateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    commandPool: VkCommandPool | null;

    /**
     *
     */
    level: VkCommandBufferLevel;

    /**
     *
     */
    commandBufferCount: number;

}

declare interface VkCommandBufferAllocateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    commandPool?: VkCommandPool | null;

    /**
     *
     */
    level?: VkCommandBufferLevel;

    /**
     *
     */
    commandBufferCount?: number;
}

declare interface VkCommandBufferAllocateInfoConstructor {
  readonly prototype: VkCommandBufferAllocateInfo;
  new(param?: VkCommandBufferAllocateInfoInitializer | null): VkCommandBufferAllocateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCommandBufferAllocateInfo: VkCommandBufferAllocateInfoConstructor;



  /**
   * 
   */
interface VkCommandPoolCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkCommandPoolCreateFlagBits;

    /**
     *
     */
    queueFamilyIndex: number;

}

declare interface VkCommandPoolCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkCommandPoolCreateFlagBits;

    /**
     *
     */
    queueFamilyIndex?: number;
}

declare interface VkCommandPoolCreateInfoConstructor {
  readonly prototype: VkCommandPoolCreateInfo;
  new(param?: VkCommandPoolCreateInfoInitializer | null): VkCommandPoolCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCommandPoolCreateInfo: VkCommandPoolCreateInfoConstructor;



  /**
   * 
   */
interface VkSamplerCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkSamplerCreateFlagBits;

    /**
     *
     */
    magFilter: VkFilter;

    /**
     *
     */
    minFilter: VkFilter;

    /**
     *
     */
    mipmapMode: VkSamplerMipmapMode;

    /**
     *
     */
    addressModeU: VkSamplerAddressMode;

    /**
     *
     */
    addressModeV: VkSamplerAddressMode;

    /**
     *
     */
    addressModeW: VkSamplerAddressMode;

    /**
     *
     */
    mipLodBias: number;

    /**
     *
     */
    anisotropyEnable: boolean;

    /**
     *
     */
    maxAnisotropy: number;

    /**
     *
     */
    compareEnable: boolean;

    /**
     *
     */
    compareOp: VkCompareOp;

    /**
     *
     */
    minLod: number;

    /**
     *
     */
    maxLod: number;

    /**
     *
     */
    borderColor: VkBorderColor;

    /**
     *
     */
    unnormalizedCoordinates: boolean;

}

declare interface VkSamplerCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkSamplerCreateFlagBits;

    /**
     *
     */
    magFilter?: VkFilter;

    /**
     *
     */
    minFilter?: VkFilter;

    /**
     *
     */
    mipmapMode?: VkSamplerMipmapMode;

    /**
     *
     */
    addressModeU?: VkSamplerAddressMode;

    /**
     *
     */
    addressModeV?: VkSamplerAddressMode;

    /**
     *
     */
    addressModeW?: VkSamplerAddressMode;

    /**
     *
     */
    mipLodBias?: number;

    /**
     *
     */
    anisotropyEnable?: boolean;

    /**
     *
     */
    maxAnisotropy?: number;

    /**
     *
     */
    compareEnable?: boolean;

    /**
     *
     */
    compareOp?: VkCompareOp;

    /**
     *
     */
    minLod?: number;

    /**
     *
     */
    maxLod?: number;

    /**
     *
     */
    borderColor?: VkBorderColor;

    /**
     *
     */
    unnormalizedCoordinates?: boolean;
}

declare interface VkSamplerCreateInfoConstructor {
  readonly prototype: VkSamplerCreateInfo;
  new(param?: VkSamplerCreateInfoInitializer | null): VkSamplerCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSamplerCreateInfo: VkSamplerCreateInfoConstructor;



  /**
   * 
   */
interface VkPipelineLayoutCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    setLayoutCount: number;

    /**
     *
     */
    pSetLayouts: VkDescriptorSetLayout[] | null;

    /**
     *
     */
    pushConstantRangeCount: number;

    /**
     *
     */
    pPushConstantRanges: VkPushConstantRange[] | null;

}

declare interface VkPipelineLayoutCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    setLayoutCount?: number;

    /**
     *
     */
    pSetLayouts?: VkDescriptorSetLayout[] | null;

    /**
     *
     */
    pushConstantRangeCount?: number;

    /**
     *
     */
    pPushConstantRanges?: VkPushConstantRange[] | null;
}

declare interface VkPipelineLayoutCreateInfoConstructor {
  readonly prototype: VkPipelineLayoutCreateInfo;
  new(param?: VkPipelineLayoutCreateInfoInitializer | null): VkPipelineLayoutCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineLayoutCreateInfo: VkPipelineLayoutCreateInfoConstructor;



  /**
   * 
   */
interface VkPushConstantRange {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    stageFlags: VkShaderStageFlagBits;

    /**
     *
     */
    offset: number;

    /**
     *
     */
    size: number;

}

declare interface VkPushConstantRangeInitializer {
  
    /**
     *
     */
    stageFlags?: VkShaderStageFlagBits;

    /**
     *
     */
    offset?: number;

    /**
     *
     */
    size?: number;
}

declare interface VkPushConstantRangeConstructor {
  readonly prototype: VkPushConstantRange;
  new(param?: VkPushConstantRangeInitializer | null): VkPushConstantRange;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPushConstantRange: VkPushConstantRangeConstructor;



  /**
   * 
   */
interface VkPipelineCacheCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkPipelineCacheCreateFlagBits;

    /**
     *
     */
    initialDataSize: bigint | number;

    /**
     *
     */
    pInitialData: ArrayBuffer | null;

}

declare interface VkPipelineCacheCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkPipelineCacheCreateFlagBits;

    /**
     *
     */
    initialDataSize?: bigint | number;

    /**
     *
     */
    pInitialData?: ArrayBuffer | null;
}

declare interface VkPipelineCacheCreateInfoConstructor {
  readonly prototype: VkPipelineCacheCreateInfo;
  new(param?: VkPipelineCacheCreateInfoInitializer | null): VkPipelineCacheCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineCacheCreateInfo: VkPipelineCacheCreateInfoConstructor;



  /**
   * 
   */
interface VkGraphicsPipelineCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkPipelineCreateFlagBits;

    /**
     *
     */
    stageCount: number;

    /**
     *
     */
    pStages: VkPipelineShaderStageCreateInfo[] | null;

    /**
     *
     */
    pVertexInputState: VkPipelineVertexInputStateCreateInfo | null;

    /**
     *
     */
    pInputAssemblyState: VkPipelineInputAssemblyStateCreateInfo | null;

    /**
     *
     */
    pTessellationState: VkPipelineTessellationStateCreateInfo | null;

    /**
     *
     */
    pViewportState: VkPipelineViewportStateCreateInfo | null;

    /**
     *
     */
    pRasterizationState: VkPipelineRasterizationStateCreateInfo | null;

    /**
     *
     */
    pMultisampleState: VkPipelineMultisampleStateCreateInfo | null;

    /**
     *
     */
    pDepthStencilState: VkPipelineDepthStencilStateCreateInfo | null;

    /**
     *
     */
    pColorBlendState: VkPipelineColorBlendStateCreateInfo | null;

    /**
     *
     */
    pDynamicState: VkPipelineDynamicStateCreateInfo | null;

    /**
     *
     */
    layout: VkPipelineLayout | null;

    /**
     *
     */
    renderPass: VkRenderPass | null;

    /**
     *
     */
    subpass: number;

    /**
     *
     */
    basePipelineHandle: VkPipeline | null;

    /**
     *
     */
    basePipelineIndex: number;

}

declare interface VkGraphicsPipelineCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkPipelineCreateFlagBits;

    /**
     *
     */
    stageCount?: number;

    /**
     *
     */
    pStages?: VkPipelineShaderStageCreateInfo[] | null;

    /**
     *
     */
    pVertexInputState?: VkPipelineVertexInputStateCreateInfo | null;

    /**
     *
     */
    pInputAssemblyState?: VkPipelineInputAssemblyStateCreateInfo | null;

    /**
     *
     */
    pTessellationState?: VkPipelineTessellationStateCreateInfo | null;

    /**
     *
     */
    pViewportState?: VkPipelineViewportStateCreateInfo | null;

    /**
     *
     */
    pRasterizationState?: VkPipelineRasterizationStateCreateInfo | null;

    /**
     *
     */
    pMultisampleState?: VkPipelineMultisampleStateCreateInfo | null;

    /**
     *
     */
    pDepthStencilState?: VkPipelineDepthStencilStateCreateInfo | null;

    /**
     *
     */
    pColorBlendState?: VkPipelineColorBlendStateCreateInfo | null;

    /**
     *
     */
    pDynamicState?: VkPipelineDynamicStateCreateInfo | null;

    /**
     *
     */
    layout?: VkPipelineLayout | null;

    /**
     *
     */
    renderPass?: VkRenderPass | null;

    /**
     *
     */
    subpass?: number;

    /**
     *
     */
    basePipelineHandle?: VkPipeline | null;

    /**
     *
     */
    basePipelineIndex?: number;
}

declare interface VkGraphicsPipelineCreateInfoConstructor {
  readonly prototype: VkGraphicsPipelineCreateInfo;
  new(param?: VkGraphicsPipelineCreateInfoInitializer | null): VkGraphicsPipelineCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkGraphicsPipelineCreateInfo: VkGraphicsPipelineCreateInfoConstructor;



  /**
   * 
   */
interface VkPipelineDepthStencilStateCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    depthTestEnable: boolean;

    /**
     *
     */
    depthWriteEnable: boolean;

    /**
     *
     */
    depthCompareOp: VkCompareOp;

    /**
     *
     */
    depthBoundsTestEnable: boolean;

    /**
     *
     */
    stencilTestEnable: boolean;

    /**
     *
     */
    front: VkStencilOpState | null;

    /**
     *
     */
    back: VkStencilOpState | null;

    /**
     *
     */
    minDepthBounds: number;

    /**
     *
     */
    maxDepthBounds: number;

}

declare interface VkPipelineDepthStencilStateCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    depthTestEnable?: boolean;

    /**
     *
     */
    depthWriteEnable?: boolean;

    /**
     *
     */
    depthCompareOp?: VkCompareOp;

    /**
     *
     */
    depthBoundsTestEnable?: boolean;

    /**
     *
     */
    stencilTestEnable?: boolean;

    /**
     *
     */
    front?: VkStencilOpState | null;

    /**
     *
     */
    back?: VkStencilOpState | null;

    /**
     *
     */
    minDepthBounds?: number;

    /**
     *
     */
    maxDepthBounds?: number;
}

declare interface VkPipelineDepthStencilStateCreateInfoConstructor {
  readonly prototype: VkPipelineDepthStencilStateCreateInfo;
  new(param?: VkPipelineDepthStencilStateCreateInfoInitializer | null): VkPipelineDepthStencilStateCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineDepthStencilStateCreateInfo: VkPipelineDepthStencilStateCreateInfoConstructor;



  /**
   * 
   */
interface VkStencilOpState {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    failOp: VkStencilOp;

    /**
     *
     */
    passOp: VkStencilOp;

    /**
     *
     */
    depthFailOp: VkStencilOp;

    /**
     *
     */
    compareOp: VkCompareOp;

    /**
     *
     */
    compareMask: number;

    /**
     *
     */
    writeMask: number;

    /**
     *
     */
    reference: number;

}

declare interface VkStencilOpStateInitializer {
  
    /**
     *
     */
    failOp?: VkStencilOp;

    /**
     *
     */
    passOp?: VkStencilOp;

    /**
     *
     */
    depthFailOp?: VkStencilOp;

    /**
     *
     */
    compareOp?: VkCompareOp;

    /**
     *
     */
    compareMask?: number;

    /**
     *
     */
    writeMask?: number;

    /**
     *
     */
    reference?: number;
}

declare interface VkStencilOpStateConstructor {
  readonly prototype: VkStencilOpState;
  new(param?: VkStencilOpStateInitializer | null): VkStencilOpState;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkStencilOpState: VkStencilOpStateConstructor;



  /**
   * 
   */
interface VkPipelineDynamicStateCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    dynamicStateCount: number;

    /**
     *
     */
    pDynamicStates: Int32Array | null;

}

declare interface VkPipelineDynamicStateCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    dynamicStateCount?: number;

    /**
     *
     */
    pDynamicStates?: Int32Array | null;
}

declare interface VkPipelineDynamicStateCreateInfoConstructor {
  readonly prototype: VkPipelineDynamicStateCreateInfo;
  new(param?: VkPipelineDynamicStateCreateInfoInitializer | null): VkPipelineDynamicStateCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineDynamicStateCreateInfo: VkPipelineDynamicStateCreateInfoConstructor;



  /**
   * 
   */
interface VkPipelineColorBlendStateCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    logicOpEnable: boolean;

    /**
     *
     */
    logicOp: VkLogicOp;

    /**
     *
     */
    attachmentCount: number;

    /**
     *
     */
    pAttachments: VkPipelineColorBlendAttachmentState[] | null;

    /**
     *
     */
    blendConstants: number[] | null;

}

declare interface VkPipelineColorBlendStateCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    logicOpEnable?: boolean;

    /**
     *
     */
    logicOp?: VkLogicOp;

    /**
     *
     */
    attachmentCount?: number;

    /**
     *
     */
    pAttachments?: VkPipelineColorBlendAttachmentState[] | null;

    /**
     *
     */
    blendConstants?: number[] | null;
}

declare interface VkPipelineColorBlendStateCreateInfoConstructor {
  readonly prototype: VkPipelineColorBlendStateCreateInfo;
  new(param?: VkPipelineColorBlendStateCreateInfoInitializer | null): VkPipelineColorBlendStateCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineColorBlendStateCreateInfo: VkPipelineColorBlendStateCreateInfoConstructor;



  /**
   * 
   */
interface VkPipelineColorBlendAttachmentState {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    blendEnable: boolean;

    /**
     *
     */
    srcColorBlendFactor: VkBlendFactor;

    /**
     *
     */
    dstColorBlendFactor: VkBlendFactor;

    /**
     *
     */
    colorBlendOp: VkBlendOp;

    /**
     *
     */
    srcAlphaBlendFactor: VkBlendFactor;

    /**
     *
     */
    dstAlphaBlendFactor: VkBlendFactor;

    /**
     *
     */
    alphaBlendOp: VkBlendOp;

    /**
     *
     */
    colorWriteMask: VkColorComponentFlagBits;

}

declare interface VkPipelineColorBlendAttachmentStateInitializer {
  
    /**
     *
     */
    blendEnable?: boolean;

    /**
     *
     */
    srcColorBlendFactor?: VkBlendFactor;

    /**
     *
     */
    dstColorBlendFactor?: VkBlendFactor;

    /**
     *
     */
    colorBlendOp?: VkBlendOp;

    /**
     *
     */
    srcAlphaBlendFactor?: VkBlendFactor;

    /**
     *
     */
    dstAlphaBlendFactor?: VkBlendFactor;

    /**
     *
     */
    alphaBlendOp?: VkBlendOp;

    /**
     *
     */
    colorWriteMask?: VkColorComponentFlagBits;
}

declare interface VkPipelineColorBlendAttachmentStateConstructor {
  readonly prototype: VkPipelineColorBlendAttachmentState;
  new(param?: VkPipelineColorBlendAttachmentStateInitializer | null): VkPipelineColorBlendAttachmentState;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineColorBlendAttachmentState: VkPipelineColorBlendAttachmentStateConstructor;



  /**
   * 
   */
interface VkPipelineMultisampleStateCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    rasterizationSamples: VkSampleCountFlagBits;

    /**
     *
     */
    sampleShadingEnable: boolean;

    /**
     *
     */
    minSampleShading: number;

    /**
     *
     */
    pSampleMask: Uint32Array | null;

    /**
     *
     */
    alphaToCoverageEnable: boolean;

    /**
     *
     */
    alphaToOneEnable: boolean;

}

declare interface VkPipelineMultisampleStateCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    rasterizationSamples?: VkSampleCountFlagBits;

    /**
     *
     */
    sampleShadingEnable?: boolean;

    /**
     *
     */
    minSampleShading?: number;

    /**
     *
     */
    pSampleMask?: Uint32Array | null;

    /**
     *
     */
    alphaToCoverageEnable?: boolean;

    /**
     *
     */
    alphaToOneEnable?: boolean;
}

declare interface VkPipelineMultisampleStateCreateInfoConstructor {
  readonly prototype: VkPipelineMultisampleStateCreateInfo;
  new(param?: VkPipelineMultisampleStateCreateInfoInitializer | null): VkPipelineMultisampleStateCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineMultisampleStateCreateInfo: VkPipelineMultisampleStateCreateInfoConstructor;



  /**
   * 
   */
interface VkPipelineRasterizationStateCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    depthClampEnable: boolean;

    /**
     *
     */
    rasterizerDiscardEnable: boolean;

    /**
     *
     */
    polygonMode: VkPolygonMode;

    /**
     *
     */
    cullMode: VkCullModeFlagBits;

    /**
     *
     */
    frontFace: VkFrontFace;

    /**
     *
     */
    depthBiasEnable: boolean;

    /**
     *
     */
    depthBiasConstantFactor: number;

    /**
     *
     */
    depthBiasClamp: number;

    /**
     *
     */
    depthBiasSlopeFactor: number;

    /**
     *
     */
    lineWidth: number;

}

declare interface VkPipelineRasterizationStateCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    depthClampEnable?: boolean;

    /**
     *
     */
    rasterizerDiscardEnable?: boolean;

    /**
     *
     */
    polygonMode?: VkPolygonMode;

    /**
     *
     */
    cullMode?: VkCullModeFlagBits;

    /**
     *
     */
    frontFace?: VkFrontFace;

    /**
     *
     */
    depthBiasEnable?: boolean;

    /**
     *
     */
    depthBiasConstantFactor?: number;

    /**
     *
     */
    depthBiasClamp?: number;

    /**
     *
     */
    depthBiasSlopeFactor?: number;

    /**
     *
     */
    lineWidth?: number;
}

declare interface VkPipelineRasterizationStateCreateInfoConstructor {
  readonly prototype: VkPipelineRasterizationStateCreateInfo;
  new(param?: VkPipelineRasterizationStateCreateInfoInitializer | null): VkPipelineRasterizationStateCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineRasterizationStateCreateInfo: VkPipelineRasterizationStateCreateInfoConstructor;



  /**
   * 
   */
interface VkPipelineViewportStateCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    viewportCount: number;

    /**
     *
     */
    pViewports: VkViewport[] | null;

    /**
     *
     */
    scissorCount: number;

    /**
     *
     */
    pScissors: VkRect2D[] | null;

}

declare interface VkPipelineViewportStateCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    viewportCount?: number;

    /**
     *
     */
    pViewports?: VkViewport[] | null;

    /**
     *
     */
    scissorCount?: number;

    /**
     *
     */
    pScissors?: VkRect2D[] | null;
}

declare interface VkPipelineViewportStateCreateInfoConstructor {
  readonly prototype: VkPipelineViewportStateCreateInfo;
  new(param?: VkPipelineViewportStateCreateInfoInitializer | null): VkPipelineViewportStateCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineViewportStateCreateInfo: VkPipelineViewportStateCreateInfoConstructor;



  /**
   * 
   */
interface VkPipelineTessellationStateCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    patchControlPoints: number;

}

declare interface VkPipelineTessellationStateCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    patchControlPoints?: number;
}

declare interface VkPipelineTessellationStateCreateInfoConstructor {
  readonly prototype: VkPipelineTessellationStateCreateInfo;
  new(param?: VkPipelineTessellationStateCreateInfoInitializer | null): VkPipelineTessellationStateCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineTessellationStateCreateInfo: VkPipelineTessellationStateCreateInfoConstructor;



  /**
   * 
   */
interface VkPipelineInputAssemblyStateCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    topology: VkPrimitiveTopology;

    /**
     *
     */
    primitiveRestartEnable: boolean;

}

declare interface VkPipelineInputAssemblyStateCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    topology?: VkPrimitiveTopology;

    /**
     *
     */
    primitiveRestartEnable?: boolean;
}

declare interface VkPipelineInputAssemblyStateCreateInfoConstructor {
  readonly prototype: VkPipelineInputAssemblyStateCreateInfo;
  new(param?: VkPipelineInputAssemblyStateCreateInfoInitializer | null): VkPipelineInputAssemblyStateCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineInputAssemblyStateCreateInfo: VkPipelineInputAssemblyStateCreateInfoConstructor;



  /**
   * 
   */
interface VkPipelineVertexInputStateCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    vertexBindingDescriptionCount: number;

    /**
     *
     */
    pVertexBindingDescriptions: VkVertexInputBindingDescription[] | null;

    /**
     *
     */
    vertexAttributeDescriptionCount: number;

    /**
     *
     */
    pVertexAttributeDescriptions: VkVertexInputAttributeDescription[] | null;

}

declare interface VkPipelineVertexInputStateCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    vertexBindingDescriptionCount?: number;

    /**
     *
     */
    pVertexBindingDescriptions?: VkVertexInputBindingDescription[] | null;

    /**
     *
     */
    vertexAttributeDescriptionCount?: number;

    /**
     *
     */
    pVertexAttributeDescriptions?: VkVertexInputAttributeDescription[] | null;
}

declare interface VkPipelineVertexInputStateCreateInfoConstructor {
  readonly prototype: VkPipelineVertexInputStateCreateInfo;
  new(param?: VkPipelineVertexInputStateCreateInfoInitializer | null): VkPipelineVertexInputStateCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineVertexInputStateCreateInfo: VkPipelineVertexInputStateCreateInfoConstructor;



  /**
   * 
   */
interface VkVertexInputAttributeDescription {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    location: number;

    /**
     *
     */
    binding: number;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    offset: number;

}

declare interface VkVertexInputAttributeDescriptionInitializer {
  
    /**
     *
     */
    location?: number;

    /**
     *
     */
    binding?: number;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    offset?: number;
}

declare interface VkVertexInputAttributeDescriptionConstructor {
  readonly prototype: VkVertexInputAttributeDescription;
  new(param?: VkVertexInputAttributeDescriptionInitializer | null): VkVertexInputAttributeDescription;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkVertexInputAttributeDescription: VkVertexInputAttributeDescriptionConstructor;



  /**
   * 
   */
interface VkVertexInputBindingDescription {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    binding: number;

    /**
     *
     */
    stride: number;

    /**
     *
     */
    inputRate: VkVertexInputRate;

}

declare interface VkVertexInputBindingDescriptionInitializer {
  
    /**
     *
     */
    binding?: number;

    /**
     *
     */
    stride?: number;

    /**
     *
     */
    inputRate?: VkVertexInputRate;
}

declare interface VkVertexInputBindingDescriptionConstructor {
  readonly prototype: VkVertexInputBindingDescription;
  new(param?: VkVertexInputBindingDescriptionInitializer | null): VkVertexInputBindingDescription;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkVertexInputBindingDescription: VkVertexInputBindingDescriptionConstructor;



  /**
   * 
   */
interface VkComputePipelineCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkPipelineCreateFlagBits;

    /**
     *
     */
    stage: VkPipelineShaderStageCreateInfo | null;

    /**
     *
     */
    layout: VkPipelineLayout | null;

    /**
     *
     */
    basePipelineHandle: VkPipeline | null;

    /**
     *
     */
    basePipelineIndex: number;

}

declare interface VkComputePipelineCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkPipelineCreateFlagBits;

    /**
     *
     */
    stage?: VkPipelineShaderStageCreateInfo | null;

    /**
     *
     */
    layout?: VkPipelineLayout | null;

    /**
     *
     */
    basePipelineHandle?: VkPipeline | null;

    /**
     *
     */
    basePipelineIndex?: number;
}

declare interface VkComputePipelineCreateInfoConstructor {
  readonly prototype: VkComputePipelineCreateInfo;
  new(param?: VkComputePipelineCreateInfoInitializer | null): VkComputePipelineCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkComputePipelineCreateInfo: VkComputePipelineCreateInfoConstructor;



  /**
   * 
   */
interface VkPipelineShaderStageCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkPipelineShaderStageCreateFlagBits;

    /**
     *
     */
    stage: VkShaderStageFlagBits;

    /**
     *
     */
    module: VkShaderModule | null;

    /**
     *
     */
    pName: string | null;

    /**
     *
     */
    pSpecializationInfo: VkSpecializationInfo | null;

}

declare interface VkPipelineShaderStageCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkPipelineShaderStageCreateFlagBits;

    /**
     *
     */
    stage?: VkShaderStageFlagBits;

    /**
     *
     */
    module?: VkShaderModule | null;

    /**
     *
     */
    pName?: string | null;

    /**
     *
     */
    pSpecializationInfo?: VkSpecializationInfo | null;
}

declare interface VkPipelineShaderStageCreateInfoConstructor {
  readonly prototype: VkPipelineShaderStageCreateInfo;
  new(param?: VkPipelineShaderStageCreateInfoInitializer | null): VkPipelineShaderStageCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineShaderStageCreateInfo: VkPipelineShaderStageCreateInfoConstructor;



  /**
   * 
   */
interface VkSpecializationInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    mapEntryCount: number;

    /**
     *
     */
    pMapEntries: VkSpecializationMapEntry[] | null;

    /**
     *
     */
    dataSize: bigint | number;

    /**
     *
     */
    pData: ArrayBuffer | null;

}

declare interface VkSpecializationInfoInitializer {
  
    /**
     *
     */
    mapEntryCount?: number;

    /**
     *
     */
    pMapEntries?: VkSpecializationMapEntry[] | null;

    /**
     *
     */
    dataSize?: bigint | number;

    /**
     *
     */
    pData?: ArrayBuffer | null;
}

declare interface VkSpecializationInfoConstructor {
  readonly prototype: VkSpecializationInfo;
  new(param?: VkSpecializationInfoInitializer | null): VkSpecializationInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSpecializationInfo: VkSpecializationInfoConstructor;



  /**
   * 
   */
interface VkSpecializationMapEntry {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    constantID: number;

    /**
     *
     */
    offset: number;

    /**
     *
     */
    size: bigint | number;

}

declare interface VkSpecializationMapEntryInitializer {
  
    /**
     *
     */
    constantID?: number;

    /**
     *
     */
    offset?: number;

    /**
     *
     */
    size?: bigint | number;
}

declare interface VkSpecializationMapEntryConstructor {
  readonly prototype: VkSpecializationMapEntry;
  new(param?: VkSpecializationMapEntryInitializer | null): VkSpecializationMapEntry;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSpecializationMapEntry: VkSpecializationMapEntryConstructor;



  /**
   * 
   */
interface VkDescriptorSetAllocateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    descriptorPool: VkDescriptorPool | null;

    /**
     *
     */
    descriptorSetCount: number;

    /**
     *
     */
    pSetLayouts: VkDescriptorSetLayout[] | null;

}

declare interface VkDescriptorSetAllocateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    descriptorPool?: VkDescriptorPool | null;

    /**
     *
     */
    descriptorSetCount?: number;

    /**
     *
     */
    pSetLayouts?: VkDescriptorSetLayout[] | null;
}

declare interface VkDescriptorSetAllocateInfoConstructor {
  readonly prototype: VkDescriptorSetAllocateInfo;
  new(param?: VkDescriptorSetAllocateInfoInitializer | null): VkDescriptorSetAllocateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorSetAllocateInfo: VkDescriptorSetAllocateInfoConstructor;



  /**
   * 
   */
interface VkDescriptorPoolCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkDescriptorPoolCreateFlagBits;

    /**
     *
     */
    maxSets: number;

    /**
     *
     */
    poolSizeCount: number;

    /**
     *
     */
    pPoolSizes: VkDescriptorPoolSize[] | null;

}

declare interface VkDescriptorPoolCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkDescriptorPoolCreateFlagBits;

    /**
     *
     */
    maxSets?: number;

    /**
     *
     */
    poolSizeCount?: number;

    /**
     *
     */
    pPoolSizes?: VkDescriptorPoolSize[] | null;
}

declare interface VkDescriptorPoolCreateInfoConstructor {
  readonly prototype: VkDescriptorPoolCreateInfo;
  new(param?: VkDescriptorPoolCreateInfoInitializer | null): VkDescriptorPoolCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorPoolCreateInfo: VkDescriptorPoolCreateInfoConstructor;



  /**
   * 
   */
interface VkDescriptorPoolSize {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    type: VkDescriptorType;

    /**
     *
     */
    descriptorCount: number;

}

declare interface VkDescriptorPoolSizeInitializer {
  
    /**
     *
     */
    type?: VkDescriptorType;

    /**
     *
     */
    descriptorCount?: number;
}

declare interface VkDescriptorPoolSizeConstructor {
  readonly prototype: VkDescriptorPoolSize;
  new(param?: VkDescriptorPoolSizeInitializer | null): VkDescriptorPoolSize;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorPoolSize: VkDescriptorPoolSizeConstructor;



  /**
   * 
   */
interface VkDescriptorSetLayoutCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkDescriptorSetLayoutCreateFlagBits;

    /**
     *
     */
    bindingCount: number;

    /**
     *
     */
    pBindings: VkDescriptorSetLayoutBinding[] | null;

}

declare interface VkDescriptorSetLayoutCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkDescriptorSetLayoutCreateFlagBits;

    /**
     *
     */
    bindingCount?: number;

    /**
     *
     */
    pBindings?: VkDescriptorSetLayoutBinding[] | null;
}

declare interface VkDescriptorSetLayoutCreateInfoConstructor {
  readonly prototype: VkDescriptorSetLayoutCreateInfo;
  new(param?: VkDescriptorSetLayoutCreateInfoInitializer | null): VkDescriptorSetLayoutCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorSetLayoutCreateInfo: VkDescriptorSetLayoutCreateInfoConstructor;



  /**
   * 
   */
interface VkDescriptorSetLayoutBinding {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    binding: number;

    /**
     *
     */
    descriptorType: VkDescriptorType;

    /**
     *
     */
    descriptorCount: number;

    /**
     *
     */
    stageFlags: VkShaderStageFlagBits;

    /**
     *
     */
    pImmutableSamplers: VkSampler[] | null;

}

declare interface VkDescriptorSetLayoutBindingInitializer {
  
    /**
     *
     */
    binding?: number;

    /**
     *
     */
    descriptorType?: VkDescriptorType;

    /**
     *
     */
    descriptorCount?: number;

    /**
     *
     */
    stageFlags?: VkShaderStageFlagBits;

    /**
     *
     */
    pImmutableSamplers?: VkSampler[] | null;
}

declare interface VkDescriptorSetLayoutBindingConstructor {
  readonly prototype: VkDescriptorSetLayoutBinding;
  new(param?: VkDescriptorSetLayoutBindingInitializer | null): VkDescriptorSetLayoutBinding;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorSetLayoutBinding: VkDescriptorSetLayoutBindingConstructor;



  /**
   * 
   */
interface VkShaderModuleCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkShaderModuleCreateFlagBits;

    /**
     *
     */
    codeSize: bigint | number;

    /**
     *
     */
    pCode: Uint8Array | null;

}

declare interface VkShaderModuleCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkShaderModuleCreateFlagBits;

    /**
     *
     */
    codeSize?: bigint | number;

    /**
     *
     */
    pCode?: Uint8Array | null;
}

declare interface VkShaderModuleCreateInfoConstructor {
  readonly prototype: VkShaderModuleCreateInfo;
  new(param?: VkShaderModuleCreateInfoInitializer | null): VkShaderModuleCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkShaderModuleCreateInfo: VkShaderModuleCreateInfoConstructor;



  /**
   * 
   */
interface VkImageResolve {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    srcSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffset: VkOffset3D | null;

    /**
     *
     */
    dstSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffset: VkOffset3D | null;

    /**
     *
     */
    extent: VkExtent3D | null;

}

declare interface VkImageResolveInitializer {
  
    /**
     *
     */
    srcSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffset?: VkOffset3D | null;

    /**
     *
     */
    dstSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffset?: VkOffset3D | null;

    /**
     *
     */
    extent?: VkExtent3D | null;
}

declare interface VkImageResolveConstructor {
  readonly prototype: VkImageResolve;
  new(param?: VkImageResolveInitializer | null): VkImageResolve;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageResolve: VkImageResolveConstructor;



  /**
   * 
   */
interface VkBufferImageCopy {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    bufferOffset: bigint | number;

    /**
     *
     */
    bufferRowLength: number;

    /**
     *
     */
    bufferImageHeight: number;

    /**
     *
     */
    imageSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    imageOffset: VkOffset3D | null;

    /**
     *
     */
    imageExtent: VkExtent3D | null;

}

declare interface VkBufferImageCopyInitializer {
  
    /**
     *
     */
    bufferOffset?: bigint | number;

    /**
     *
     */
    bufferRowLength?: number;

    /**
     *
     */
    bufferImageHeight?: number;

    /**
     *
     */
    imageSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    imageOffset?: VkOffset3D | null;

    /**
     *
     */
    imageExtent?: VkExtent3D | null;
}

declare interface VkBufferImageCopyConstructor {
  readonly prototype: VkBufferImageCopy;
  new(param?: VkBufferImageCopyInitializer | null): VkBufferImageCopy;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBufferImageCopy: VkBufferImageCopyConstructor;



  /**
   * 
   */
interface VkImageBlit {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    srcSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffsets: VkOffset3D[] | null;

    /**
     *
     */
    dstSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffsets: VkOffset3D[] | null;

}

declare interface VkImageBlitInitializer {
  
    /**
     *
     */
    srcSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffsets?: VkOffset3D[] | null;

    /**
     *
     */
    dstSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffsets?: VkOffset3D[] | null;
}

declare interface VkImageBlitConstructor {
  readonly prototype: VkImageBlit;
  new(param?: VkImageBlitInitializer | null): VkImageBlit;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageBlit: VkImageBlitConstructor;



  /**
   * 
   */
interface VkImageCopy {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    srcSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffset: VkOffset3D | null;

    /**
     *
     */
    dstSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffset: VkOffset3D | null;

    /**
     *
     */
    extent: VkExtent3D | null;

}

declare interface VkImageCopyInitializer {
  
    /**
     *
     */
    srcSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffset?: VkOffset3D | null;

    /**
     *
     */
    dstSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffset?: VkOffset3D | null;

    /**
     *
     */
    extent?: VkExtent3D | null;
}

declare interface VkImageCopyConstructor {
  readonly prototype: VkImageCopy;
  new(param?: VkImageCopyInitializer | null): VkImageCopy;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageCopy: VkImageCopyConstructor;



  /**
   * 
   */
interface VkBindSparseInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    waitSemaphoreCount: number;

    /**
     *
     */
    pWaitSemaphores: VkSemaphore[] | null;

    /**
     *
     */
    bufferBindCount: number;

    /**
     *
     */
    pBufferBinds: VkSparseBufferMemoryBindInfo[] | null;

    /**
     *
     */
    imageOpaqueBindCount: number;

    /**
     *
     */
    pImageOpaqueBinds: VkSparseImageOpaqueMemoryBindInfo[] | null;

    /**
     *
     */
    imageBindCount: number;

    /**
     *
     */
    pImageBinds: VkSparseImageMemoryBindInfo[] | null;

    /**
     *
     */
    signalSemaphoreCount: number;

    /**
     *
     */
    pSignalSemaphores: VkSemaphore[] | null;

}

declare interface VkBindSparseInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    waitSemaphoreCount?: number;

    /**
     *
     */
    pWaitSemaphores?: VkSemaphore[] | null;

    /**
     *
     */
    bufferBindCount?: number;

    /**
     *
     */
    pBufferBinds?: VkSparseBufferMemoryBindInfo[] | null;

    /**
     *
     */
    imageOpaqueBindCount?: number;

    /**
     *
     */
    pImageOpaqueBinds?: VkSparseImageOpaqueMemoryBindInfo[] | null;

    /**
     *
     */
    imageBindCount?: number;

    /**
     *
     */
    pImageBinds?: VkSparseImageMemoryBindInfo[] | null;

    /**
     *
     */
    signalSemaphoreCount?: number;

    /**
     *
     */
    pSignalSemaphores?: VkSemaphore[] | null;
}

declare interface VkBindSparseInfoConstructor {
  readonly prototype: VkBindSparseInfo;
  new(param?: VkBindSparseInfoInitializer | null): VkBindSparseInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBindSparseInfo: VkBindSparseInfoConstructor;



  /**
   * 
   */
interface VkSparseImageMemoryBindInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    bindCount: number;

    /**
     *
     */
    pBinds: VkSparseImageMemoryBind[] | null;

}

declare interface VkSparseImageMemoryBindInfoInitializer {
  
    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    bindCount?: number;

    /**
     *
     */
    pBinds?: VkSparseImageMemoryBind[] | null;
}

declare interface VkSparseImageMemoryBindInfoConstructor {
  readonly prototype: VkSparseImageMemoryBindInfo;
  new(param?: VkSparseImageMemoryBindInfoInitializer | null): VkSparseImageMemoryBindInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSparseImageMemoryBindInfo: VkSparseImageMemoryBindInfoConstructor;



  /**
   * 
   */
interface VkSparseImageOpaqueMemoryBindInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    bindCount: number;

    /**
     *
     */
    pBinds: VkSparseMemoryBind[] | null;

}

declare interface VkSparseImageOpaqueMemoryBindInfoInitializer {
  
    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    bindCount?: number;

    /**
     *
     */
    pBinds?: VkSparseMemoryBind[] | null;
}

declare interface VkSparseImageOpaqueMemoryBindInfoConstructor {
  readonly prototype: VkSparseImageOpaqueMemoryBindInfo;
  new(param?: VkSparseImageOpaqueMemoryBindInfoInitializer | null): VkSparseImageOpaqueMemoryBindInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSparseImageOpaqueMemoryBindInfo: VkSparseImageOpaqueMemoryBindInfoConstructor;



  /**
   * 
   */
interface VkSparseBufferMemoryBindInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    bindCount: number;

    /**
     *
     */
    pBinds: VkSparseMemoryBind[] | null;

}

declare interface VkSparseBufferMemoryBindInfoInitializer {
  
    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    bindCount?: number;

    /**
     *
     */
    pBinds?: VkSparseMemoryBind[] | null;
}

declare interface VkSparseBufferMemoryBindInfoConstructor {
  readonly prototype: VkSparseBufferMemoryBindInfo;
  new(param?: VkSparseBufferMemoryBindInfoInitializer | null): VkSparseBufferMemoryBindInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSparseBufferMemoryBindInfo: VkSparseBufferMemoryBindInfoConstructor;



  /**
   * 
   */
interface VkSparseImageMemoryBind {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    subresource: VkImageSubresource | null;

    /**
     *
     */
    offset: VkOffset3D | null;

    /**
     *
     */
    extent: VkExtent3D | null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset: bigint | number;

    /**
     *
     */
    flags: VkSparseMemoryBindFlagBits;

}

declare interface VkSparseImageMemoryBindInitializer {
  
    /**
     *
     */
    subresource?: VkImageSubresource | null;

    /**
     *
     */
    offset?: VkOffset3D | null;

    /**
     *
     */
    extent?: VkExtent3D | null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset?: bigint | number;

    /**
     *
     */
    flags?: VkSparseMemoryBindFlagBits;
}

declare interface VkSparseImageMemoryBindConstructor {
  readonly prototype: VkSparseImageMemoryBind;
  new(param?: VkSparseImageMemoryBindInitializer | null): VkSparseImageMemoryBind;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSparseImageMemoryBind: VkSparseImageMemoryBindConstructor;



  /**
   * 
   */
interface VkSparseMemoryBind {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    resourceOffset: bigint | number;

    /**
     *
     */
    size: bigint | number;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset: bigint | number;

    /**
     *
     */
    flags: VkSparseMemoryBindFlagBits;

}

declare interface VkSparseMemoryBindInitializer {
  
    /**
     *
     */
    resourceOffset?: bigint | number;

    /**
     *
     */
    size?: bigint | number;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset?: bigint | number;

    /**
     *
     */
    flags?: VkSparseMemoryBindFlagBits;
}

declare interface VkSparseMemoryBindConstructor {
  readonly prototype: VkSparseMemoryBind;
  new(param?: VkSparseMemoryBindInitializer | null): VkSparseMemoryBind;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSparseMemoryBind: VkSparseMemoryBindConstructor;



  /**
   * 
   */
interface VkBufferCopy {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    srcOffset: bigint | number;

    /**
     *
     */
    dstOffset: bigint | number;

    /**
     *
     */
    size: bigint | number;

}

declare interface VkBufferCopyInitializer {
  
    /**
     *
     */
    srcOffset?: bigint | number;

    /**
     *
     */
    dstOffset?: bigint | number;

    /**
     *
     */
    size?: bigint | number;
}

declare interface VkBufferCopyConstructor {
  readonly prototype: VkBufferCopy;
  new(param?: VkBufferCopyInitializer | null): VkBufferCopy;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBufferCopy: VkBufferCopyConstructor;



  /**
   * 
   */
interface VkImageViewCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkImageViewCreateFlagBits;

    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    viewType: VkImageViewType;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    components: VkComponentMapping | null;

    /**
     *
     */
    subresourceRange: VkImageSubresourceRange | null;

}

declare interface VkImageViewCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkImageViewCreateFlagBits;

    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    viewType?: VkImageViewType;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    components?: VkComponentMapping | null;

    /**
     *
     */
    subresourceRange?: VkImageSubresourceRange | null;
}

declare interface VkImageViewCreateInfoConstructor {
  readonly prototype: VkImageViewCreateInfo;
  new(param?: VkImageViewCreateInfoInitializer | null): VkImageViewCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageViewCreateInfo: VkImageViewCreateInfoConstructor;



  /**
   * 
   */
interface VkSubresourceLayout {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly offset: bigint | number;

    /**
     *
     */
    readonly size: bigint | number;

    /**
     *
     */
    readonly rowPitch: bigint | number;

    /**
     *
     */
    readonly arrayPitch: bigint | number;

    /**
     *
     */
    readonly depthPitch: bigint | number;

}

declare interface VkSubresourceLayoutInitializer {
  
    /**
     *
     */
    readonly offset?: bigint | number;

    /**
     *
     */
    readonly size?: bigint | number;

    /**
     *
     */
    readonly rowPitch?: bigint | number;

    /**
     *
     */
    readonly arrayPitch?: bigint | number;

    /**
     *
     */
    readonly depthPitch?: bigint | number;
}

declare interface VkSubresourceLayoutConstructor {
  readonly prototype: VkSubresourceLayout;
  new(param?: VkSubresourceLayoutInitializer | null): VkSubresourceLayout;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSubresourceLayout: VkSubresourceLayoutConstructor;



  /**
   * 
   */
interface VkImageCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkImageCreateFlagBits;

    /**
     *
     */
    imageType: VkImageType;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    extent: VkExtent3D | null;

    /**
     *
     */
    mipLevels: number;

    /**
     *
     */
    arrayLayers: number;

    /**
     *
     */
    samples: VkSampleCountFlagBits;

    /**
     *
     */
    tiling: VkImageTiling;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

    /**
     *
     */
    sharingMode: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount: number;

    /**
     *
     */
    pQueueFamilyIndices: Uint32Array | null;

    /**
     *
     */
    initialLayout: VkImageLayout;

}

declare interface VkImageCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkImageCreateFlagBits;

    /**
     *
     */
    imageType?: VkImageType;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    extent?: VkExtent3D | null;

    /**
     *
     */
    mipLevels?: number;

    /**
     *
     */
    arrayLayers?: number;

    /**
     *
     */
    samples?: VkSampleCountFlagBits;

    /**
     *
     */
    tiling?: VkImageTiling;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;

    /**
     *
     */
    sharingMode?: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount?: number;

    /**
     *
     */
    pQueueFamilyIndices?: Uint32Array | null;

    /**
     *
     */
    initialLayout?: VkImageLayout;
}

declare interface VkImageCreateInfoConstructor {
  readonly prototype: VkImageCreateInfo;
  new(param?: VkImageCreateInfoInitializer | null): VkImageCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageCreateInfo: VkImageCreateInfoConstructor;



  /**
   * 
   */
interface VkImageMemoryBarrier {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask: VkAccessFlagBits;

    /**
     *
     */
    oldLayout: VkImageLayout;

    /**
     *
     */
    newLayout: VkImageLayout;

    /**
     *
     */
    srcQueueFamilyIndex: number;

    /**
     *
     */
    dstQueueFamilyIndex: number;

    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    subresourceRange: VkImageSubresourceRange | null;

}

declare interface VkImageMemoryBarrierInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    oldLayout?: VkImageLayout;

    /**
     *
     */
    newLayout?: VkImageLayout;

    /**
     *
     */
    srcQueueFamilyIndex?: number;

    /**
     *
     */
    dstQueueFamilyIndex?: number;

    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    subresourceRange?: VkImageSubresourceRange | null;
}

declare interface VkImageMemoryBarrierConstructor {
  readonly prototype: VkImageMemoryBarrier;
  new(param?: VkImageMemoryBarrierInitializer | null): VkImageMemoryBarrier;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageMemoryBarrier: VkImageMemoryBarrierConstructor;



  /**
   * 
   */
interface VkBufferMemoryBarrier {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask: VkAccessFlagBits;

    /**
     *
     */
    srcQueueFamilyIndex: number;

    /**
     *
     */
    dstQueueFamilyIndex: number;

    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    offset: bigint | number;

    /**
     *
     */
    size: bigint | number;

}

declare interface VkBufferMemoryBarrierInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    srcQueueFamilyIndex?: number;

    /**
     *
     */
    dstQueueFamilyIndex?: number;

    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    offset?: bigint | number;

    /**
     *
     */
    size?: bigint | number;
}

declare interface VkBufferMemoryBarrierConstructor {
  readonly prototype: VkBufferMemoryBarrier;
  new(param?: VkBufferMemoryBarrierInitializer | null): VkBufferMemoryBarrier;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBufferMemoryBarrier: VkBufferMemoryBarrierConstructor;



  /**
   * 
   */
interface VkMemoryBarrier {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask: VkAccessFlagBits;

}

declare interface VkMemoryBarrierInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask?: VkAccessFlagBits;
}

declare interface VkMemoryBarrierConstructor {
  readonly prototype: VkMemoryBarrier;
  new(param?: VkMemoryBarrierInitializer | null): VkMemoryBarrier;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryBarrier: VkMemoryBarrierConstructor;



  /**
   * 
   */
interface VkImageSubresourceRange {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    aspectMask: VkImageAspectFlagBits;

    /**
     *
     */
    baseMipLevel: number;

    /**
     *
     */
    levelCount: number;

    /**
     *
     */
    baseArrayLayer: number;

    /**
     *
     */
    layerCount: number;

}

declare interface VkImageSubresourceRangeInitializer {
  
    /**
     *
     */
    aspectMask?: VkImageAspectFlagBits;

    /**
     *
     */
    baseMipLevel?: number;

    /**
     *
     */
    levelCount?: number;

    /**
     *
     */
    baseArrayLayer?: number;

    /**
     *
     */
    layerCount?: number;
}

declare interface VkImageSubresourceRangeConstructor {
  readonly prototype: VkImageSubresourceRange;
  new(param?: VkImageSubresourceRangeInitializer | null): VkImageSubresourceRange;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageSubresourceRange: VkImageSubresourceRangeConstructor;



  /**
   * 
   */
interface VkImageSubresourceLayers {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    aspectMask: VkImageAspectFlagBits;

    /**
     *
     */
    mipLevel: number;

    /**
     *
     */
    baseArrayLayer: number;

    /**
     *
     */
    layerCount: number;

}

declare interface VkImageSubresourceLayersInitializer {
  
    /**
     *
     */
    aspectMask?: VkImageAspectFlagBits;

    /**
     *
     */
    mipLevel?: number;

    /**
     *
     */
    baseArrayLayer?: number;

    /**
     *
     */
    layerCount?: number;
}

declare interface VkImageSubresourceLayersConstructor {
  readonly prototype: VkImageSubresourceLayers;
  new(param?: VkImageSubresourceLayersInitializer | null): VkImageSubresourceLayers;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageSubresourceLayers: VkImageSubresourceLayersConstructor;



  /**
   * 
   */
interface VkImageSubresource {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    aspectMask: VkImageAspectFlagBits;

    /**
     *
     */
    mipLevel: number;

    /**
     *
     */
    arrayLayer: number;

}

declare interface VkImageSubresourceInitializer {
  
    /**
     *
     */
    aspectMask?: VkImageAspectFlagBits;

    /**
     *
     */
    mipLevel?: number;

    /**
     *
     */
    arrayLayer?: number;
}

declare interface VkImageSubresourceConstructor {
  readonly prototype: VkImageSubresource;
  new(param?: VkImageSubresourceInitializer | null): VkImageSubresource;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageSubresource: VkImageSubresourceConstructor;



  /**
   * 
   */
interface VkBufferViewCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    offset: bigint | number;

    /**
     *
     */
    range: bigint | number;

}

declare interface VkBufferViewCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    offset?: bigint | number;

    /**
     *
     */
    range?: bigint | number;
}

declare interface VkBufferViewCreateInfoConstructor {
  readonly prototype: VkBufferViewCreateInfo;
  new(param?: VkBufferViewCreateInfoInitializer | null): VkBufferViewCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBufferViewCreateInfo: VkBufferViewCreateInfoConstructor;



  /**
   * 
   */
interface VkBufferCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkBufferCreateFlagBits;

    /**
     *
     */
    size: bigint | number;

    /**
     *
     */
    usage: VkBufferUsageFlagBits;

    /**
     *
     */
    sharingMode: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount: number;

    /**
     *
     */
    pQueueFamilyIndices: Uint32Array | null;

}

declare interface VkBufferCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkBufferCreateFlagBits;

    /**
     *
     */
    size?: bigint | number;

    /**
     *
     */
    usage?: VkBufferUsageFlagBits;

    /**
     *
     */
    sharingMode?: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount?: number;

    /**
     *
     */
    pQueueFamilyIndices?: Uint32Array | null;
}

declare interface VkBufferCreateInfoConstructor {
  readonly prototype: VkBufferCreateInfo;
  new(param?: VkBufferCreateInfoInitializer | null): VkBufferCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBufferCreateInfo: VkBufferCreateInfoConstructor;



  /**
   * 
   */
interface VkCopyDescriptorSet {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcSet: VkDescriptorSet | null;

    /**
     *
     */
    srcBinding: number;

    /**
     *
     */
    srcArrayElement: number;

    /**
     *
     */
    dstSet: VkDescriptorSet | null;

    /**
     *
     */
    dstBinding: number;

    /**
     *
     */
    dstArrayElement: number;

    /**
     *
     */
    descriptorCount: number;

}

declare interface VkCopyDescriptorSetInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcSet?: VkDescriptorSet | null;

    /**
     *
     */
    srcBinding?: number;

    /**
     *
     */
    srcArrayElement?: number;

    /**
     *
     */
    dstSet?: VkDescriptorSet | null;

    /**
     *
     */
    dstBinding?: number;

    /**
     *
     */
    dstArrayElement?: number;

    /**
     *
     */
    descriptorCount?: number;
}

declare interface VkCopyDescriptorSetConstructor {
  readonly prototype: VkCopyDescriptorSet;
  new(param?: VkCopyDescriptorSetInitializer | null): VkCopyDescriptorSet;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkCopyDescriptorSet: VkCopyDescriptorSetConstructor;



  /**
   * 
   */
interface VkWriteDescriptorSet {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    dstSet: VkDescriptorSet | null;

    /**
     *
     */
    dstBinding: number;

    /**
     *
     */
    dstArrayElement: number;

    /**
     *
     */
    descriptorCount: number;

    /**
     *
     */
    descriptorType: VkDescriptorType;

    /**
     *
     */
    pImageInfo: VkDescriptorImageInfo[] | null;

    /**
     *
     */
    pBufferInfo: VkDescriptorBufferInfo[] | null;

    /**
     *
     */
    pTexelBufferView: VkBufferView[] | null;

}

declare interface VkWriteDescriptorSetInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    dstSet?: VkDescriptorSet | null;

    /**
     *
     */
    dstBinding?: number;

    /**
     *
     */
    dstArrayElement?: number;

    /**
     *
     */
    descriptorCount?: number;

    /**
     *
     */
    descriptorType?: VkDescriptorType;

    /**
     *
     */
    pImageInfo?: VkDescriptorImageInfo[] | null;

    /**
     *
     */
    pBufferInfo?: VkDescriptorBufferInfo[] | null;

    /**
     *
     */
    pTexelBufferView?: VkBufferView[] | null;
}

declare interface VkWriteDescriptorSetConstructor {
  readonly prototype: VkWriteDescriptorSet;
  new(param?: VkWriteDescriptorSetInitializer | null): VkWriteDescriptorSet;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkWriteDescriptorSet: VkWriteDescriptorSetConstructor;



  /**
   * 
   */
interface VkDescriptorImageInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sampler: VkSampler | null;

    /**
     *
     */
    imageView: VkImageView | null;

    /**
     *
     */
    imageLayout: VkImageLayout;

}

declare interface VkDescriptorImageInfoInitializer {
  
    /**
     *
     */
    sampler?: VkSampler | null;

    /**
     *
     */
    imageView?: VkImageView | null;

    /**
     *
     */
    imageLayout?: VkImageLayout;
}

declare interface VkDescriptorImageInfoConstructor {
  readonly prototype: VkDescriptorImageInfo;
  new(param?: VkDescriptorImageInfoInitializer | null): VkDescriptorImageInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorImageInfo: VkDescriptorImageInfoConstructor;



  /**
   * 
   */
interface VkDescriptorBufferInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    offset: bigint | number;

    /**
     *
     */
    range: bigint | number;

}

declare interface VkDescriptorBufferInfoInitializer {
  
    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    offset?: bigint | number;

    /**
     *
     */
    range?: bigint | number;
}

declare interface VkDescriptorBufferInfoConstructor {
  readonly prototype: VkDescriptorBufferInfo;
  new(param?: VkDescriptorBufferInfoInitializer | null): VkDescriptorBufferInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDescriptorBufferInfo: VkDescriptorBufferInfoConstructor;



  /**
   * 
   */
interface VkImageFormatProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly maxExtent: VkExtent3D | null;

    /**
     *
     */
    readonly maxMipLevels: number;

    /**
     *
     */
    readonly maxArrayLayers: number;

    /**
     *
     */
    readonly sampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxResourceSize: bigint | number;

}

declare interface VkImageFormatPropertiesInitializer {
  
    /**
     *
     */
    readonly maxExtent?: VkExtent3D | null;

    /**
     *
     */
    readonly maxMipLevels?: number;

    /**
     *
     */
    readonly maxArrayLayers?: number;

    /**
     *
     */
    readonly sampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxResourceSize?: bigint | number;
}

declare interface VkImageFormatPropertiesConstructor {
  readonly prototype: VkImageFormatProperties;
  new(param?: VkImageFormatPropertiesInitializer | null): VkImageFormatProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkImageFormatProperties: VkImageFormatPropertiesConstructor;



  /**
   * 
   */
interface VkFormatProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly linearTilingFeatures: VkFormatFeatureFlagBits;

    /**
     *
     */
    readonly optimalTilingFeatures: VkFormatFeatureFlagBits;

    /**
     *
     */
    readonly bufferFeatures: VkFormatFeatureFlagBits;

}

declare interface VkFormatPropertiesInitializer {
  
    /**
     *
     */
    readonly linearTilingFeatures?: VkFormatFeatureFlagBits;

    /**
     *
     */
    readonly optimalTilingFeatures?: VkFormatFeatureFlagBits;

    /**
     *
     */
    readonly bufferFeatures?: VkFormatFeatureFlagBits;
}

declare interface VkFormatPropertiesConstructor {
  readonly prototype: VkFormatProperties;
  new(param?: VkFormatPropertiesInitializer | null): VkFormatProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkFormatProperties: VkFormatPropertiesConstructor;



  /**
   * 
   */
interface VkMappedMemoryRange {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    offset: bigint | number;

    /**
     *
     */
    size: bigint | number;

}

declare interface VkMappedMemoryRangeInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    offset?: bigint | number;

    /**
     *
     */
    size?: bigint | number;
}

declare interface VkMappedMemoryRangeConstructor {
  readonly prototype: VkMappedMemoryRange;
  new(param?: VkMappedMemoryRangeInitializer | null): VkMappedMemoryRange;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMappedMemoryRange: VkMappedMemoryRangeConstructor;



  /**
   * 
   */
interface VkMemoryHeap {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly size: bigint | number;

    /**
     *
     */
    readonly flags: VkMemoryHeapFlagBits;

}

declare interface VkMemoryHeapInitializer {
  
    /**
     *
     */
    readonly size?: bigint | number;

    /**
     *
     */
    readonly flags?: VkMemoryHeapFlagBits;
}

declare interface VkMemoryHeapConstructor {
  readonly prototype: VkMemoryHeap;
  new(param?: VkMemoryHeapInitializer | null): VkMemoryHeap;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryHeap: VkMemoryHeapConstructor;



  /**
   * 
   */
interface VkMemoryType {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly propertyFlags: VkMemoryPropertyFlagBits;

    /**
     *
     */
    readonly heapIndex: number;

}

declare interface VkMemoryTypeInitializer {
  
    /**
     *
     */
    readonly propertyFlags?: VkMemoryPropertyFlagBits;

    /**
     *
     */
    readonly heapIndex?: number;
}

declare interface VkMemoryTypeConstructor {
  readonly prototype: VkMemoryType;
  new(param?: VkMemoryTypeInitializer | null): VkMemoryType;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryType: VkMemoryTypeConstructor;



  /**
   * 
   */
interface VkSparseImageMemoryRequirements {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly formatProperties: VkSparseImageFormatProperties | null;

    /**
     *
     */
    readonly imageMipTailFirstLod: number;

    /**
     *
     */
    readonly imageMipTailSize: bigint | number;

    /**
     *
     */
    readonly imageMipTailOffset: bigint | number;

    /**
     *
     */
    readonly imageMipTailStride: bigint | number;

}

declare interface VkSparseImageMemoryRequirementsInitializer {
  
    /**
     *
     */
    readonly formatProperties?: VkSparseImageFormatProperties | null;

    /**
     *
     */
    readonly imageMipTailFirstLod?: number;

    /**
     *
     */
    readonly imageMipTailSize?: bigint | number;

    /**
     *
     */
    readonly imageMipTailOffset?: bigint | number;

    /**
     *
     */
    readonly imageMipTailStride?: bigint | number;
}

declare interface VkSparseImageMemoryRequirementsConstructor {
  readonly prototype: VkSparseImageMemoryRequirements;
  new(param?: VkSparseImageMemoryRequirementsInitializer | null): VkSparseImageMemoryRequirements;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSparseImageMemoryRequirements: VkSparseImageMemoryRequirementsConstructor;



  /**
   * 
   */
interface VkSparseImageFormatProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly aspectMask: VkImageAspectFlagBits;

    /**
     *
     */
    readonly imageGranularity: VkExtent3D | null;

    /**
     *
     */
    readonly flags: VkSparseImageFormatFlagBits;

}

declare interface VkSparseImageFormatPropertiesInitializer {
  
    /**
     *
     */
    readonly aspectMask?: VkImageAspectFlagBits;

    /**
     *
     */
    readonly imageGranularity?: VkExtent3D | null;

    /**
     *
     */
    readonly flags?: VkSparseImageFormatFlagBits;
}

declare interface VkSparseImageFormatPropertiesConstructor {
  readonly prototype: VkSparseImageFormatProperties;
  new(param?: VkSparseImageFormatPropertiesInitializer | null): VkSparseImageFormatProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkSparseImageFormatProperties: VkSparseImageFormatPropertiesConstructor;



  /**
   * 
   */
interface VkMemoryRequirements {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly size: bigint | number;

    /**
     *
     */
    readonly alignment: bigint | number;

    /**
     *
     */
    readonly memoryTypeBits: number;

}

declare interface VkMemoryRequirementsInitializer {
  
    /**
     *
     */
    readonly size?: bigint | number;

    /**
     *
     */
    readonly alignment?: bigint | number;

    /**
     *
     */
    readonly memoryTypeBits?: number;
}

declare interface VkMemoryRequirementsConstructor {
  readonly prototype: VkMemoryRequirements;
  new(param?: VkMemoryRequirementsInitializer | null): VkMemoryRequirements;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryRequirements: VkMemoryRequirementsConstructor;



  /**
   * 
   */
interface VkMemoryAllocateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    allocationSize: bigint | number;

    /**
     *
     */
    memoryTypeIndex: number;

}

declare interface VkMemoryAllocateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    allocationSize?: bigint | number;

    /**
     *
     */
    memoryTypeIndex?: number;
}

declare interface VkMemoryAllocateInfoConstructor {
  readonly prototype: VkMemoryAllocateInfo;
  new(param?: VkMemoryAllocateInfoInitializer | null): VkMemoryAllocateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkMemoryAllocateInfo: VkMemoryAllocateInfoConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceMemoryProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly memoryTypeCount: number;

    /**
     *
     */
    readonly memoryTypes: VkMemoryType[] | null;

    /**
     *
     */
    readonly memoryHeapCount: number;

    /**
     *
     */
    readonly memoryHeaps: VkMemoryHeap[] | null;

}

declare interface VkPhysicalDeviceMemoryPropertiesInitializer {
  
    /**
     *
     */
    readonly memoryTypeCount?: number;

    /**
     *
     */
    readonly memoryTypes?: VkMemoryType[] | null;

    /**
     *
     */
    readonly memoryHeapCount?: number;

    /**
     *
     */
    readonly memoryHeaps?: VkMemoryHeap[] | null;
}

declare interface VkPhysicalDeviceMemoryPropertiesConstructor {
  readonly prototype: VkPhysicalDeviceMemoryProperties;
  new(param?: VkPhysicalDeviceMemoryPropertiesInitializer | null): VkPhysicalDeviceMemoryProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceMemoryProperties: VkPhysicalDeviceMemoryPropertiesConstructor;



  /**
   * 
   */
interface VkQueueFamilyProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly queueFlags: VkQueueFlagBits;

    /**
     *
     */
    readonly queueCount: number;

    /**
     *
     */
    readonly timestampValidBits: number;

    /**
     *
     */
    readonly minImageTransferGranularity: VkExtent3D | null;

}

declare interface VkQueueFamilyPropertiesInitializer {
  
    /**
     *
     */
    readonly queueFlags?: VkQueueFlagBits;

    /**
     *
     */
    readonly queueCount?: number;

    /**
     *
     */
    readonly timestampValidBits?: number;

    /**
     *
     */
    readonly minImageTransferGranularity?: VkExtent3D | null;
}

declare interface VkQueueFamilyPropertiesConstructor {
  readonly prototype: VkQueueFamilyProperties;
  new(param?: VkQueueFamilyPropertiesInitializer | null): VkQueueFamilyProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkQueueFamilyProperties: VkQueueFamilyPropertiesConstructor;



  /**
   * 
   */
interface VkInstanceCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    pApplicationInfo: VkApplicationInfo | null;

    /**
     *
     */
    enabledLayerCount: number;

    /**
     *
     */
    ppEnabledLayerNames: string[] | null;

    /**
     *
     */
    enabledExtensionCount: number;

    /**
     *
     */
    ppEnabledExtensionNames: string[] | null;

}

declare interface VkInstanceCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    pApplicationInfo?: VkApplicationInfo | null;

    /**
     *
     */
    enabledLayerCount?: number;

    /**
     *
     */
    ppEnabledLayerNames?: string[] | null;

    /**
     *
     */
    enabledExtensionCount?: number;

    /**
     *
     */
    ppEnabledExtensionNames?: string[] | null;
}

declare interface VkInstanceCreateInfoConstructor {
  readonly prototype: VkInstanceCreateInfo;
  new(param?: VkInstanceCreateInfoInitializer | null): VkInstanceCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkInstanceCreateInfo: VkInstanceCreateInfoConstructor;



  /**
   * 
   */
interface VkDeviceCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    queueCreateInfoCount: number;

    /**
     *
     */
    pQueueCreateInfos: VkDeviceQueueCreateInfo[] | null;

    /**
     *
     */
    enabledLayerCount: number;

    /**
     *
     */
    ppEnabledLayerNames: string[] | null;

    /**
     *
     */
    enabledExtensionCount: number;

    /**
     *
     */
    ppEnabledExtensionNames: string[] | null;

    /**
     *
     */
    pEnabledFeatures: VkPhysicalDeviceFeatures | null;

}

declare interface VkDeviceCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    queueCreateInfoCount?: number;

    /**
     *
     */
    pQueueCreateInfos?: VkDeviceQueueCreateInfo[] | null;

    /**
     *
     */
    enabledLayerCount?: number;

    /**
     *
     */
    ppEnabledLayerNames?: string[] | null;

    /**
     *
     */
    enabledExtensionCount?: number;

    /**
     *
     */
    ppEnabledExtensionNames?: string[] | null;

    /**
     *
     */
    pEnabledFeatures?: VkPhysicalDeviceFeatures | null;
}

declare interface VkDeviceCreateInfoConstructor {
  readonly prototype: VkDeviceCreateInfo;
  new(param?: VkDeviceCreateInfoInitializer | null): VkDeviceCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceCreateInfo: VkDeviceCreateInfoConstructor;



  /**
   * 
   */
interface VkDeviceQueueCreateInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkDeviceQueueCreateFlagBits;

    /**
     *
     */
    queueFamilyIndex: number;

    /**
     *
     */
    queueCount: number;

    /**
     *
     */
    pQueuePriorities: Float32Array | null;

}

declare interface VkDeviceQueueCreateInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkDeviceQueueCreateFlagBits;

    /**
     *
     */
    queueFamilyIndex?: number;

    /**
     *
     */
    queueCount?: number;

    /**
     *
     */
    pQueuePriorities?: Float32Array | null;
}

declare interface VkDeviceQueueCreateInfoConstructor {
  readonly prototype: VkDeviceQueueCreateInfo;
  new(param?: VkDeviceQueueCreateInfoInitializer | null): VkDeviceQueueCreateInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceQueueCreateInfo: VkDeviceQueueCreateInfoConstructor;



  /**
   * 
   */
interface VkAllocationCallbacks {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    pUserData: ArrayBuffer | null;

    /**
     *
     */
    pfnAllocation: vkAllocationFunction | null;

    /**
     *
     */
    pfnReallocation: vkReallocationFunction | null;

    /**
     *
     */
    pfnFree: vkFreeFunction | null;

    /**
     *
     */
    pfnInternalAllocation: vkInternalAllocationNotification | null;

    /**
     *
     */
    pfnInternalFree: vkInternalFreeNotification | null;

}

declare interface VkAllocationCallbacksInitializer {
  
    /**
     *
     */
    pUserData?: ArrayBuffer | null;

    /**
     *
     */
    pfnAllocation?: vkAllocationFunction | null;

    /**
     *
     */
    pfnReallocation?: vkReallocationFunction | null;

    /**
     *
     */
    pfnFree?: vkFreeFunction | null;

    /**
     *
     */
    pfnInternalAllocation?: vkInternalAllocationNotification | null;

    /**
     *
     */
    pfnInternalFree?: vkInternalFreeNotification | null;
}

declare interface VkAllocationCallbacksConstructor {
  readonly prototype: VkAllocationCallbacks;
  new(param?: VkAllocationCallbacksInitializer | null): VkAllocationCallbacks;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAllocationCallbacks: VkAllocationCallbacksConstructor;



  /**
   * 
   */
interface VkApplicationInfo {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pApplicationName: string | null;

    /**
     *
     */
    applicationVersion: number;

    /**
     *
     */
    pEngineName: string | null;

    /**
     *
     */
    engineVersion: number;

    /**
     *
     */
    apiVersion: number;

}

declare interface VkApplicationInfoInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pApplicationName?: string | null;

    /**
     *
     */
    applicationVersion?: number;

    /**
     *
     */
    pEngineName?: string | null;

    /**
     *
     */
    engineVersion?: number;

    /**
     *
     */
    apiVersion?: number;
}

declare interface VkApplicationInfoConstructor {
  readonly prototype: VkApplicationInfo;
  new(param?: VkApplicationInfoInitializer | null): VkApplicationInfo;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkApplicationInfo: VkApplicationInfoConstructor;



  /**
   * 
   */
interface VkLayerProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly layerName: string | null;

    /**
     *
     */
    readonly specVersion: number;

    /**
     *
     */
    readonly implementationVersion: number;

    /**
     *
     */
    readonly description: string | null;

}

declare interface VkLayerPropertiesInitializer {
  
    /**
     *
     */
    readonly layerName?: string | null;

    /**
     *
     */
    readonly specVersion?: number;

    /**
     *
     */
    readonly implementationVersion?: number;

    /**
     *
     */
    readonly description?: string | null;
}

declare interface VkLayerPropertiesConstructor {
  readonly prototype: VkLayerProperties;
  new(param?: VkLayerPropertiesInitializer | null): VkLayerProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkLayerProperties: VkLayerPropertiesConstructor;



  /**
   * 
   */
interface VkExtensionProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly extensionName: string | null;

    /**
     *
     */
    readonly specVersion: number;

}

declare interface VkExtensionPropertiesInitializer {
  
    /**
     *
     */
    readonly extensionName?: string | null;

    /**
     *
     */
    readonly specVersion?: number;
}

declare interface VkExtensionPropertiesConstructor {
  readonly prototype: VkExtensionProperties;
  new(param?: VkExtensionPropertiesInitializer | null): VkExtensionProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExtensionProperties: VkExtensionPropertiesConstructor;



  /**
   * 
   */
interface VkPhysicalDeviceProperties {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly apiVersion: number;

    /**
     *
     */
    readonly driverVersion: number;

    /**
     *
     */
    readonly vendorID: number;

    /**
     *
     */
    readonly deviceID: number;

    /**
     *
     */
    readonly deviceType: VkPhysicalDeviceType;

    /**
     *
     */
    readonly deviceName: string | null;

    /**
     *
     */
    readonly pipelineCacheUUID: number[] | null;

    /**
     *
     */
    readonly limits: VkPhysicalDeviceLimits | null;

    /**
     *
     */
    readonly sparseProperties: VkPhysicalDeviceSparseProperties | null;

}

declare interface VkPhysicalDevicePropertiesInitializer {
  
    /**
     *
     */
    readonly apiVersion?: number;

    /**
     *
     */
    readonly driverVersion?: number;

    /**
     *
     */
    readonly vendorID?: number;

    /**
     *
     */
    readonly deviceID?: number;

    /**
     *
     */
    readonly deviceType?: VkPhysicalDeviceType;

    /**
     *
     */
    readonly deviceName?: string | null;

    /**
     *
     */
    readonly pipelineCacheUUID?: number[] | null;

    /**
     *
     */
    readonly limits?: VkPhysicalDeviceLimits | null;

    /**
     *
     */
    readonly sparseProperties?: VkPhysicalDeviceSparseProperties | null;
}

declare interface VkPhysicalDevicePropertiesConstructor {
  readonly prototype: VkPhysicalDeviceProperties;
  new(param?: VkPhysicalDevicePropertiesInitializer | null): VkPhysicalDeviceProperties;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPhysicalDeviceProperties: VkPhysicalDevicePropertiesConstructor;



  /**
   * 
   */
interface VkComponentMapping {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    r: VkComponentSwizzle;

    /**
     *
     */
    g: VkComponentSwizzle;

    /**
     *
     */
    b: VkComponentSwizzle;

    /**
     *
     */
    a: VkComponentSwizzle;

}

declare interface VkComponentMappingInitializer {
  
    /**
     *
     */
    r?: VkComponentSwizzle;

    /**
     *
     */
    g?: VkComponentSwizzle;

    /**
     *
     */
    b?: VkComponentSwizzle;

    /**
     *
     */
    a?: VkComponentSwizzle;
}

declare interface VkComponentMappingConstructor {
  readonly prototype: VkComponentMapping;
  new(param?: VkComponentMappingInitializer | null): VkComponentMapping;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkComponentMapping: VkComponentMappingConstructor;



  /**
   * 
   */
interface VkClearRect {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    rect: VkRect2D | null;

    /**
     *
     */
    baseArrayLayer: number;

    /**
     *
     */
    layerCount: number;

}

declare interface VkClearRectInitializer {
  
    /**
     *
     */
    rect?: VkRect2D | null;

    /**
     *
     */
    baseArrayLayer?: number;

    /**
     *
     */
    layerCount?: number;
}

declare interface VkClearRectConstructor {
  readonly prototype: VkClearRect;
  new(param?: VkClearRectInitializer | null): VkClearRect;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkClearRect: VkClearRectConstructor;



  /**
   * 
   */
interface VkRect2D {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    offset: VkOffset2D | null;

    /**
     *
     */
    extent: VkExtent2D | null;

}

declare interface VkRect2DInitializer {
  
    /**
     *
     */
    offset?: VkOffset2D | null;

    /**
     *
     */
    extent?: VkExtent2D | null;
}

declare interface VkRect2DConstructor {
  readonly prototype: VkRect2D;
  new(param?: VkRect2DInitializer | null): VkRect2D;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkRect2D: VkRect2DConstructor;



  /**
   * 
   */
interface VkViewport {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    x: number;

    /**
     *
     */
    y: number;

    /**
     *
     */
    width: number;

    /**
     *
     */
    height: number;

    /**
     *
     */
    minDepth: number;

    /**
     *
     */
    maxDepth: number;

}

declare interface VkViewportInitializer {
  
    /**
     *
     */
    x?: number;

    /**
     *
     */
    y?: number;

    /**
     *
     */
    width?: number;

    /**
     *
     */
    height?: number;

    /**
     *
     */
    minDepth?: number;

    /**
     *
     */
    maxDepth?: number;
}

declare interface VkViewportConstructor {
  readonly prototype: VkViewport;
  new(param?: VkViewportInitializer | null): VkViewport;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkViewport: VkViewportConstructor;



  /**
   * 
   */
interface VkExtent3D {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    width: number;

    /**
     *
     */
    height: number;

    /**
     *
     */
    depth: number;

}

declare interface VkExtent3DInitializer {
  
    /**
     *
     */
    width?: number;

    /**
     *
     */
    height?: number;

    /**
     *
     */
    depth?: number;
}

declare interface VkExtent3DConstructor {
  readonly prototype: VkExtent3D;
  new(param?: VkExtent3DInitializer | null): VkExtent3D;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExtent3D: VkExtent3DConstructor;



  /**
   * 
   */
interface VkExtent2D {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    width: number;

    /**
     *
     */
    height: number;

}

declare interface VkExtent2DInitializer {
  
    /**
     *
     */
    width?: number;

    /**
     *
     */
    height?: number;
}

declare interface VkExtent2DConstructor {
  readonly prototype: VkExtent2D;
  new(param?: VkExtent2DInitializer | null): VkExtent2D;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkExtent2D: VkExtent2DConstructor;



  /**
   * 
   */
interface VkOffset3D {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    x: number;

    /**
     *
     */
    y: number;

    /**
     *
     */
    z: number;

}

declare interface VkOffset3DInitializer {
  
    /**
     *
     */
    x?: number;

    /**
     *
     */
    y?: number;

    /**
     *
     */
    z?: number;
}

declare interface VkOffset3DConstructor {
  readonly prototype: VkOffset3D;
  new(param?: VkOffset3DInitializer | null): VkOffset3D;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkOffset3D: VkOffset3DConstructor;



  /**
   * 
   */
interface VkOffset2D {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    x: number;

    /**
     *
     */
    y: number;

}

declare interface VkOffset2DInitializer {
  
    /**
     *
     */
    x?: number;

    /**
     *
     */
    y?: number;
}

declare interface VkOffset2DConstructor {
  readonly prototype: VkOffset2D;
  new(param?: VkOffset2DInitializer | null): VkOffset2D;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkOffset2D: VkOffset2DConstructor;



  /**
   * 
   */
interface VkBaseInStructure {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: VkBaseInStructure | null;

}

declare interface VkBaseInStructureInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: VkBaseInStructure | null;
}

declare interface VkBaseInStructureConstructor {
  readonly prototype: VkBaseInStructure;
  new(param?: VkBaseInStructureInitializer | null): VkBaseInStructure;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBaseInStructure: VkBaseInStructureConstructor;



  /**
   * 
   */
interface VkBaseOutStructure {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: VkBaseOutStructure | null;

}

declare interface VkBaseOutStructureInitializer {
  
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: VkBaseOutStructure | null;
}

declare interface VkBaseOutStructureConstructor {
  readonly prototype: VkBaseOutStructure;
  new(param?: VkBaseOutStructureInitializer | null): VkBaseOutStructure;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkBaseOutStructure: VkBaseOutStructureConstructor;



  /**
   * 
   */
interface VkAccelerationStructureGeometryDataKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    triangles: VkAccelerationStructureGeometryTrianglesDataKHR | null;

    /**
     *
     */
    aabbs: VkAccelerationStructureGeometryAabbsDataKHR | null;

    /**
     *
     */
    instances: VkAccelerationStructureGeometryInstancesDataKHR | null;

}

declare interface VkAccelerationStructureGeometryDataKHRInitializer {
  
    /**
     *
     */
    triangles?: VkAccelerationStructureGeometryTrianglesDataKHR | null;

    /**
     *
     */
    aabbs?: VkAccelerationStructureGeometryAabbsDataKHR | null;

    /**
     *
     */
    instances?: VkAccelerationStructureGeometryInstancesDataKHR | null;
}

declare interface VkAccelerationStructureGeometryDataKHRConstructor {
  readonly prototype: VkAccelerationStructureGeometryDataKHR;
  new(param?: VkAccelerationStructureGeometryDataKHRInitializer | null): VkAccelerationStructureGeometryDataKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkAccelerationStructureGeometryDataKHR: VkAccelerationStructureGeometryDataKHRConstructor;



  /**
   * 
   */
interface VkDeviceOrHostAddressConstKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    deviceAddress: bigint | number;

    /**
     *
     */
    hostAddress: ArrayBuffer | null;

}

declare interface VkDeviceOrHostAddressConstKHRInitializer {
  
    /**
     *
     */
    deviceAddress?: bigint | number;

    /**
     *
     */
    hostAddress?: ArrayBuffer | null;
}

declare interface VkDeviceOrHostAddressConstKHRConstructor {
  readonly prototype: VkDeviceOrHostAddressConstKHR;
  new(param?: VkDeviceOrHostAddressConstKHRInitializer | null): VkDeviceOrHostAddressConstKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceOrHostAddressConstKHR: VkDeviceOrHostAddressConstKHRConstructor;



  /**
   * 
   */
interface VkDeviceOrHostAddressKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    deviceAddress: bigint | number;

    /**
     *
     */
    hostAddress: ArrayBuffer | null;

}

declare interface VkDeviceOrHostAddressKHRInitializer {
  
    /**
     *
     */
    deviceAddress?: bigint | number;

    /**
     *
     */
    hostAddress?: ArrayBuffer | null;
}

declare interface VkDeviceOrHostAddressKHRConstructor {
  readonly prototype: VkDeviceOrHostAddressKHR;
  new(param?: VkDeviceOrHostAddressKHRInitializer | null): VkDeviceOrHostAddressKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkDeviceOrHostAddressKHR: VkDeviceOrHostAddressKHRConstructor;



  /**
   * 
   */
interface VkPipelineExecutableStatisticValueKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    readonly b32: boolean;

    /**
     *
     */
    readonly i64: bigint | number;

    /**
     *
     */
    readonly u64: bigint | number;

    /**
     *
     */
    readonly f64: bigint | number;

}

declare interface VkPipelineExecutableStatisticValueKHRInitializer {
  
    /**
     *
     */
    readonly b32?: boolean;

    /**
     *
     */
    readonly i64?: bigint | number;

    /**
     *
     */
    readonly u64?: bigint | number;

    /**
     *
     */
    readonly f64?: bigint | number;
}

declare interface VkPipelineExecutableStatisticValueKHRConstructor {
  readonly prototype: VkPipelineExecutableStatisticValueKHR;
  new(param?: VkPipelineExecutableStatisticValueKHRInitializer | null): VkPipelineExecutableStatisticValueKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPipelineExecutableStatisticValueKHR: VkPipelineExecutableStatisticValueKHRConstructor;



  /**
   * 
   */
interface VkPerformanceValueDataINTEL {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    value32: number;

    /**
     *
     */
    value64: bigint | number;

    /**
     *
     */
    valueFloat: number;

    /**
     *
     */
    valueBool: boolean;

    /**
     *
     */
    valueString: string | null;

}

declare interface VkPerformanceValueDataINTELInitializer {
  
    /**
     *
     */
    value32?: number;

    /**
     *
     */
    value64?: bigint | number;

    /**
     *
     */
    valueFloat?: number;

    /**
     *
     */
    valueBool?: boolean;

    /**
     *
     */
    valueString?: string | null;
}

declare interface VkPerformanceValueDataINTELConstructor {
  readonly prototype: VkPerformanceValueDataINTEL;
  new(param?: VkPerformanceValueDataINTELInitializer | null): VkPerformanceValueDataINTEL;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPerformanceValueDataINTEL: VkPerformanceValueDataINTELConstructor;



  /**
   * 
   */
interface VkPerformanceCounterResultKHR {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    int32: number;

    /**
     *
     */
    int64: bigint | number;

    /**
     *
     */
    uint32: number;

    /**
     *
     */
    uint64: bigint | number;

    /**
     *
     */
    float32: number;

    /**
     *
     */
    float64: bigint | number;

}

declare interface VkPerformanceCounterResultKHRInitializer {
  
    /**
     *
     */
    int32?: number;

    /**
     *
     */
    int64?: bigint | number;

    /**
     *
     */
    uint32?: number;

    /**
     *
     */
    uint64?: bigint | number;

    /**
     *
     */
    float32?: number;

    /**
     *
     */
    float64?: bigint | number;
}

declare interface VkPerformanceCounterResultKHRConstructor {
  readonly prototype: VkPerformanceCounterResultKHR;
  new(param?: VkPerformanceCounterResultKHRInitializer | null): VkPerformanceCounterResultKHR;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkPerformanceCounterResultKHR: VkPerformanceCounterResultKHRConstructor;



  /**
   * 
   */
interface VkClearValue {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    color: VkClearColorValue | null;

    /**
     *
     */
    depthStencil: VkClearDepthStencilValue | null;

}

declare interface VkClearValueInitializer {
  
    /**
     *
     */
    color?: VkClearColorValue | null;

    /**
     *
     */
    depthStencil?: VkClearDepthStencilValue | null;
}

declare interface VkClearValueConstructor {
  readonly prototype: VkClearValue;
  new(param?: VkClearValueInitializer | null): VkClearValue;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkClearValue: VkClearValueConstructor;



  /**
   * 
   */
interface VkClearColorValue {
  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

  /**
    * Memory representation of the original vulkan structure instance.
    */
  memoryBuffer: ArrayBuffer;
  
    /**
     *
     */
    float32: number[] | null;

    /**
     *
     */
    int32: number[] | null;

    /**
     *
     */
    uint32: number[] | null;

}

declare interface VkClearColorValueInitializer {
  
    /**
     *
     */
    float32?: number[] | null;

    /**
     *
     */
    int32?: number[] | null;

    /**
     *
     */
    uint32?: number[] | null;
}

declare interface VkClearColorValueConstructor {
  readonly prototype: VkClearColorValue;
  new(param?: VkClearColorValueInitializer | null): VkClearColorValue;

  /**
    * Object describing the memory layout for this structure.
    */
  readonly memoryLayout: object;

}

declare var VkClearColorValue: VkClearColorValueConstructor;





  /**
   * 
   * @param pCreateInfo
   * @param pAllocator
   * @param pInstance
   */
  export function vkCreateInstance(pCreateInfo: VkInstanceCreateInfo | null, pAllocator: null, pInstance: VkInstance | null): VkResult;

  /**
   * 
   * @param instance
   * @param pAllocator
   */
  export function vkDestroyInstance(instance: VkInstance | null, pAllocator: null): void;

  /**
   * 
   * @param instance
   * @param pPhysicalDeviceCount
   * @param pPhysicalDevices
   */
  export function vkEnumeratePhysicalDevices(instance: VkInstance | null, pPhysicalDeviceCount: VkInout | null, pPhysicalDevices: VkPhysicalDevice[] | null): VkResult;

  /**
   * 
   * @param device
   * @param pName
   */
  export function vkGetDeviceProcAddr(device: VkDevice | null, pName: string | null): void;

  /**
   * 
   * @param instance
   * @param pName
   */
  export function vkGetInstanceProcAddr(instance: VkInstance | null, pName: string | null): void;

  /**
   * 
   * @param physicalDevice
   * @param pProperties
   */
  export function vkGetPhysicalDeviceProperties(physicalDevice: VkPhysicalDevice | null, pProperties: VkPhysicalDeviceProperties | null): void;

  /**
   * 
   * @param physicalDevice
   * @param pQueueFamilyPropertyCount
   * @param pQueueFamilyProperties
   */
  export function vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice: VkPhysicalDevice | null, pQueueFamilyPropertyCount: VkInout | null, pQueueFamilyProperties: VkQueueFamilyProperties[] | null): void;

  /**
   * 
   * @param physicalDevice
   * @param pMemoryProperties
   */
  export function vkGetPhysicalDeviceMemoryProperties(physicalDevice: VkPhysicalDevice | null, pMemoryProperties: VkPhysicalDeviceMemoryProperties | null): void;

  /**
   * 
   * @param physicalDevice
   * @param pFeatures
   */
  export function vkGetPhysicalDeviceFeatures(physicalDevice: VkPhysicalDevice | null, pFeatures: VkPhysicalDeviceFeatures | null): void;

  /**
   * 
   * @param physicalDevice
   * @param format
   * @param pFormatProperties
   */
  export function vkGetPhysicalDeviceFormatProperties(physicalDevice: VkPhysicalDevice | null, format: VkFormat, pFormatProperties: VkFormatProperties | null): void;

  /**
   * 
   * @param physicalDevice
   * @param format
   * @param type
   * @param tiling
   * @param usage
   * @param flags
   * @param pImageFormatProperties
   */
  export function vkGetPhysicalDeviceImageFormatProperties(physicalDevice: VkPhysicalDevice | null, format: VkFormat, type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlagBits, flags: VkImageCreateFlagBits, pImageFormatProperties: VkImageFormatProperties | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param pCreateInfo
   * @param pAllocator
   * @param pDevice
   */
  export function vkCreateDevice(physicalDevice: VkPhysicalDevice | null, pCreateInfo: VkDeviceCreateInfo | null, pAllocator: null, pDevice: VkDevice | null): VkResult;

  /**
   * 
   * @param device
   * @param pAllocator
   */
  export function vkDestroyDevice(device: VkDevice | null, pAllocator: null): void;

  /**
   * 
   * @param pApiVersion
   */
  export function vkEnumerateInstanceVersion(pApiVersion: VkInout | null): VkResult;

  /**
   * 
   * @param pPropertyCount
   * @param pProperties
   */
  export function vkEnumerateInstanceLayerProperties(pPropertyCount: VkInout | null, pProperties: VkLayerProperties[] | null): VkResult;

  /**
   * 
   * @param pLayerName
   * @param pPropertyCount
   * @param pProperties
   */
  export function vkEnumerateInstanceExtensionProperties(pLayerName: string | null, pPropertyCount: VkInout | null, pProperties: VkExtensionProperties[] | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param pPropertyCount
   * @param pProperties
   */
  export function vkEnumerateDeviceLayerProperties(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout | null, pProperties: VkLayerProperties[] | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param pLayerName
   * @param pPropertyCount
   * @param pProperties
   */
  export function vkEnumerateDeviceExtensionProperties(physicalDevice: VkPhysicalDevice | null, pLayerName: string | null, pPropertyCount: VkInout | null, pProperties: VkExtensionProperties[] | null): VkResult;

  /**
   * 
   * @param device
   * @param queueFamilyIndex
   * @param queueIndex
   * @param pQueue
   */
  export function vkGetDeviceQueue(device: VkDevice | null, queueFamilyIndex: number, queueIndex: number, pQueue: VkQueue | null): void;

  /**
   * 
   * @param queue
   * @param submitCount
   * @param pSubmits
   * @param fence
   */
  export function vkQueueSubmit(queue: VkQueue | null, submitCount: number, pSubmits: VkSubmitInfo[] | null, fence: VkFence | null): VkResult;

  /**
   * 
   * @param queue
   */
  export function vkQueueWaitIdle(queue: VkQueue | null): VkResult;

  /**
   * 
   * @param device
   */
  export function vkDeviceWaitIdle(device: VkDevice | null): VkResult;

  /**
   * 
   * @param device
   * @param pAllocateInfo
   * @param pAllocator
   * @param pMemory
   */
  export function vkAllocateMemory(device: VkDevice | null, pAllocateInfo: VkMemoryAllocateInfo | null, pAllocator: null, pMemory: VkDeviceMemory | null): VkResult;

  /**
   * 
   * @param device
   * @param memory
   * @param pAllocator
   */
  export function vkFreeMemory(device: VkDevice | null, memory: VkDeviceMemory | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param memory
   * @param offset
   * @param size
   * @param flags
   * @param ppData
   */
  export function vkMapMemory(device: VkDevice | null, memory: VkDeviceMemory | null, offset: bigint | number, size: bigint | number, flags: number, ppData: VkInoutAddress | null): VkResult;

  /**
   * 
   * @param device
   * @param memory
   */
  export function vkUnmapMemory(device: VkDevice | null, memory: VkDeviceMemory | null): void;

  /**
   * 
   * @param device
   * @param memoryRangeCount
   * @param pMemoryRanges
   */
  export function vkFlushMappedMemoryRanges(device: VkDevice | null, memoryRangeCount: number, pMemoryRanges: VkMappedMemoryRange[] | null): VkResult;

  /**
   * 
   * @param device
   * @param memoryRangeCount
   * @param pMemoryRanges
   */
  export function vkInvalidateMappedMemoryRanges(device: VkDevice | null, memoryRangeCount: number, pMemoryRanges: VkMappedMemoryRange[] | null): VkResult;

  /**
   * 
   * @param device
   * @param memory
   * @param pCommittedMemoryInBytes
   */
  export function vkGetDeviceMemoryCommitment(device: VkDevice | null, memory: VkDeviceMemory | null, pCommittedMemoryInBytes: VkInoutAddress | null): void;

  /**
   * 
   * @param device
   * @param buffer
   * @param pMemoryRequirements
   */
  export function vkGetBufferMemoryRequirements(device: VkDevice | null, buffer: VkBuffer | null, pMemoryRequirements: VkMemoryRequirements | null): void;

  /**
   * 
   * @param device
   * @param buffer
   * @param memory
   * @param memoryOffset
   */
  export function vkBindBufferMemory(device: VkDevice | null, buffer: VkBuffer | null, memory: VkDeviceMemory | null, memoryOffset: bigint | number): VkResult;

  /**
   * 
   * @param device
   * @param image
   * @param pMemoryRequirements
   */
  export function vkGetImageMemoryRequirements(device: VkDevice | null, image: VkImage | null, pMemoryRequirements: VkMemoryRequirements | null): void;

  /**
   * 
   * @param device
   * @param image
   * @param memory
   * @param memoryOffset
   */
  export function vkBindImageMemory(device: VkDevice | null, image: VkImage | null, memory: VkDeviceMemory | null, memoryOffset: bigint | number): VkResult;

  /**
   * 
   * @param device
   * @param image
   * @param pSparseMemoryRequirementCount
   * @param pSparseMemoryRequirements
   */
  export function vkGetImageSparseMemoryRequirements(device: VkDevice | null, image: VkImage | null, pSparseMemoryRequirementCount: VkInout | null, pSparseMemoryRequirements: VkSparseImageMemoryRequirements[] | null): void;

  /**
   * 
   * @param physicalDevice
   * @param format
   * @param type
   * @param samples
   * @param usage
   * @param tiling
   * @param pPropertyCount
   * @param pProperties
   */
  export function vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice: VkPhysicalDevice | null, format: VkFormat, type: VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlagBits, tiling: VkImageTiling, pPropertyCount: VkInout | null, pProperties: VkSparseImageFormatProperties[] | null): void;

  /**
   * 
   * @param queue
   * @param bindInfoCount
   * @param pBindInfo
   * @param fence
   */
  export function vkQueueBindSparse(queue: VkQueue | null, bindInfoCount: number, pBindInfo: VkBindSparseInfo[] | null, fence: VkFence | null): VkResult;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pFence
   */
  export function vkCreateFence(device: VkDevice | null, pCreateInfo: VkFenceCreateInfo | null, pAllocator: null, pFence: VkFence | null): VkResult;

  /**
   * 
   * @param device
   * @param fence
   * @param pAllocator
   */
  export function vkDestroyFence(device: VkDevice | null, fence: VkFence | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param fenceCount
   * @param pFences
   */
  export function vkResetFences(device: VkDevice | null, fenceCount: number, pFences: VkFence[] | null): VkResult;

  /**
   * 
   * @param device
   * @param fence
   */
  export function vkGetFenceStatus(device: VkDevice | null, fence: VkFence | null): VkResult;

  /**
   * 
   * @param device
   * @param fenceCount
   * @param pFences
   * @param waitAll
   * @param timeout
   */
  export function vkWaitForFences(device: VkDevice | null, fenceCount: number, pFences: VkFence[] | null, waitAll: boolean, timeout: bigint | number): VkResult;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pSemaphore
   */
  export function vkCreateSemaphore(device: VkDevice | null, pCreateInfo: VkSemaphoreCreateInfo | null, pAllocator: null, pSemaphore: VkSemaphore | null): VkResult;

  /**
   * 
   * @param device
   * @param semaphore
   * @param pAllocator
   */
  export function vkDestroySemaphore(device: VkDevice | null, semaphore: VkSemaphore | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pEvent
   */
  export function vkCreateEvent(device: VkDevice | null, pCreateInfo: VkEventCreateInfo | null, pAllocator: null, pEvent: VkEvent | null): VkResult;

  /**
   * 
   * @param device
   * @param event
   * @param pAllocator
   */
  export function vkDestroyEvent(device: VkDevice | null, event: VkEvent | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param event
   */
  export function vkGetEventStatus(device: VkDevice | null, event: VkEvent | null): VkResult;

  /**
   * 
   * @param device
   * @param event
   */
  export function vkSetEvent(device: VkDevice | null, event: VkEvent | null): VkResult;

  /**
   * 
   * @param device
   * @param event
   */
  export function vkResetEvent(device: VkDevice | null, event: VkEvent | null): VkResult;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pQueryPool
   */
  export function vkCreateQueryPool(device: VkDevice | null, pCreateInfo: VkQueryPoolCreateInfo | null, pAllocator: null, pQueryPool: VkQueryPool | null): VkResult;

  /**
   * 
   * @param device
   * @param queryPool
   * @param pAllocator
   */
  export function vkDestroyQueryPool(device: VkDevice | null, queryPool: VkQueryPool | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param queryPool
   * @param firstQuery
   * @param queryCount
   * @param dataSize
   * @param pData
   * @param stride
   * @param flags
   */
  export function vkGetQueryPoolResults(device: VkDevice | null, queryPool: VkQueryPool | null, firstQuery: number, queryCount: number, dataSize: bigint | number, pData: ArrayBuffer | null, stride: bigint | number, flags: VkQueryResultFlagBits): VkResult;

  /**
   * 
   * @param device
   * @param queryPool
   * @param firstQuery
   * @param queryCount
   */
  export function vkResetQueryPool(device: VkDevice | null, queryPool: VkQueryPool | null, firstQuery: number, queryCount: number): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pBuffer
   */
  export function vkCreateBuffer(device: VkDevice | null, pCreateInfo: VkBufferCreateInfo | null, pAllocator: null, pBuffer: VkBuffer | null): VkResult;

  /**
   * 
   * @param device
   * @param buffer
   * @param pAllocator
   */
  export function vkDestroyBuffer(device: VkDevice | null, buffer: VkBuffer | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pView
   */
  export function vkCreateBufferView(device: VkDevice | null, pCreateInfo: VkBufferViewCreateInfo | null, pAllocator: null, pView: VkBufferView | null): VkResult;

  /**
   * 
   * @param device
   * @param bufferView
   * @param pAllocator
   */
  export function vkDestroyBufferView(device: VkDevice | null, bufferView: VkBufferView | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pImage
   */
  export function vkCreateImage(device: VkDevice | null, pCreateInfo: VkImageCreateInfo | null, pAllocator: null, pImage: VkImage | null): VkResult;

  /**
   * 
   * @param device
   * @param image
   * @param pAllocator
   */
  export function vkDestroyImage(device: VkDevice | null, image: VkImage | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param image
   * @param pSubresource
   * @param pLayout
   */
  export function vkGetImageSubresourceLayout(device: VkDevice | null, image: VkImage | null, pSubresource: VkImageSubresource | null, pLayout: VkSubresourceLayout | null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pView
   */
  export function vkCreateImageView(device: VkDevice | null, pCreateInfo: VkImageViewCreateInfo | null, pAllocator: null, pView: VkImageView | null): VkResult;

  /**
   * 
   * @param device
   * @param imageView
   * @param pAllocator
   */
  export function vkDestroyImageView(device: VkDevice | null, imageView: VkImageView | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pShaderModule
   */
  export function vkCreateShaderModule(device: VkDevice | null, pCreateInfo: VkShaderModuleCreateInfo | null, pAllocator: null, pShaderModule: VkShaderModule | null): VkResult;

  /**
   * 
   * @param device
   * @param shaderModule
   * @param pAllocator
   */
  export function vkDestroyShaderModule(device: VkDevice | null, shaderModule: VkShaderModule | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pPipelineCache
   */
  export function vkCreatePipelineCache(device: VkDevice | null, pCreateInfo: VkPipelineCacheCreateInfo | null, pAllocator: null, pPipelineCache: VkPipelineCache | null): VkResult;

  /**
   * 
   * @param device
   * @param pipelineCache
   * @param pAllocator
   */
  export function vkDestroyPipelineCache(device: VkDevice | null, pipelineCache: VkPipelineCache | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param pipelineCache
   * @param pDataSize
   * @param pData
   */
  export function vkGetPipelineCacheData(device: VkDevice | null, pipelineCache: VkPipelineCache | null, pDataSize: VkInoutAddress | null, pData: ArrayBuffer | null): VkResult;

  /**
   * 
   * @param device
   * @param dstCache
   * @param srcCacheCount
   * @param pSrcCaches
   */
  export function vkMergePipelineCaches(device: VkDevice | null, dstCache: VkPipelineCache | null, srcCacheCount: number, pSrcCaches: VkPipelineCache[] | null): VkResult;

  /**
   * 
   * @param device
   * @param pipelineCache
   * @param createInfoCount
   * @param pCreateInfos
   * @param pAllocator
   * @param pPipelines
   */
  export function vkCreateGraphicsPipelines(device: VkDevice | null, pipelineCache: VkPipelineCache | null, createInfoCount: number, pCreateInfos: VkGraphicsPipelineCreateInfo[] | null, pAllocator: null, pPipelines: VkPipeline[] | null): VkResult;

  /**
   * 
   * @param device
   * @param pipelineCache
   * @param createInfoCount
   * @param pCreateInfos
   * @param pAllocator
   * @param pPipelines
   */
  export function vkCreateComputePipelines(device: VkDevice | null, pipelineCache: VkPipelineCache | null, createInfoCount: number, pCreateInfos: VkComputePipelineCreateInfo[] | null, pAllocator: null, pPipelines: VkPipeline[] | null): VkResult;

  /**
   * 
   * @param device
   * @param pipeline
   * @param pAllocator
   */
  export function vkDestroyPipeline(device: VkDevice | null, pipeline: VkPipeline | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pPipelineLayout
   */
  export function vkCreatePipelineLayout(device: VkDevice | null, pCreateInfo: VkPipelineLayoutCreateInfo | null, pAllocator: null, pPipelineLayout: VkPipelineLayout | null): VkResult;

  /**
   * 
   * @param device
   * @param pipelineLayout
   * @param pAllocator
   */
  export function vkDestroyPipelineLayout(device: VkDevice | null, pipelineLayout: VkPipelineLayout | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pSampler
   */
  export function vkCreateSampler(device: VkDevice | null, pCreateInfo: VkSamplerCreateInfo | null, pAllocator: null, pSampler: VkSampler | null): VkResult;

  /**
   * 
   * @param device
   * @param sampler
   * @param pAllocator
   */
  export function vkDestroySampler(device: VkDevice | null, sampler: VkSampler | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pSetLayout
   */
  export function vkCreateDescriptorSetLayout(device: VkDevice | null, pCreateInfo: VkDescriptorSetLayoutCreateInfo | null, pAllocator: null, pSetLayout: VkDescriptorSetLayout | null): VkResult;

  /**
   * 
   * @param device
   * @param descriptorSetLayout
   * @param pAllocator
   */
  export function vkDestroyDescriptorSetLayout(device: VkDevice | null, descriptorSetLayout: VkDescriptorSetLayout | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pDescriptorPool
   */
  export function vkCreateDescriptorPool(device: VkDevice | null, pCreateInfo: VkDescriptorPoolCreateInfo | null, pAllocator: null, pDescriptorPool: VkDescriptorPool | null): VkResult;

  /**
   * 
   * @param device
   * @param descriptorPool
   * @param pAllocator
   */
  export function vkDestroyDescriptorPool(device: VkDevice | null, descriptorPool: VkDescriptorPool | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param descriptorPool
   * @param flags
   */
  export function vkResetDescriptorPool(device: VkDevice | null, descriptorPool: VkDescriptorPool | null, flags: number): VkResult;

  /**
   * 
   * @param device
   * @param pAllocateInfo
   * @param pDescriptorSets
   */
  export function vkAllocateDescriptorSets(device: VkDevice | null, pAllocateInfo: VkDescriptorSetAllocateInfo | null, pDescriptorSets: VkDescriptorSet[] | null): VkResult;

  /**
   * 
   * @param device
   * @param descriptorPool
   * @param descriptorSetCount
   * @param pDescriptorSets
   */
  export function vkFreeDescriptorSets(device: VkDevice | null, descriptorPool: VkDescriptorPool | null, descriptorSetCount: number, pDescriptorSets: VkDescriptorSet[] | null): VkResult;

  /**
   * 
   * @param device
   * @param descriptorWriteCount
   * @param pDescriptorWrites
   * @param descriptorCopyCount
   * @param pDescriptorCopies
   */
  export function vkUpdateDescriptorSets(device: VkDevice | null, descriptorWriteCount: number, pDescriptorWrites: VkWriteDescriptorSet[] | null, descriptorCopyCount: number, pDescriptorCopies: VkCopyDescriptorSet[] | null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pFramebuffer
   */
  export function vkCreateFramebuffer(device: VkDevice | null, pCreateInfo: VkFramebufferCreateInfo | null, pAllocator: null, pFramebuffer: VkFramebuffer | null): VkResult;

  /**
   * 
   * @param device
   * @param framebuffer
   * @param pAllocator
   */
  export function vkDestroyFramebuffer(device: VkDevice | null, framebuffer: VkFramebuffer | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pRenderPass
   */
  export function vkCreateRenderPass(device: VkDevice | null, pCreateInfo: VkRenderPassCreateInfo | null, pAllocator: null, pRenderPass: VkRenderPass | null): VkResult;

  /**
   * 
   * @param device
   * @param renderPass
   * @param pAllocator
   */
  export function vkDestroyRenderPass(device: VkDevice | null, renderPass: VkRenderPass | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param renderPass
   * @param pGranularity
   */
  export function vkGetRenderAreaGranularity(device: VkDevice | null, renderPass: VkRenderPass | null, pGranularity: VkExtent2D | null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pCommandPool
   */
  export function vkCreateCommandPool(device: VkDevice | null, pCreateInfo: VkCommandPoolCreateInfo | null, pAllocator: null, pCommandPool: VkCommandPool | null): VkResult;

  /**
   * 
   * @param device
   * @param commandPool
   * @param pAllocator
   */
  export function vkDestroyCommandPool(device: VkDevice | null, commandPool: VkCommandPool | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param commandPool
   * @param flags
   */
  export function vkResetCommandPool(device: VkDevice | null, commandPool: VkCommandPool | null, flags: VkCommandPoolResetFlagBits): VkResult;

  /**
   * 
   * @param device
   * @param pAllocateInfo
   * @param pCommandBuffers
   */
  export function vkAllocateCommandBuffers(device: VkDevice | null, pAllocateInfo: VkCommandBufferAllocateInfo | null, pCommandBuffers: VkCommandBuffer[] | null): VkResult;

  /**
   * 
   * @param device
   * @param commandPool
   * @param commandBufferCount
   * @param pCommandBuffers
   */
  export function vkFreeCommandBuffers(device: VkDevice | null, commandPool: VkCommandPool | null, commandBufferCount: number, pCommandBuffers: VkCommandBuffer[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pBeginInfo
   */
  export function vkBeginCommandBuffer(commandBuffer: VkCommandBuffer | null, pBeginInfo: VkCommandBufferBeginInfo | null): VkResult;

  /**
   * 
   * @param commandBuffer
   */
  export function vkEndCommandBuffer(commandBuffer: VkCommandBuffer | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param flags
   */
  export function vkResetCommandBuffer(commandBuffer: VkCommandBuffer | null, flags: VkCommandBufferResetFlagBits): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param pipelineBindPoint
   * @param pipeline
   */
  export function vkCmdBindPipeline(commandBuffer: VkCommandBuffer | null, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline | null): void;

  /**
   * 
   * @param commandBuffer
   * @param firstViewport
   * @param viewportCount
   * @param pViewports
   */
  export function vkCmdSetViewport(commandBuffer: VkCommandBuffer | null, firstViewport: number, viewportCount: number, pViewports: VkViewport[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param firstScissor
   * @param scissorCount
   * @param pScissors
   */
  export function vkCmdSetScissor(commandBuffer: VkCommandBuffer | null, firstScissor: number, scissorCount: number, pScissors: VkRect2D[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param lineWidth
   */
  export function vkCmdSetLineWidth(commandBuffer: VkCommandBuffer | null, lineWidth: number): void;

  /**
   * 
   * @param commandBuffer
   * @param depthBiasConstantFactor
   * @param depthBiasClamp
   * @param depthBiasSlopeFactor
   */
  export function vkCmdSetDepthBias(commandBuffer: VkCommandBuffer | null, depthBiasConstantFactor: number, depthBiasClamp: number, depthBiasSlopeFactor: number): void;

  /**
   * 
   * @param commandBuffer
   * @param blendConstants
   */
  export function vkCmdSetBlendConstants(commandBuffer: VkCommandBuffer | null, blendConstants: number[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param minDepthBounds
   * @param maxDepthBounds
   */
  export function vkCmdSetDepthBounds(commandBuffer: VkCommandBuffer | null, minDepthBounds: number, maxDepthBounds: number): void;

  /**
   * 
   * @param commandBuffer
   * @param faceMask
   * @param compareMask
   */
  export function vkCmdSetStencilCompareMask(commandBuffer: VkCommandBuffer | null, faceMask: VkStencilFaceFlagBits, compareMask: number): void;

  /**
   * 
   * @param commandBuffer
   * @param faceMask
   * @param writeMask
   */
  export function vkCmdSetStencilWriteMask(commandBuffer: VkCommandBuffer | null, faceMask: VkStencilFaceFlagBits, writeMask: number): void;

  /**
   * 
   * @param commandBuffer
   * @param faceMask
   * @param reference
   */
  export function vkCmdSetStencilReference(commandBuffer: VkCommandBuffer | null, faceMask: VkStencilFaceFlagBits, reference: number): void;

  /**
   * 
   * @param commandBuffer
   * @param pipelineBindPoint
   * @param layout
   * @param firstSet
   * @param descriptorSetCount
   * @param pDescriptorSets
   * @param dynamicOffsetCount
   * @param pDynamicOffsets
   */
  export function vkCmdBindDescriptorSets(commandBuffer: VkCommandBuffer | null, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout | null, firstSet: number, descriptorSetCount: number, pDescriptorSets: VkDescriptorSet[] | null, dynamicOffsetCount: number, pDynamicOffsets: Uint32Array | null): void;

  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   * @param indexType
   */
  export function vkCmdBindIndexBuffer(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number, indexType: VkIndexType): void;

  /**
   * 
   * @param commandBuffer
   * @param firstBinding
   * @param bindingCount
   * @param pBuffers
   * @param pOffsets
   */
  export function vkCmdBindVertexBuffers(commandBuffer: VkCommandBuffer | null, firstBinding: number, bindingCount: number, pBuffers: VkBuffer[] | null, pOffsets: BigUint64Array | null): void;

  /**
   * 
   * @param commandBuffer
   * @param vertexCount
   * @param instanceCount
   * @param firstVertex
   * @param firstInstance
   */
  export function vkCmdDraw(commandBuffer: VkCommandBuffer | null, vertexCount: number, instanceCount: number, firstVertex: number, firstInstance: number): void;

  /**
   * 
   * @param commandBuffer
   * @param indexCount
   * @param instanceCount
   * @param firstIndex
   * @param vertexOffset
   * @param firstInstance
   */
  export function vkCmdDrawIndexed(commandBuffer: VkCommandBuffer | null, indexCount: number, instanceCount: number, firstIndex: number, vertexOffset: number, firstInstance: number): void;

  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   * @param drawCount
   * @param stride
   */
  export function vkCmdDrawIndirect(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number, drawCount: number, stride: number): void;

  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   * @param drawCount
   * @param stride
   */
  export function vkCmdDrawIndexedIndirect(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number, drawCount: number, stride: number): void;

  /**
   * 
   * @param commandBuffer
   * @param groupCountX
   * @param groupCountY
   * @param groupCountZ
   */
  export function vkCmdDispatch(commandBuffer: VkCommandBuffer | null, groupCountX: number, groupCountY: number, groupCountZ: number): void;

  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   */
  export function vkCmdDispatchIndirect(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number): void;

  /**
   * 
   * @param commandBuffer
   * @param srcBuffer
   * @param dstBuffer
   * @param regionCount
   * @param pRegions
   */
  export function vkCmdCopyBuffer(commandBuffer: VkCommandBuffer | null, srcBuffer: VkBuffer | null, dstBuffer: VkBuffer | null, regionCount: number, pRegions: VkBufferCopy[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param srcImage
   * @param srcImageLayout
   * @param dstImage
   * @param dstImageLayout
   * @param regionCount
   * @param pRegions
   */
  export function vkCmdCopyImage(commandBuffer: VkCommandBuffer | null, srcImage: VkImage | null, srcImageLayout: VkImageLayout, dstImage: VkImage | null, dstImageLayout: VkImageLayout, regionCount: number, pRegions: VkImageCopy[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param srcImage
   * @param srcImageLayout
   * @param dstImage
   * @param dstImageLayout
   * @param regionCount
   * @param pRegions
   * @param filter
   */
  export function vkCmdBlitImage(commandBuffer: VkCommandBuffer | null, srcImage: VkImage | null, srcImageLayout: VkImageLayout, dstImage: VkImage | null, dstImageLayout: VkImageLayout, regionCount: number, pRegions: VkImageBlit[] | null, filter: VkFilter): void;

  /**
   * 
   * @param commandBuffer
   * @param srcBuffer
   * @param dstImage
   * @param dstImageLayout
   * @param regionCount
   * @param pRegions
   */
  export function vkCmdCopyBufferToImage(commandBuffer: VkCommandBuffer | null, srcBuffer: VkBuffer | null, dstImage: VkImage | null, dstImageLayout: VkImageLayout, regionCount: number, pRegions: VkBufferImageCopy[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param srcImage
   * @param srcImageLayout
   * @param dstBuffer
   * @param regionCount
   * @param pRegions
   */
  export function vkCmdCopyImageToBuffer(commandBuffer: VkCommandBuffer | null, srcImage: VkImage | null, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer | null, regionCount: number, pRegions: VkBufferImageCopy[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param dstBuffer
   * @param dstOffset
   * @param dataSize
   * @param pData
   */
  export function vkCmdUpdateBuffer(commandBuffer: VkCommandBuffer | null, dstBuffer: VkBuffer | null, dstOffset: bigint | number, dataSize: bigint | number, pData: ArrayBuffer | null): void;

  /**
   * 
   * @param commandBuffer
   * @param dstBuffer
   * @param dstOffset
   * @param size
   * @param data
   */
  export function vkCmdFillBuffer(commandBuffer: VkCommandBuffer | null, dstBuffer: VkBuffer | null, dstOffset: bigint | number, size: bigint | number, data: number): void;

  /**
   * 
   * @param commandBuffer
   * @param image
   * @param imageLayout
   * @param pColor
   * @param rangeCount
   * @param pRanges
   */
  export function vkCmdClearColorImage(commandBuffer: VkCommandBuffer | null, image: VkImage | null, imageLayout: VkImageLayout, pColor: VkClearColorValue | null, rangeCount: number, pRanges: VkImageSubresourceRange[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param image
   * @param imageLayout
   * @param pDepthStencil
   * @param rangeCount
   * @param pRanges
   */
  export function vkCmdClearDepthStencilImage(commandBuffer: VkCommandBuffer | null, image: VkImage | null, imageLayout: VkImageLayout, pDepthStencil: VkClearDepthStencilValue | null, rangeCount: number, pRanges: VkImageSubresourceRange[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param attachmentCount
   * @param pAttachments
   * @param rectCount
   * @param pRects
   */
  export function vkCmdClearAttachments(commandBuffer: VkCommandBuffer | null, attachmentCount: number, pAttachments: VkClearAttachment[] | null, rectCount: number, pRects: VkClearRect[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param srcImage
   * @param srcImageLayout
   * @param dstImage
   * @param dstImageLayout
   * @param regionCount
   * @param pRegions
   */
  export function vkCmdResolveImage(commandBuffer: VkCommandBuffer | null, srcImage: VkImage | null, srcImageLayout: VkImageLayout, dstImage: VkImage | null, dstImageLayout: VkImageLayout, regionCount: number, pRegions: VkImageResolve[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param event
   * @param stageMask
   */
  export function vkCmdSetEvent(commandBuffer: VkCommandBuffer | null, event: VkEvent | null, stageMask: VkPipelineStageFlagBits): void;

  /**
   * 
   * @param commandBuffer
   * @param event
   * @param stageMask
   */
  export function vkCmdResetEvent(commandBuffer: VkCommandBuffer | null, event: VkEvent | null, stageMask: VkPipelineStageFlagBits): void;

  /**
   * 
   * @param commandBuffer
   * @param eventCount
   * @param pEvents
   * @param srcStageMask
   * @param dstStageMask
   * @param memoryBarrierCount
   * @param pMemoryBarriers
   * @param bufferMemoryBarrierCount
   * @param pBufferMemoryBarriers
   * @param imageMemoryBarrierCount
   * @param pImageMemoryBarriers
   */
  export function vkCmdWaitEvents(commandBuffer: VkCommandBuffer | null, eventCount: number, pEvents: VkEvent[] | null, srcStageMask: VkPipelineStageFlagBits, dstStageMask: VkPipelineStageFlagBits, memoryBarrierCount: number, pMemoryBarriers: VkMemoryBarrier[] | null, bufferMemoryBarrierCount: number, pBufferMemoryBarriers: VkBufferMemoryBarrier[] | null, imageMemoryBarrierCount: number, pImageMemoryBarriers: VkImageMemoryBarrier[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param srcStageMask
   * @param dstStageMask
   * @param dependencyFlags
   * @param memoryBarrierCount
   * @param pMemoryBarriers
   * @param bufferMemoryBarrierCount
   * @param pBufferMemoryBarriers
   * @param imageMemoryBarrierCount
   * @param pImageMemoryBarriers
   */
  export function vkCmdPipelineBarrier(commandBuffer: VkCommandBuffer | null, srcStageMask: VkPipelineStageFlagBits, dstStageMask: VkPipelineStageFlagBits, dependencyFlags: VkDependencyFlagBits, memoryBarrierCount: number, pMemoryBarriers: VkMemoryBarrier[] | null, bufferMemoryBarrierCount: number, pBufferMemoryBarriers: VkBufferMemoryBarrier[] | null, imageMemoryBarrierCount: number, pImageMemoryBarriers: VkImageMemoryBarrier[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param queryPool
   * @param query
   * @param flags
   */
  export function vkCmdBeginQuery(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, query: number, flags: VkQueryControlFlagBits): void;

  /**
   * 
   * @param commandBuffer
   * @param queryPool
   * @param query
   */
  export function vkCmdEndQuery(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, query: number): void;

  /**
   * 
   * @param commandBuffer
   * @param pConditionalRenderingBegin
   */
  export function vkCmdBeginConditionalRenderingEXT(commandBuffer: VkCommandBuffer | null, pConditionalRenderingBegin: VkConditionalRenderingBeginInfoEXT | null): void;

  /**
   * 
   * @param commandBuffer
   */
  export function vkCmdEndConditionalRenderingEXT(commandBuffer: VkCommandBuffer | null): void;

  /**
   * 
   * @param commandBuffer
   * @param queryPool
   * @param firstQuery
   * @param queryCount
   */
  export function vkCmdResetQueryPool(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, firstQuery: number, queryCount: number): void;

  /**
   * 
   * @param commandBuffer
   * @param pipelineStage
   * @param queryPool
   * @param query
   */
  export function vkCmdWriteTimestamp(commandBuffer: VkCommandBuffer | null, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool | null, query: number): void;

  /**
   * 
   * @param commandBuffer
   * @param queryPool
   * @param firstQuery
   * @param queryCount
   * @param dstBuffer
   * @param dstOffset
   * @param stride
   * @param flags
   */
  export function vkCmdCopyQueryPoolResults(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, firstQuery: number, queryCount: number, dstBuffer: VkBuffer | null, dstOffset: bigint | number, stride: bigint | number, flags: VkQueryResultFlagBits): void;

  /**
   * 
   * @param commandBuffer
   * @param layout
   * @param stageFlags
   * @param offset
   * @param size
   * @param pValues
   */
  export function vkCmdPushConstants(commandBuffer: VkCommandBuffer | null, layout: VkPipelineLayout | null, stageFlags: VkShaderStageFlagBits, offset: number, size: number, pValues: ArrayBuffer | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pRenderPassBegin
   * @param contents
   */
  export function vkCmdBeginRenderPass(commandBuffer: VkCommandBuffer | null, pRenderPassBegin: VkRenderPassBeginInfo | null, contents: VkSubpassContents): void;

  /**
   * 
   * @param commandBuffer
   * @param contents
   */
  export function vkCmdNextSubpass(commandBuffer: VkCommandBuffer | null, contents: VkSubpassContents): void;

  /**
   * 
   * @param commandBuffer
   */
  export function vkCmdEndRenderPass(commandBuffer: VkCommandBuffer | null): void;

  /**
   * 
   * @param commandBuffer
   * @param commandBufferCount
   * @param pCommandBuffers
   */
  export function vkCmdExecuteCommands(commandBuffer: VkCommandBuffer | null, commandBufferCount: number, pCommandBuffers: VkCommandBuffer[] | null): void;

  /**
   * 
   * @param physicalDevice
   * @param pPropertyCount
   * @param pProperties
   */
  export function vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout | null, pProperties: VkDisplayPropertiesKHR[] | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param pPropertyCount
   * @param pProperties
   */
  export function vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout | null, pProperties: VkDisplayPlanePropertiesKHR[] | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param planeIndex
   * @param pDisplayCount
   * @param pDisplays
   */
  export function vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice: VkPhysicalDevice | null, planeIndex: number, pDisplayCount: VkInout | null, pDisplays: VkDisplayKHR[] | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param display
   * @param pPropertyCount
   * @param pProperties
   */
  export function vkGetDisplayModePropertiesKHR(physicalDevice: VkPhysicalDevice | null, display: VkDisplayKHR | null, pPropertyCount: VkInout | null, pProperties: VkDisplayModePropertiesKHR[] | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param display
   * @param pCreateInfo
   * @param pAllocator
   * @param pMode
   */
  export function vkCreateDisplayModeKHR(physicalDevice: VkPhysicalDevice | null, display: VkDisplayKHR | null, pCreateInfo: VkDisplayModeCreateInfoKHR | null, pAllocator: null, pMode: VkDisplayModeKHR | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param mode
   * @param planeIndex
   * @param pCapabilities
   */
  export function vkGetDisplayPlaneCapabilitiesKHR(physicalDevice: VkPhysicalDevice | null, mode: VkDisplayModeKHR | null, planeIndex: number, pCapabilities: VkDisplayPlaneCapabilitiesKHR | null): VkResult;

  /**
   * 
   * @param instance
   * @param pCreateInfo
   * @param pAllocator
   * @param pSurface
   */
  export function vkCreateDisplayPlaneSurfaceKHR(instance: VkInstance | null, pCreateInfo: VkDisplaySurfaceCreateInfoKHR | null, pAllocator: null, pSurface: VkSurfaceKHR | null): VkResult;

  /**
   * 
   * @param device
   * @param swapchainCount
   * @param pCreateInfos
   * @param pAllocator
   * @param pSwapchains
   */
  export function vkCreateSharedSwapchainsKHR(device: VkDevice | null, swapchainCount: number, pCreateInfos: VkSwapchainCreateInfoKHR[] | null, pAllocator: null, pSwapchains: VkSwapchainKHR[] | null): VkResult;

  /**
   * 
   * @param instance
   * @param surface
   * @param pAllocator
   */
  export function vkDestroySurfaceKHR(instance: VkInstance | null, surface: VkSurfaceKHR | null, pAllocator: null): void;

  /**
   * 
   * @param physicalDevice
   * @param queueFamilyIndex
   * @param surface
   * @param pSupported
   */
  export function vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice: VkPhysicalDevice | null, queueFamilyIndex: number, surface: VkSurfaceKHR | null, pSupported: VkInout | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param surface
   * @param pSurfaceCapabilities
   */
  export function vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pSurfaceCapabilities: VkSurfaceCapabilitiesKHR | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param surface
   * @param pSurfaceFormatCount
   * @param pSurfaceFormats
   */
  export function vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pSurfaceFormatCount: VkInout | null, pSurfaceFormats: VkSurfaceFormatKHR[] | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param surface
   * @param pPresentModeCount
   * @param pPresentModes
   */
  export function vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pPresentModeCount: VkInout | null, pPresentModes: Int32Array | null): VkResult;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pSwapchain
   */
  export function vkCreateSwapchainKHR(device: VkDevice | null, pCreateInfo: VkSwapchainCreateInfoKHR | null, pAllocator: null, pSwapchain: VkSwapchainKHR | null): VkResult;

  /**
   * 
   * @param device
   * @param swapchain
   * @param pAllocator
   */
  export function vkDestroySwapchainKHR(device: VkDevice | null, swapchain: VkSwapchainKHR | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param swapchain
   * @param pSwapchainImageCount
   * @param pSwapchainImages
   */
  export function vkGetSwapchainImagesKHR(device: VkDevice | null, swapchain: VkSwapchainKHR | null, pSwapchainImageCount: VkInout | null, pSwapchainImages: VkImage[] | null): VkResult;

  /**
   * 
   * @param device
   * @param swapchain
   * @param timeout
   * @param semaphore
   * @param fence
   * @param pImageIndex
   */
  export function vkAcquireNextImageKHR(device: VkDevice | null, swapchain: VkSwapchainKHR | null, timeout: bigint | number, semaphore: VkSemaphore | null, fence: VkFence | null, pImageIndex: VkInout | null): VkResult;

  /**
   * 
   * @param queue
   * @param pPresentInfo
   */
  export function vkQueuePresentKHR(queue: VkQueue | null, pPresentInfo: VkPresentInfoKHR | null): VkResult;

  /**
   * 
   * @param instance
   * @param pCreateInfo
   * @param pAllocator
   * @param pSurface
   */
  export function vkCreateWin32SurfaceKHR(instance: VkInstance | null, pCreateInfo: VkWin32SurfaceCreateInfoKHR | null, pAllocator: null, pSurface: VkSurfaceKHR | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param queueFamilyIndex
   */
  export function vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice: VkPhysicalDevice | null, queueFamilyIndex: number): number;

  /**
   * 
   * @param instance
   * @param pCreateInfo
   * @param pAllocator
   * @param pCallback
   */
  export function vkCreateDebugReportCallbackEXT(instance: VkInstance | null, pCreateInfo: VkDebugReportCallbackCreateInfoEXT | null, pAllocator: null, pCallback: VkDebugReportCallbackEXT | null): VkResult;

  /**
   * 
   * @param instance
   * @param callback
   * @param pAllocator
   */
  export function vkDestroyDebugReportCallbackEXT(instance: VkInstance | null, callback: VkDebugReportCallbackEXT | null, pAllocator: null): void;

  /**
   * 
   * @param instance
   * @param flags
   * @param objectType
   * @param object
   * @param location
   * @param messageCode
   * @param pLayerPrefix
   * @param pMessage
   */
  export function vkDebugReportMessageEXT(instance: VkInstance | null, flags: VkDebugReportFlagBitsEXT, objectType: VkDebugReportObjectTypeEXT, object: bigint | number, location: bigint | number, messageCode: number, pLayerPrefix: string | null, pMessage: string | null): void;

  /**
   * 
   * @param device
   * @param pNameInfo
   */
  export function vkDebugMarkerSetObjectNameEXT(device: VkDevice | null, pNameInfo: VkDebugMarkerObjectNameInfoEXT | null): VkResult;

  /**
   * 
   * @param device
   * @param pTagInfo
   */
  export function vkDebugMarkerSetObjectTagEXT(device: VkDevice | null, pTagInfo: VkDebugMarkerObjectTagInfoEXT | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param pMarkerInfo
   */
  export function vkCmdDebugMarkerBeginEXT(commandBuffer: VkCommandBuffer | null, pMarkerInfo: VkDebugMarkerMarkerInfoEXT | null): void;

  /**
   * 
   * @param commandBuffer
   */
  export function vkCmdDebugMarkerEndEXT(commandBuffer: VkCommandBuffer | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pMarkerInfo
   */
  export function vkCmdDebugMarkerInsertEXT(commandBuffer: VkCommandBuffer | null, pMarkerInfo: VkDebugMarkerMarkerInfoEXT | null): void;

  /**
   * 
   * @param physicalDevice
   * @param format
   * @param type
   * @param tiling
   * @param usage
   * @param flags
   * @param externalHandleType
   * @param pExternalImageFormatProperties
   */
  export function vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice: VkPhysicalDevice | null, format: VkFormat, type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlagBits, flags: VkImageCreateFlagBits, externalHandleType: VkExternalMemoryHandleTypeFlagBitsNV, pExternalImageFormatProperties: VkExternalImageFormatPropertiesNV | null): VkResult;

  /**
   * 
   * @param device
   * @param memory
   * @param handleType
   * @param pHandle
   */
  export function vkGetMemoryWin32HandleNV(device: VkDevice | null, memory: VkDeviceMemory | null, handleType: VkExternalMemoryHandleTypeFlagBitsNV, pHandle: VkInoutAddress | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param isPreprocessed
   * @param pGeneratedCommandsInfo
   */
  export function vkCmdExecuteGeneratedCommandsNV(commandBuffer: VkCommandBuffer | null, isPreprocessed: boolean, pGeneratedCommandsInfo: VkGeneratedCommandsInfoNV | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pGeneratedCommandsInfo
   */
  export function vkCmdPreprocessGeneratedCommandsNV(commandBuffer: VkCommandBuffer | null, pGeneratedCommandsInfo: VkGeneratedCommandsInfoNV | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pipelineBindPoint
   * @param pipeline
   * @param groupIndex
   */
  export function vkCmdBindPipelineShaderGroupNV(commandBuffer: VkCommandBuffer | null, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline | null, groupIndex: number): void;

  /**
   * 
   * @param device
   * @param pInfo
   * @param pMemoryRequirements
   */
  export function vkGetGeneratedCommandsMemoryRequirementsNV(device: VkDevice | null, pInfo: VkGeneratedCommandsMemoryRequirementsInfoNV | null, pMemoryRequirements: VkMemoryRequirements2 | null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pIndirectCommandsLayout
   */
  export function vkCreateIndirectCommandsLayoutNV(device: VkDevice | null, pCreateInfo: VkIndirectCommandsLayoutCreateInfoNV | null, pAllocator: null, pIndirectCommandsLayout: VkIndirectCommandsLayoutNV | null): VkResult;

  /**
   * 
   * @param device
   * @param indirectCommandsLayout
   * @param pAllocator
   */
  export function vkDestroyIndirectCommandsLayoutNV(device: VkDevice | null, indirectCommandsLayout: VkIndirectCommandsLayoutNV | null, pAllocator: null): void;

  /**
   * 
   * @param physicalDevice
   * @param pFeatures
   */
  export function vkGetPhysicalDeviceFeatures2(physicalDevice: VkPhysicalDevice | null, pFeatures: VkPhysicalDeviceFeatures2 | null): void;

  /**
   * 
   * @param physicalDevice
   * @param pProperties
   */
  export function vkGetPhysicalDeviceProperties2(physicalDevice: VkPhysicalDevice | null, pProperties: VkPhysicalDeviceProperties2 | null): void;

  /**
   * 
   * @param physicalDevice
   * @param format
   * @param pFormatProperties
   */
  export function vkGetPhysicalDeviceFormatProperties2(physicalDevice: VkPhysicalDevice | null, format: VkFormat, pFormatProperties: VkFormatProperties2 | null): void;

  /**
   * 
   * @param physicalDevice
   * @param pImageFormatInfo
   * @param pImageFormatProperties
   */
  export function vkGetPhysicalDeviceImageFormatProperties2(physicalDevice: VkPhysicalDevice | null, pImageFormatInfo: VkPhysicalDeviceImageFormatInfo2 | null, pImageFormatProperties: VkImageFormatProperties2 | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param pQueueFamilyPropertyCount
   * @param pQueueFamilyProperties
   */
  export function vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice: VkPhysicalDevice | null, pQueueFamilyPropertyCount: VkInout | null, pQueueFamilyProperties: VkQueueFamilyProperties2[] | null): void;

  /**
   * 
   * @param physicalDevice
   * @param pMemoryProperties
   */
  export function vkGetPhysicalDeviceMemoryProperties2(physicalDevice: VkPhysicalDevice | null, pMemoryProperties: VkPhysicalDeviceMemoryProperties2 | null): void;

  /**
   * 
   * @param physicalDevice
   * @param pFormatInfo
   * @param pPropertyCount
   * @param pProperties
   */
  export function vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice: VkPhysicalDevice | null, pFormatInfo: VkPhysicalDeviceSparseImageFormatInfo2 | null, pPropertyCount: VkInout | null, pProperties: VkSparseImageFormatProperties2[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pipelineBindPoint
   * @param layout
   * @param set
   * @param descriptorWriteCount
   * @param pDescriptorWrites
   */
  export function vkCmdPushDescriptorSetKHR(commandBuffer: VkCommandBuffer | null, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout | null, set: number, descriptorWriteCount: number, pDescriptorWrites: VkWriteDescriptorSet[] | null): void;

  /**
   * 
   * @param device
   * @param commandPool
   * @param flags
   */
  export function vkTrimCommandPool(device: VkDevice | null, commandPool: VkCommandPool | null, flags: number): void;

  /**
   * 
   * @param physicalDevice
   * @param pExternalBufferInfo
   * @param pExternalBufferProperties
   */
  export function vkGetPhysicalDeviceExternalBufferProperties(physicalDevice: VkPhysicalDevice | null, pExternalBufferInfo: VkPhysicalDeviceExternalBufferInfo | null, pExternalBufferProperties: VkExternalBufferProperties | null): void;

  /**
   * 
   * @param device
   * @param pGetWin32HandleInfo
   * @param pHandle
   */
  export function vkGetMemoryWin32HandleKHR(device: VkDevice | null, pGetWin32HandleInfo: VkMemoryGetWin32HandleInfoKHR | null, pHandle: VkInoutAddress | null): VkResult;

  /**
   * 
   * @param device
   * @param handleType
   * @param handle
   * @param pMemoryWin32HandleProperties
   */
  export function vkGetMemoryWin32HandlePropertiesKHR(device: VkDevice | null, handleType: VkExternalMemoryHandleTypeFlagBits, handle: bigint | number, pMemoryWin32HandleProperties: VkMemoryWin32HandlePropertiesKHR | null): VkResult;

  /**
   * 
   * @param device
   * @param pGetFdInfo
   * @param pFd
   */
  export function vkGetMemoryFdKHR(device: VkDevice | null, pGetFdInfo: VkMemoryGetFdInfoKHR | null, pFd: VkInout | null): VkResult;

  /**
   * 
   * @param device
   * @param handleType
   * @param fd
   * @param pMemoryFdProperties
   */
  export function vkGetMemoryFdPropertiesKHR(device: VkDevice | null, handleType: VkExternalMemoryHandleTypeFlagBits, fd: number, pMemoryFdProperties: VkMemoryFdPropertiesKHR | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param pExternalSemaphoreInfo
   * @param pExternalSemaphoreProperties
   */
  export function vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice: VkPhysicalDevice | null, pExternalSemaphoreInfo: VkPhysicalDeviceExternalSemaphoreInfo | null, pExternalSemaphoreProperties: VkExternalSemaphoreProperties | null): void;

  /**
   * 
   * @param device
   * @param pGetWin32HandleInfo
   * @param pHandle
   */
  export function vkGetSemaphoreWin32HandleKHR(device: VkDevice | null, pGetWin32HandleInfo: VkSemaphoreGetWin32HandleInfoKHR | null, pHandle: VkInoutAddress | null): VkResult;

  /**
   * 
   * @param device
   * @param pImportSemaphoreWin32HandleInfo
   */
  export function vkImportSemaphoreWin32HandleKHR(device: VkDevice | null, pImportSemaphoreWin32HandleInfo: VkImportSemaphoreWin32HandleInfoKHR | null): VkResult;

  /**
   * 
   * @param device
   * @param pGetFdInfo
   * @param pFd
   */
  export function vkGetSemaphoreFdKHR(device: VkDevice | null, pGetFdInfo: VkSemaphoreGetFdInfoKHR | null, pFd: VkInout | null): VkResult;

  /**
   * 
   * @param device
   * @param pImportSemaphoreFdInfo
   */
  export function vkImportSemaphoreFdKHR(device: VkDevice | null, pImportSemaphoreFdInfo: VkImportSemaphoreFdInfoKHR | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param pExternalFenceInfo
   * @param pExternalFenceProperties
   */
  export function vkGetPhysicalDeviceExternalFenceProperties(physicalDevice: VkPhysicalDevice | null, pExternalFenceInfo: VkPhysicalDeviceExternalFenceInfo | null, pExternalFenceProperties: VkExternalFenceProperties | null): void;

  /**
   * 
   * @param device
   * @param pGetWin32HandleInfo
   * @param pHandle
   */
  export function vkGetFenceWin32HandleKHR(device: VkDevice | null, pGetWin32HandleInfo: VkFenceGetWin32HandleInfoKHR | null, pHandle: VkInoutAddress | null): VkResult;

  /**
   * 
   * @param device
   * @param pImportFenceWin32HandleInfo
   */
  export function vkImportFenceWin32HandleKHR(device: VkDevice | null, pImportFenceWin32HandleInfo: VkImportFenceWin32HandleInfoKHR | null): VkResult;

  /**
   * 
   * @param device
   * @param pGetFdInfo
   * @param pFd
   */
  export function vkGetFenceFdKHR(device: VkDevice | null, pGetFdInfo: VkFenceGetFdInfoKHR | null, pFd: VkInout | null): VkResult;

  /**
   * 
   * @param device
   * @param pImportFenceFdInfo
   */
  export function vkImportFenceFdKHR(device: VkDevice | null, pImportFenceFdInfo: VkImportFenceFdInfoKHR | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param display
   */
  export function vkReleaseDisplayEXT(physicalDevice: VkPhysicalDevice | null, display: VkDisplayKHR | null): VkResult;

  /**
   * 
   * @param device
   * @param display
   * @param pDisplayPowerInfo
   */
  export function vkDisplayPowerControlEXT(device: VkDevice | null, display: VkDisplayKHR | null, pDisplayPowerInfo: VkDisplayPowerInfoEXT | null): VkResult;

  /**
   * 
   * @param device
   * @param pDeviceEventInfo
   * @param pAllocator
   * @param pFence
   */
  export function vkRegisterDeviceEventEXT(device: VkDevice | null, pDeviceEventInfo: VkDeviceEventInfoEXT | null, pAllocator: null, pFence: VkFence | null): VkResult;

  /**
   * 
   * @param device
   * @param display
   * @param pDisplayEventInfo
   * @param pAllocator
   * @param pFence
   */
  export function vkRegisterDisplayEventEXT(device: VkDevice | null, display: VkDisplayKHR | null, pDisplayEventInfo: VkDisplayEventInfoEXT | null, pAllocator: null, pFence: VkFence | null): VkResult;

  /**
   * 
   * @param device
   * @param swapchain
   * @param counter
   * @param pCounterValue
   */
  export function vkGetSwapchainCounterEXT(device: VkDevice | null, swapchain: VkSwapchainKHR | null, counter: VkSurfaceCounterFlagBitsEXT, pCounterValue: VkInoutAddress | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param surface
   * @param pSurfaceCapabilities
   */
  export function vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pSurfaceCapabilities: VkSurfaceCapabilities2EXT | null): VkResult;

  /**
   * 
   * @param instance
   * @param pPhysicalDeviceGroupCount
   * @param pPhysicalDeviceGroupProperties
   */
  export function vkEnumeratePhysicalDeviceGroups(instance: VkInstance | null, pPhysicalDeviceGroupCount: VkInout | null, pPhysicalDeviceGroupProperties: VkPhysicalDeviceGroupProperties[] | null): VkResult;

  /**
   * 
   * @param device
   * @param heapIndex
   * @param localDeviceIndex
   * @param remoteDeviceIndex
   * @param pPeerMemoryFeatures
   */
  export function vkGetDeviceGroupPeerMemoryFeatures(device: VkDevice | null, heapIndex: number, localDeviceIndex: number, remoteDeviceIndex: number, pPeerMemoryFeatures: VkInout | null): void;

  /**
   * 
   * @param device
   * @param bindInfoCount
   * @param pBindInfos
   */
  export function vkBindBufferMemory2(device: VkDevice | null, bindInfoCount: number, pBindInfos: VkBindBufferMemoryInfo[] | null): VkResult;

  /**
   * 
   * @param device
   * @param bindInfoCount
   * @param pBindInfos
   */
  export function vkBindImageMemory2(device: VkDevice | null, bindInfoCount: number, pBindInfos: VkBindImageMemoryInfo[] | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param deviceMask
   */
  export function vkCmdSetDeviceMask(commandBuffer: VkCommandBuffer | null, deviceMask: number): void;

  /**
   * 
   * @param device
   * @param pDeviceGroupPresentCapabilities
   */
  export function vkGetDeviceGroupPresentCapabilitiesKHR(device: VkDevice | null, pDeviceGroupPresentCapabilities: VkDeviceGroupPresentCapabilitiesKHR | null): VkResult;

  /**
   * 
   * @param device
   * @param surface
   * @param pModes
   */
  export function vkGetDeviceGroupSurfacePresentModesKHR(device: VkDevice | null, surface: VkSurfaceKHR | null, pModes: VkInout | null): VkResult;

  /**
   * 
   * @param device
   * @param pAcquireInfo
   * @param pImageIndex
   */
  export function vkAcquireNextImage2KHR(device: VkDevice | null, pAcquireInfo: VkAcquireNextImageInfoKHR | null, pImageIndex: VkInout | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param baseGroupX
   * @param baseGroupY
   * @param baseGroupZ
   * @param groupCountX
   * @param groupCountY
   * @param groupCountZ
   */
  export function vkCmdDispatchBase(commandBuffer: VkCommandBuffer | null, baseGroupX: number, baseGroupY: number, baseGroupZ: number, groupCountX: number, groupCountY: number, groupCountZ: number): void;

  /**
   * 
   * @param physicalDevice
   * @param surface
   * @param pRectCount
   * @param pRects
   */
  export function vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pRectCount: VkInout | null, pRects: VkRect2D[] | null): VkResult;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pDescriptorUpdateTemplate
   */
  export function vkCreateDescriptorUpdateTemplate(device: VkDevice | null, pCreateInfo: VkDescriptorUpdateTemplateCreateInfo | null, pAllocator: null, pDescriptorUpdateTemplate: VkDescriptorUpdateTemplate | null): VkResult;

  /**
   * 
   * @param device
   * @param descriptorUpdateTemplate
   * @param pAllocator
   */
  export function vkDestroyDescriptorUpdateTemplate(device: VkDevice | null, descriptorUpdateTemplate: VkDescriptorUpdateTemplate | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param descriptorSet
   * @param descriptorUpdateTemplate
   * @param pData
   */
  export function vkUpdateDescriptorSetWithTemplate(device: VkDevice | null, descriptorSet: VkDescriptorSet | null, descriptorUpdateTemplate: VkDescriptorUpdateTemplate | null, pData: ArrayBuffer | null): void;

  /**
   * 
   * @param commandBuffer
   * @param descriptorUpdateTemplate
   * @param layout
   * @param set
   * @param pData
   */
  export function vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer: VkCommandBuffer | null, descriptorUpdateTemplate: VkDescriptorUpdateTemplate | null, layout: VkPipelineLayout | null, set: number, pData: ArrayBuffer | null): void;

  /**
   * 
   * @param device
   * @param swapchainCount
   * @param pSwapchains
   * @param pMetadata
   */
  export function vkSetHdrMetadataEXT(device: VkDevice | null, swapchainCount: number, pSwapchains: VkSwapchainKHR[] | null, pMetadata: VkHdrMetadataEXT[] | null): void;

  /**
   * 
   * @param device
   * @param swapchain
   */
  export function vkGetSwapchainStatusKHR(device: VkDevice | null, swapchain: VkSwapchainKHR | null): VkResult;

  /**
   * 
   * @param device
   * @param swapchain
   * @param pDisplayTimingProperties
   */
  export function vkGetRefreshCycleDurationGOOGLE(device: VkDevice | null, swapchain: VkSwapchainKHR | null, pDisplayTimingProperties: VkRefreshCycleDurationGOOGLE | null): VkResult;

  /**
   * 
   * @param device
   * @param swapchain
   * @param pPresentationTimingCount
   * @param pPresentationTimings
   */
  export function vkGetPastPresentationTimingGOOGLE(device: VkDevice | null, swapchain: VkSwapchainKHR | null, pPresentationTimingCount: VkInout | null, pPresentationTimings: VkPastPresentationTimingGOOGLE[] | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param firstViewport
   * @param viewportCount
   * @param pViewportWScalings
   */
  export function vkCmdSetViewportWScalingNV(commandBuffer: VkCommandBuffer | null, firstViewport: number, viewportCount: number, pViewportWScalings: VkViewportWScalingNV[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param firstDiscardRectangle
   * @param discardRectangleCount
   * @param pDiscardRectangles
   */
  export function vkCmdSetDiscardRectangleEXT(commandBuffer: VkCommandBuffer | null, firstDiscardRectangle: number, discardRectangleCount: number, pDiscardRectangles: VkRect2D[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pSampleLocationsInfo
   */
  export function vkCmdSetSampleLocationsEXT(commandBuffer: VkCommandBuffer | null, pSampleLocationsInfo: VkSampleLocationsInfoEXT | null): void;

  /**
   * 
   * @param physicalDevice
   * @param samples
   * @param pMultisampleProperties
   */
  export function vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice: VkPhysicalDevice | null, samples: VkSampleCountFlagBits, pMultisampleProperties: VkMultisamplePropertiesEXT | null): void;

  /**
   * 
   * @param physicalDevice
   * @param pSurfaceInfo
   * @param pSurfaceCapabilities
   */
  export function vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice: VkPhysicalDevice | null, pSurfaceInfo: VkPhysicalDeviceSurfaceInfo2KHR | null, pSurfaceCapabilities: VkSurfaceCapabilities2KHR | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param pSurfaceInfo
   * @param pSurfaceFormatCount
   * @param pSurfaceFormats
   */
  export function vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice: VkPhysicalDevice | null, pSurfaceInfo: VkPhysicalDeviceSurfaceInfo2KHR | null, pSurfaceFormatCount: VkInout | null, pSurfaceFormats: VkSurfaceFormat2KHR[] | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param pPropertyCount
   * @param pProperties
   */
  export function vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout | null, pProperties: VkDisplayProperties2KHR[] | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param pPropertyCount
   * @param pProperties
   */
  export function vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout | null, pProperties: VkDisplayPlaneProperties2KHR[] | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param display
   * @param pPropertyCount
   * @param pProperties
   */
  export function vkGetDisplayModeProperties2KHR(physicalDevice: VkPhysicalDevice | null, display: VkDisplayKHR | null, pPropertyCount: VkInout | null, pProperties: VkDisplayModeProperties2KHR[] | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param pDisplayPlaneInfo
   * @param pCapabilities
   */
  export function vkGetDisplayPlaneCapabilities2KHR(physicalDevice: VkPhysicalDevice | null, pDisplayPlaneInfo: VkDisplayPlaneInfo2KHR | null, pCapabilities: VkDisplayPlaneCapabilities2KHR | null): VkResult;

  /**
   * 
   * @param device
   * @param pInfo
   * @param pMemoryRequirements
   */
  export function vkGetBufferMemoryRequirements2(device: VkDevice | null, pInfo: VkBufferMemoryRequirementsInfo2 | null, pMemoryRequirements: VkMemoryRequirements2 | null): void;

  /**
   * 
   * @param device
   * @param pInfo
   * @param pMemoryRequirements
   */
  export function vkGetImageMemoryRequirements2(device: VkDevice | null, pInfo: VkImageMemoryRequirementsInfo2 | null, pMemoryRequirements: VkMemoryRequirements2 | null): void;

  /**
   * 
   * @param device
   * @param pInfo
   * @param pSparseMemoryRequirementCount
   * @param pSparseMemoryRequirements
   */
  export function vkGetImageSparseMemoryRequirements2(device: VkDevice | null, pInfo: VkImageSparseMemoryRequirementsInfo2 | null, pSparseMemoryRequirementCount: VkInout | null, pSparseMemoryRequirements: VkSparseImageMemoryRequirements2[] | null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pYcbcrConversion
   */
  export function vkCreateSamplerYcbcrConversion(device: VkDevice | null, pCreateInfo: VkSamplerYcbcrConversionCreateInfo | null, pAllocator: null, pYcbcrConversion: VkSamplerYcbcrConversion | null): VkResult;

  /**
   * 
   * @param device
   * @param ycbcrConversion
   * @param pAllocator
   */
  export function vkDestroySamplerYcbcrConversion(device: VkDevice | null, ycbcrConversion: VkSamplerYcbcrConversion | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param pQueueInfo
   * @param pQueue
   */
  export function vkGetDeviceQueue2(device: VkDevice | null, pQueueInfo: VkDeviceQueueInfo2 | null, pQueue: VkQueue | null): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pValidationCache
   */
  export function vkCreateValidationCacheEXT(device: VkDevice | null, pCreateInfo: VkValidationCacheCreateInfoEXT | null, pAllocator: null, pValidationCache: VkValidationCacheEXT | null): VkResult;

  /**
   * 
   * @param device
   * @param validationCache
   * @param pAllocator
   */
  export function vkDestroyValidationCacheEXT(device: VkDevice | null, validationCache: VkValidationCacheEXT | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param validationCache
   * @param pDataSize
   * @param pData
   */
  export function vkGetValidationCacheDataEXT(device: VkDevice | null, validationCache: VkValidationCacheEXT | null, pDataSize: VkInoutAddress | null, pData: ArrayBuffer | null): VkResult;

  /**
   * 
   * @param device
   * @param dstCache
   * @param srcCacheCount
   * @param pSrcCaches
   */
  export function vkMergeValidationCachesEXT(device: VkDevice | null, dstCache: VkValidationCacheEXT | null, srcCacheCount: number, pSrcCaches: VkValidationCacheEXT[] | null): VkResult;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pSupport
   */
  export function vkGetDescriptorSetLayoutSupport(device: VkDevice | null, pCreateInfo: VkDescriptorSetLayoutCreateInfo | null, pSupport: VkDescriptorSetLayoutSupport | null): void;

  /**
   * 
   * @param device
   * @param pipeline
   * @param shaderStage
   * @param infoType
   * @param pInfoSize
   * @param pInfo
   */
  export function vkGetShaderInfoAMD(device: VkDevice | null, pipeline: VkPipeline | null, shaderStage: VkShaderStageFlagBits, infoType: VkShaderInfoTypeAMD, pInfoSize: VkInoutAddress | null, pInfo: ArrayBuffer | null): VkResult;

  /**
   * 
   * @param device
   * @param swapChain
   * @param localDimmingEnable
   */
  export function vkSetLocalDimmingAMD(device: VkDevice | null, swapChain: VkSwapchainKHR | null, localDimmingEnable: boolean): void;

  /**
   * 
   * @param physicalDevice
   * @param pTimeDomainCount
   * @param pTimeDomains
   */
  export function vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice: VkPhysicalDevice | null, pTimeDomainCount: VkInout | null, pTimeDomains: Int32Array | null): VkResult;

  /**
   * 
   * @param device
   * @param timestampCount
   * @param pTimestampInfos
   * @param pTimestamps
   * @param pMaxDeviation
   */
  export function vkGetCalibratedTimestampsEXT(device: VkDevice | null, timestampCount: number, pTimestampInfos: VkCalibratedTimestampInfoEXT[] | null, pTimestamps: BigUint64Array | null, pMaxDeviation: VkInoutAddress | null): VkResult;

  /**
   * 
   * @param device
   * @param pNameInfo
   */
  export function vkSetDebugUtilsObjectNameEXT(device: VkDevice | null, pNameInfo: VkDebugUtilsObjectNameInfoEXT | null): VkResult;

  /**
   * 
   * @param device
   * @param pTagInfo
   */
  export function vkSetDebugUtilsObjectTagEXT(device: VkDevice | null, pTagInfo: VkDebugUtilsObjectTagInfoEXT | null): VkResult;

  /**
   * 
   * @param queue
   * @param pLabelInfo
   */
  export function vkQueueBeginDebugUtilsLabelEXT(queue: VkQueue | null, pLabelInfo: VkDebugUtilsLabelEXT | null): void;

  /**
   * 
   * @param queue
   */
  export function vkQueueEndDebugUtilsLabelEXT(queue: VkQueue | null): void;

  /**
   * 
   * @param queue
   * @param pLabelInfo
   */
  export function vkQueueInsertDebugUtilsLabelEXT(queue: VkQueue | null, pLabelInfo: VkDebugUtilsLabelEXT | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pLabelInfo
   */
  export function vkCmdBeginDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer | null, pLabelInfo: VkDebugUtilsLabelEXT | null): void;

  /**
   * 
   * @param commandBuffer
   */
  export function vkCmdEndDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pLabelInfo
   */
  export function vkCmdInsertDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer | null, pLabelInfo: VkDebugUtilsLabelEXT | null): void;

  /**
   * 
   * @param instance
   * @param pCreateInfo
   * @param pAllocator
   * @param pMessenger
   */
  export function vkCreateDebugUtilsMessengerEXT(instance: VkInstance | null, pCreateInfo: VkDebugUtilsMessengerCreateInfoEXT | null, pAllocator: null, pMessenger: VkDebugUtilsMessengerEXT | null): VkResult;

  /**
   * 
   * @param instance
   * @param messenger
   * @param pAllocator
   */
  export function vkDestroyDebugUtilsMessengerEXT(instance: VkInstance | null, messenger: VkDebugUtilsMessengerEXT | null, pAllocator: null): void;

  /**
   * 
   * @param instance
   * @param messageSeverity
   * @param messageTypes
   * @param pCallbackData
   */
  export function vkSubmitDebugUtilsMessageEXT(instance: VkInstance | null, messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagBitsEXT, pCallbackData: VkDebugUtilsMessengerCallbackDataEXT | null): void;

  /**
   * 
   * @param device
   * @param handleType
   * @param pHostPointer
   * @param pMemoryHostPointerProperties
   */
  export function vkGetMemoryHostPointerPropertiesEXT(device: VkDevice | null, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: ArrayBuffer | null, pMemoryHostPointerProperties: VkMemoryHostPointerPropertiesEXT | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param pipelineStage
   * @param dstBuffer
   * @param dstOffset
   * @param marker
   */
  export function vkCmdWriteBufferMarkerAMD(commandBuffer: VkCommandBuffer | null, pipelineStage: VkPipelineStageFlagBits, dstBuffer: VkBuffer | null, dstOffset: bigint | number, marker: number): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pRenderPass
   */
  export function vkCreateRenderPass2(device: VkDevice | null, pCreateInfo: VkRenderPassCreateInfo2 | null, pAllocator: null, pRenderPass: VkRenderPass | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param pRenderPassBegin
   * @param pSubpassBeginInfo
   */
  export function vkCmdBeginRenderPass2(commandBuffer: VkCommandBuffer | null, pRenderPassBegin: VkRenderPassBeginInfo | null, pSubpassBeginInfo: VkSubpassBeginInfo | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pSubpassBeginInfo
   * @param pSubpassEndInfo
   */
  export function vkCmdNextSubpass2(commandBuffer: VkCommandBuffer | null, pSubpassBeginInfo: VkSubpassBeginInfo | null, pSubpassEndInfo: VkSubpassEndInfo | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pSubpassEndInfo
   */
  export function vkCmdEndRenderPass2(commandBuffer: VkCommandBuffer | null, pSubpassEndInfo: VkSubpassEndInfo | null): void;

  /**
   * 
   * @param device
   * @param semaphore
   * @param pValue
   */
  export function vkGetSemaphoreCounterValue(device: VkDevice | null, semaphore: VkSemaphore | null, pValue: VkInoutAddress | null): VkResult;

  /**
   * 
   * @param device
   * @param pWaitInfo
   * @param timeout
   */
  export function vkWaitSemaphores(device: VkDevice | null, pWaitInfo: VkSemaphoreWaitInfo | null, timeout: bigint | number): VkResult;

  /**
   * 
   * @param device
   * @param pSignalInfo
   */
  export function vkSignalSemaphore(device: VkDevice | null, pSignalInfo: VkSemaphoreSignalInfo | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   * @param countBuffer
   * @param countBufferOffset
   * @param maxDrawCount
   * @param stride
   */
  export function vkCmdDrawIndirectCount(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number, countBuffer: VkBuffer | null, countBufferOffset: bigint | number, maxDrawCount: number, stride: number): void;

  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   * @param countBuffer
   * @param countBufferOffset
   * @param maxDrawCount
   * @param stride
   */
  export function vkCmdDrawIndexedIndirectCount(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number, countBuffer: VkBuffer | null, countBufferOffset: bigint | number, maxDrawCount: number, stride: number): void;

  /**
   * 
   * @param commandBuffer
   * @param pCheckpointMarker
   */
  export function vkCmdSetCheckpointNV(commandBuffer: VkCommandBuffer | null, pCheckpointMarker: ArrayBuffer | null): void;

  /**
   * 
   * @param queue
   * @param pCheckpointDataCount
   * @param pCheckpointData
   */
  export function vkGetQueueCheckpointDataNV(queue: VkQueue | null, pCheckpointDataCount: VkInout | null, pCheckpointData: VkCheckpointDataNV[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param firstBinding
   * @param bindingCount
   * @param pBuffers
   * @param pOffsets
   * @param pSizes
   */
  export function vkCmdBindTransformFeedbackBuffersEXT(commandBuffer: VkCommandBuffer | null, firstBinding: number, bindingCount: number, pBuffers: VkBuffer[] | null, pOffsets: BigUint64Array | null, pSizes: BigUint64Array | null): void;

  /**
   * 
   * @param commandBuffer
   * @param firstCounterBuffer
   * @param counterBufferCount
   * @param pCounterBuffers
   * @param pCounterBufferOffsets
   */
  export function vkCmdBeginTransformFeedbackEXT(commandBuffer: VkCommandBuffer | null, firstCounterBuffer: number, counterBufferCount: number, pCounterBuffers: VkBuffer[] | null, pCounterBufferOffsets: BigUint64Array | null): void;

  /**
   * 
   * @param commandBuffer
   * @param firstCounterBuffer
   * @param counterBufferCount
   * @param pCounterBuffers
   * @param pCounterBufferOffsets
   */
  export function vkCmdEndTransformFeedbackEXT(commandBuffer: VkCommandBuffer | null, firstCounterBuffer: number, counterBufferCount: number, pCounterBuffers: VkBuffer[] | null, pCounterBufferOffsets: BigUint64Array | null): void;

  /**
   * 
   * @param commandBuffer
   * @param queryPool
   * @param query
   * @param flags
   * @param index
   */
  export function vkCmdBeginQueryIndexedEXT(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, query: number, flags: VkQueryControlFlagBits, index: number): void;

  /**
   * 
   * @param commandBuffer
   * @param queryPool
   * @param query
   * @param index
   */
  export function vkCmdEndQueryIndexedEXT(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, query: number, index: number): void;

  /**
   * 
   * @param commandBuffer
   * @param instanceCount
   * @param firstInstance
   * @param counterBuffer
   * @param counterBufferOffset
   * @param counterOffset
   * @param vertexStride
   */
  export function vkCmdDrawIndirectByteCountEXT(commandBuffer: VkCommandBuffer | null, instanceCount: number, firstInstance: number, counterBuffer: VkBuffer | null, counterBufferOffset: bigint | number, counterOffset: number, vertexStride: number): void;

  /**
   * 
   * @param commandBuffer
   * @param firstExclusiveScissor
   * @param exclusiveScissorCount
   * @param pExclusiveScissors
   */
  export function vkCmdSetExclusiveScissorNV(commandBuffer: VkCommandBuffer | null, firstExclusiveScissor: number, exclusiveScissorCount: number, pExclusiveScissors: VkRect2D[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param imageView
   * @param imageLayout
   */
  export function vkCmdBindShadingRateImageNV(commandBuffer: VkCommandBuffer | null, imageView: VkImageView | null, imageLayout: VkImageLayout): void;

  /**
   * 
   * @param commandBuffer
   * @param firstViewport
   * @param viewportCount
   * @param pShadingRatePalettes
   */
  export function vkCmdSetViewportShadingRatePaletteNV(commandBuffer: VkCommandBuffer | null, firstViewport: number, viewportCount: number, pShadingRatePalettes: VkShadingRatePaletteNV[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param sampleOrderType
   * @param customSampleOrderCount
   * @param pCustomSampleOrders
   */
  export function vkCmdSetCoarseSampleOrderNV(commandBuffer: VkCommandBuffer | null, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: number, pCustomSampleOrders: VkCoarseSampleOrderCustomNV[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param taskCount
   * @param firstTask
   */
  export function vkCmdDrawMeshTasksNV(commandBuffer: VkCommandBuffer | null, taskCount: number, firstTask: number): void;

  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   * @param drawCount
   * @param stride
   */
  export function vkCmdDrawMeshTasksIndirectNV(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number, drawCount: number, stride: number): void;

  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   * @param countBuffer
   * @param countBufferOffset
   * @param maxDrawCount
   * @param stride
   */
  export function vkCmdDrawMeshTasksIndirectCountNV(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number, countBuffer: VkBuffer | null, countBufferOffset: bigint | number, maxDrawCount: number, stride: number): void;

  /**
   * 
   * @param device
   * @param pipeline
   * @param shader
   */
  export function vkCompileDeferredNV(device: VkDevice | null, pipeline: VkPipeline | null, shader: number): VkResult;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pAccelerationStructure
   */
  export function vkCreateAccelerationStructureNV(device: VkDevice | null, pCreateInfo: VkAccelerationStructureCreateInfoNV | null, pAllocator: null, pAccelerationStructure: VkAccelerationStructureNV | null): VkResult;

  /**
   * 
   * @param device
   * @param accelerationStructure
   * @param pAllocator
   */
  export function vkDestroyAccelerationStructureKHR(device: VkDevice | null, accelerationStructure: VkAccelerationStructureKHR | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param accelerationStructure
   * @param pAllocator
   */
  export function vkDestroyAccelerationStructureNV(device: VkDevice | null, accelerationStructure: VkAccelerationStructureNV | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param pInfo
   * @param pMemoryRequirements
   */
  export function vkGetAccelerationStructureMemoryRequirementsNV(device: VkDevice | null, pInfo: VkAccelerationStructureMemoryRequirementsInfoNV | null, pMemoryRequirements: VkMemoryRequirements2KHR | null): void;

  /**
   * 
   * @param device
   * @param bindInfoCount
   * @param pBindInfos
   */
  export function vkBindAccelerationStructureMemoryNV(device: VkDevice | null, bindInfoCount: number, pBindInfos: VkBindAccelerationStructureMemoryInfoNV[] | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param dst
   * @param src
   * @param mode
   */
  export function vkCmdCopyAccelerationStructureNV(commandBuffer: VkCommandBuffer | null, dst: VkAccelerationStructureNV | null, src: VkAccelerationStructureNV | null, mode: VkCopyAccelerationStructureModeKHR): void;

  /**
   * 
   * @param commandBuffer
   * @param pInfo
   */
  export function vkCmdCopyAccelerationStructureKHR(commandBuffer: VkCommandBuffer | null, pInfo: VkCopyAccelerationStructureInfoKHR | null): void;

  /**
   * 
   * @param device
   * @param deferredOperation
   * @param pInfo
   */
  export function vkCopyAccelerationStructureKHR(device: VkDevice | null, deferredOperation: VkDeferredOperationKHR | null, pInfo: VkCopyAccelerationStructureInfoKHR | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param pInfo
   */
  export function vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer: VkCommandBuffer | null, pInfo: VkCopyAccelerationStructureToMemoryInfoKHR | null): void;

  /**
   * 
   * @param device
   * @param deferredOperation
   * @param pInfo
   */
  export function vkCopyAccelerationStructureToMemoryKHR(device: VkDevice | null, deferredOperation: VkDeferredOperationKHR | null, pInfo: VkCopyAccelerationStructureToMemoryInfoKHR | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param pInfo
   */
  export function vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer: VkCommandBuffer | null, pInfo: VkCopyMemoryToAccelerationStructureInfoKHR | null): void;

  /**
   * 
   * @param device
   * @param deferredOperation
   * @param pInfo
   */
  export function vkCopyMemoryToAccelerationStructureKHR(device: VkDevice | null, deferredOperation: VkDeferredOperationKHR | null, pInfo: VkCopyMemoryToAccelerationStructureInfoKHR | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param accelerationStructureCount
   * @param pAccelerationStructures
   * @param queryType
   * @param queryPool
   * @param firstQuery
   */
  export function vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer: VkCommandBuffer | null, accelerationStructureCount: number, pAccelerationStructures: VkAccelerationStructureKHR[] | null, queryType: VkQueryType, queryPool: VkQueryPool | null, firstQuery: number): void;

  /**
   * 
   * @param commandBuffer
   * @param accelerationStructureCount
   * @param pAccelerationStructures
   * @param queryType
   * @param queryPool
   * @param firstQuery
   */
  export function vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer: VkCommandBuffer | null, accelerationStructureCount: number, pAccelerationStructures: VkAccelerationStructureNV[] | null, queryType: VkQueryType, queryPool: VkQueryPool | null, firstQuery: number): void;

  /**
   * 
   * @param commandBuffer
   * @param pInfo
   * @param instanceData
   * @param instanceOffset
   * @param update
   * @param dst
   * @param src
   * @param scratch
   * @param scratchOffset
   */
  export function vkCmdBuildAccelerationStructureNV(commandBuffer: VkCommandBuffer | null, pInfo: VkAccelerationStructureInfoNV | null, instanceData: VkBuffer | null, instanceOffset: bigint | number, update: boolean, dst: VkAccelerationStructureNV | null, src: VkAccelerationStructureNV | null, scratch: VkBuffer | null, scratchOffset: bigint | number): void;

  /**
   * 
   * @param device
   * @param accelerationStructureCount
   * @param pAccelerationStructures
   * @param queryType
   * @param dataSize
   * @param pData
   * @param stride
   */
  export function vkWriteAccelerationStructuresPropertiesKHR(device: VkDevice | null, accelerationStructureCount: number, pAccelerationStructures: VkAccelerationStructureKHR[] | null, queryType: VkQueryType, dataSize: bigint | number, pData: ArrayBuffer | null, stride: bigint | number): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param pRaygenShaderBindingTable
   * @param pMissShaderBindingTable
   * @param pHitShaderBindingTable
   * @param pCallableShaderBindingTable
   * @param width
   * @param height
   * @param depth
   */
  export function vkCmdTraceRaysKHR(commandBuffer: VkCommandBuffer | null, pRaygenShaderBindingTable: VkStridedDeviceAddressRegionKHR | null, pMissShaderBindingTable: VkStridedDeviceAddressRegionKHR | null, pHitShaderBindingTable: VkStridedDeviceAddressRegionKHR | null, pCallableShaderBindingTable: VkStridedDeviceAddressRegionKHR | null, width: number, height: number, depth: number): void;

  /**
   * 
   * @param commandBuffer
   * @param raygenShaderBindingTableBuffer
   * @param raygenShaderBindingOffset
   * @param missShaderBindingTableBuffer
   * @param missShaderBindingOffset
   * @param missShaderBindingStride
   * @param hitShaderBindingTableBuffer
   * @param hitShaderBindingOffset
   * @param hitShaderBindingStride
   * @param callableShaderBindingTableBuffer
   * @param callableShaderBindingOffset
   * @param callableShaderBindingStride
   * @param width
   * @param height
   * @param depth
   */
  export function vkCmdTraceRaysNV(commandBuffer: VkCommandBuffer | null, raygenShaderBindingTableBuffer: VkBuffer | null, raygenShaderBindingOffset: bigint | number, missShaderBindingTableBuffer: VkBuffer | null, missShaderBindingOffset: bigint | number, missShaderBindingStride: bigint | number, hitShaderBindingTableBuffer: VkBuffer | null, hitShaderBindingOffset: bigint | number, hitShaderBindingStride: bigint | number, callableShaderBindingTableBuffer: VkBuffer | null, callableShaderBindingOffset: bigint | number, callableShaderBindingStride: bigint | number, width: number, height: number, depth: number): void;

  /**
   * 
   * @param device
   * @param pipeline
   * @param firstGroup
   * @param groupCount
   * @param dataSize
   * @param pData
   */
  export function vkGetRayTracingShaderGroupHandlesKHR(device: VkDevice | null, pipeline: VkPipeline | null, firstGroup: number, groupCount: number, dataSize: bigint | number, pData: ArrayBuffer | null): VkResult;

  /**
   * 
   * @param device
   * @param pipeline
   * @param firstGroup
   * @param groupCount
   * @param dataSize
   * @param pData
   */
  export function vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device: VkDevice | null, pipeline: VkPipeline | null, firstGroup: number, groupCount: number, dataSize: bigint | number, pData: ArrayBuffer | null): VkResult;

  /**
   * 
   * @param device
   * @param accelerationStructure
   * @param dataSize
   * @param pData
   */
  export function vkGetAccelerationStructureHandleNV(device: VkDevice | null, accelerationStructure: VkAccelerationStructureNV | null, dataSize: bigint | number, pData: ArrayBuffer | null): VkResult;

  /**
   * 
   * @param device
   * @param pipelineCache
   * @param createInfoCount
   * @param pCreateInfos
   * @param pAllocator
   * @param pPipelines
   */
  export function vkCreateRayTracingPipelinesNV(device: VkDevice | null, pipelineCache: VkPipelineCache | null, createInfoCount: number, pCreateInfos: VkRayTracingPipelineCreateInfoNV[] | null, pAllocator: null, pPipelines: VkPipeline[] | null): VkResult;

  /**
   * 
   * @param device
   * @param deferredOperation
   * @param pipelineCache
   * @param createInfoCount
   * @param pCreateInfos
   * @param pAllocator
   * @param pPipelines
   */
  export function vkCreateRayTracingPipelinesKHR(device: VkDevice | null, deferredOperation: VkDeferredOperationKHR | null, pipelineCache: VkPipelineCache | null, createInfoCount: number, pCreateInfos: VkRayTracingPipelineCreateInfoKHR[] | null, pAllocator: null, pPipelines: VkPipeline[] | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param pPropertyCount
   * @param pProperties
   */
  export function vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout | null, pProperties: VkCooperativeMatrixPropertiesNV[] | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param pRaygenShaderBindingTable
   * @param pMissShaderBindingTable
   * @param pHitShaderBindingTable
   * @param pCallableShaderBindingTable
   * @param indirectDeviceAddress
   */
  export function vkCmdTraceRaysIndirectKHR(commandBuffer: VkCommandBuffer | null, pRaygenShaderBindingTable: VkStridedDeviceAddressRegionKHR | null, pMissShaderBindingTable: VkStridedDeviceAddressRegionKHR | null, pHitShaderBindingTable: VkStridedDeviceAddressRegionKHR | null, pCallableShaderBindingTable: VkStridedDeviceAddressRegionKHR | null, indirectDeviceAddress: bigint | number): void;

  /**
   * 
   * @param device
   * @param pVersionInfo
   * @param pCompatibility
   */
  export function vkGetDeviceAccelerationStructureCompatibilityKHR(device: VkDevice | null, pVersionInfo: VkAccelerationStructureVersionInfoKHR | null, pCompatibility: VkInout | null): void;

  /**
   * 
   * @param device
   * @param pipeline
   * @param group
   * @param groupShader
   */
  export function vkGetRayTracingShaderGroupStackSizeKHR(device: VkDevice | null, pipeline: VkPipeline | null, group: number, groupShader: VkShaderGroupShaderKHR): bigint;

  /**
   * 
   * @param commandBuffer
   * @param pipelineStackSize
   */
  export function vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer: VkCommandBuffer | null, pipelineStackSize: number): void;

  /**
   * 
   * @param device
   * @param pInfo
   */
  export function vkGetImageViewHandleNVX(device: VkDevice | null, pInfo: VkImageViewHandleInfoNVX | null): number;

  /**
   * 
   * @param device
   * @param imageView
   * @param pProperties
   */
  export function vkGetImageViewAddressNVX(device: VkDevice | null, imageView: VkImageView | null, pProperties: VkImageViewAddressPropertiesNVX | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param pSurfaceInfo
   * @param pPresentModeCount
   * @param pPresentModes
   */
  export function vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice: VkPhysicalDevice | null, pSurfaceInfo: VkPhysicalDeviceSurfaceInfo2KHR | null, pPresentModeCount: VkInout | null, pPresentModes: Int32Array | null): VkResult;

  /**
   * 
   * @param device
   * @param pSurfaceInfo
   * @param pModes
   */
  export function vkGetDeviceGroupSurfacePresentModes2EXT(device: VkDevice | null, pSurfaceInfo: VkPhysicalDeviceSurfaceInfo2KHR | null, pModes: VkInout | null): VkResult;

  /**
   * 
   * @param device
   * @param swapchain
   */
  export function vkAcquireFullScreenExclusiveModeEXT(device: VkDevice | null, swapchain: VkSwapchainKHR | null): VkResult;

  /**
   * 
   * @param device
   * @param swapchain
   */
  export function vkReleaseFullScreenExclusiveModeEXT(device: VkDevice | null, swapchain: VkSwapchainKHR | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param queueFamilyIndex
   * @param pCounterCount
   * @param pCounters
   * @param pCounterDescriptions
   */
  export function vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice: VkPhysicalDevice | null, queueFamilyIndex: number, pCounterCount: VkInout | null, pCounters: VkPerformanceCounterKHR[] | null, pCounterDescriptions: VkPerformanceCounterDescriptionKHR[] | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param pPerformanceQueryCreateInfo
   * @param pNumPasses
   */
  export function vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice: VkPhysicalDevice | null, pPerformanceQueryCreateInfo: VkQueryPoolPerformanceCreateInfoKHR | null, pNumPasses: VkInout | null): void;

  /**
   * 
   * @param device
   * @param pInfo
   */
  export function vkAcquireProfilingLockKHR(device: VkDevice | null, pInfo: VkAcquireProfilingLockInfoKHR | null): VkResult;

  /**
   * 
   * @param device
   */
  export function vkReleaseProfilingLockKHR(device: VkDevice | null): void;

  /**
   * 
   * @param device
   * @param image
   * @param pProperties
   */
  export function vkGetImageDrmFormatModifierPropertiesEXT(device: VkDevice | null, image: VkImage | null, pProperties: VkImageDrmFormatModifierPropertiesEXT | null): VkResult;

  /**
   * 
   * @param device
   * @param pInfo
   */
  export function vkGetBufferOpaqueCaptureAddress(device: VkDevice | null, pInfo: VkBufferDeviceAddressInfo | null): bigint;

  /**
   * 
   * @param device
   * @param pInfo
   */
  export function vkGetBufferDeviceAddress(device: VkDevice | null, pInfo: VkBufferDeviceAddressInfo | null): bigint;

  /**
   * 
   * @param instance
   * @param pCreateInfo
   * @param pAllocator
   * @param pSurface
   */
  export function vkCreateHeadlessSurfaceEXT(instance: VkInstance | null, pCreateInfo: VkHeadlessSurfaceCreateInfoEXT | null, pAllocator: null, pSurface: VkSurfaceKHR | null): VkResult;

  /**
   * 
   * @param physicalDevice
   * @param pCombinationCount
   * @param pCombinations
   */
  export function vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice: VkPhysicalDevice | null, pCombinationCount: VkInout | null, pCombinations: VkFramebufferMixedSamplesCombinationNV[] | null): VkResult;

  /**
   * 
   * @param device
   * @param pInitializeInfo
   */
  export function vkInitializePerformanceApiINTEL(device: VkDevice | null, pInitializeInfo: VkInitializePerformanceApiInfoINTEL | null): VkResult;

  /**
   * 
   * @param device
   */
  export function vkUninitializePerformanceApiINTEL(device: VkDevice | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pMarkerInfo
   */
  export function vkCmdSetPerformanceMarkerINTEL(commandBuffer: VkCommandBuffer | null, pMarkerInfo: VkPerformanceMarkerInfoINTEL | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param pMarkerInfo
   */
  export function vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer: VkCommandBuffer | null, pMarkerInfo: VkPerformanceStreamMarkerInfoINTEL | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param pOverrideInfo
   */
  export function vkCmdSetPerformanceOverrideINTEL(commandBuffer: VkCommandBuffer | null, pOverrideInfo: VkPerformanceOverrideInfoINTEL | null): VkResult;

  /**
   * 
   * @param device
   * @param pAcquireInfo
   * @param pConfiguration
   */
  export function vkAcquirePerformanceConfigurationINTEL(device: VkDevice | null, pAcquireInfo: VkPerformanceConfigurationAcquireInfoINTEL | null, pConfiguration: VkPerformanceConfigurationINTEL | null): VkResult;

  /**
   * 
   * @param device
   * @param configuration
   */
  export function vkReleasePerformanceConfigurationINTEL(device: VkDevice | null, configuration: VkPerformanceConfigurationINTEL | null): VkResult;

  /**
   * 
   * @param queue
   * @param configuration
   */
  export function vkQueueSetPerformanceConfigurationINTEL(queue: VkQueue | null, configuration: VkPerformanceConfigurationINTEL | null): VkResult;

  /**
   * 
   * @param device
   * @param parameter
   * @param pValue
   */
  export function vkGetPerformanceParameterINTEL(device: VkDevice | null, parameter: VkPerformanceParameterTypeINTEL, pValue: VkPerformanceValueINTEL | null): VkResult;

  /**
   * 
   * @param device
   * @param pInfo
   */
  export function vkGetDeviceMemoryOpaqueCaptureAddress(device: VkDevice | null, pInfo: VkDeviceMemoryOpaqueCaptureAddressInfo | null): bigint;

  /**
   * 
   * @param device
   * @param pPipelineInfo
   * @param pExecutableCount
   * @param pProperties
   */
  export function vkGetPipelineExecutablePropertiesKHR(device: VkDevice | null, pPipelineInfo: VkPipelineInfoKHR | null, pExecutableCount: VkInout | null, pProperties: VkPipelineExecutablePropertiesKHR[] | null): VkResult;

  /**
   * 
   * @param device
   * @param pExecutableInfo
   * @param pStatisticCount
   * @param pStatistics
   */
  export function vkGetPipelineExecutableStatisticsKHR(device: VkDevice | null, pExecutableInfo: VkPipelineExecutableInfoKHR | null, pStatisticCount: VkInout | null, pStatistics: VkPipelineExecutableStatisticKHR[] | null): VkResult;

  /**
   * 
   * @param device
   * @param pExecutableInfo
   * @param pInternalRepresentationCount
   * @param pInternalRepresentations
   */
  export function vkGetPipelineExecutableInternalRepresentationsKHR(device: VkDevice | null, pExecutableInfo: VkPipelineExecutableInfoKHR | null, pInternalRepresentationCount: VkInout | null, pInternalRepresentations: VkPipelineExecutableInternalRepresentationKHR[] | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param lineStippleFactor
   * @param lineStipplePattern
   */
  export function vkCmdSetLineStippleEXT(commandBuffer: VkCommandBuffer | null, lineStippleFactor: number, lineStipplePattern: number): void;

  /**
   * 
   * @param physicalDevice
   * @param pToolCount
   * @param pToolProperties
   */
  export function vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice: VkPhysicalDevice | null, pToolCount: VkInout | null, pToolProperties: VkPhysicalDeviceToolPropertiesEXT[] | null): VkResult;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pAccelerationStructure
   */
  export function vkCreateAccelerationStructureKHR(device: VkDevice | null, pCreateInfo: VkAccelerationStructureCreateInfoKHR | null, pAllocator: null, pAccelerationStructure: VkAccelerationStructureKHR | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param infoCount
   * @param pInfos
   * @param ppBuildRangeInfos
   */
  export function vkCmdBuildAccelerationStructuresKHR(commandBuffer: VkCommandBuffer | null, infoCount: number, pInfos: VkAccelerationStructureBuildGeometryInfoKHR[] | null, ppBuildRangeInfos: VkAccelerationStructureBuildRangeInfoKHR[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param infoCount
   * @param pInfos
   * @param pIndirectDeviceAddresses
   * @param pIndirectStrides
   * @param ppMaxPrimitiveCounts
   */
  export function vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer: VkCommandBuffer | null, infoCount: number, pInfos: VkAccelerationStructureBuildGeometryInfoKHR[] | null, pIndirectDeviceAddresses: BigUint64Array | null, pIndirectStrides: Uint32Array | null, ppMaxPrimitiveCounts: bigint | number): void;

  /**
   * 
   * @param device
   * @param deferredOperation
   * @param infoCount
   * @param pInfos
   * @param ppBuildRangeInfos
   */
  export function vkBuildAccelerationStructuresKHR(device: VkDevice | null, deferredOperation: VkDeferredOperationKHR | null, infoCount: number, pInfos: VkAccelerationStructureBuildGeometryInfoKHR[] | null, ppBuildRangeInfos: VkAccelerationStructureBuildRangeInfoKHR[] | null): VkResult;

  /**
   * 
   * @param device
   * @param pInfo
   */
  export function vkGetAccelerationStructureDeviceAddressKHR(device: VkDevice | null, pInfo: VkAccelerationStructureDeviceAddressInfoKHR | null): bigint;

  /**
   * 
   * @param device
   * @param pAllocator
   * @param pDeferredOperation
   */
  export function vkCreateDeferredOperationKHR(device: VkDevice | null, pAllocator: null, pDeferredOperation: VkDeferredOperationKHR | null): VkResult;

  /**
   * 
   * @param device
   * @param operation
   * @param pAllocator
   */
  export function vkDestroyDeferredOperationKHR(device: VkDevice | null, operation: VkDeferredOperationKHR | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param operation
   */
  export function vkGetDeferredOperationMaxConcurrencyKHR(device: VkDevice | null, operation: VkDeferredOperationKHR | null): number;

  /**
   * 
   * @param device
   * @param operation
   */
  export function vkGetDeferredOperationResultKHR(device: VkDevice | null, operation: VkDeferredOperationKHR | null): VkResult;

  /**
   * 
   * @param device
   * @param operation
   */
  export function vkDeferredOperationJoinKHR(device: VkDevice | null, operation: VkDeferredOperationKHR | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param cullMode
   */
  export function vkCmdSetCullModeEXT(commandBuffer: VkCommandBuffer | null, cullMode: VkCullModeFlagBits): void;

  /**
   * 
   * @param commandBuffer
   * @param frontFace
   */
  export function vkCmdSetFrontFaceEXT(commandBuffer: VkCommandBuffer | null, frontFace: VkFrontFace): void;

  /**
   * 
   * @param commandBuffer
   * @param primitiveTopology
   */
  export function vkCmdSetPrimitiveTopologyEXT(commandBuffer: VkCommandBuffer | null, primitiveTopology: VkPrimitiveTopology): void;

  /**
   * 
   * @param commandBuffer
   * @param viewportCount
   * @param pViewports
   */
  export function vkCmdSetViewportWithCountEXT(commandBuffer: VkCommandBuffer | null, viewportCount: number, pViewports: VkViewport[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param scissorCount
   * @param pScissors
   */
  export function vkCmdSetScissorWithCountEXT(commandBuffer: VkCommandBuffer | null, scissorCount: number, pScissors: VkRect2D[] | null): void;

  /**
   * 
   * @param commandBuffer
   * @param firstBinding
   * @param bindingCount
   * @param pBuffers
   * @param pOffsets
   * @param pSizes
   * @param pStrides
   */
  export function vkCmdBindVertexBuffers2EXT(commandBuffer: VkCommandBuffer | null, firstBinding: number, bindingCount: number, pBuffers: VkBuffer[] | null, pOffsets: BigUint64Array | null, pSizes: BigUint64Array | null, pStrides: BigUint64Array | null): void;

  /**
   * 
   * @param commandBuffer
   * @param depthTestEnable
   */
  export function vkCmdSetDepthTestEnableEXT(commandBuffer: VkCommandBuffer | null, depthTestEnable: boolean): void;

  /**
   * 
   * @param commandBuffer
   * @param depthWriteEnable
   */
  export function vkCmdSetDepthWriteEnableEXT(commandBuffer: VkCommandBuffer | null, depthWriteEnable: boolean): void;

  /**
   * 
   * @param commandBuffer
   * @param depthCompareOp
   */
  export function vkCmdSetDepthCompareOpEXT(commandBuffer: VkCommandBuffer | null, depthCompareOp: VkCompareOp): void;

  /**
   * 
   * @param commandBuffer
   * @param depthBoundsTestEnable
   */
  export function vkCmdSetDepthBoundsTestEnableEXT(commandBuffer: VkCommandBuffer | null, depthBoundsTestEnable: boolean): void;

  /**
   * 
   * @param commandBuffer
   * @param stencilTestEnable
   */
  export function vkCmdSetStencilTestEnableEXT(commandBuffer: VkCommandBuffer | null, stencilTestEnable: boolean): void;

  /**
   * 
   * @param commandBuffer
   * @param faceMask
   * @param failOp
   * @param passOp
   * @param depthFailOp
   * @param compareOp
   */
  export function vkCmdSetStencilOpEXT(commandBuffer: VkCommandBuffer | null, faceMask: VkStencilFaceFlagBits, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp): void;

  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pPrivateDataSlot
   */
  export function vkCreatePrivateDataSlotEXT(device: VkDevice | null, pCreateInfo: VkPrivateDataSlotCreateInfoEXT | null, pAllocator: null, pPrivateDataSlot: VkPrivateDataSlotEXT | null): VkResult;

  /**
   * 
   * @param device
   * @param privateDataSlot
   * @param pAllocator
   */
  export function vkDestroyPrivateDataSlotEXT(device: VkDevice | null, privateDataSlot: VkPrivateDataSlotEXT | null, pAllocator: null): void;

  /**
   * 
   * @param device
   * @param objectType
   * @param objectHandle
   * @param privateDataSlot
   * @param data
   */
  export function vkSetPrivateDataEXT(device: VkDevice | null, objectType: VkObjectType, objectHandle: bigint | number, privateDataSlot: VkPrivateDataSlotEXT | null, data: bigint | number): VkResult;

  /**
   * 
   * @param device
   * @param objectType
   * @param objectHandle
   * @param privateDataSlot
   * @param pData
   */
  export function vkGetPrivateDataEXT(device: VkDevice | null, objectType: VkObjectType, objectHandle: bigint | number, privateDataSlot: VkPrivateDataSlotEXT | null, pData: VkInoutAddress | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pCopyBufferInfo
   */
  export function vkCmdCopyBuffer2KHR(commandBuffer: VkCommandBuffer | null, pCopyBufferInfo: VkCopyBufferInfo2KHR | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pCopyImageInfo
   */
  export function vkCmdCopyImage2KHR(commandBuffer: VkCommandBuffer | null, pCopyImageInfo: VkCopyImageInfo2KHR | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pBlitImageInfo
   */
  export function vkCmdBlitImage2KHR(commandBuffer: VkCommandBuffer | null, pBlitImageInfo: VkBlitImageInfo2KHR | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pCopyBufferToImageInfo
   */
  export function vkCmdCopyBufferToImage2KHR(commandBuffer: VkCommandBuffer | null, pCopyBufferToImageInfo: VkCopyBufferToImageInfo2KHR | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pCopyImageToBufferInfo
   */
  export function vkCmdCopyImageToBuffer2KHR(commandBuffer: VkCommandBuffer | null, pCopyImageToBufferInfo: VkCopyImageToBufferInfo2KHR | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pResolveImageInfo
   */
  export function vkCmdResolveImage2KHR(commandBuffer: VkCommandBuffer | null, pResolveImageInfo: VkResolveImageInfo2KHR | null): void;

  /**
   * 
   * @param commandBuffer
   * @param pFragmentSize
   * @param combinerOps
   */
  export function vkCmdSetFragmentShadingRateKHR(commandBuffer: VkCommandBuffer | null, pFragmentSize: VkExtent2D | null, combinerOps: number[] | null): void;

  /**
   * 
   * @param physicalDevice
   * @param pFragmentShadingRateCount
   * @param pFragmentShadingRates
   */
  export function vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice: VkPhysicalDevice | null, pFragmentShadingRateCount: VkInout | null, pFragmentShadingRates: VkPhysicalDeviceFragmentShadingRateKHR[] | null): VkResult;

  /**
   * 
   * @param commandBuffer
   * @param shadingRate
   * @param combinerOps
   */
  export function vkCmdSetFragmentShadingRateEnumNV(commandBuffer: VkCommandBuffer | null, shadingRate: VkFragmentShadingRateNV, combinerOps: number[] | null): void;

  /**
   * 
   * @param device
   * @param buildType
   * @param pBuildInfo
   * @param pMaxPrimitiveCounts
   * @param pSizeInfo
   */
  export function vkGetAccelerationStructureBuildSizesKHR(device: VkDevice | null, buildType: VkAccelerationStructureBuildTypeKHR, pBuildInfo: VkAccelerationStructureBuildGeometryInfoKHR | null, pMaxPrimitiveCounts: Uint32Array | null, pSizeInfo: VkAccelerationStructureBuildSizesInfoKHR | null): void;



  /**
   * 
   * @param pUserData
   * @param size
   * @param allocationType
   * @param allocationScope
   */
  export interface vkInternalAllocationNotification {
    (
      pUserData: null,
      size: bigint | number,
      allocationType: VkInternalAllocationType,
      allocationScope: VkSystemAllocationScope
    ) : void
  }

  /**
   * 
   * @param pUserData
   * @param size
   * @param allocationType
   * @param allocationScope
   */
  export interface vkInternalFreeNotification {
    (
      pUserData: null,
      size: bigint | number,
      allocationType: VkInternalAllocationType,
      allocationScope: VkSystemAllocationScope
    ) : void
  }

  /**
   * 
   * @param pUserData
   * @param pOriginal
   * @param size
   * @param alignment
   * @param allocationScope
   */
  export interface vkReallocationFunction {
    (
      pUserData: null,
      pOriginal: ArrayBuffer | null,
      size: bigint | number,
      alignment: bigint | number,
      allocationScope: VkSystemAllocationScope
    ) : void
  }

  /**
   * 
   * @param pUserData
   * @param size
   * @param alignment
   * @param allocationScope
   */
  export interface vkAllocationFunction {
    (
      pUserData: null,
      size: bigint | number,
      alignment: bigint | number,
      allocationScope: VkSystemAllocationScope
    ) : void
  }

  /**
   * 
   * @param pUserData
   * @param pMemory
   */
  export interface vkFreeFunction {
    (
      pUserData: null,
      pMemory: ArrayBuffer | null
    ) : void
  }

  /**
   * 
   * @param flags
   * @param objectType
   * @param object
   * @param location
   * @param messageCode
   * @param pLayerPrefix
   * @param pMessage
   * @param pUserData
   */
  export interface vkDebugReportCallbackEXT {
    (
      flags: VkDebugReportFlagBitsEXT,
      objectType: VkDebugReportObjectTypeEXT,
      object: bigint | number,
      location: bigint | number,
      messageCode: number,
      pLayerPrefix: string | null,
      pMessage: string | null,
      pUserData: null
    ) : boolean
  }

  /**
   * 
   * @param messageSeverity
   * @param messageTypes
   * @param pCallbackData
   * @param pUserData
   */
  export interface vkDebugUtilsMessengerCallbackEXT {
    (
      messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
      messageTypes: VkDebugUtilsMessageTypeFlagBitsEXT,
      pCallbackData: VkDebugUtilsMessengerCallbackDataEXT | null,
      pUserData: null
    ) : boolean
  }

  /**
   * 
   * @param pCallbackData
   * @param pUserData
   */
  export interface vkDeviceMemoryReportCallbackEXT {
    (
      pCallbackData: VkDeviceMemoryReportCallbackDataEXT | null,
      pUserData: null
    ) : void
  }


export function createV8ArrayBufferFromMemory(
  addr: bigint,
  size: number
): ArrayBuffer;

export function VK_MAKE_VERSION(
  major: number,
  minor: number,
  patch: number
): number;

export function VK_VERSION_MAJOR(
  major: number
): number;

export function VK_VERSION_MINOR(
  minor: number
): number;

export function VK_VERSION_PATCH(
  patch: number
): number;

export function vkUseDevice(
  pDevice: VkDevice
): void;

export function vkUseInstance(
  pInstance: VkInstance
): void;

export var VK_API_VERSION_1_0: number;
export var VK_API_VERSION_1_1: number;
export var VK_API_VERSION_1_2: number;

export interface ResizeEvent {
  width: number;
  height: number;
}
export interface FocusEvent {
  focused: boolean;
}
export interface CloseEvent {

}
export interface KeydownEvent {
  keyCode: number;
}
export interface KeyupEvent {
  keyCode: number;
}
export interface MousemoveEvent {
  x: number;
  y: number;
  movementX: number;
  movementY: number;
}
export interface MousewheelEvent {
  x: number;
  y: number;
  deltaX: number;
  deltaY: number;
}
export interface MousedownEvent {
  x: number;
  y: number;
  button: number;
}
export interface MouseupEvent {
  x: number;
  y: number;
  button: number;
}
export interface DropEvent {
  paths: string[];
}

export interface VulkanWindowInitializer {
  width: number;
  height: number;
  title?: string;
  resizable?: boolean;
}

declare var VulkanWindow: {
  prototype: VulkanWindow;
  new(param: VulkanWindowInitializer): VulkanWindow;
  width: number;
  height: number;
  frameBufferWidth: number;
  frameBufferHeight: number;
  title: string;
  pollEvents(): void;
  focus(): void;
  close(): void;
  shouldClose(): boolean;
  createSurface(instance: VkInstance | null, pAllocator: null, surface: VkSurfaceKHR | null): number;
  getRequiredInstanceExtensions(): string[];
  onresize: ((ev: ResizeEvent) => any) | null;
  onfocus: ((ev: FocusEvent) => any) | null;
  onclose: ((ev: CloseEvent) => any) | null;
  onkeydown: ((ev: KeydownEvent) => any) | null;
  onkeyup: ((ev: KeyupEvent) => any) | null;
  onmousemove: ((ev: MousemoveEvent) => any) | null;
  onmousewheel: ((ev: MousewheelEvent) => any) | null;
  onmousedown: ((ev: MousedownEvent) => any) | null;
  onmouseup: ((ev: MouseupEvent) => any) | null;
  ondrop: ((ev: DropEvent) => any) | null;
}

export interface VulkanWindow {
  width: number;
  height: number;
  frameBufferWidth: number;
  frameBufferHeight: number;
  title: string;
  pollEvents(): void;
  focus(): void;
  close(): void;
  shouldClose(): boolean;
  createSurface(instance: VkInstance | null, pAllocator: null, surface: VkSurfaceKHR | null): number;
  getRequiredInstanceExtensions(): string[];
  onresize: ((ev: ResizeEvent) => any) | null;
  onfocus: ((ev: FocusEvent) => any) | null;
  onclose: ((ev: CloseEvent) => any) | null;
  onkeydown: ((ev: KeydownEvent) => any) | null;
  onkeyup: ((ev: KeyupEvent) => any) | null;
  onmousemove: ((ev: MousemoveEvent) => any) | null;
  onmousewheel: ((ev: MousewheelEvent) => any) | null;
  onmousedown: ((ev: MousedownEvent) => any) | null;
  onmouseup: ((ev: MouseupEvent) => any) | null;
  ondrop: ((ev: DropEvent) => any) | null;
}