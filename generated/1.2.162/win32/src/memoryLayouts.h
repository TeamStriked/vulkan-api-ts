/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY vulkan-api v0.9.0
 */
Napi::Value MemoryLayouts(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  Napi::Object out = Napi::Object::New(env);

  Napi::String strByteOffset = Napi::String::New(env, "byteOffset");
  Napi::String strByteLength = Napi::String::New(env, "byteLength");

  Napi::Object sVkClearColorValue = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkClearColorValue, float32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearColorValue::float32)));
    
    sVkClearColorValue.Set(Napi::String::New(env, "float32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkClearColorValue, int32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearColorValue::int32)));
    
    sVkClearColorValue.Set(Napi::String::New(env, "int32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkClearColorValue, uint32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearColorValue::uint32)));
    
    sVkClearColorValue.Set(Napi::String::New(env, "uint32"), obj);
  }
  sVkClearColorValue.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearColorValue)));
  out.Set(Napi::String::New(env, "VkClearColorValue"), sVkClearColorValue);
  Napi::Object sVkClearValue = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkClearValue, color)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearValue::color)));
    
    sVkClearValue.Set(Napi::String::New(env, "color"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkClearValue, depthStencil)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearValue::depthStencil)));
    
    sVkClearValue.Set(Napi::String::New(env, "depthStencil"), obj);
  }
  sVkClearValue.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearValue)));
  out.Set(Napi::String::New(env, "VkClearValue"), sVkClearValue);
  Napi::Object sVkPerformanceCounterResultKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterResultKHR, int32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterResultKHR::int32)));
    
    sVkPerformanceCounterResultKHR.Set(Napi::String::New(env, "int32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterResultKHR, int64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterResultKHR::int64)));
    
    sVkPerformanceCounterResultKHR.Set(Napi::String::New(env, "int64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterResultKHR, uint32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterResultKHR::uint32)));
    
    sVkPerformanceCounterResultKHR.Set(Napi::String::New(env, "uint32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterResultKHR, uint64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterResultKHR::uint64)));
    
    sVkPerformanceCounterResultKHR.Set(Napi::String::New(env, "uint64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterResultKHR, float32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterResultKHR::float32)));
    
    sVkPerformanceCounterResultKHR.Set(Napi::String::New(env, "float32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterResultKHR, float64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterResultKHR::float64)));
    
    sVkPerformanceCounterResultKHR.Set(Napi::String::New(env, "float64"), obj);
  }
  sVkPerformanceCounterResultKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterResultKHR)));
  out.Set(Napi::String::New(env, "VkPerformanceCounterResultKHR"), sVkPerformanceCounterResultKHR);
  Napi::Object sVkPerformanceValueDataINTEL = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceValueDataINTEL, value32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceValueDataINTEL::value32)));
    
    sVkPerformanceValueDataINTEL.Set(Napi::String::New(env, "value32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceValueDataINTEL, value64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceValueDataINTEL::value64)));
    
    sVkPerformanceValueDataINTEL.Set(Napi::String::New(env, "value64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceValueDataINTEL, valueFloat)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceValueDataINTEL::valueFloat)));
    
    sVkPerformanceValueDataINTEL.Set(Napi::String::New(env, "valueFloat"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceValueDataINTEL, valueBool)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceValueDataINTEL::valueBool)));
    
    sVkPerformanceValueDataINTEL.Set(Napi::String::New(env, "valueBool"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceValueDataINTEL, valueString)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceValueDataINTEL::valueString)));
    
    sVkPerformanceValueDataINTEL.Set(Napi::String::New(env, "valueString"), obj);
  }
  sVkPerformanceValueDataINTEL.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceValueDataINTEL)));
  out.Set(Napi::String::New(env, "VkPerformanceValueDataINTEL"), sVkPerformanceValueDataINTEL);
  Napi::Object sVkPipelineExecutableStatisticValueKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticValueKHR, b32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableStatisticValueKHR::b32)));
    
    sVkPipelineExecutableStatisticValueKHR.Set(Napi::String::New(env, "b32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticValueKHR, i64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableStatisticValueKHR::i64)));
    
    sVkPipelineExecutableStatisticValueKHR.Set(Napi::String::New(env, "i64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticValueKHR, u64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableStatisticValueKHR::u64)));
    
    sVkPipelineExecutableStatisticValueKHR.Set(Napi::String::New(env, "u64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticValueKHR, f64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableStatisticValueKHR::f64)));
    
    sVkPipelineExecutableStatisticValueKHR.Set(Napi::String::New(env, "f64"), obj);
  }
  sVkPipelineExecutableStatisticValueKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableStatisticValueKHR)));
  out.Set(Napi::String::New(env, "VkPipelineExecutableStatisticValueKHR"), sVkPipelineExecutableStatisticValueKHR);
  Napi::Object sVkDeviceOrHostAddressKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceOrHostAddressKHR, deviceAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceOrHostAddressKHR::deviceAddress)));
    
    sVkDeviceOrHostAddressKHR.Set(Napi::String::New(env, "deviceAddress"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceOrHostAddressKHR, hostAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceOrHostAddressKHR::hostAddress)));
    
    sVkDeviceOrHostAddressKHR.Set(Napi::String::New(env, "hostAddress"), obj);
  }
  sVkDeviceOrHostAddressKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceOrHostAddressKHR)));
  out.Set(Napi::String::New(env, "VkDeviceOrHostAddressKHR"), sVkDeviceOrHostAddressKHR);
  Napi::Object sVkDeviceOrHostAddressConstKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceOrHostAddressConstKHR, deviceAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceOrHostAddressConstKHR::deviceAddress)));
    
    sVkDeviceOrHostAddressConstKHR.Set(Napi::String::New(env, "deviceAddress"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceOrHostAddressConstKHR, hostAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceOrHostAddressConstKHR::hostAddress)));
    
    sVkDeviceOrHostAddressConstKHR.Set(Napi::String::New(env, "hostAddress"), obj);
  }
  sVkDeviceOrHostAddressConstKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceOrHostAddressConstKHR)));
  out.Set(Napi::String::New(env, "VkDeviceOrHostAddressConstKHR"), sVkDeviceOrHostAddressConstKHR);
  Napi::Object sVkAccelerationStructureGeometryDataKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryDataKHR, triangles)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryDataKHR::triangles)));
    
    sVkAccelerationStructureGeometryDataKHR.Set(Napi::String::New(env, "triangles"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryDataKHR, aabbs)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryDataKHR::aabbs)));
    
    sVkAccelerationStructureGeometryDataKHR.Set(Napi::String::New(env, "aabbs"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryDataKHR, instances)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryDataKHR::instances)));
    
    sVkAccelerationStructureGeometryDataKHR.Set(Napi::String::New(env, "instances"), obj);
  }
  sVkAccelerationStructureGeometryDataKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryDataKHR)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureGeometryDataKHR"), sVkAccelerationStructureGeometryDataKHR);
  Napi::Object sVkBaseOutStructure = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBaseOutStructure, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBaseOutStructure::sType)));
    
    sVkBaseOutStructure.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBaseOutStructure, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBaseOutStructure::pNext)));
    
    sVkBaseOutStructure.Set(Napi::String::New(env, "pNext"), obj);
  }
  sVkBaseOutStructure.Set(strByteLength, Napi::Number::New(env, sizeof(VkBaseOutStructure)));
  out.Set(Napi::String::New(env, "VkBaseOutStructure"), sVkBaseOutStructure);
  Napi::Object sVkBaseInStructure = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBaseInStructure, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBaseInStructure::sType)));
    
    sVkBaseInStructure.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBaseInStructure, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBaseInStructure::pNext)));
    
    sVkBaseInStructure.Set(Napi::String::New(env, "pNext"), obj);
  }
  sVkBaseInStructure.Set(strByteLength, Napi::Number::New(env, sizeof(VkBaseInStructure)));
  out.Set(Napi::String::New(env, "VkBaseInStructure"), sVkBaseInStructure);
  Napi::Object sVkOffset2D = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkOffset2D, x)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkOffset2D::x)));
    
    sVkOffset2D.Set(Napi::String::New(env, "x"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkOffset2D, y)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkOffset2D::y)));
    
    sVkOffset2D.Set(Napi::String::New(env, "y"), obj);
  }
  sVkOffset2D.Set(strByteLength, Napi::Number::New(env, sizeof(VkOffset2D)));
  out.Set(Napi::String::New(env, "VkOffset2D"), sVkOffset2D);
  Napi::Object sVkOffset3D = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkOffset3D, x)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkOffset3D::x)));
    
    sVkOffset3D.Set(Napi::String::New(env, "x"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkOffset3D, y)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkOffset3D::y)));
    
    sVkOffset3D.Set(Napi::String::New(env, "y"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkOffset3D, z)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkOffset3D::z)));
    
    sVkOffset3D.Set(Napi::String::New(env, "z"), obj);
  }
  sVkOffset3D.Set(strByteLength, Napi::Number::New(env, sizeof(VkOffset3D)));
  out.Set(Napi::String::New(env, "VkOffset3D"), sVkOffset3D);
  Napi::Object sVkExtent2D = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExtent2D, width)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExtent2D::width)));
    
    sVkExtent2D.Set(Napi::String::New(env, "width"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExtent2D, height)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExtent2D::height)));
    
    sVkExtent2D.Set(Napi::String::New(env, "height"), obj);
  }
  sVkExtent2D.Set(strByteLength, Napi::Number::New(env, sizeof(VkExtent2D)));
  out.Set(Napi::String::New(env, "VkExtent2D"), sVkExtent2D);
  Napi::Object sVkExtent3D = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExtent3D, width)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExtent3D::width)));
    
    sVkExtent3D.Set(Napi::String::New(env, "width"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExtent3D, height)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExtent3D::height)));
    
    sVkExtent3D.Set(Napi::String::New(env, "height"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExtent3D, depth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExtent3D::depth)));
    
    sVkExtent3D.Set(Napi::String::New(env, "depth"), obj);
  }
  sVkExtent3D.Set(strByteLength, Napi::Number::New(env, sizeof(VkExtent3D)));
  out.Set(Napi::String::New(env, "VkExtent3D"), sVkExtent3D);
  Napi::Object sVkViewport = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkViewport, x)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkViewport::x)));
    
    sVkViewport.Set(Napi::String::New(env, "x"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkViewport, y)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkViewport::y)));
    
    sVkViewport.Set(Napi::String::New(env, "y"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkViewport, width)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkViewport::width)));
    
    sVkViewport.Set(Napi::String::New(env, "width"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkViewport, height)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkViewport::height)));
    
    sVkViewport.Set(Napi::String::New(env, "height"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkViewport, minDepth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkViewport::minDepth)));
    
    sVkViewport.Set(Napi::String::New(env, "minDepth"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkViewport, maxDepth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkViewport::maxDepth)));
    
    sVkViewport.Set(Napi::String::New(env, "maxDepth"), obj);
  }
  sVkViewport.Set(strByteLength, Napi::Number::New(env, sizeof(VkViewport)));
  out.Set(Napi::String::New(env, "VkViewport"), sVkViewport);
  Napi::Object sVkRect2D = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRect2D, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRect2D::offset)));
    
    sVkRect2D.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRect2D, extent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRect2D::extent)));
    
    sVkRect2D.Set(Napi::String::New(env, "extent"), obj);
  }
  sVkRect2D.Set(strByteLength, Napi::Number::New(env, sizeof(VkRect2D)));
  out.Set(Napi::String::New(env, "VkRect2D"), sVkRect2D);
  Napi::Object sVkClearRect = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkClearRect, rect)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearRect::rect)));
    
    sVkClearRect.Set(Napi::String::New(env, "rect"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkClearRect, baseArrayLayer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearRect::baseArrayLayer)));
    
    sVkClearRect.Set(Napi::String::New(env, "baseArrayLayer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkClearRect, layerCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearRect::layerCount)));
    
    sVkClearRect.Set(Napi::String::New(env, "layerCount"), obj);
  }
  sVkClearRect.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearRect)));
  out.Set(Napi::String::New(env, "VkClearRect"), sVkClearRect);
  Napi::Object sVkComponentMapping = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkComponentMapping, r)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkComponentMapping::r)));
    
    sVkComponentMapping.Set(Napi::String::New(env, "r"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkComponentMapping, g)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkComponentMapping::g)));
    
    sVkComponentMapping.Set(Napi::String::New(env, "g"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkComponentMapping, b)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkComponentMapping::b)));
    
    sVkComponentMapping.Set(Napi::String::New(env, "b"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkComponentMapping, a)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkComponentMapping::a)));
    
    sVkComponentMapping.Set(Napi::String::New(env, "a"), obj);
  }
  sVkComponentMapping.Set(strByteLength, Napi::Number::New(env, sizeof(VkComponentMapping)));
  out.Set(Napi::String::New(env, "VkComponentMapping"), sVkComponentMapping);
  Napi::Object sVkPhysicalDeviceProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, apiVersion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties::apiVersion)));
    
    sVkPhysicalDeviceProperties.Set(Napi::String::New(env, "apiVersion"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, driverVersion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties::driverVersion)));
    
    sVkPhysicalDeviceProperties.Set(Napi::String::New(env, "driverVersion"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, vendorID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties::vendorID)));
    
    sVkPhysicalDeviceProperties.Set(Napi::String::New(env, "vendorID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, deviceID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties::deviceID)));
    
    sVkPhysicalDeviceProperties.Set(Napi::String::New(env, "deviceID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, deviceType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties::deviceType)));
    
    sVkPhysicalDeviceProperties.Set(Napi::String::New(env, "deviceType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, deviceName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties::deviceName)));
    
    sVkPhysicalDeviceProperties.Set(Napi::String::New(env, "deviceName"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, pipelineCacheUUID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties::pipelineCacheUUID)));
    
    sVkPhysicalDeviceProperties.Set(Napi::String::New(env, "pipelineCacheUUID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, limits)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties::limits)));
    
    sVkPhysicalDeviceProperties.Set(Napi::String::New(env, "limits"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, sparseProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties::sparseProperties)));
    
    sVkPhysicalDeviceProperties.Set(Napi::String::New(env, "sparseProperties"), obj);
  }
  sVkPhysicalDeviceProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceProperties"), sVkPhysicalDeviceProperties);
  Napi::Object sVkExtensionProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExtensionProperties, extensionName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExtensionProperties::extensionName)));
    
    sVkExtensionProperties.Set(Napi::String::New(env, "extensionName"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExtensionProperties, specVersion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExtensionProperties::specVersion)));
    
    sVkExtensionProperties.Set(Napi::String::New(env, "specVersion"), obj);
  }
  sVkExtensionProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkExtensionProperties)));
  out.Set(Napi::String::New(env, "VkExtensionProperties"), sVkExtensionProperties);
  Napi::Object sVkLayerProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkLayerProperties, layerName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkLayerProperties::layerName)));
    
    sVkLayerProperties.Set(Napi::String::New(env, "layerName"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkLayerProperties, specVersion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkLayerProperties::specVersion)));
    
    sVkLayerProperties.Set(Napi::String::New(env, "specVersion"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkLayerProperties, implementationVersion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkLayerProperties::implementationVersion)));
    
    sVkLayerProperties.Set(Napi::String::New(env, "implementationVersion"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkLayerProperties, description)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkLayerProperties::description)));
    
    sVkLayerProperties.Set(Napi::String::New(env, "description"), obj);
  }
  sVkLayerProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkLayerProperties)));
  out.Set(Napi::String::New(env, "VkLayerProperties"), sVkLayerProperties);
  Napi::Object sVkApplicationInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkApplicationInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkApplicationInfo::sType)));
    
    sVkApplicationInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkApplicationInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkApplicationInfo::pNext)));
    
    sVkApplicationInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkApplicationInfo, pApplicationName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkApplicationInfo::pApplicationName)));
    
    sVkApplicationInfo.Set(Napi::String::New(env, "pApplicationName"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkApplicationInfo, applicationVersion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkApplicationInfo::applicationVersion)));
    
    sVkApplicationInfo.Set(Napi::String::New(env, "applicationVersion"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkApplicationInfo, pEngineName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkApplicationInfo::pEngineName)));
    
    sVkApplicationInfo.Set(Napi::String::New(env, "pEngineName"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkApplicationInfo, engineVersion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkApplicationInfo::engineVersion)));
    
    sVkApplicationInfo.Set(Napi::String::New(env, "engineVersion"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkApplicationInfo, apiVersion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkApplicationInfo::apiVersion)));
    
    sVkApplicationInfo.Set(Napi::String::New(env, "apiVersion"), obj);
  }
  sVkApplicationInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkApplicationInfo)));
  out.Set(Napi::String::New(env, "VkApplicationInfo"), sVkApplicationInfo);
  Napi::Object sVkAllocationCallbacks = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAllocationCallbacks, pUserData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAllocationCallbacks::pUserData)));
    
    sVkAllocationCallbacks.Set(Napi::String::New(env, "pUserData"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAllocationCallbacks, pfnAllocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAllocationCallbacks::pfnAllocation)));
    
    sVkAllocationCallbacks.Set(Napi::String::New(env, "pfnAllocation"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAllocationCallbacks, pfnReallocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAllocationCallbacks::pfnReallocation)));
    
    sVkAllocationCallbacks.Set(Napi::String::New(env, "pfnReallocation"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAllocationCallbacks, pfnFree)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAllocationCallbacks::pfnFree)));
    
    sVkAllocationCallbacks.Set(Napi::String::New(env, "pfnFree"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAllocationCallbacks, pfnInternalAllocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAllocationCallbacks::pfnInternalAllocation)));
    
    sVkAllocationCallbacks.Set(Napi::String::New(env, "pfnInternalAllocation"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAllocationCallbacks, pfnInternalFree)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAllocationCallbacks::pfnInternalFree)));
    
    sVkAllocationCallbacks.Set(Napi::String::New(env, "pfnInternalFree"), obj);
  }
  sVkAllocationCallbacks.Set(strByteLength, Napi::Number::New(env, sizeof(VkAllocationCallbacks)));
  out.Set(Napi::String::New(env, "VkAllocationCallbacks"), sVkAllocationCallbacks);
  Napi::Object sVkDeviceQueueCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceQueueCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueCreateInfo::sType)));
    
    sVkDeviceQueueCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceQueueCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueCreateInfo::pNext)));
    
    sVkDeviceQueueCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceQueueCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueCreateInfo::flags)));
    
    sVkDeviceQueueCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceQueueCreateInfo, queueFamilyIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueCreateInfo::queueFamilyIndex)));
    
    sVkDeviceQueueCreateInfo.Set(Napi::String::New(env, "queueFamilyIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceQueueCreateInfo, queueCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueCreateInfo::queueCount)));
    
    sVkDeviceQueueCreateInfo.Set(Napi::String::New(env, "queueCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceQueueCreateInfo, pQueuePriorities)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueCreateInfo::pQueuePriorities)));
    
    sVkDeviceQueueCreateInfo.Set(Napi::String::New(env, "pQueuePriorities"), obj);
  }
  sVkDeviceQueueCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueCreateInfo)));
  out.Set(Napi::String::New(env, "VkDeviceQueueCreateInfo"), sVkDeviceQueueCreateInfo);
  Napi::Object sVkDeviceCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceCreateInfo::sType)));
    
    sVkDeviceCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceCreateInfo::pNext)));
    
    sVkDeviceCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceCreateInfo::flags)));
    
    sVkDeviceCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceCreateInfo, queueCreateInfoCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceCreateInfo::queueCreateInfoCount)));
    
    sVkDeviceCreateInfo.Set(Napi::String::New(env, "queueCreateInfoCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceCreateInfo, pQueueCreateInfos)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceCreateInfo::pQueueCreateInfos)));
    
    sVkDeviceCreateInfo.Set(Napi::String::New(env, "pQueueCreateInfos"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceCreateInfo, enabledLayerCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceCreateInfo::enabledLayerCount)));
    
    sVkDeviceCreateInfo.Set(Napi::String::New(env, "enabledLayerCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceCreateInfo, ppEnabledLayerNames)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceCreateInfo::ppEnabledLayerNames)));
    
    sVkDeviceCreateInfo.Set(Napi::String::New(env, "ppEnabledLayerNames"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceCreateInfo, enabledExtensionCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceCreateInfo::enabledExtensionCount)));
    
    sVkDeviceCreateInfo.Set(Napi::String::New(env, "enabledExtensionCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceCreateInfo, ppEnabledExtensionNames)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceCreateInfo::ppEnabledExtensionNames)));
    
    sVkDeviceCreateInfo.Set(Napi::String::New(env, "ppEnabledExtensionNames"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceCreateInfo, pEnabledFeatures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceCreateInfo::pEnabledFeatures)));
    
    sVkDeviceCreateInfo.Set(Napi::String::New(env, "pEnabledFeatures"), obj);
  }
  sVkDeviceCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceCreateInfo)));
  out.Set(Napi::String::New(env, "VkDeviceCreateInfo"), sVkDeviceCreateInfo);
  Napi::Object sVkInstanceCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInstanceCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInstanceCreateInfo::sType)));
    
    sVkInstanceCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInstanceCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInstanceCreateInfo::pNext)));
    
    sVkInstanceCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInstanceCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInstanceCreateInfo::flags)));
    
    sVkInstanceCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInstanceCreateInfo, pApplicationInfo)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInstanceCreateInfo::pApplicationInfo)));
    
    sVkInstanceCreateInfo.Set(Napi::String::New(env, "pApplicationInfo"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInstanceCreateInfo, enabledLayerCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInstanceCreateInfo::enabledLayerCount)));
    
    sVkInstanceCreateInfo.Set(Napi::String::New(env, "enabledLayerCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInstanceCreateInfo, ppEnabledLayerNames)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInstanceCreateInfo::ppEnabledLayerNames)));
    
    sVkInstanceCreateInfo.Set(Napi::String::New(env, "ppEnabledLayerNames"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInstanceCreateInfo, enabledExtensionCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInstanceCreateInfo::enabledExtensionCount)));
    
    sVkInstanceCreateInfo.Set(Napi::String::New(env, "enabledExtensionCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInstanceCreateInfo, ppEnabledExtensionNames)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInstanceCreateInfo::ppEnabledExtensionNames)));
    
    sVkInstanceCreateInfo.Set(Napi::String::New(env, "ppEnabledExtensionNames"), obj);
  }
  sVkInstanceCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkInstanceCreateInfo)));
  out.Set(Napi::String::New(env, "VkInstanceCreateInfo"), sVkInstanceCreateInfo);
  Napi::Object sVkQueueFamilyProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueueFamilyProperties, queueFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyProperties::queueFlags)));
    
    sVkQueueFamilyProperties.Set(Napi::String::New(env, "queueFlags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueueFamilyProperties, queueCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyProperties::queueCount)));
    
    sVkQueueFamilyProperties.Set(Napi::String::New(env, "queueCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueueFamilyProperties, timestampValidBits)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyProperties::timestampValidBits)));
    
    sVkQueueFamilyProperties.Set(Napi::String::New(env, "timestampValidBits"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueueFamilyProperties, minImageTransferGranularity)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyProperties::minImageTransferGranularity)));
    
    sVkQueueFamilyProperties.Set(Napi::String::New(env, "minImageTransferGranularity"), obj);
  }
  sVkQueueFamilyProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyProperties)));
  out.Set(Napi::String::New(env, "VkQueueFamilyProperties"), sVkQueueFamilyProperties);
  Napi::Object sVkPhysicalDeviceMemoryProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties, memoryTypeCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties::memoryTypeCount)));
    
    sVkPhysicalDeviceMemoryProperties.Set(Napi::String::New(env, "memoryTypeCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties, memoryTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties::memoryTypes)));
    
    sVkPhysicalDeviceMemoryProperties.Set(Napi::String::New(env, "memoryTypes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties, memoryHeapCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties::memoryHeapCount)));
    
    sVkPhysicalDeviceMemoryProperties.Set(Napi::String::New(env, "memoryHeapCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties, memoryHeaps)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties::memoryHeaps)));
    
    sVkPhysicalDeviceMemoryProperties.Set(Napi::String::New(env, "memoryHeaps"), obj);
  }
  sVkPhysicalDeviceMemoryProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceMemoryProperties"), sVkPhysicalDeviceMemoryProperties);
  Napi::Object sVkMemoryAllocateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryAllocateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryAllocateInfo::sType)));
    
    sVkMemoryAllocateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryAllocateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryAllocateInfo::pNext)));
    
    sVkMemoryAllocateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryAllocateInfo, allocationSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryAllocateInfo::allocationSize)));
    
    sVkMemoryAllocateInfo.Set(Napi::String::New(env, "allocationSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryAllocateInfo, memoryTypeIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryAllocateInfo::memoryTypeIndex)));
    
    sVkMemoryAllocateInfo.Set(Napi::String::New(env, "memoryTypeIndex"), obj);
  }
  sVkMemoryAllocateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryAllocateInfo)));
  out.Set(Napi::String::New(env, "VkMemoryAllocateInfo"), sVkMemoryAllocateInfo);
  Napi::Object sVkMemoryRequirements = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryRequirements, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryRequirements::size)));
    
    sVkMemoryRequirements.Set(Napi::String::New(env, "size"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryRequirements, alignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryRequirements::alignment)));
    
    sVkMemoryRequirements.Set(Napi::String::New(env, "alignment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryRequirements, memoryTypeBits)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryRequirements::memoryTypeBits)));
    
    sVkMemoryRequirements.Set(Napi::String::New(env, "memoryTypeBits"), obj);
  }
  sVkMemoryRequirements.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryRequirements)));
  out.Set(Napi::String::New(env, "VkMemoryRequirements"), sVkMemoryRequirements);
  Napi::Object sVkSparseImageFormatProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageFormatProperties, aspectMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageFormatProperties::aspectMask)));
    
    sVkSparseImageFormatProperties.Set(Napi::String::New(env, "aspectMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageFormatProperties, imageGranularity)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageFormatProperties::imageGranularity)));
    
    sVkSparseImageFormatProperties.Set(Napi::String::New(env, "imageGranularity"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageFormatProperties, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageFormatProperties::flags)));
    
    sVkSparseImageFormatProperties.Set(Napi::String::New(env, "flags"), obj);
  }
  sVkSparseImageFormatProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageFormatProperties)));
  out.Set(Napi::String::New(env, "VkSparseImageFormatProperties"), sVkSparseImageFormatProperties);
  Napi::Object sVkSparseImageMemoryRequirements = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements, formatProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements::formatProperties)));
    
    sVkSparseImageMemoryRequirements.Set(Napi::String::New(env, "formatProperties"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements, imageMipTailFirstLod)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements::imageMipTailFirstLod)));
    
    sVkSparseImageMemoryRequirements.Set(Napi::String::New(env, "imageMipTailFirstLod"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements, imageMipTailSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements::imageMipTailSize)));
    
    sVkSparseImageMemoryRequirements.Set(Napi::String::New(env, "imageMipTailSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements, imageMipTailOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements::imageMipTailOffset)));
    
    sVkSparseImageMemoryRequirements.Set(Napi::String::New(env, "imageMipTailOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements, imageMipTailStride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements::imageMipTailStride)));
    
    sVkSparseImageMemoryRequirements.Set(Napi::String::New(env, "imageMipTailStride"), obj);
  }
  sVkSparseImageMemoryRequirements.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements)));
  out.Set(Napi::String::New(env, "VkSparseImageMemoryRequirements"), sVkSparseImageMemoryRequirements);
  Napi::Object sVkMemoryType = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryType, propertyFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryType::propertyFlags)));
    
    sVkMemoryType.Set(Napi::String::New(env, "propertyFlags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryType, heapIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryType::heapIndex)));
    
    sVkMemoryType.Set(Napi::String::New(env, "heapIndex"), obj);
  }
  sVkMemoryType.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryType)));
  out.Set(Napi::String::New(env, "VkMemoryType"), sVkMemoryType);
  Napi::Object sVkMemoryHeap = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryHeap, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryHeap::size)));
    
    sVkMemoryHeap.Set(Napi::String::New(env, "size"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryHeap, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryHeap::flags)));
    
    sVkMemoryHeap.Set(Napi::String::New(env, "flags"), obj);
  }
  sVkMemoryHeap.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryHeap)));
  out.Set(Napi::String::New(env, "VkMemoryHeap"), sVkMemoryHeap);
  Napi::Object sVkMappedMemoryRange = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMappedMemoryRange, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMappedMemoryRange::sType)));
    
    sVkMappedMemoryRange.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMappedMemoryRange, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMappedMemoryRange::pNext)));
    
    sVkMappedMemoryRange.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMappedMemoryRange, memory)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMappedMemoryRange::memory)));
    
    sVkMappedMemoryRange.Set(Napi::String::New(env, "memory"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMappedMemoryRange, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMappedMemoryRange::offset)));
    
    sVkMappedMemoryRange.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMappedMemoryRange, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMappedMemoryRange::size)));
    
    sVkMappedMemoryRange.Set(Napi::String::New(env, "size"), obj);
  }
  sVkMappedMemoryRange.Set(strByteLength, Napi::Number::New(env, sizeof(VkMappedMemoryRange)));
  out.Set(Napi::String::New(env, "VkMappedMemoryRange"), sVkMappedMemoryRange);
  Napi::Object sVkFormatProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFormatProperties, linearTilingFeatures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFormatProperties::linearTilingFeatures)));
    
    sVkFormatProperties.Set(Napi::String::New(env, "linearTilingFeatures"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFormatProperties, optimalTilingFeatures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFormatProperties::optimalTilingFeatures)));
    
    sVkFormatProperties.Set(Napi::String::New(env, "optimalTilingFeatures"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFormatProperties, bufferFeatures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFormatProperties::bufferFeatures)));
    
    sVkFormatProperties.Set(Napi::String::New(env, "bufferFeatures"), obj);
  }
  sVkFormatProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkFormatProperties)));
  out.Set(Napi::String::New(env, "VkFormatProperties"), sVkFormatProperties);
  Napi::Object sVkImageFormatProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatProperties, maxExtent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatProperties::maxExtent)));
    
    sVkImageFormatProperties.Set(Napi::String::New(env, "maxExtent"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatProperties, maxMipLevels)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatProperties::maxMipLevels)));
    
    sVkImageFormatProperties.Set(Napi::String::New(env, "maxMipLevels"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatProperties, maxArrayLayers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatProperties::maxArrayLayers)));
    
    sVkImageFormatProperties.Set(Napi::String::New(env, "maxArrayLayers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatProperties, sampleCounts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatProperties::sampleCounts)));
    
    sVkImageFormatProperties.Set(Napi::String::New(env, "sampleCounts"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatProperties, maxResourceSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatProperties::maxResourceSize)));
    
    sVkImageFormatProperties.Set(Napi::String::New(env, "maxResourceSize"), obj);
  }
  sVkImageFormatProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatProperties)));
  out.Set(Napi::String::New(env, "VkImageFormatProperties"), sVkImageFormatProperties);
  Napi::Object sVkDescriptorBufferInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorBufferInfo, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorBufferInfo::buffer)));
    
    sVkDescriptorBufferInfo.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorBufferInfo, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorBufferInfo::offset)));
    
    sVkDescriptorBufferInfo.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorBufferInfo, range)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorBufferInfo::range)));
    
    sVkDescriptorBufferInfo.Set(Napi::String::New(env, "range"), obj);
  }
  sVkDescriptorBufferInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorBufferInfo)));
  out.Set(Napi::String::New(env, "VkDescriptorBufferInfo"), sVkDescriptorBufferInfo);
  Napi::Object sVkDescriptorImageInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorImageInfo, sampler)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorImageInfo::sampler)));
    
    sVkDescriptorImageInfo.Set(Napi::String::New(env, "sampler"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorImageInfo, imageView)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorImageInfo::imageView)));
    
    sVkDescriptorImageInfo.Set(Napi::String::New(env, "imageView"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorImageInfo, imageLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorImageInfo::imageLayout)));
    
    sVkDescriptorImageInfo.Set(Napi::String::New(env, "imageLayout"), obj);
  }
  sVkDescriptorImageInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorImageInfo)));
  out.Set(Napi::String::New(env, "VkDescriptorImageInfo"), sVkDescriptorImageInfo);
  Napi::Object sVkWriteDescriptorSet = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSet, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSet::sType)));
    
    sVkWriteDescriptorSet.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSet, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSet::pNext)));
    
    sVkWriteDescriptorSet.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSet, dstSet)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSet::dstSet)));
    
    sVkWriteDescriptorSet.Set(Napi::String::New(env, "dstSet"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSet, dstBinding)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSet::dstBinding)));
    
    sVkWriteDescriptorSet.Set(Napi::String::New(env, "dstBinding"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSet, dstArrayElement)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSet::dstArrayElement)));
    
    sVkWriteDescriptorSet.Set(Napi::String::New(env, "dstArrayElement"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSet, descriptorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSet::descriptorCount)));
    
    sVkWriteDescriptorSet.Set(Napi::String::New(env, "descriptorCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSet, descriptorType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSet::descriptorType)));
    
    sVkWriteDescriptorSet.Set(Napi::String::New(env, "descriptorType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSet, pImageInfo)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSet::pImageInfo)));
    
    sVkWriteDescriptorSet.Set(Napi::String::New(env, "pImageInfo"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSet, pBufferInfo)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSet::pBufferInfo)));
    
    sVkWriteDescriptorSet.Set(Napi::String::New(env, "pBufferInfo"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSet, pTexelBufferView)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSet::pTexelBufferView)));
    
    sVkWriteDescriptorSet.Set(Napi::String::New(env, "pTexelBufferView"), obj);
  }
  sVkWriteDescriptorSet.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSet)));
  out.Set(Napi::String::New(env, "VkWriteDescriptorSet"), sVkWriteDescriptorSet);
  Napi::Object sVkCopyDescriptorSet = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyDescriptorSet, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyDescriptorSet::sType)));
    
    sVkCopyDescriptorSet.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyDescriptorSet, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyDescriptorSet::pNext)));
    
    sVkCopyDescriptorSet.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyDescriptorSet, srcSet)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyDescriptorSet::srcSet)));
    
    sVkCopyDescriptorSet.Set(Napi::String::New(env, "srcSet"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyDescriptorSet, srcBinding)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyDescriptorSet::srcBinding)));
    
    sVkCopyDescriptorSet.Set(Napi::String::New(env, "srcBinding"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyDescriptorSet, srcArrayElement)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyDescriptorSet::srcArrayElement)));
    
    sVkCopyDescriptorSet.Set(Napi::String::New(env, "srcArrayElement"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyDescriptorSet, dstSet)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyDescriptorSet::dstSet)));
    
    sVkCopyDescriptorSet.Set(Napi::String::New(env, "dstSet"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyDescriptorSet, dstBinding)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyDescriptorSet::dstBinding)));
    
    sVkCopyDescriptorSet.Set(Napi::String::New(env, "dstBinding"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyDescriptorSet, dstArrayElement)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyDescriptorSet::dstArrayElement)));
    
    sVkCopyDescriptorSet.Set(Napi::String::New(env, "dstArrayElement"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyDescriptorSet, descriptorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyDescriptorSet::descriptorCount)));
    
    sVkCopyDescriptorSet.Set(Napi::String::New(env, "descriptorCount"), obj);
  }
  sVkCopyDescriptorSet.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyDescriptorSet)));
  out.Set(Napi::String::New(env, "VkCopyDescriptorSet"), sVkCopyDescriptorSet);
  Napi::Object sVkBufferCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCreateInfo::sType)));
    
    sVkBufferCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCreateInfo::pNext)));
    
    sVkBufferCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCreateInfo::flags)));
    
    sVkBufferCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCreateInfo, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCreateInfo::size)));
    
    sVkBufferCreateInfo.Set(Napi::String::New(env, "size"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCreateInfo, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCreateInfo::usage)));
    
    sVkBufferCreateInfo.Set(Napi::String::New(env, "usage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCreateInfo, sharingMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCreateInfo::sharingMode)));
    
    sVkBufferCreateInfo.Set(Napi::String::New(env, "sharingMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCreateInfo, queueFamilyIndexCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCreateInfo::queueFamilyIndexCount)));
    
    sVkBufferCreateInfo.Set(Napi::String::New(env, "queueFamilyIndexCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCreateInfo, pQueueFamilyIndices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCreateInfo::pQueueFamilyIndices)));
    
    sVkBufferCreateInfo.Set(Napi::String::New(env, "pQueueFamilyIndices"), obj);
  }
  sVkBufferCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCreateInfo)));
  out.Set(Napi::String::New(env, "VkBufferCreateInfo"), sVkBufferCreateInfo);
  Napi::Object sVkBufferViewCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferViewCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferViewCreateInfo::sType)));
    
    sVkBufferViewCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferViewCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferViewCreateInfo::pNext)));
    
    sVkBufferViewCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferViewCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferViewCreateInfo::flags)));
    
    sVkBufferViewCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferViewCreateInfo, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferViewCreateInfo::buffer)));
    
    sVkBufferViewCreateInfo.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferViewCreateInfo, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferViewCreateInfo::format)));
    
    sVkBufferViewCreateInfo.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferViewCreateInfo, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferViewCreateInfo::offset)));
    
    sVkBufferViewCreateInfo.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferViewCreateInfo, range)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferViewCreateInfo::range)));
    
    sVkBufferViewCreateInfo.Set(Napi::String::New(env, "range"), obj);
  }
  sVkBufferViewCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferViewCreateInfo)));
  out.Set(Napi::String::New(env, "VkBufferViewCreateInfo"), sVkBufferViewCreateInfo);
  Napi::Object sVkImageSubresource = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSubresource, aspectMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSubresource::aspectMask)));
    
    sVkImageSubresource.Set(Napi::String::New(env, "aspectMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSubresource, mipLevel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSubresource::mipLevel)));
    
    sVkImageSubresource.Set(Napi::String::New(env, "mipLevel"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSubresource, arrayLayer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSubresource::arrayLayer)));
    
    sVkImageSubresource.Set(Napi::String::New(env, "arrayLayer"), obj);
  }
  sVkImageSubresource.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSubresource)));
  out.Set(Napi::String::New(env, "VkImageSubresource"), sVkImageSubresource);
  Napi::Object sVkImageSubresourceLayers = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSubresourceLayers, aspectMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSubresourceLayers::aspectMask)));
    
    sVkImageSubresourceLayers.Set(Napi::String::New(env, "aspectMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSubresourceLayers, mipLevel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSubresourceLayers::mipLevel)));
    
    sVkImageSubresourceLayers.Set(Napi::String::New(env, "mipLevel"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSubresourceLayers, baseArrayLayer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSubresourceLayers::baseArrayLayer)));
    
    sVkImageSubresourceLayers.Set(Napi::String::New(env, "baseArrayLayer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSubresourceLayers, layerCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSubresourceLayers::layerCount)));
    
    sVkImageSubresourceLayers.Set(Napi::String::New(env, "layerCount"), obj);
  }
  sVkImageSubresourceLayers.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSubresourceLayers)));
  out.Set(Napi::String::New(env, "VkImageSubresourceLayers"), sVkImageSubresourceLayers);
  Napi::Object sVkImageSubresourceRange = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSubresourceRange, aspectMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSubresourceRange::aspectMask)));
    
    sVkImageSubresourceRange.Set(Napi::String::New(env, "aspectMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSubresourceRange, baseMipLevel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSubresourceRange::baseMipLevel)));
    
    sVkImageSubresourceRange.Set(Napi::String::New(env, "baseMipLevel"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSubresourceRange, levelCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSubresourceRange::levelCount)));
    
    sVkImageSubresourceRange.Set(Napi::String::New(env, "levelCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSubresourceRange, baseArrayLayer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSubresourceRange::baseArrayLayer)));
    
    sVkImageSubresourceRange.Set(Napi::String::New(env, "baseArrayLayer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSubresourceRange, layerCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSubresourceRange::layerCount)));
    
    sVkImageSubresourceRange.Set(Napi::String::New(env, "layerCount"), obj);
  }
  sVkImageSubresourceRange.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSubresourceRange)));
  out.Set(Napi::String::New(env, "VkImageSubresourceRange"), sVkImageSubresourceRange);
  Napi::Object sVkMemoryBarrier = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryBarrier, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryBarrier::sType)));
    
    sVkMemoryBarrier.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryBarrier, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryBarrier::pNext)));
    
    sVkMemoryBarrier.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryBarrier, srcAccessMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryBarrier::srcAccessMask)));
    
    sVkMemoryBarrier.Set(Napi::String::New(env, "srcAccessMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryBarrier, dstAccessMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryBarrier::dstAccessMask)));
    
    sVkMemoryBarrier.Set(Napi::String::New(env, "dstAccessMask"), obj);
  }
  sVkMemoryBarrier.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryBarrier)));
  out.Set(Napi::String::New(env, "VkMemoryBarrier"), sVkMemoryBarrier);
  Napi::Object sVkBufferMemoryBarrier = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryBarrier::sType)));
    
    sVkBufferMemoryBarrier.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryBarrier::pNext)));
    
    sVkBufferMemoryBarrier.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, srcAccessMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryBarrier::srcAccessMask)));
    
    sVkBufferMemoryBarrier.Set(Napi::String::New(env, "srcAccessMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, dstAccessMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryBarrier::dstAccessMask)));
    
    sVkBufferMemoryBarrier.Set(Napi::String::New(env, "dstAccessMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, srcQueueFamilyIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryBarrier::srcQueueFamilyIndex)));
    
    sVkBufferMemoryBarrier.Set(Napi::String::New(env, "srcQueueFamilyIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, dstQueueFamilyIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryBarrier::dstQueueFamilyIndex)));
    
    sVkBufferMemoryBarrier.Set(Napi::String::New(env, "dstQueueFamilyIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryBarrier::buffer)));
    
    sVkBufferMemoryBarrier.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryBarrier::offset)));
    
    sVkBufferMemoryBarrier.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryBarrier::size)));
    
    sVkBufferMemoryBarrier.Set(Napi::String::New(env, "size"), obj);
  }
  sVkBufferMemoryBarrier.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryBarrier)));
  out.Set(Napi::String::New(env, "VkBufferMemoryBarrier"), sVkBufferMemoryBarrier);
  Napi::Object sVkImageMemoryBarrier = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryBarrier, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryBarrier::sType)));
    
    sVkImageMemoryBarrier.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryBarrier, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryBarrier::pNext)));
    
    sVkImageMemoryBarrier.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryBarrier, srcAccessMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryBarrier::srcAccessMask)));
    
    sVkImageMemoryBarrier.Set(Napi::String::New(env, "srcAccessMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryBarrier, dstAccessMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryBarrier::dstAccessMask)));
    
    sVkImageMemoryBarrier.Set(Napi::String::New(env, "dstAccessMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryBarrier, oldLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryBarrier::oldLayout)));
    
    sVkImageMemoryBarrier.Set(Napi::String::New(env, "oldLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryBarrier, newLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryBarrier::newLayout)));
    
    sVkImageMemoryBarrier.Set(Napi::String::New(env, "newLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryBarrier, srcQueueFamilyIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryBarrier::srcQueueFamilyIndex)));
    
    sVkImageMemoryBarrier.Set(Napi::String::New(env, "srcQueueFamilyIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryBarrier, dstQueueFamilyIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryBarrier::dstQueueFamilyIndex)));
    
    sVkImageMemoryBarrier.Set(Napi::String::New(env, "dstQueueFamilyIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryBarrier, image)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryBarrier::image)));
    
    sVkImageMemoryBarrier.Set(Napi::String::New(env, "image"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryBarrier, subresourceRange)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryBarrier::subresourceRange)));
    
    sVkImageMemoryBarrier.Set(Napi::String::New(env, "subresourceRange"), obj);
  }
  sVkImageMemoryBarrier.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryBarrier)));
  out.Set(Napi::String::New(env, "VkImageMemoryBarrier"), sVkImageMemoryBarrier);
  Napi::Object sVkImageCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo::sType)));
    
    sVkImageCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo::pNext)));
    
    sVkImageCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo::flags)));
    
    sVkImageCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCreateInfo, imageType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo::imageType)));
    
    sVkImageCreateInfo.Set(Napi::String::New(env, "imageType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCreateInfo, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo::format)));
    
    sVkImageCreateInfo.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCreateInfo, extent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo::extent)));
    
    sVkImageCreateInfo.Set(Napi::String::New(env, "extent"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCreateInfo, mipLevels)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo::mipLevels)));
    
    sVkImageCreateInfo.Set(Napi::String::New(env, "mipLevels"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCreateInfo, arrayLayers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo::arrayLayers)));
    
    sVkImageCreateInfo.Set(Napi::String::New(env, "arrayLayers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCreateInfo, samples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo::samples)));
    
    sVkImageCreateInfo.Set(Napi::String::New(env, "samples"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCreateInfo, tiling)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo::tiling)));
    
    sVkImageCreateInfo.Set(Napi::String::New(env, "tiling"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCreateInfo, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo::usage)));
    
    sVkImageCreateInfo.Set(Napi::String::New(env, "usage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCreateInfo, sharingMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo::sharingMode)));
    
    sVkImageCreateInfo.Set(Napi::String::New(env, "sharingMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCreateInfo, queueFamilyIndexCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo::queueFamilyIndexCount)));
    
    sVkImageCreateInfo.Set(Napi::String::New(env, "queueFamilyIndexCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCreateInfo, pQueueFamilyIndices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo::pQueueFamilyIndices)));
    
    sVkImageCreateInfo.Set(Napi::String::New(env, "pQueueFamilyIndices"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCreateInfo, initialLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo::initialLayout)));
    
    sVkImageCreateInfo.Set(Napi::String::New(env, "initialLayout"), obj);
  }
  sVkImageCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCreateInfo)));
  out.Set(Napi::String::New(env, "VkImageCreateInfo"), sVkImageCreateInfo);
  Napi::Object sVkSubresourceLayout = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubresourceLayout, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubresourceLayout::offset)));
    
    sVkSubresourceLayout.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubresourceLayout, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubresourceLayout::size)));
    
    sVkSubresourceLayout.Set(Napi::String::New(env, "size"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubresourceLayout, rowPitch)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubresourceLayout::rowPitch)));
    
    sVkSubresourceLayout.Set(Napi::String::New(env, "rowPitch"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubresourceLayout, arrayPitch)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubresourceLayout::arrayPitch)));
    
    sVkSubresourceLayout.Set(Napi::String::New(env, "arrayPitch"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubresourceLayout, depthPitch)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubresourceLayout::depthPitch)));
    
    sVkSubresourceLayout.Set(Napi::String::New(env, "depthPitch"), obj);
  }
  sVkSubresourceLayout.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubresourceLayout)));
  out.Set(Napi::String::New(env, "VkSubresourceLayout"), sVkSubresourceLayout);
  Napi::Object sVkImageViewCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewCreateInfo::sType)));
    
    sVkImageViewCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewCreateInfo::pNext)));
    
    sVkImageViewCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewCreateInfo::flags)));
    
    sVkImageViewCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewCreateInfo, image)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewCreateInfo::image)));
    
    sVkImageViewCreateInfo.Set(Napi::String::New(env, "image"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewCreateInfo, viewType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewCreateInfo::viewType)));
    
    sVkImageViewCreateInfo.Set(Napi::String::New(env, "viewType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewCreateInfo, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewCreateInfo::format)));
    
    sVkImageViewCreateInfo.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewCreateInfo, components)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewCreateInfo::components)));
    
    sVkImageViewCreateInfo.Set(Napi::String::New(env, "components"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewCreateInfo, subresourceRange)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewCreateInfo::subresourceRange)));
    
    sVkImageViewCreateInfo.Set(Napi::String::New(env, "subresourceRange"), obj);
  }
  sVkImageViewCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewCreateInfo)));
  out.Set(Napi::String::New(env, "VkImageViewCreateInfo"), sVkImageViewCreateInfo);
  Napi::Object sVkBufferCopy = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCopy, srcOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCopy::srcOffset)));
    
    sVkBufferCopy.Set(Napi::String::New(env, "srcOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCopy, dstOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCopy::dstOffset)));
    
    sVkBufferCopy.Set(Napi::String::New(env, "dstOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCopy, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCopy::size)));
    
    sVkBufferCopy.Set(Napi::String::New(env, "size"), obj);
  }
  sVkBufferCopy.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCopy)));
  out.Set(Napi::String::New(env, "VkBufferCopy"), sVkBufferCopy);
  Napi::Object sVkSparseMemoryBind = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseMemoryBind, resourceOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseMemoryBind::resourceOffset)));
    
    sVkSparseMemoryBind.Set(Napi::String::New(env, "resourceOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseMemoryBind, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseMemoryBind::size)));
    
    sVkSparseMemoryBind.Set(Napi::String::New(env, "size"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseMemoryBind, memory)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseMemoryBind::memory)));
    
    sVkSparseMemoryBind.Set(Napi::String::New(env, "memory"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseMemoryBind, memoryOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseMemoryBind::memoryOffset)));
    
    sVkSparseMemoryBind.Set(Napi::String::New(env, "memoryOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseMemoryBind, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseMemoryBind::flags)));
    
    sVkSparseMemoryBind.Set(Napi::String::New(env, "flags"), obj);
  }
  sVkSparseMemoryBind.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseMemoryBind)));
  out.Set(Napi::String::New(env, "VkSparseMemoryBind"), sVkSparseMemoryBind);
  Napi::Object sVkSparseImageMemoryBind = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryBind, subresource)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryBind::subresource)));
    
    sVkSparseImageMemoryBind.Set(Napi::String::New(env, "subresource"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryBind, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryBind::offset)));
    
    sVkSparseImageMemoryBind.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryBind, extent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryBind::extent)));
    
    sVkSparseImageMemoryBind.Set(Napi::String::New(env, "extent"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryBind, memory)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryBind::memory)));
    
    sVkSparseImageMemoryBind.Set(Napi::String::New(env, "memory"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryBind, memoryOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryBind::memoryOffset)));
    
    sVkSparseImageMemoryBind.Set(Napi::String::New(env, "memoryOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryBind, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryBind::flags)));
    
    sVkSparseImageMemoryBind.Set(Napi::String::New(env, "flags"), obj);
  }
  sVkSparseImageMemoryBind.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryBind)));
  out.Set(Napi::String::New(env, "VkSparseImageMemoryBind"), sVkSparseImageMemoryBind);
  Napi::Object sVkSparseBufferMemoryBindInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseBufferMemoryBindInfo, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseBufferMemoryBindInfo::buffer)));
    
    sVkSparseBufferMemoryBindInfo.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseBufferMemoryBindInfo, bindCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseBufferMemoryBindInfo::bindCount)));
    
    sVkSparseBufferMemoryBindInfo.Set(Napi::String::New(env, "bindCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseBufferMemoryBindInfo, pBinds)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseBufferMemoryBindInfo::pBinds)));
    
    sVkSparseBufferMemoryBindInfo.Set(Napi::String::New(env, "pBinds"), obj);
  }
  sVkSparseBufferMemoryBindInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseBufferMemoryBindInfo)));
  out.Set(Napi::String::New(env, "VkSparseBufferMemoryBindInfo"), sVkSparseBufferMemoryBindInfo);
  Napi::Object sVkSparseImageOpaqueMemoryBindInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageOpaqueMemoryBindInfo, image)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageOpaqueMemoryBindInfo::image)));
    
    sVkSparseImageOpaqueMemoryBindInfo.Set(Napi::String::New(env, "image"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageOpaqueMemoryBindInfo, bindCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageOpaqueMemoryBindInfo::bindCount)));
    
    sVkSparseImageOpaqueMemoryBindInfo.Set(Napi::String::New(env, "bindCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageOpaqueMemoryBindInfo, pBinds)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageOpaqueMemoryBindInfo::pBinds)));
    
    sVkSparseImageOpaqueMemoryBindInfo.Set(Napi::String::New(env, "pBinds"), obj);
  }
  sVkSparseImageOpaqueMemoryBindInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageOpaqueMemoryBindInfo)));
  out.Set(Napi::String::New(env, "VkSparseImageOpaqueMemoryBindInfo"), sVkSparseImageOpaqueMemoryBindInfo);
  Napi::Object sVkSparseImageMemoryBindInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryBindInfo, image)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryBindInfo::image)));
    
    sVkSparseImageMemoryBindInfo.Set(Napi::String::New(env, "image"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryBindInfo, bindCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryBindInfo::bindCount)));
    
    sVkSparseImageMemoryBindInfo.Set(Napi::String::New(env, "bindCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryBindInfo, pBinds)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryBindInfo::pBinds)));
    
    sVkSparseImageMemoryBindInfo.Set(Napi::String::New(env, "pBinds"), obj);
  }
  sVkSparseImageMemoryBindInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryBindInfo)));
  out.Set(Napi::String::New(env, "VkSparseImageMemoryBindInfo"), sVkSparseImageMemoryBindInfo);
  Napi::Object sVkBindSparseInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindSparseInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindSparseInfo::sType)));
    
    sVkBindSparseInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindSparseInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindSparseInfo::pNext)));
    
    sVkBindSparseInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindSparseInfo, waitSemaphoreCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindSparseInfo::waitSemaphoreCount)));
    
    sVkBindSparseInfo.Set(Napi::String::New(env, "waitSemaphoreCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindSparseInfo, pWaitSemaphores)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindSparseInfo::pWaitSemaphores)));
    
    sVkBindSparseInfo.Set(Napi::String::New(env, "pWaitSemaphores"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindSparseInfo, bufferBindCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindSparseInfo::bufferBindCount)));
    
    sVkBindSparseInfo.Set(Napi::String::New(env, "bufferBindCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindSparseInfo, pBufferBinds)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindSparseInfo::pBufferBinds)));
    
    sVkBindSparseInfo.Set(Napi::String::New(env, "pBufferBinds"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindSparseInfo, imageOpaqueBindCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindSparseInfo::imageOpaqueBindCount)));
    
    sVkBindSparseInfo.Set(Napi::String::New(env, "imageOpaqueBindCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindSparseInfo, pImageOpaqueBinds)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindSparseInfo::pImageOpaqueBinds)));
    
    sVkBindSparseInfo.Set(Napi::String::New(env, "pImageOpaqueBinds"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindSparseInfo, imageBindCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindSparseInfo::imageBindCount)));
    
    sVkBindSparseInfo.Set(Napi::String::New(env, "imageBindCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindSparseInfo, pImageBinds)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindSparseInfo::pImageBinds)));
    
    sVkBindSparseInfo.Set(Napi::String::New(env, "pImageBinds"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindSparseInfo, signalSemaphoreCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindSparseInfo::signalSemaphoreCount)));
    
    sVkBindSparseInfo.Set(Napi::String::New(env, "signalSemaphoreCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindSparseInfo, pSignalSemaphores)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindSparseInfo::pSignalSemaphores)));
    
    sVkBindSparseInfo.Set(Napi::String::New(env, "pSignalSemaphores"), obj);
  }
  sVkBindSparseInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindSparseInfo)));
  out.Set(Napi::String::New(env, "VkBindSparseInfo"), sVkBindSparseInfo);
  Napi::Object sVkImageCopy = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCopy, srcSubresource)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCopy::srcSubresource)));
    
    sVkImageCopy.Set(Napi::String::New(env, "srcSubresource"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCopy, srcOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCopy::srcOffset)));
    
    sVkImageCopy.Set(Napi::String::New(env, "srcOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCopy, dstSubresource)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCopy::dstSubresource)));
    
    sVkImageCopy.Set(Napi::String::New(env, "dstSubresource"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCopy, dstOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCopy::dstOffset)));
    
    sVkImageCopy.Set(Napi::String::New(env, "dstOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCopy, extent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCopy::extent)));
    
    sVkImageCopy.Set(Napi::String::New(env, "extent"), obj);
  }
  sVkImageCopy.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCopy)));
  out.Set(Napi::String::New(env, "VkImageCopy"), sVkImageCopy);
  Napi::Object sVkImageBlit = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageBlit, srcSubresource)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageBlit::srcSubresource)));
    
    sVkImageBlit.Set(Napi::String::New(env, "srcSubresource"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageBlit, srcOffsets)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageBlit::srcOffsets)));
    
    sVkImageBlit.Set(Napi::String::New(env, "srcOffsets"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageBlit, dstSubresource)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageBlit::dstSubresource)));
    
    sVkImageBlit.Set(Napi::String::New(env, "dstSubresource"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageBlit, dstOffsets)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageBlit::dstOffsets)));
    
    sVkImageBlit.Set(Napi::String::New(env, "dstOffsets"), obj);
  }
  sVkImageBlit.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageBlit)));
  out.Set(Napi::String::New(env, "VkImageBlit"), sVkImageBlit);
  Napi::Object sVkBufferImageCopy = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferImageCopy, bufferOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy::bufferOffset)));
    
    sVkBufferImageCopy.Set(Napi::String::New(env, "bufferOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferImageCopy, bufferRowLength)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy::bufferRowLength)));
    
    sVkBufferImageCopy.Set(Napi::String::New(env, "bufferRowLength"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferImageCopy, bufferImageHeight)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy::bufferImageHeight)));
    
    sVkBufferImageCopy.Set(Napi::String::New(env, "bufferImageHeight"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferImageCopy, imageSubresource)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy::imageSubresource)));
    
    sVkBufferImageCopy.Set(Napi::String::New(env, "imageSubresource"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferImageCopy, imageOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy::imageOffset)));
    
    sVkBufferImageCopy.Set(Napi::String::New(env, "imageOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferImageCopy, imageExtent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy::imageExtent)));
    
    sVkBufferImageCopy.Set(Napi::String::New(env, "imageExtent"), obj);
  }
  sVkBufferImageCopy.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy)));
  out.Set(Napi::String::New(env, "VkBufferImageCopy"), sVkBufferImageCopy);
  Napi::Object sVkImageResolve = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageResolve, srcSubresource)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageResolve::srcSubresource)));
    
    sVkImageResolve.Set(Napi::String::New(env, "srcSubresource"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageResolve, srcOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageResolve::srcOffset)));
    
    sVkImageResolve.Set(Napi::String::New(env, "srcOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageResolve, dstSubresource)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageResolve::dstSubresource)));
    
    sVkImageResolve.Set(Napi::String::New(env, "dstSubresource"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageResolve, dstOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageResolve::dstOffset)));
    
    sVkImageResolve.Set(Napi::String::New(env, "dstOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageResolve, extent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageResolve::extent)));
    
    sVkImageResolve.Set(Napi::String::New(env, "extent"), obj);
  }
  sVkImageResolve.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageResolve)));
  out.Set(Napi::String::New(env, "VkImageResolve"), sVkImageResolve);
  Napi::Object sVkShaderModuleCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderModuleCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderModuleCreateInfo::sType)));
    
    sVkShaderModuleCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderModuleCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderModuleCreateInfo::pNext)));
    
    sVkShaderModuleCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderModuleCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderModuleCreateInfo::flags)));
    
    sVkShaderModuleCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderModuleCreateInfo, codeSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderModuleCreateInfo::codeSize)));
    
    sVkShaderModuleCreateInfo.Set(Napi::String::New(env, "codeSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderModuleCreateInfo, pCode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderModuleCreateInfo::pCode)));
    
    sVkShaderModuleCreateInfo.Set(Napi::String::New(env, "pCode"), obj);
  }
  sVkShaderModuleCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderModuleCreateInfo)));
  out.Set(Napi::String::New(env, "VkShaderModuleCreateInfo"), sVkShaderModuleCreateInfo);
  Napi::Object sVkDescriptorSetLayoutBinding = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBinding, binding)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBinding::binding)));
    
    sVkDescriptorSetLayoutBinding.Set(Napi::String::New(env, "binding"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBinding, descriptorType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBinding::descriptorType)));
    
    sVkDescriptorSetLayoutBinding.Set(Napi::String::New(env, "descriptorType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBinding, descriptorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBinding::descriptorCount)));
    
    sVkDescriptorSetLayoutBinding.Set(Napi::String::New(env, "descriptorCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBinding, stageFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBinding::stageFlags)));
    
    sVkDescriptorSetLayoutBinding.Set(Napi::String::New(env, "stageFlags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBinding, pImmutableSamplers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBinding::pImmutableSamplers)));
    
    sVkDescriptorSetLayoutBinding.Set(Napi::String::New(env, "pImmutableSamplers"), obj);
  }
  sVkDescriptorSetLayoutBinding.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBinding)));
  out.Set(Napi::String::New(env, "VkDescriptorSetLayoutBinding"), sVkDescriptorSetLayoutBinding);
  Napi::Object sVkDescriptorSetLayoutCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutCreateInfo::sType)));
    
    sVkDescriptorSetLayoutCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutCreateInfo::pNext)));
    
    sVkDescriptorSetLayoutCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutCreateInfo::flags)));
    
    sVkDescriptorSetLayoutCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutCreateInfo, bindingCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutCreateInfo::bindingCount)));
    
    sVkDescriptorSetLayoutCreateInfo.Set(Napi::String::New(env, "bindingCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutCreateInfo, pBindings)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutCreateInfo::pBindings)));
    
    sVkDescriptorSetLayoutCreateInfo.Set(Napi::String::New(env, "pBindings"), obj);
  }
  sVkDescriptorSetLayoutCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutCreateInfo)));
  out.Set(Napi::String::New(env, "VkDescriptorSetLayoutCreateInfo"), sVkDescriptorSetLayoutCreateInfo);
  Napi::Object sVkDescriptorPoolSize = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorPoolSize, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorPoolSize::type)));
    
    sVkDescriptorPoolSize.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorPoolSize, descriptorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorPoolSize::descriptorCount)));
    
    sVkDescriptorPoolSize.Set(Napi::String::New(env, "descriptorCount"), obj);
  }
  sVkDescriptorPoolSize.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorPoolSize)));
  out.Set(Napi::String::New(env, "VkDescriptorPoolSize"), sVkDescriptorPoolSize);
  Napi::Object sVkDescriptorPoolCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorPoolCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorPoolCreateInfo::sType)));
    
    sVkDescriptorPoolCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorPoolCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorPoolCreateInfo::pNext)));
    
    sVkDescriptorPoolCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorPoolCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorPoolCreateInfo::flags)));
    
    sVkDescriptorPoolCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorPoolCreateInfo, maxSets)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorPoolCreateInfo::maxSets)));
    
    sVkDescriptorPoolCreateInfo.Set(Napi::String::New(env, "maxSets"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorPoolCreateInfo, poolSizeCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorPoolCreateInfo::poolSizeCount)));
    
    sVkDescriptorPoolCreateInfo.Set(Napi::String::New(env, "poolSizeCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorPoolCreateInfo, pPoolSizes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorPoolCreateInfo::pPoolSizes)));
    
    sVkDescriptorPoolCreateInfo.Set(Napi::String::New(env, "pPoolSizes"), obj);
  }
  sVkDescriptorPoolCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorPoolCreateInfo)));
  out.Set(Napi::String::New(env, "VkDescriptorPoolCreateInfo"), sVkDescriptorPoolCreateInfo);
  Napi::Object sVkDescriptorSetAllocateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetAllocateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetAllocateInfo::sType)));
    
    sVkDescriptorSetAllocateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetAllocateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetAllocateInfo::pNext)));
    
    sVkDescriptorSetAllocateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetAllocateInfo, descriptorPool)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetAllocateInfo::descriptorPool)));
    
    sVkDescriptorSetAllocateInfo.Set(Napi::String::New(env, "descriptorPool"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetAllocateInfo, descriptorSetCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetAllocateInfo::descriptorSetCount)));
    
    sVkDescriptorSetAllocateInfo.Set(Napi::String::New(env, "descriptorSetCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetAllocateInfo, pSetLayouts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetAllocateInfo::pSetLayouts)));
    
    sVkDescriptorSetAllocateInfo.Set(Napi::String::New(env, "pSetLayouts"), obj);
  }
  sVkDescriptorSetAllocateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetAllocateInfo)));
  out.Set(Napi::String::New(env, "VkDescriptorSetAllocateInfo"), sVkDescriptorSetAllocateInfo);
  Napi::Object sVkSpecializationMapEntry = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSpecializationMapEntry, constantID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSpecializationMapEntry::constantID)));
    
    sVkSpecializationMapEntry.Set(Napi::String::New(env, "constantID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSpecializationMapEntry, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSpecializationMapEntry::offset)));
    
    sVkSpecializationMapEntry.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSpecializationMapEntry, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSpecializationMapEntry::size)));
    
    sVkSpecializationMapEntry.Set(Napi::String::New(env, "size"), obj);
  }
  sVkSpecializationMapEntry.Set(strByteLength, Napi::Number::New(env, sizeof(VkSpecializationMapEntry)));
  out.Set(Napi::String::New(env, "VkSpecializationMapEntry"), sVkSpecializationMapEntry);
  Napi::Object sVkSpecializationInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSpecializationInfo, mapEntryCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSpecializationInfo::mapEntryCount)));
    
    sVkSpecializationInfo.Set(Napi::String::New(env, "mapEntryCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSpecializationInfo, pMapEntries)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSpecializationInfo::pMapEntries)));
    
    sVkSpecializationInfo.Set(Napi::String::New(env, "pMapEntries"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSpecializationInfo, dataSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSpecializationInfo::dataSize)));
    
    sVkSpecializationInfo.Set(Napi::String::New(env, "dataSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSpecializationInfo, pData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSpecializationInfo::pData)));
    
    sVkSpecializationInfo.Set(Napi::String::New(env, "pData"), obj);
  }
  sVkSpecializationInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkSpecializationInfo)));
  out.Set(Napi::String::New(env, "VkSpecializationInfo"), sVkSpecializationInfo);
  Napi::Object sVkPipelineShaderStageCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineShaderStageCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineShaderStageCreateInfo::sType)));
    
    sVkPipelineShaderStageCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineShaderStageCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineShaderStageCreateInfo::pNext)));
    
    sVkPipelineShaderStageCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineShaderStageCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineShaderStageCreateInfo::flags)));
    
    sVkPipelineShaderStageCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineShaderStageCreateInfo, stage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineShaderStageCreateInfo::stage)));
    
    sVkPipelineShaderStageCreateInfo.Set(Napi::String::New(env, "stage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineShaderStageCreateInfo, module)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineShaderStageCreateInfo::module)));
    
    sVkPipelineShaderStageCreateInfo.Set(Napi::String::New(env, "module"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineShaderStageCreateInfo, pName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineShaderStageCreateInfo::pName)));
    
    sVkPipelineShaderStageCreateInfo.Set(Napi::String::New(env, "pName"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineShaderStageCreateInfo, pSpecializationInfo)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineShaderStageCreateInfo::pSpecializationInfo)));
    
    sVkPipelineShaderStageCreateInfo.Set(Napi::String::New(env, "pSpecializationInfo"), obj);
  }
  sVkPipelineShaderStageCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineShaderStageCreateInfo)));
  out.Set(Napi::String::New(env, "VkPipelineShaderStageCreateInfo"), sVkPipelineShaderStageCreateInfo);
  Napi::Object sVkComputePipelineCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkComputePipelineCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkComputePipelineCreateInfo::sType)));
    
    sVkComputePipelineCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkComputePipelineCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkComputePipelineCreateInfo::pNext)));
    
    sVkComputePipelineCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkComputePipelineCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkComputePipelineCreateInfo::flags)));
    
    sVkComputePipelineCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkComputePipelineCreateInfo, stage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkComputePipelineCreateInfo::stage)));
    
    sVkComputePipelineCreateInfo.Set(Napi::String::New(env, "stage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkComputePipelineCreateInfo, layout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkComputePipelineCreateInfo::layout)));
    
    sVkComputePipelineCreateInfo.Set(Napi::String::New(env, "layout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkComputePipelineCreateInfo, basePipelineHandle)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkComputePipelineCreateInfo::basePipelineHandle)));
    
    sVkComputePipelineCreateInfo.Set(Napi::String::New(env, "basePipelineHandle"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkComputePipelineCreateInfo, basePipelineIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkComputePipelineCreateInfo::basePipelineIndex)));
    
    sVkComputePipelineCreateInfo.Set(Napi::String::New(env, "basePipelineIndex"), obj);
  }
  sVkComputePipelineCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkComputePipelineCreateInfo)));
  out.Set(Napi::String::New(env, "VkComputePipelineCreateInfo"), sVkComputePipelineCreateInfo);
  Napi::Object sVkVertexInputBindingDescription = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkVertexInputBindingDescription, binding)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkVertexInputBindingDescription::binding)));
    
    sVkVertexInputBindingDescription.Set(Napi::String::New(env, "binding"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkVertexInputBindingDescription, stride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkVertexInputBindingDescription::stride)));
    
    sVkVertexInputBindingDescription.Set(Napi::String::New(env, "stride"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkVertexInputBindingDescription, inputRate)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkVertexInputBindingDescription::inputRate)));
    
    sVkVertexInputBindingDescription.Set(Napi::String::New(env, "inputRate"), obj);
  }
  sVkVertexInputBindingDescription.Set(strByteLength, Napi::Number::New(env, sizeof(VkVertexInputBindingDescription)));
  out.Set(Napi::String::New(env, "VkVertexInputBindingDescription"), sVkVertexInputBindingDescription);
  Napi::Object sVkVertexInputAttributeDescription = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkVertexInputAttributeDescription, location)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkVertexInputAttributeDescription::location)));
    
    sVkVertexInputAttributeDescription.Set(Napi::String::New(env, "location"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkVertexInputAttributeDescription, binding)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkVertexInputAttributeDescription::binding)));
    
    sVkVertexInputAttributeDescription.Set(Napi::String::New(env, "binding"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkVertexInputAttributeDescription, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkVertexInputAttributeDescription::format)));
    
    sVkVertexInputAttributeDescription.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkVertexInputAttributeDescription, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkVertexInputAttributeDescription::offset)));
    
    sVkVertexInputAttributeDescription.Set(Napi::String::New(env, "offset"), obj);
  }
  sVkVertexInputAttributeDescription.Set(strByteLength, Napi::Number::New(env, sizeof(VkVertexInputAttributeDescription)));
  out.Set(Napi::String::New(env, "VkVertexInputAttributeDescription"), sVkVertexInputAttributeDescription);
  Napi::Object sVkPipelineVertexInputStateCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineVertexInputStateCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineVertexInputStateCreateInfo::sType)));
    
    sVkPipelineVertexInputStateCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineVertexInputStateCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineVertexInputStateCreateInfo::pNext)));
    
    sVkPipelineVertexInputStateCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineVertexInputStateCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineVertexInputStateCreateInfo::flags)));
    
    sVkPipelineVertexInputStateCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineVertexInputStateCreateInfo, vertexBindingDescriptionCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineVertexInputStateCreateInfo::vertexBindingDescriptionCount)));
    
    sVkPipelineVertexInputStateCreateInfo.Set(Napi::String::New(env, "vertexBindingDescriptionCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineVertexInputStateCreateInfo, pVertexBindingDescriptions)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineVertexInputStateCreateInfo::pVertexBindingDescriptions)));
    
    sVkPipelineVertexInputStateCreateInfo.Set(Napi::String::New(env, "pVertexBindingDescriptions"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineVertexInputStateCreateInfo, vertexAttributeDescriptionCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineVertexInputStateCreateInfo::vertexAttributeDescriptionCount)));
    
    sVkPipelineVertexInputStateCreateInfo.Set(Napi::String::New(env, "vertexAttributeDescriptionCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineVertexInputStateCreateInfo, pVertexAttributeDescriptions)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineVertexInputStateCreateInfo::pVertexAttributeDescriptions)));
    
    sVkPipelineVertexInputStateCreateInfo.Set(Napi::String::New(env, "pVertexAttributeDescriptions"), obj);
  }
  sVkPipelineVertexInputStateCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineVertexInputStateCreateInfo)));
  out.Set(Napi::String::New(env, "VkPipelineVertexInputStateCreateInfo"), sVkPipelineVertexInputStateCreateInfo);
  Napi::Object sVkPipelineInputAssemblyStateCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineInputAssemblyStateCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineInputAssemblyStateCreateInfo::sType)));
    
    sVkPipelineInputAssemblyStateCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineInputAssemblyStateCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineInputAssemblyStateCreateInfo::pNext)));
    
    sVkPipelineInputAssemblyStateCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineInputAssemblyStateCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineInputAssemblyStateCreateInfo::flags)));
    
    sVkPipelineInputAssemblyStateCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineInputAssemblyStateCreateInfo, topology)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineInputAssemblyStateCreateInfo::topology)));
    
    sVkPipelineInputAssemblyStateCreateInfo.Set(Napi::String::New(env, "topology"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineInputAssemblyStateCreateInfo, primitiveRestartEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineInputAssemblyStateCreateInfo::primitiveRestartEnable)));
    
    sVkPipelineInputAssemblyStateCreateInfo.Set(Napi::String::New(env, "primitiveRestartEnable"), obj);
  }
  sVkPipelineInputAssemblyStateCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineInputAssemblyStateCreateInfo)));
  out.Set(Napi::String::New(env, "VkPipelineInputAssemblyStateCreateInfo"), sVkPipelineInputAssemblyStateCreateInfo);
  Napi::Object sVkPipelineTessellationStateCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineTessellationStateCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineTessellationStateCreateInfo::sType)));
    
    sVkPipelineTessellationStateCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineTessellationStateCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineTessellationStateCreateInfo::pNext)));
    
    sVkPipelineTessellationStateCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineTessellationStateCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineTessellationStateCreateInfo::flags)));
    
    sVkPipelineTessellationStateCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineTessellationStateCreateInfo, patchControlPoints)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineTessellationStateCreateInfo::patchControlPoints)));
    
    sVkPipelineTessellationStateCreateInfo.Set(Napi::String::New(env, "patchControlPoints"), obj);
  }
  sVkPipelineTessellationStateCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineTessellationStateCreateInfo)));
  out.Set(Napi::String::New(env, "VkPipelineTessellationStateCreateInfo"), sVkPipelineTessellationStateCreateInfo);
  Napi::Object sVkPipelineViewportStateCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportStateCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportStateCreateInfo::sType)));
    
    sVkPipelineViewportStateCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportStateCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportStateCreateInfo::pNext)));
    
    sVkPipelineViewportStateCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportStateCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportStateCreateInfo::flags)));
    
    sVkPipelineViewportStateCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportStateCreateInfo, viewportCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportStateCreateInfo::viewportCount)));
    
    sVkPipelineViewportStateCreateInfo.Set(Napi::String::New(env, "viewportCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportStateCreateInfo, pViewports)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportStateCreateInfo::pViewports)));
    
    sVkPipelineViewportStateCreateInfo.Set(Napi::String::New(env, "pViewports"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportStateCreateInfo, scissorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportStateCreateInfo::scissorCount)));
    
    sVkPipelineViewportStateCreateInfo.Set(Napi::String::New(env, "scissorCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportStateCreateInfo, pScissors)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportStateCreateInfo::pScissors)));
    
    sVkPipelineViewportStateCreateInfo.Set(Napi::String::New(env, "pScissors"), obj);
  }
  sVkPipelineViewportStateCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportStateCreateInfo)));
  out.Set(Napi::String::New(env, "VkPipelineViewportStateCreateInfo"), sVkPipelineViewportStateCreateInfo);
  Napi::Object sVkPipelineRasterizationStateCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateCreateInfo::sType)));
    
    sVkPipelineRasterizationStateCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateCreateInfo::pNext)));
    
    sVkPipelineRasterizationStateCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateCreateInfo::flags)));
    
    sVkPipelineRasterizationStateCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, depthClampEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateCreateInfo::depthClampEnable)));
    
    sVkPipelineRasterizationStateCreateInfo.Set(Napi::String::New(env, "depthClampEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, rasterizerDiscardEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateCreateInfo::rasterizerDiscardEnable)));
    
    sVkPipelineRasterizationStateCreateInfo.Set(Napi::String::New(env, "rasterizerDiscardEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, polygonMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateCreateInfo::polygonMode)));
    
    sVkPipelineRasterizationStateCreateInfo.Set(Napi::String::New(env, "polygonMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, cullMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateCreateInfo::cullMode)));
    
    sVkPipelineRasterizationStateCreateInfo.Set(Napi::String::New(env, "cullMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, frontFace)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateCreateInfo::frontFace)));
    
    sVkPipelineRasterizationStateCreateInfo.Set(Napi::String::New(env, "frontFace"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateCreateInfo::depthBiasEnable)));
    
    sVkPipelineRasterizationStateCreateInfo.Set(Napi::String::New(env, "depthBiasEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasConstantFactor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateCreateInfo::depthBiasConstantFactor)));
    
    sVkPipelineRasterizationStateCreateInfo.Set(Napi::String::New(env, "depthBiasConstantFactor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasClamp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateCreateInfo::depthBiasClamp)));
    
    sVkPipelineRasterizationStateCreateInfo.Set(Napi::String::New(env, "depthBiasClamp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasSlopeFactor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateCreateInfo::depthBiasSlopeFactor)));
    
    sVkPipelineRasterizationStateCreateInfo.Set(Napi::String::New(env, "depthBiasSlopeFactor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, lineWidth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateCreateInfo::lineWidth)));
    
    sVkPipelineRasterizationStateCreateInfo.Set(Napi::String::New(env, "lineWidth"), obj);
  }
  sVkPipelineRasterizationStateCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateCreateInfo)));
  out.Set(Napi::String::New(env, "VkPipelineRasterizationStateCreateInfo"), sVkPipelineRasterizationStateCreateInfo);
  Napi::Object sVkPipelineMultisampleStateCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineMultisampleStateCreateInfo::sType)));
    
    sVkPipelineMultisampleStateCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineMultisampleStateCreateInfo::pNext)));
    
    sVkPipelineMultisampleStateCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineMultisampleStateCreateInfo::flags)));
    
    sVkPipelineMultisampleStateCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, rasterizationSamples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineMultisampleStateCreateInfo::rasterizationSamples)));
    
    sVkPipelineMultisampleStateCreateInfo.Set(Napi::String::New(env, "rasterizationSamples"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, sampleShadingEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineMultisampleStateCreateInfo::sampleShadingEnable)));
    
    sVkPipelineMultisampleStateCreateInfo.Set(Napi::String::New(env, "sampleShadingEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, minSampleShading)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineMultisampleStateCreateInfo::minSampleShading)));
    
    sVkPipelineMultisampleStateCreateInfo.Set(Napi::String::New(env, "minSampleShading"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, pSampleMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineMultisampleStateCreateInfo::pSampleMask)));
    
    sVkPipelineMultisampleStateCreateInfo.Set(Napi::String::New(env, "pSampleMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, alphaToCoverageEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineMultisampleStateCreateInfo::alphaToCoverageEnable)));
    
    sVkPipelineMultisampleStateCreateInfo.Set(Napi::String::New(env, "alphaToCoverageEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, alphaToOneEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineMultisampleStateCreateInfo::alphaToOneEnable)));
    
    sVkPipelineMultisampleStateCreateInfo.Set(Napi::String::New(env, "alphaToOneEnable"), obj);
  }
  sVkPipelineMultisampleStateCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineMultisampleStateCreateInfo)));
  out.Set(Napi::String::New(env, "VkPipelineMultisampleStateCreateInfo"), sVkPipelineMultisampleStateCreateInfo);
  Napi::Object sVkPipelineColorBlendAttachmentState = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, blendEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendAttachmentState::blendEnable)));
    
    sVkPipelineColorBlendAttachmentState.Set(Napi::String::New(env, "blendEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, srcColorBlendFactor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendAttachmentState::srcColorBlendFactor)));
    
    sVkPipelineColorBlendAttachmentState.Set(Napi::String::New(env, "srcColorBlendFactor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, dstColorBlendFactor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendAttachmentState::dstColorBlendFactor)));
    
    sVkPipelineColorBlendAttachmentState.Set(Napi::String::New(env, "dstColorBlendFactor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, colorBlendOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendAttachmentState::colorBlendOp)));
    
    sVkPipelineColorBlendAttachmentState.Set(Napi::String::New(env, "colorBlendOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, srcAlphaBlendFactor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendAttachmentState::srcAlphaBlendFactor)));
    
    sVkPipelineColorBlendAttachmentState.Set(Napi::String::New(env, "srcAlphaBlendFactor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, dstAlphaBlendFactor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendAttachmentState::dstAlphaBlendFactor)));
    
    sVkPipelineColorBlendAttachmentState.Set(Napi::String::New(env, "dstAlphaBlendFactor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, alphaBlendOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendAttachmentState::alphaBlendOp)));
    
    sVkPipelineColorBlendAttachmentState.Set(Napi::String::New(env, "alphaBlendOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, colorWriteMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendAttachmentState::colorWriteMask)));
    
    sVkPipelineColorBlendAttachmentState.Set(Napi::String::New(env, "colorWriteMask"), obj);
  }
  sVkPipelineColorBlendAttachmentState.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendAttachmentState)));
  out.Set(Napi::String::New(env, "VkPipelineColorBlendAttachmentState"), sVkPipelineColorBlendAttachmentState);
  Napi::Object sVkPipelineColorBlendStateCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendStateCreateInfo::sType)));
    
    sVkPipelineColorBlendStateCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendStateCreateInfo::pNext)));
    
    sVkPipelineColorBlendStateCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendStateCreateInfo::flags)));
    
    sVkPipelineColorBlendStateCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, logicOpEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendStateCreateInfo::logicOpEnable)));
    
    sVkPipelineColorBlendStateCreateInfo.Set(Napi::String::New(env, "logicOpEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, logicOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendStateCreateInfo::logicOp)));
    
    sVkPipelineColorBlendStateCreateInfo.Set(Napi::String::New(env, "logicOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, attachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendStateCreateInfo::attachmentCount)));
    
    sVkPipelineColorBlendStateCreateInfo.Set(Napi::String::New(env, "attachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, pAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendStateCreateInfo::pAttachments)));
    
    sVkPipelineColorBlendStateCreateInfo.Set(Napi::String::New(env, "pAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, blendConstants)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendStateCreateInfo::blendConstants)));
    
    sVkPipelineColorBlendStateCreateInfo.Set(Napi::String::New(env, "blendConstants"), obj);
  }
  sVkPipelineColorBlendStateCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendStateCreateInfo)));
  out.Set(Napi::String::New(env, "VkPipelineColorBlendStateCreateInfo"), sVkPipelineColorBlendStateCreateInfo);
  Napi::Object sVkPipelineDynamicStateCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDynamicStateCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDynamicStateCreateInfo::sType)));
    
    sVkPipelineDynamicStateCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDynamicStateCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDynamicStateCreateInfo::pNext)));
    
    sVkPipelineDynamicStateCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDynamicStateCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDynamicStateCreateInfo::flags)));
    
    sVkPipelineDynamicStateCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDynamicStateCreateInfo, dynamicStateCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDynamicStateCreateInfo::dynamicStateCount)));
    
    sVkPipelineDynamicStateCreateInfo.Set(Napi::String::New(env, "dynamicStateCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDynamicStateCreateInfo, pDynamicStates)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDynamicStateCreateInfo::pDynamicStates)));
    
    sVkPipelineDynamicStateCreateInfo.Set(Napi::String::New(env, "pDynamicStates"), obj);
  }
  sVkPipelineDynamicStateCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDynamicStateCreateInfo)));
  out.Set(Napi::String::New(env, "VkPipelineDynamicStateCreateInfo"), sVkPipelineDynamicStateCreateInfo);
  Napi::Object sVkStencilOpState = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkStencilOpState, failOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkStencilOpState::failOp)));
    
    sVkStencilOpState.Set(Napi::String::New(env, "failOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkStencilOpState, passOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkStencilOpState::passOp)));
    
    sVkStencilOpState.Set(Napi::String::New(env, "passOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkStencilOpState, depthFailOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkStencilOpState::depthFailOp)));
    
    sVkStencilOpState.Set(Napi::String::New(env, "depthFailOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkStencilOpState, compareOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkStencilOpState::compareOp)));
    
    sVkStencilOpState.Set(Napi::String::New(env, "compareOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkStencilOpState, compareMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkStencilOpState::compareMask)));
    
    sVkStencilOpState.Set(Napi::String::New(env, "compareMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkStencilOpState, writeMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkStencilOpState::writeMask)));
    
    sVkStencilOpState.Set(Napi::String::New(env, "writeMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkStencilOpState, reference)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkStencilOpState::reference)));
    
    sVkStencilOpState.Set(Napi::String::New(env, "reference"), obj);
  }
  sVkStencilOpState.Set(strByteLength, Napi::Number::New(env, sizeof(VkStencilOpState)));
  out.Set(Napi::String::New(env, "VkStencilOpState"), sVkStencilOpState);
  Napi::Object sVkPipelineDepthStencilStateCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDepthStencilStateCreateInfo::sType)));
    
    sVkPipelineDepthStencilStateCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDepthStencilStateCreateInfo::pNext)));
    
    sVkPipelineDepthStencilStateCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDepthStencilStateCreateInfo::flags)));
    
    sVkPipelineDepthStencilStateCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, depthTestEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDepthStencilStateCreateInfo::depthTestEnable)));
    
    sVkPipelineDepthStencilStateCreateInfo.Set(Napi::String::New(env, "depthTestEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, depthWriteEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDepthStencilStateCreateInfo::depthWriteEnable)));
    
    sVkPipelineDepthStencilStateCreateInfo.Set(Napi::String::New(env, "depthWriteEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, depthCompareOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDepthStencilStateCreateInfo::depthCompareOp)));
    
    sVkPipelineDepthStencilStateCreateInfo.Set(Napi::String::New(env, "depthCompareOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, depthBoundsTestEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDepthStencilStateCreateInfo::depthBoundsTestEnable)));
    
    sVkPipelineDepthStencilStateCreateInfo.Set(Napi::String::New(env, "depthBoundsTestEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, stencilTestEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDepthStencilStateCreateInfo::stencilTestEnable)));
    
    sVkPipelineDepthStencilStateCreateInfo.Set(Napi::String::New(env, "stencilTestEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, front)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDepthStencilStateCreateInfo::front)));
    
    sVkPipelineDepthStencilStateCreateInfo.Set(Napi::String::New(env, "front"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, back)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDepthStencilStateCreateInfo::back)));
    
    sVkPipelineDepthStencilStateCreateInfo.Set(Napi::String::New(env, "back"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, minDepthBounds)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDepthStencilStateCreateInfo::minDepthBounds)));
    
    sVkPipelineDepthStencilStateCreateInfo.Set(Napi::String::New(env, "minDepthBounds"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, maxDepthBounds)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDepthStencilStateCreateInfo::maxDepthBounds)));
    
    sVkPipelineDepthStencilStateCreateInfo.Set(Napi::String::New(env, "maxDepthBounds"), obj);
  }
  sVkPipelineDepthStencilStateCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDepthStencilStateCreateInfo)));
  out.Set(Napi::String::New(env, "VkPipelineDepthStencilStateCreateInfo"), sVkPipelineDepthStencilStateCreateInfo);
  Napi::Object sVkGraphicsPipelineCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::sType)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::pNext)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::flags)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, stageCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::stageCount)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "stageCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pStages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::pStages)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "pStages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pVertexInputState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::pVertexInputState)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "pVertexInputState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pInputAssemblyState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::pInputAssemblyState)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "pInputAssemblyState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pTessellationState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::pTessellationState)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "pTessellationState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pViewportState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::pViewportState)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "pViewportState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pRasterizationState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::pRasterizationState)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "pRasterizationState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pMultisampleState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::pMultisampleState)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "pMultisampleState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pDepthStencilState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::pDepthStencilState)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "pDepthStencilState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pColorBlendState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::pColorBlendState)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "pColorBlendState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pDynamicState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::pDynamicState)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "pDynamicState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, layout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::layout)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "layout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, renderPass)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::renderPass)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "renderPass"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, subpass)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::subpass)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "subpass"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, basePipelineHandle)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::basePipelineHandle)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "basePipelineHandle"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, basePipelineIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo::basePipelineIndex)));
    
    sVkGraphicsPipelineCreateInfo.Set(Napi::String::New(env, "basePipelineIndex"), obj);
  }
  sVkGraphicsPipelineCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo)));
  out.Set(Napi::String::New(env, "VkGraphicsPipelineCreateInfo"), sVkGraphicsPipelineCreateInfo);
  Napi::Object sVkPipelineCacheCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCacheCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCacheCreateInfo::sType)));
    
    sVkPipelineCacheCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCacheCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCacheCreateInfo::pNext)));
    
    sVkPipelineCacheCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCacheCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCacheCreateInfo::flags)));
    
    sVkPipelineCacheCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCacheCreateInfo, initialDataSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCacheCreateInfo::initialDataSize)));
    
    sVkPipelineCacheCreateInfo.Set(Napi::String::New(env, "initialDataSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCacheCreateInfo, pInitialData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCacheCreateInfo::pInitialData)));
    
    sVkPipelineCacheCreateInfo.Set(Napi::String::New(env, "pInitialData"), obj);
  }
  sVkPipelineCacheCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCacheCreateInfo)));
  out.Set(Napi::String::New(env, "VkPipelineCacheCreateInfo"), sVkPipelineCacheCreateInfo);
  Napi::Object sVkPushConstantRange = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPushConstantRange, stageFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPushConstantRange::stageFlags)));
    
    sVkPushConstantRange.Set(Napi::String::New(env, "stageFlags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPushConstantRange, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPushConstantRange::offset)));
    
    sVkPushConstantRange.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPushConstantRange, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPushConstantRange::size)));
    
    sVkPushConstantRange.Set(Napi::String::New(env, "size"), obj);
  }
  sVkPushConstantRange.Set(strByteLength, Napi::Number::New(env, sizeof(VkPushConstantRange)));
  out.Set(Napi::String::New(env, "VkPushConstantRange"), sVkPushConstantRange);
  Napi::Object sVkPipelineLayoutCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineLayoutCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineLayoutCreateInfo::sType)));
    
    sVkPipelineLayoutCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineLayoutCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineLayoutCreateInfo::pNext)));
    
    sVkPipelineLayoutCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineLayoutCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineLayoutCreateInfo::flags)));
    
    sVkPipelineLayoutCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineLayoutCreateInfo, setLayoutCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineLayoutCreateInfo::setLayoutCount)));
    
    sVkPipelineLayoutCreateInfo.Set(Napi::String::New(env, "setLayoutCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineLayoutCreateInfo, pSetLayouts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineLayoutCreateInfo::pSetLayouts)));
    
    sVkPipelineLayoutCreateInfo.Set(Napi::String::New(env, "pSetLayouts"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineLayoutCreateInfo, pushConstantRangeCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineLayoutCreateInfo::pushConstantRangeCount)));
    
    sVkPipelineLayoutCreateInfo.Set(Napi::String::New(env, "pushConstantRangeCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineLayoutCreateInfo, pPushConstantRanges)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineLayoutCreateInfo::pPushConstantRanges)));
    
    sVkPipelineLayoutCreateInfo.Set(Napi::String::New(env, "pPushConstantRanges"), obj);
  }
  sVkPipelineLayoutCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineLayoutCreateInfo)));
  out.Set(Napi::String::New(env, "VkPipelineLayoutCreateInfo"), sVkPipelineLayoutCreateInfo);
  Napi::Object sVkSamplerCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::sType)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::pNext)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::flags)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, magFilter)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::magFilter)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "magFilter"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, minFilter)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::minFilter)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "minFilter"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, mipmapMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::mipmapMode)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "mipmapMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, addressModeU)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::addressModeU)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "addressModeU"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, addressModeV)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::addressModeV)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "addressModeV"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, addressModeW)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::addressModeW)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "addressModeW"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, mipLodBias)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::mipLodBias)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "mipLodBias"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, anisotropyEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::anisotropyEnable)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "anisotropyEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, maxAnisotropy)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::maxAnisotropy)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "maxAnisotropy"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, compareEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::compareEnable)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "compareEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, compareOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::compareOp)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "compareOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, minLod)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::minLod)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "minLod"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, maxLod)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::maxLod)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "maxLod"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, borderColor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::borderColor)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "borderColor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCreateInfo, unnormalizedCoordinates)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo::unnormalizedCoordinates)));
    
    sVkSamplerCreateInfo.Set(Napi::String::New(env, "unnormalizedCoordinates"), obj);
  }
  sVkSamplerCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCreateInfo)));
  out.Set(Napi::String::New(env, "VkSamplerCreateInfo"), sVkSamplerCreateInfo);
  Napi::Object sVkCommandPoolCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandPoolCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandPoolCreateInfo::sType)));
    
    sVkCommandPoolCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandPoolCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandPoolCreateInfo::pNext)));
    
    sVkCommandPoolCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandPoolCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandPoolCreateInfo::flags)));
    
    sVkCommandPoolCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandPoolCreateInfo, queueFamilyIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandPoolCreateInfo::queueFamilyIndex)));
    
    sVkCommandPoolCreateInfo.Set(Napi::String::New(env, "queueFamilyIndex"), obj);
  }
  sVkCommandPoolCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandPoolCreateInfo)));
  out.Set(Napi::String::New(env, "VkCommandPoolCreateInfo"), sVkCommandPoolCreateInfo);
  Napi::Object sVkCommandBufferAllocateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferAllocateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferAllocateInfo::sType)));
    
    sVkCommandBufferAllocateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferAllocateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferAllocateInfo::pNext)));
    
    sVkCommandBufferAllocateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferAllocateInfo, commandPool)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferAllocateInfo::commandPool)));
    
    sVkCommandBufferAllocateInfo.Set(Napi::String::New(env, "commandPool"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferAllocateInfo, level)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferAllocateInfo::level)));
    
    sVkCommandBufferAllocateInfo.Set(Napi::String::New(env, "level"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferAllocateInfo, commandBufferCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferAllocateInfo::commandBufferCount)));
    
    sVkCommandBufferAllocateInfo.Set(Napi::String::New(env, "commandBufferCount"), obj);
  }
  sVkCommandBufferAllocateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferAllocateInfo)));
  out.Set(Napi::String::New(env, "VkCommandBufferAllocateInfo"), sVkCommandBufferAllocateInfo);
  Napi::Object sVkCommandBufferInheritanceInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceInfo::sType)));
    
    sVkCommandBufferInheritanceInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceInfo::pNext)));
    
    sVkCommandBufferInheritanceInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, renderPass)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceInfo::renderPass)));
    
    sVkCommandBufferInheritanceInfo.Set(Napi::String::New(env, "renderPass"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, subpass)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceInfo::subpass)));
    
    sVkCommandBufferInheritanceInfo.Set(Napi::String::New(env, "subpass"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, framebuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceInfo::framebuffer)));
    
    sVkCommandBufferInheritanceInfo.Set(Napi::String::New(env, "framebuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, occlusionQueryEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceInfo::occlusionQueryEnable)));
    
    sVkCommandBufferInheritanceInfo.Set(Napi::String::New(env, "occlusionQueryEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, queryFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceInfo::queryFlags)));
    
    sVkCommandBufferInheritanceInfo.Set(Napi::String::New(env, "queryFlags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, pipelineStatistics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceInfo::pipelineStatistics)));
    
    sVkCommandBufferInheritanceInfo.Set(Napi::String::New(env, "pipelineStatistics"), obj);
  }
  sVkCommandBufferInheritanceInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceInfo)));
  out.Set(Napi::String::New(env, "VkCommandBufferInheritanceInfo"), sVkCommandBufferInheritanceInfo);
  Napi::Object sVkCommandBufferBeginInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferBeginInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferBeginInfo::sType)));
    
    sVkCommandBufferBeginInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferBeginInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferBeginInfo::pNext)));
    
    sVkCommandBufferBeginInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferBeginInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferBeginInfo::flags)));
    
    sVkCommandBufferBeginInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferBeginInfo, pInheritanceInfo)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferBeginInfo::pInheritanceInfo)));
    
    sVkCommandBufferBeginInfo.Set(Napi::String::New(env, "pInheritanceInfo"), obj);
  }
  sVkCommandBufferBeginInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferBeginInfo)));
  out.Set(Napi::String::New(env, "VkCommandBufferBeginInfo"), sVkCommandBufferBeginInfo);
  Napi::Object sVkRenderPassBeginInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassBeginInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassBeginInfo::sType)));
    
    sVkRenderPassBeginInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassBeginInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassBeginInfo::pNext)));
    
    sVkRenderPassBeginInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassBeginInfo, renderPass)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassBeginInfo::renderPass)));
    
    sVkRenderPassBeginInfo.Set(Napi::String::New(env, "renderPass"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassBeginInfo, framebuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassBeginInfo::framebuffer)));
    
    sVkRenderPassBeginInfo.Set(Napi::String::New(env, "framebuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassBeginInfo, renderArea)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassBeginInfo::renderArea)));
    
    sVkRenderPassBeginInfo.Set(Napi::String::New(env, "renderArea"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassBeginInfo, clearValueCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassBeginInfo::clearValueCount)));
    
    sVkRenderPassBeginInfo.Set(Napi::String::New(env, "clearValueCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassBeginInfo, pClearValues)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassBeginInfo::pClearValues)));
    
    sVkRenderPassBeginInfo.Set(Napi::String::New(env, "pClearValues"), obj);
  }
  sVkRenderPassBeginInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassBeginInfo)));
  out.Set(Napi::String::New(env, "VkRenderPassBeginInfo"), sVkRenderPassBeginInfo);
  Napi::Object sVkClearDepthStencilValue = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkClearDepthStencilValue, depth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearDepthStencilValue::depth)));
    
    sVkClearDepthStencilValue.Set(Napi::String::New(env, "depth"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkClearDepthStencilValue, stencil)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearDepthStencilValue::stencil)));
    
    sVkClearDepthStencilValue.Set(Napi::String::New(env, "stencil"), obj);
  }
  sVkClearDepthStencilValue.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearDepthStencilValue)));
  out.Set(Napi::String::New(env, "VkClearDepthStencilValue"), sVkClearDepthStencilValue);
  Napi::Object sVkClearAttachment = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkClearAttachment, aspectMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearAttachment::aspectMask)));
    
    sVkClearAttachment.Set(Napi::String::New(env, "aspectMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkClearAttachment, colorAttachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearAttachment::colorAttachment)));
    
    sVkClearAttachment.Set(Napi::String::New(env, "colorAttachment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkClearAttachment, clearValue)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearAttachment::clearValue)));
    
    sVkClearAttachment.Set(Napi::String::New(env, "clearValue"), obj);
  }
  sVkClearAttachment.Set(strByteLength, Napi::Number::New(env, sizeof(VkClearAttachment)));
  out.Set(Napi::String::New(env, "VkClearAttachment"), sVkClearAttachment);
  Napi::Object sVkAttachmentDescription = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription::flags)));
    
    sVkAttachmentDescription.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription::format)));
    
    sVkAttachmentDescription.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription, samples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription::samples)));
    
    sVkAttachmentDescription.Set(Napi::String::New(env, "samples"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription, loadOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription::loadOp)));
    
    sVkAttachmentDescription.Set(Napi::String::New(env, "loadOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription, storeOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription::storeOp)));
    
    sVkAttachmentDescription.Set(Napi::String::New(env, "storeOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription, stencilLoadOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription::stencilLoadOp)));
    
    sVkAttachmentDescription.Set(Napi::String::New(env, "stencilLoadOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription, stencilStoreOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription::stencilStoreOp)));
    
    sVkAttachmentDescription.Set(Napi::String::New(env, "stencilStoreOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription, initialLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription::initialLayout)));
    
    sVkAttachmentDescription.Set(Napi::String::New(env, "initialLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription, finalLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription::finalLayout)));
    
    sVkAttachmentDescription.Set(Napi::String::New(env, "finalLayout"), obj);
  }
  sVkAttachmentDescription.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription)));
  out.Set(Napi::String::New(env, "VkAttachmentDescription"), sVkAttachmentDescription);
  Napi::Object sVkAttachmentReference = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReference, attachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReference::attachment)));
    
    sVkAttachmentReference.Set(Napi::String::New(env, "attachment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReference, layout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReference::layout)));
    
    sVkAttachmentReference.Set(Napi::String::New(env, "layout"), obj);
  }
  sVkAttachmentReference.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReference)));
  out.Set(Napi::String::New(env, "VkAttachmentReference"), sVkAttachmentReference);
  Napi::Object sVkSubpassDescription = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription::flags)));
    
    sVkSubpassDescription.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription, pipelineBindPoint)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription::pipelineBindPoint)));
    
    sVkSubpassDescription.Set(Napi::String::New(env, "pipelineBindPoint"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription, inputAttachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription::inputAttachmentCount)));
    
    sVkSubpassDescription.Set(Napi::String::New(env, "inputAttachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription, pInputAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription::pInputAttachments)));
    
    sVkSubpassDescription.Set(Napi::String::New(env, "pInputAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription, colorAttachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription::colorAttachmentCount)));
    
    sVkSubpassDescription.Set(Napi::String::New(env, "colorAttachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription, pColorAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription::pColorAttachments)));
    
    sVkSubpassDescription.Set(Napi::String::New(env, "pColorAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription, pResolveAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription::pResolveAttachments)));
    
    sVkSubpassDescription.Set(Napi::String::New(env, "pResolveAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription, pDepthStencilAttachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription::pDepthStencilAttachment)));
    
    sVkSubpassDescription.Set(Napi::String::New(env, "pDepthStencilAttachment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription, preserveAttachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription::preserveAttachmentCount)));
    
    sVkSubpassDescription.Set(Napi::String::New(env, "preserveAttachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription, pPreserveAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription::pPreserveAttachments)));
    
    sVkSubpassDescription.Set(Napi::String::New(env, "pPreserveAttachments"), obj);
  }
  sVkSubpassDescription.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription)));
  out.Set(Napi::String::New(env, "VkSubpassDescription"), sVkSubpassDescription);
  Napi::Object sVkSubpassDependency = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency, srcSubpass)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency::srcSubpass)));
    
    sVkSubpassDependency.Set(Napi::String::New(env, "srcSubpass"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency, dstSubpass)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency::dstSubpass)));
    
    sVkSubpassDependency.Set(Napi::String::New(env, "dstSubpass"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency, srcStageMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency::srcStageMask)));
    
    sVkSubpassDependency.Set(Napi::String::New(env, "srcStageMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency, dstStageMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency::dstStageMask)));
    
    sVkSubpassDependency.Set(Napi::String::New(env, "dstStageMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency, srcAccessMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency::srcAccessMask)));
    
    sVkSubpassDependency.Set(Napi::String::New(env, "srcAccessMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency, dstAccessMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency::dstAccessMask)));
    
    sVkSubpassDependency.Set(Napi::String::New(env, "dstAccessMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency, dependencyFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency::dependencyFlags)));
    
    sVkSubpassDependency.Set(Napi::String::New(env, "dependencyFlags"), obj);
  }
  sVkSubpassDependency.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency)));
  out.Set(Napi::String::New(env, "VkSubpassDependency"), sVkSubpassDependency);
  Napi::Object sVkRenderPassCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo::sType)));
    
    sVkRenderPassCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo::pNext)));
    
    sVkRenderPassCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo::flags)));
    
    sVkRenderPassCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, attachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo::attachmentCount)));
    
    sVkRenderPassCreateInfo.Set(Napi::String::New(env, "attachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, pAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo::pAttachments)));
    
    sVkRenderPassCreateInfo.Set(Napi::String::New(env, "pAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, subpassCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo::subpassCount)));
    
    sVkRenderPassCreateInfo.Set(Napi::String::New(env, "subpassCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, pSubpasses)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo::pSubpasses)));
    
    sVkRenderPassCreateInfo.Set(Napi::String::New(env, "pSubpasses"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, dependencyCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo::dependencyCount)));
    
    sVkRenderPassCreateInfo.Set(Napi::String::New(env, "dependencyCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, pDependencies)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo::pDependencies)));
    
    sVkRenderPassCreateInfo.Set(Napi::String::New(env, "pDependencies"), obj);
  }
  sVkRenderPassCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo)));
  out.Set(Napi::String::New(env, "VkRenderPassCreateInfo"), sVkRenderPassCreateInfo);
  Napi::Object sVkEventCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkEventCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkEventCreateInfo::sType)));
    
    sVkEventCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkEventCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkEventCreateInfo::pNext)));
    
    sVkEventCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkEventCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkEventCreateInfo::flags)));
    
    sVkEventCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  sVkEventCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkEventCreateInfo)));
  out.Set(Napi::String::New(env, "VkEventCreateInfo"), sVkEventCreateInfo);
  Napi::Object sVkFenceCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFenceCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFenceCreateInfo::sType)));
    
    sVkFenceCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFenceCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFenceCreateInfo::pNext)));
    
    sVkFenceCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFenceCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFenceCreateInfo::flags)));
    
    sVkFenceCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  sVkFenceCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkFenceCreateInfo)));
  out.Set(Napi::String::New(env, "VkFenceCreateInfo"), sVkFenceCreateInfo);
  Napi::Object sVkPhysicalDeviceFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, robustBufferAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::robustBufferAccess)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "robustBufferAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, fullDrawIndexUint32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::fullDrawIndexUint32)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "fullDrawIndexUint32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, imageCubeArray)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::imageCubeArray)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "imageCubeArray"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, independentBlend)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::independentBlend)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "independentBlend"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, geometryShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::geometryShader)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "geometryShader"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, tessellationShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::tessellationShader)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "tessellationShader"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sampleRateShading)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::sampleRateShading)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "sampleRateShading"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, dualSrcBlend)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::dualSrcBlend)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "dualSrcBlend"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, logicOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::logicOp)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "logicOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, multiDrawIndirect)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::multiDrawIndirect)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "multiDrawIndirect"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, drawIndirectFirstInstance)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::drawIndirectFirstInstance)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "drawIndirectFirstInstance"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, depthClamp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::depthClamp)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "depthClamp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, depthBiasClamp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::depthBiasClamp)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "depthBiasClamp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, fillModeNonSolid)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::fillModeNonSolid)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "fillModeNonSolid"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, depthBounds)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::depthBounds)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "depthBounds"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, wideLines)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::wideLines)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "wideLines"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, largePoints)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::largePoints)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "largePoints"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, alphaToOne)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::alphaToOne)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "alphaToOne"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, multiViewport)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::multiViewport)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "multiViewport"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, samplerAnisotropy)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::samplerAnisotropy)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "samplerAnisotropy"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, textureCompressionETC2)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::textureCompressionETC2)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "textureCompressionETC2"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, textureCompressionASTC_LDR)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::textureCompressionASTC_LDR)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "textureCompressionASTC_LDR"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, textureCompressionBC)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::textureCompressionBC)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "textureCompressionBC"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, occlusionQueryPrecise)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::occlusionQueryPrecise)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "occlusionQueryPrecise"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, pipelineStatisticsQuery)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::pipelineStatisticsQuery)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "pipelineStatisticsQuery"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, vertexPipelineStoresAndAtomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::vertexPipelineStoresAndAtomics)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "vertexPipelineStoresAndAtomics"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, fragmentStoresAndAtomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::fragmentStoresAndAtomics)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "fragmentStoresAndAtomics"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderTessellationAndGeometryPointSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderTessellationAndGeometryPointSize)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderTessellationAndGeometryPointSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderImageGatherExtended)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderImageGatherExtended)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderImageGatherExtended"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderStorageImageExtendedFormats)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderStorageImageExtendedFormats)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderStorageImageExtendedFormats"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderStorageImageMultisample)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderStorageImageMultisample)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderStorageImageMultisample"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderStorageImageReadWithoutFormat)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderStorageImageReadWithoutFormat)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderStorageImageReadWithoutFormat"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderStorageImageWriteWithoutFormat)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderStorageImageWriteWithoutFormat)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderStorageImageWriteWithoutFormat"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderUniformBufferArrayDynamicIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderUniformBufferArrayDynamicIndexing)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderUniformBufferArrayDynamicIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderSampledImageArrayDynamicIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderSampledImageArrayDynamicIndexing)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderSampledImageArrayDynamicIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderStorageBufferArrayDynamicIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderStorageBufferArrayDynamicIndexing)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderStorageBufferArrayDynamicIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderStorageImageArrayDynamicIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderStorageImageArrayDynamicIndexing)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderStorageImageArrayDynamicIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderClipDistance)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderClipDistance)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderClipDistance"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderCullDistance)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderCullDistance)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderCullDistance"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderFloat64)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderFloat64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderInt64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderInt64)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderInt64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderInt16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderInt16)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderInt16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderResourceResidency)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderResourceResidency)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderResourceResidency"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderResourceMinLod)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::shaderResourceMinLod)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "shaderResourceMinLod"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseBinding)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::sparseBinding)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "sparseBinding"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidencyBuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::sparseResidencyBuffer)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "sparseResidencyBuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidencyImage2D)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::sparseResidencyImage2D)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "sparseResidencyImage2D"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidencyImage3D)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::sparseResidencyImage3D)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "sparseResidencyImage3D"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidency2Samples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::sparseResidency2Samples)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "sparseResidency2Samples"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidency4Samples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::sparseResidency4Samples)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "sparseResidency4Samples"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidency8Samples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::sparseResidency8Samples)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "sparseResidency8Samples"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidency16Samples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::sparseResidency16Samples)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "sparseResidency16Samples"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidencyAliased)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::sparseResidencyAliased)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "sparseResidencyAliased"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, variableMultisampleRate)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::variableMultisampleRate)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "variableMultisampleRate"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, inheritedQueries)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures::inheritedQueries)));
    
    sVkPhysicalDeviceFeatures.Set(Napi::String::New(env, "inheritedQueries"), obj);
  }
  sVkPhysicalDeviceFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFeatures"), sVkPhysicalDeviceFeatures);
  Napi::Object sVkPhysicalDeviceSparseProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseProperties, residencyStandard2DBlockShape)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseProperties::residencyStandard2DBlockShape)));
    
    sVkPhysicalDeviceSparseProperties.Set(Napi::String::New(env, "residencyStandard2DBlockShape"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseProperties, residencyStandard2DMultisampleBlockShape)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseProperties::residencyStandard2DMultisampleBlockShape)));
    
    sVkPhysicalDeviceSparseProperties.Set(Napi::String::New(env, "residencyStandard2DMultisampleBlockShape"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseProperties, residencyStandard3DBlockShape)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseProperties::residencyStandard3DBlockShape)));
    
    sVkPhysicalDeviceSparseProperties.Set(Napi::String::New(env, "residencyStandard3DBlockShape"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseProperties, residencyAlignedMipSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseProperties::residencyAlignedMipSize)));
    
    sVkPhysicalDeviceSparseProperties.Set(Napi::String::New(env, "residencyAlignedMipSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseProperties, residencyNonResidentStrict)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseProperties::residencyNonResidentStrict)));
    
    sVkPhysicalDeviceSparseProperties.Set(Napi::String::New(env, "residencyNonResidentStrict"), obj);
  }
  sVkPhysicalDeviceSparseProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseProperties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceSparseProperties"), sVkPhysicalDeviceSparseProperties);
  Napi::Object sVkPhysicalDeviceLimits = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxImageDimension1D)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxImageDimension1D)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxImageDimension1D"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxImageDimension2D)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxImageDimension2D)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxImageDimension2D"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxImageDimension3D)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxImageDimension3D)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxImageDimension3D"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxImageDimensionCube)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxImageDimensionCube)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxImageDimensionCube"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxImageArrayLayers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxImageArrayLayers)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxImageArrayLayers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTexelBufferElements)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxTexelBufferElements)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxTexelBufferElements"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxUniformBufferRange)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxUniformBufferRange)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxUniformBufferRange"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxStorageBufferRange)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxStorageBufferRange)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxStorageBufferRange"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPushConstantsSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxPushConstantsSize)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxPushConstantsSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxMemoryAllocationCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxMemoryAllocationCount)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxMemoryAllocationCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxSamplerAllocationCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxSamplerAllocationCount)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxSamplerAllocationCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, bufferImageGranularity)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::bufferImageGranularity)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "bufferImageGranularity"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, sparseAddressSpaceSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::sparseAddressSpaceSize)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "sparseAddressSpaceSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxBoundDescriptorSets)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxBoundDescriptorSets)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxBoundDescriptorSets"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorSamplers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxPerStageDescriptorSamplers)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxPerStageDescriptorSamplers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorUniformBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxPerStageDescriptorUniformBuffers)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxPerStageDescriptorUniformBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorStorageBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxPerStageDescriptorStorageBuffers)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxPerStageDescriptorStorageBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorSampledImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxPerStageDescriptorSampledImages)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxPerStageDescriptorSampledImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorStorageImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxPerStageDescriptorStorageImages)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxPerStageDescriptorStorageImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorInputAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxPerStageDescriptorInputAttachments)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxPerStageDescriptorInputAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPerStageResources)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxPerStageResources)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxPerStageResources"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetSamplers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxDescriptorSetSamplers)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxDescriptorSetSamplers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetUniformBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffers)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxDescriptorSetUniformBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetUniformBuffersDynamic)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffersDynamic)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxDescriptorSetUniformBuffersDynamic"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetStorageBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffers)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxDescriptorSetStorageBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetStorageBuffersDynamic)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffersDynamic)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxDescriptorSetStorageBuffersDynamic"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetSampledImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxDescriptorSetSampledImages)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxDescriptorSetSampledImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetStorageImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxDescriptorSetStorageImages)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxDescriptorSetStorageImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetInputAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxDescriptorSetInputAttachments)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxDescriptorSetInputAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxVertexInputAttributes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxVertexInputAttributes)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxVertexInputAttributes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxVertexInputBindings)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxVertexInputBindings)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxVertexInputBindings"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxVertexInputAttributeOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxVertexInputAttributeOffset)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxVertexInputAttributeOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxVertexInputBindingStride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxVertexInputBindingStride)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxVertexInputBindingStride"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxVertexOutputComponents)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxVertexOutputComponents)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxVertexOutputComponents"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationGenerationLevel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxTessellationGenerationLevel)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxTessellationGenerationLevel"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationPatchSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxTessellationPatchSize)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxTessellationPatchSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationControlPerVertexInputComponents)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxTessellationControlPerVertexInputComponents)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxTessellationControlPerVertexInputComponents"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationControlPerVertexOutputComponents)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxTessellationControlPerVertexOutputComponents)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxTessellationControlPerVertexOutputComponents"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationControlPerPatchOutputComponents)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxTessellationControlPerPatchOutputComponents)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxTessellationControlPerPatchOutputComponents"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationControlTotalOutputComponents)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxTessellationControlTotalOutputComponents)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxTessellationControlTotalOutputComponents"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationEvaluationInputComponents)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxTessellationEvaluationInputComponents)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxTessellationEvaluationInputComponents"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationEvaluationOutputComponents)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxTessellationEvaluationOutputComponents)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxTessellationEvaluationOutputComponents"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxGeometryShaderInvocations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxGeometryShaderInvocations)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxGeometryShaderInvocations"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxGeometryInputComponents)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxGeometryInputComponents)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxGeometryInputComponents"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxGeometryOutputComponents)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxGeometryOutputComponents)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxGeometryOutputComponents"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxGeometryOutputVertices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxGeometryOutputVertices)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxGeometryOutputVertices"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxGeometryTotalOutputComponents)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxGeometryTotalOutputComponents)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxGeometryTotalOutputComponents"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxFragmentInputComponents)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxFragmentInputComponents)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxFragmentInputComponents"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxFragmentOutputAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxFragmentOutputAttachments)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxFragmentOutputAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxFragmentDualSrcAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxFragmentDualSrcAttachments)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxFragmentDualSrcAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxFragmentCombinedOutputResources)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxFragmentCombinedOutputResources)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxFragmentCombinedOutputResources"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxComputeSharedMemorySize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxComputeSharedMemorySize)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxComputeSharedMemorySize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxComputeWorkGroupCount)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxComputeWorkGroupCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupInvocations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxComputeWorkGroupInvocations)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxComputeWorkGroupInvocations"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxComputeWorkGroupSize)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxComputeWorkGroupSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, subPixelPrecisionBits)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::subPixelPrecisionBits)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "subPixelPrecisionBits"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, subTexelPrecisionBits)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::subTexelPrecisionBits)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "subTexelPrecisionBits"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, mipmapPrecisionBits)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::mipmapPrecisionBits)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "mipmapPrecisionBits"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDrawIndexedIndexValue)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxDrawIndexedIndexValue)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxDrawIndexedIndexValue"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDrawIndirectCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxDrawIndirectCount)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxDrawIndirectCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxSamplerLodBias)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxSamplerLodBias)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxSamplerLodBias"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxSamplerAnisotropy)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxSamplerAnisotropy)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxSamplerAnisotropy"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxViewports)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxViewports)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxViewports"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxViewportDimensions)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxViewportDimensions)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxViewportDimensions"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, viewportBoundsRange)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::viewportBoundsRange)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "viewportBoundsRange"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, viewportSubPixelBits)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::viewportSubPixelBits)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "viewportSubPixelBits"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, minMemoryMapAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::minMemoryMapAlignment)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "minMemoryMapAlignment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, minTexelBufferOffsetAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::minTexelBufferOffsetAlignment)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "minTexelBufferOffsetAlignment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, minUniformBufferOffsetAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::minUniformBufferOffsetAlignment)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "minUniformBufferOffsetAlignment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, minStorageBufferOffsetAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::minStorageBufferOffsetAlignment)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "minStorageBufferOffsetAlignment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, minTexelOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::minTexelOffset)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "minTexelOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTexelOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxTexelOffset)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxTexelOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, minTexelGatherOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::minTexelGatherOffset)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "minTexelGatherOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTexelGatherOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxTexelGatherOffset)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxTexelGatherOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, minInterpolationOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::minInterpolationOffset)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "minInterpolationOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxInterpolationOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxInterpolationOffset)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxInterpolationOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, subPixelInterpolationOffsetBits)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::subPixelInterpolationOffsetBits)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "subPixelInterpolationOffsetBits"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxFramebufferWidth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxFramebufferWidth)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxFramebufferWidth"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxFramebufferHeight)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxFramebufferHeight)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxFramebufferHeight"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxFramebufferLayers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxFramebufferLayers)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxFramebufferLayers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, framebufferColorSampleCounts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::framebufferColorSampleCounts)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "framebufferColorSampleCounts"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, framebufferDepthSampleCounts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::framebufferDepthSampleCounts)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "framebufferDepthSampleCounts"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, framebufferStencilSampleCounts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::framebufferStencilSampleCounts)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "framebufferStencilSampleCounts"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, framebufferNoAttachmentsSampleCounts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::framebufferNoAttachmentsSampleCounts)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "framebufferNoAttachmentsSampleCounts"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxColorAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxColorAttachments)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxColorAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, sampledImageColorSampleCounts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::sampledImageColorSampleCounts)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "sampledImageColorSampleCounts"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, sampledImageIntegerSampleCounts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::sampledImageIntegerSampleCounts)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "sampledImageIntegerSampleCounts"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, sampledImageDepthSampleCounts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::sampledImageDepthSampleCounts)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "sampledImageDepthSampleCounts"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, sampledImageStencilSampleCounts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::sampledImageStencilSampleCounts)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "sampledImageStencilSampleCounts"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, storageImageSampleCounts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::storageImageSampleCounts)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "storageImageSampleCounts"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxSampleMaskWords)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxSampleMaskWords)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxSampleMaskWords"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, timestampComputeAndGraphics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::timestampComputeAndGraphics)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "timestampComputeAndGraphics"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, timestampPeriod)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::timestampPeriod)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "timestampPeriod"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxClipDistances)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxClipDistances)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxClipDistances"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxCullDistances)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxCullDistances)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxCullDistances"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxCombinedClipAndCullDistances)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::maxCombinedClipAndCullDistances)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "maxCombinedClipAndCullDistances"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, discreteQueuePriorities)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::discreteQueuePriorities)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "discreteQueuePriorities"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, pointSizeRange)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::pointSizeRange)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "pointSizeRange"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, lineWidthRange)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::lineWidthRange)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "lineWidthRange"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, pointSizeGranularity)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::pointSizeGranularity)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "pointSizeGranularity"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, lineWidthGranularity)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::lineWidthGranularity)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "lineWidthGranularity"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, strictLines)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::strictLines)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "strictLines"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, standardSampleLocations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::standardSampleLocations)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "standardSampleLocations"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, optimalBufferCopyOffsetAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::optimalBufferCopyOffsetAlignment)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "optimalBufferCopyOffsetAlignment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, optimalBufferCopyRowPitchAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::optimalBufferCopyRowPitchAlignment)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "optimalBufferCopyRowPitchAlignment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, nonCoherentAtomSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits::nonCoherentAtomSize)));
    
    sVkPhysicalDeviceLimits.Set(Napi::String::New(env, "nonCoherentAtomSize"), obj);
  }
  sVkPhysicalDeviceLimits.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceLimits"), sVkPhysicalDeviceLimits);
  Napi::Object sVkSemaphoreCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreCreateInfo::sType)));
    
    sVkSemaphoreCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreCreateInfo::pNext)));
    
    sVkSemaphoreCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreCreateInfo::flags)));
    
    sVkSemaphoreCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  sVkSemaphoreCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreCreateInfo)));
  out.Set(Napi::String::New(env, "VkSemaphoreCreateInfo"), sVkSemaphoreCreateInfo);
  Napi::Object sVkQueryPoolCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolCreateInfo::sType)));
    
    sVkQueryPoolCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolCreateInfo::pNext)));
    
    sVkQueryPoolCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolCreateInfo::flags)));
    
    sVkQueryPoolCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolCreateInfo, queryType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolCreateInfo::queryType)));
    
    sVkQueryPoolCreateInfo.Set(Napi::String::New(env, "queryType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolCreateInfo, queryCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolCreateInfo::queryCount)));
    
    sVkQueryPoolCreateInfo.Set(Napi::String::New(env, "queryCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolCreateInfo, pipelineStatistics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolCreateInfo::pipelineStatistics)));
    
    sVkQueryPoolCreateInfo.Set(Napi::String::New(env, "pipelineStatistics"), obj);
  }
  sVkQueryPoolCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolCreateInfo)));
  out.Set(Napi::String::New(env, "VkQueryPoolCreateInfo"), sVkQueryPoolCreateInfo);
  Napi::Object sVkFramebufferCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferCreateInfo::sType)));
    
    sVkFramebufferCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferCreateInfo::pNext)));
    
    sVkFramebufferCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferCreateInfo::flags)));
    
    sVkFramebufferCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, renderPass)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferCreateInfo::renderPass)));
    
    sVkFramebufferCreateInfo.Set(Napi::String::New(env, "renderPass"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, attachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferCreateInfo::attachmentCount)));
    
    sVkFramebufferCreateInfo.Set(Napi::String::New(env, "attachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, pAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferCreateInfo::pAttachments)));
    
    sVkFramebufferCreateInfo.Set(Napi::String::New(env, "pAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, width)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferCreateInfo::width)));
    
    sVkFramebufferCreateInfo.Set(Napi::String::New(env, "width"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, height)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferCreateInfo::height)));
    
    sVkFramebufferCreateInfo.Set(Napi::String::New(env, "height"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, layers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferCreateInfo::layers)));
    
    sVkFramebufferCreateInfo.Set(Napi::String::New(env, "layers"), obj);
  }
  sVkFramebufferCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferCreateInfo)));
  out.Set(Napi::String::New(env, "VkFramebufferCreateInfo"), sVkFramebufferCreateInfo);
  Napi::Object sVkDrawIndirectCommand = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrawIndirectCommand, vertexCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrawIndirectCommand::vertexCount)));
    
    sVkDrawIndirectCommand.Set(Napi::String::New(env, "vertexCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrawIndirectCommand, instanceCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrawIndirectCommand::instanceCount)));
    
    sVkDrawIndirectCommand.Set(Napi::String::New(env, "instanceCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrawIndirectCommand, firstVertex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrawIndirectCommand::firstVertex)));
    
    sVkDrawIndirectCommand.Set(Napi::String::New(env, "firstVertex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrawIndirectCommand, firstInstance)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrawIndirectCommand::firstInstance)));
    
    sVkDrawIndirectCommand.Set(Napi::String::New(env, "firstInstance"), obj);
  }
  sVkDrawIndirectCommand.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrawIndirectCommand)));
  out.Set(Napi::String::New(env, "VkDrawIndirectCommand"), sVkDrawIndirectCommand);
  Napi::Object sVkDrawIndexedIndirectCommand = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrawIndexedIndirectCommand, indexCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrawIndexedIndirectCommand::indexCount)));
    
    sVkDrawIndexedIndirectCommand.Set(Napi::String::New(env, "indexCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrawIndexedIndirectCommand, instanceCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrawIndexedIndirectCommand::instanceCount)));
    
    sVkDrawIndexedIndirectCommand.Set(Napi::String::New(env, "instanceCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrawIndexedIndirectCommand, firstIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrawIndexedIndirectCommand::firstIndex)));
    
    sVkDrawIndexedIndirectCommand.Set(Napi::String::New(env, "firstIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrawIndexedIndirectCommand, vertexOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrawIndexedIndirectCommand::vertexOffset)));
    
    sVkDrawIndexedIndirectCommand.Set(Napi::String::New(env, "vertexOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrawIndexedIndirectCommand, firstInstance)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrawIndexedIndirectCommand::firstInstance)));
    
    sVkDrawIndexedIndirectCommand.Set(Napi::String::New(env, "firstInstance"), obj);
  }
  sVkDrawIndexedIndirectCommand.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrawIndexedIndirectCommand)));
  out.Set(Napi::String::New(env, "VkDrawIndexedIndirectCommand"), sVkDrawIndexedIndirectCommand);
  Napi::Object sVkDispatchIndirectCommand = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDispatchIndirectCommand, x)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDispatchIndirectCommand::x)));
    
    sVkDispatchIndirectCommand.Set(Napi::String::New(env, "x"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDispatchIndirectCommand, y)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDispatchIndirectCommand::y)));
    
    sVkDispatchIndirectCommand.Set(Napi::String::New(env, "y"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDispatchIndirectCommand, z)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDispatchIndirectCommand::z)));
    
    sVkDispatchIndirectCommand.Set(Napi::String::New(env, "z"), obj);
  }
  sVkDispatchIndirectCommand.Set(strByteLength, Napi::Number::New(env, sizeof(VkDispatchIndirectCommand)));
  out.Set(Napi::String::New(env, "VkDispatchIndirectCommand"), sVkDispatchIndirectCommand);
  Napi::Object sVkSubmitInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubmitInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubmitInfo::sType)));
    
    sVkSubmitInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubmitInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubmitInfo::pNext)));
    
    sVkSubmitInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubmitInfo, waitSemaphoreCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubmitInfo::waitSemaphoreCount)));
    
    sVkSubmitInfo.Set(Napi::String::New(env, "waitSemaphoreCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubmitInfo, pWaitSemaphores)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubmitInfo::pWaitSemaphores)));
    
    sVkSubmitInfo.Set(Napi::String::New(env, "pWaitSemaphores"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubmitInfo, pWaitDstStageMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubmitInfo::pWaitDstStageMask)));
    
    sVkSubmitInfo.Set(Napi::String::New(env, "pWaitDstStageMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubmitInfo, commandBufferCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubmitInfo::commandBufferCount)));
    
    sVkSubmitInfo.Set(Napi::String::New(env, "commandBufferCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubmitInfo, pCommandBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubmitInfo::pCommandBuffers)));
    
    sVkSubmitInfo.Set(Napi::String::New(env, "pCommandBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubmitInfo, signalSemaphoreCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubmitInfo::signalSemaphoreCount)));
    
    sVkSubmitInfo.Set(Napi::String::New(env, "signalSemaphoreCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubmitInfo, pSignalSemaphores)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubmitInfo::pSignalSemaphores)));
    
    sVkSubmitInfo.Set(Napi::String::New(env, "pSignalSemaphores"), obj);
  }
  sVkSubmitInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubmitInfo)));
  out.Set(Napi::String::New(env, "VkSubmitInfo"), sVkSubmitInfo);
  Napi::Object sVkDisplayPropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPropertiesKHR, display)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPropertiesKHR::display)));
    
    sVkDisplayPropertiesKHR.Set(Napi::String::New(env, "display"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPropertiesKHR, displayName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPropertiesKHR::displayName)));
    
    sVkDisplayPropertiesKHR.Set(Napi::String::New(env, "displayName"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPropertiesKHR, physicalDimensions)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPropertiesKHR::physicalDimensions)));
    
    sVkDisplayPropertiesKHR.Set(Napi::String::New(env, "physicalDimensions"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPropertiesKHR, physicalResolution)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPropertiesKHR::physicalResolution)));
    
    sVkDisplayPropertiesKHR.Set(Napi::String::New(env, "physicalResolution"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPropertiesKHR, supportedTransforms)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPropertiesKHR::supportedTransforms)));
    
    sVkDisplayPropertiesKHR.Set(Napi::String::New(env, "supportedTransforms"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPropertiesKHR, planeReorderPossible)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPropertiesKHR::planeReorderPossible)));
    
    sVkDisplayPropertiesKHR.Set(Napi::String::New(env, "planeReorderPossible"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPropertiesKHR, persistentContent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPropertiesKHR::persistentContent)));
    
    sVkDisplayPropertiesKHR.Set(Napi::String::New(env, "persistentContent"), obj);
  }
  sVkDisplayPropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPropertiesKHR)));
  out.Set(Napi::String::New(env, "VkDisplayPropertiesKHR"), sVkDisplayPropertiesKHR);
  Napi::Object sVkDisplayPlanePropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlanePropertiesKHR, currentDisplay)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlanePropertiesKHR::currentDisplay)));
    
    sVkDisplayPlanePropertiesKHR.Set(Napi::String::New(env, "currentDisplay"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlanePropertiesKHR, currentStackIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlanePropertiesKHR::currentStackIndex)));
    
    sVkDisplayPlanePropertiesKHR.Set(Napi::String::New(env, "currentStackIndex"), obj);
  }
  sVkDisplayPlanePropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlanePropertiesKHR)));
  out.Set(Napi::String::New(env, "VkDisplayPlanePropertiesKHR"), sVkDisplayPlanePropertiesKHR);
  Napi::Object sVkDisplayModeParametersKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayModeParametersKHR, visibleRegion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayModeParametersKHR::visibleRegion)));
    
    sVkDisplayModeParametersKHR.Set(Napi::String::New(env, "visibleRegion"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayModeParametersKHR, refreshRate)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayModeParametersKHR::refreshRate)));
    
    sVkDisplayModeParametersKHR.Set(Napi::String::New(env, "refreshRate"), obj);
  }
  sVkDisplayModeParametersKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayModeParametersKHR)));
  out.Set(Napi::String::New(env, "VkDisplayModeParametersKHR"), sVkDisplayModeParametersKHR);
  Napi::Object sVkDisplayModePropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayModePropertiesKHR, displayMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayModePropertiesKHR::displayMode)));
    
    sVkDisplayModePropertiesKHR.Set(Napi::String::New(env, "displayMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayModePropertiesKHR, parameters)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayModePropertiesKHR::parameters)));
    
    sVkDisplayModePropertiesKHR.Set(Napi::String::New(env, "parameters"), obj);
  }
  sVkDisplayModePropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayModePropertiesKHR)));
  out.Set(Napi::String::New(env, "VkDisplayModePropertiesKHR"), sVkDisplayModePropertiesKHR);
  Napi::Object sVkDisplayModeCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayModeCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayModeCreateInfoKHR::sType)));
    
    sVkDisplayModeCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayModeCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayModeCreateInfoKHR::pNext)));
    
    sVkDisplayModeCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayModeCreateInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayModeCreateInfoKHR::flags)));
    
    sVkDisplayModeCreateInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayModeCreateInfoKHR, parameters)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayModeCreateInfoKHR::parameters)));
    
    sVkDisplayModeCreateInfoKHR.Set(Napi::String::New(env, "parameters"), obj);
  }
  sVkDisplayModeCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayModeCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkDisplayModeCreateInfoKHR"), sVkDisplayModeCreateInfoKHR);
  Napi::Object sVkDisplayPlaneCapabilitiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, supportedAlpha)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilitiesKHR::supportedAlpha)));
    
    sVkDisplayPlaneCapabilitiesKHR.Set(Napi::String::New(env, "supportedAlpha"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, minSrcPosition)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilitiesKHR::minSrcPosition)));
    
    sVkDisplayPlaneCapabilitiesKHR.Set(Napi::String::New(env, "minSrcPosition"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, maxSrcPosition)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilitiesKHR::maxSrcPosition)));
    
    sVkDisplayPlaneCapabilitiesKHR.Set(Napi::String::New(env, "maxSrcPosition"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, minSrcExtent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilitiesKHR::minSrcExtent)));
    
    sVkDisplayPlaneCapabilitiesKHR.Set(Napi::String::New(env, "minSrcExtent"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, maxSrcExtent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilitiesKHR::maxSrcExtent)));
    
    sVkDisplayPlaneCapabilitiesKHR.Set(Napi::String::New(env, "maxSrcExtent"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, minDstPosition)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilitiesKHR::minDstPosition)));
    
    sVkDisplayPlaneCapabilitiesKHR.Set(Napi::String::New(env, "minDstPosition"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, maxDstPosition)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilitiesKHR::maxDstPosition)));
    
    sVkDisplayPlaneCapabilitiesKHR.Set(Napi::String::New(env, "maxDstPosition"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, minDstExtent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilitiesKHR::minDstExtent)));
    
    sVkDisplayPlaneCapabilitiesKHR.Set(Napi::String::New(env, "minDstExtent"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, maxDstExtent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilitiesKHR::maxDstExtent)));
    
    sVkDisplayPlaneCapabilitiesKHR.Set(Napi::String::New(env, "maxDstExtent"), obj);
  }
  sVkDisplayPlaneCapabilitiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilitiesKHR)));
  out.Set(Napi::String::New(env, "VkDisplayPlaneCapabilitiesKHR"), sVkDisplayPlaneCapabilitiesKHR);
  Napi::Object sVkDisplaySurfaceCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplaySurfaceCreateInfoKHR::sType)));
    
    sVkDisplaySurfaceCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplaySurfaceCreateInfoKHR::pNext)));
    
    sVkDisplaySurfaceCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplaySurfaceCreateInfoKHR::flags)));
    
    sVkDisplaySurfaceCreateInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, displayMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplaySurfaceCreateInfoKHR::displayMode)));
    
    sVkDisplaySurfaceCreateInfoKHR.Set(Napi::String::New(env, "displayMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, planeIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplaySurfaceCreateInfoKHR::planeIndex)));
    
    sVkDisplaySurfaceCreateInfoKHR.Set(Napi::String::New(env, "planeIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, planeStackIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplaySurfaceCreateInfoKHR::planeStackIndex)));
    
    sVkDisplaySurfaceCreateInfoKHR.Set(Napi::String::New(env, "planeStackIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, transform)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplaySurfaceCreateInfoKHR::transform)));
    
    sVkDisplaySurfaceCreateInfoKHR.Set(Napi::String::New(env, "transform"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, globalAlpha)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplaySurfaceCreateInfoKHR::globalAlpha)));
    
    sVkDisplaySurfaceCreateInfoKHR.Set(Napi::String::New(env, "globalAlpha"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, alphaMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplaySurfaceCreateInfoKHR::alphaMode)));
    
    sVkDisplaySurfaceCreateInfoKHR.Set(Napi::String::New(env, "alphaMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, imageExtent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplaySurfaceCreateInfoKHR::imageExtent)));
    
    sVkDisplaySurfaceCreateInfoKHR.Set(Napi::String::New(env, "imageExtent"), obj);
  }
  sVkDisplaySurfaceCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplaySurfaceCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkDisplaySurfaceCreateInfoKHR"), sVkDisplaySurfaceCreateInfoKHR);
  Napi::Object sVkDisplayPresentInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPresentInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPresentInfoKHR::sType)));
    
    sVkDisplayPresentInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPresentInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPresentInfoKHR::pNext)));
    
    sVkDisplayPresentInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPresentInfoKHR, srcRect)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPresentInfoKHR::srcRect)));
    
    sVkDisplayPresentInfoKHR.Set(Napi::String::New(env, "srcRect"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPresentInfoKHR, dstRect)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPresentInfoKHR::dstRect)));
    
    sVkDisplayPresentInfoKHR.Set(Napi::String::New(env, "dstRect"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPresentInfoKHR, persistent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPresentInfoKHR::persistent)));
    
    sVkDisplayPresentInfoKHR.Set(Napi::String::New(env, "persistent"), obj);
  }
  sVkDisplayPresentInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPresentInfoKHR)));
  out.Set(Napi::String::New(env, "VkDisplayPresentInfoKHR"), sVkDisplayPresentInfoKHR);
  Napi::Object sVkSurfaceCapabilitiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, minImageCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesKHR::minImageCount)));
    
    sVkSurfaceCapabilitiesKHR.Set(Napi::String::New(env, "minImageCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, maxImageCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesKHR::maxImageCount)));
    
    sVkSurfaceCapabilitiesKHR.Set(Napi::String::New(env, "maxImageCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, currentExtent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesKHR::currentExtent)));
    
    sVkSurfaceCapabilitiesKHR.Set(Napi::String::New(env, "currentExtent"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, minImageExtent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesKHR::minImageExtent)));
    
    sVkSurfaceCapabilitiesKHR.Set(Napi::String::New(env, "minImageExtent"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, maxImageExtent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesKHR::maxImageExtent)));
    
    sVkSurfaceCapabilitiesKHR.Set(Napi::String::New(env, "maxImageExtent"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, maxImageArrayLayers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesKHR::maxImageArrayLayers)));
    
    sVkSurfaceCapabilitiesKHR.Set(Napi::String::New(env, "maxImageArrayLayers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, supportedTransforms)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesKHR::supportedTransforms)));
    
    sVkSurfaceCapabilitiesKHR.Set(Napi::String::New(env, "supportedTransforms"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, currentTransform)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesKHR::currentTransform)));
    
    sVkSurfaceCapabilitiesKHR.Set(Napi::String::New(env, "currentTransform"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, supportedCompositeAlpha)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesKHR::supportedCompositeAlpha)));
    
    sVkSurfaceCapabilitiesKHR.Set(Napi::String::New(env, "supportedCompositeAlpha"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, supportedUsageFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesKHR::supportedUsageFlags)));
    
    sVkSurfaceCapabilitiesKHR.Set(Napi::String::New(env, "supportedUsageFlags"), obj);
  }
  sVkSurfaceCapabilitiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesKHR)));
  out.Set(Napi::String::New(env, "VkSurfaceCapabilitiesKHR"), sVkSurfaceCapabilitiesKHR);
  Napi::Object sVkWin32SurfaceCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32SurfaceCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32SurfaceCreateInfoKHR::sType)));
    
    sVkWin32SurfaceCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32SurfaceCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32SurfaceCreateInfoKHR::pNext)));
    
    sVkWin32SurfaceCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32SurfaceCreateInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32SurfaceCreateInfoKHR::flags)));
    
    sVkWin32SurfaceCreateInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32SurfaceCreateInfoKHR, hinstance)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32SurfaceCreateInfoKHR::hinstance)));
    
    sVkWin32SurfaceCreateInfoKHR.Set(Napi::String::New(env, "hinstance"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32SurfaceCreateInfoKHR, hwnd)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32SurfaceCreateInfoKHR::hwnd)));
    
    sVkWin32SurfaceCreateInfoKHR.Set(Napi::String::New(env, "hwnd"), obj);
  }
  sVkWin32SurfaceCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32SurfaceCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkWin32SurfaceCreateInfoKHR"), sVkWin32SurfaceCreateInfoKHR);
  Napi::Object sVkSurfaceFormatKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceFormatKHR, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceFormatKHR::format)));
    
    sVkSurfaceFormatKHR.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceFormatKHR, colorSpace)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceFormatKHR::colorSpace)));
    
    sVkSurfaceFormatKHR.Set(Napi::String::New(env, "colorSpace"), obj);
  }
  sVkSurfaceFormatKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceFormatKHR)));
  out.Set(Napi::String::New(env, "VkSurfaceFormatKHR"), sVkSurfaceFormatKHR);
  Napi::Object sVkSwapchainCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::sType)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::pNext)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::flags)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, surface)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::surface)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "surface"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, minImageCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::minImageCount)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "minImageCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, imageFormat)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::imageFormat)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "imageFormat"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, imageColorSpace)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::imageColorSpace)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "imageColorSpace"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, imageExtent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::imageExtent)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "imageExtent"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, imageArrayLayers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::imageArrayLayers)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "imageArrayLayers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, imageUsage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::imageUsage)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "imageUsage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, imageSharingMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::imageSharingMode)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "imageSharingMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, queueFamilyIndexCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::queueFamilyIndexCount)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "queueFamilyIndexCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, pQueueFamilyIndices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::pQueueFamilyIndices)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "pQueueFamilyIndices"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, preTransform)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::preTransform)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "preTransform"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, compositeAlpha)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::compositeAlpha)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "compositeAlpha"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, presentMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::presentMode)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "presentMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, clipped)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::clipped)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "clipped"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, oldSwapchain)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR::oldSwapchain)));
    
    sVkSwapchainCreateInfoKHR.Set(Napi::String::New(env, "oldSwapchain"), obj);
  }
  sVkSwapchainCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkSwapchainCreateInfoKHR"), sVkSwapchainCreateInfoKHR);
  Napi::Object sVkPresentInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentInfoKHR::sType)));
    
    sVkPresentInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentInfoKHR::pNext)));
    
    sVkPresentInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentInfoKHR, waitSemaphoreCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentInfoKHR::waitSemaphoreCount)));
    
    sVkPresentInfoKHR.Set(Napi::String::New(env, "waitSemaphoreCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentInfoKHR, pWaitSemaphores)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentInfoKHR::pWaitSemaphores)));
    
    sVkPresentInfoKHR.Set(Napi::String::New(env, "pWaitSemaphores"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentInfoKHR, swapchainCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentInfoKHR::swapchainCount)));
    
    sVkPresentInfoKHR.Set(Napi::String::New(env, "swapchainCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentInfoKHR, pSwapchains)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentInfoKHR::pSwapchains)));
    
    sVkPresentInfoKHR.Set(Napi::String::New(env, "pSwapchains"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentInfoKHR, pImageIndices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentInfoKHR::pImageIndices)));
    
    sVkPresentInfoKHR.Set(Napi::String::New(env, "pImageIndices"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentInfoKHR, pResults)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentInfoKHR::pResults)));
    
    sVkPresentInfoKHR.Set(Napi::String::New(env, "pResults"), obj);
  }
  sVkPresentInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentInfoKHR)));
  out.Set(Napi::String::New(env, "VkPresentInfoKHR"), sVkPresentInfoKHR);
  Napi::Object sVkDebugReportCallbackCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugReportCallbackCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugReportCallbackCreateInfoEXT::sType)));
    
    sVkDebugReportCallbackCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugReportCallbackCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugReportCallbackCreateInfoEXT::pNext)));
    
    sVkDebugReportCallbackCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugReportCallbackCreateInfoEXT, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugReportCallbackCreateInfoEXT::flags)));
    
    sVkDebugReportCallbackCreateInfoEXT.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugReportCallbackCreateInfoEXT, pfnCallback)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugReportCallbackCreateInfoEXT::pfnCallback)));
    
    sVkDebugReportCallbackCreateInfoEXT.Set(Napi::String::New(env, "pfnCallback"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugReportCallbackCreateInfoEXT, pUserData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugReportCallbackCreateInfoEXT::pUserData)));
    
    sVkDebugReportCallbackCreateInfoEXT.Set(Napi::String::New(env, "pUserData"), obj);
  }
  sVkDebugReportCallbackCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugReportCallbackCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkDebugReportCallbackCreateInfoEXT"), sVkDebugReportCallbackCreateInfoEXT);
  Napi::Object sVkValidationFlagsEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkValidationFlagsEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationFlagsEXT::sType)));
    
    sVkValidationFlagsEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkValidationFlagsEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationFlagsEXT::pNext)));
    
    sVkValidationFlagsEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkValidationFlagsEXT, disabledValidationCheckCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationFlagsEXT::disabledValidationCheckCount)));
    
    sVkValidationFlagsEXT.Set(Napi::String::New(env, "disabledValidationCheckCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkValidationFlagsEXT, pDisabledValidationChecks)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationFlagsEXT::pDisabledValidationChecks)));
    
    sVkValidationFlagsEXT.Set(Napi::String::New(env, "pDisabledValidationChecks"), obj);
  }
  sVkValidationFlagsEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationFlagsEXT)));
  out.Set(Napi::String::New(env, "VkValidationFlagsEXT"), sVkValidationFlagsEXT);
  Napi::Object sVkValidationFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkValidationFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationFeaturesEXT::sType)));
    
    sVkValidationFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkValidationFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationFeaturesEXT::pNext)));
    
    sVkValidationFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkValidationFeaturesEXT, enabledValidationFeatureCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationFeaturesEXT::enabledValidationFeatureCount)));
    
    sVkValidationFeaturesEXT.Set(Napi::String::New(env, "enabledValidationFeatureCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkValidationFeaturesEXT, pEnabledValidationFeatures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationFeaturesEXT::pEnabledValidationFeatures)));
    
    sVkValidationFeaturesEXT.Set(Napi::String::New(env, "pEnabledValidationFeatures"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkValidationFeaturesEXT, disabledValidationFeatureCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationFeaturesEXT::disabledValidationFeatureCount)));
    
    sVkValidationFeaturesEXT.Set(Napi::String::New(env, "disabledValidationFeatureCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkValidationFeaturesEXT, pDisabledValidationFeatures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationFeaturesEXT::pDisabledValidationFeatures)));
    
    sVkValidationFeaturesEXT.Set(Napi::String::New(env, "pDisabledValidationFeatures"), obj);
  }
  sVkValidationFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkValidationFeaturesEXT"), sVkValidationFeaturesEXT);
  Napi::Object sVkPipelineRasterizationStateRasterizationOrderAMD = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateRasterizationOrderAMD, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateRasterizationOrderAMD::sType)));
    
    sVkPipelineRasterizationStateRasterizationOrderAMD.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateRasterizationOrderAMD, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateRasterizationOrderAMD::pNext)));
    
    sVkPipelineRasterizationStateRasterizationOrderAMD.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateRasterizationOrderAMD, rasterizationOrder)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateRasterizationOrderAMD::rasterizationOrder)));
    
    sVkPipelineRasterizationStateRasterizationOrderAMD.Set(Napi::String::New(env, "rasterizationOrder"), obj);
  }
  sVkPipelineRasterizationStateRasterizationOrderAMD.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateRasterizationOrderAMD)));
  out.Set(Napi::String::New(env, "VkPipelineRasterizationStateRasterizationOrderAMD"), sVkPipelineRasterizationStateRasterizationOrderAMD);
  Napi::Object sVkDebugMarkerObjectNameInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerObjectNameInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerObjectNameInfoEXT::sType)));
    
    sVkDebugMarkerObjectNameInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerObjectNameInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerObjectNameInfoEXT::pNext)));
    
    sVkDebugMarkerObjectNameInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerObjectNameInfoEXT, objectType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerObjectNameInfoEXT::objectType)));
    
    sVkDebugMarkerObjectNameInfoEXT.Set(Napi::String::New(env, "objectType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerObjectNameInfoEXT, object)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerObjectNameInfoEXT::object)));
    
    sVkDebugMarkerObjectNameInfoEXT.Set(Napi::String::New(env, "object"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerObjectNameInfoEXT, pObjectName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerObjectNameInfoEXT::pObjectName)));
    
    sVkDebugMarkerObjectNameInfoEXT.Set(Napi::String::New(env, "pObjectName"), obj);
  }
  sVkDebugMarkerObjectNameInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerObjectNameInfoEXT)));
  out.Set(Napi::String::New(env, "VkDebugMarkerObjectNameInfoEXT"), sVkDebugMarkerObjectNameInfoEXT);
  Napi::Object sVkDebugMarkerObjectTagInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerObjectTagInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerObjectTagInfoEXT::sType)));
    
    sVkDebugMarkerObjectTagInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerObjectTagInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerObjectTagInfoEXT::pNext)));
    
    sVkDebugMarkerObjectTagInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerObjectTagInfoEXT, objectType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerObjectTagInfoEXT::objectType)));
    
    sVkDebugMarkerObjectTagInfoEXT.Set(Napi::String::New(env, "objectType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerObjectTagInfoEXT, object)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerObjectTagInfoEXT::object)));
    
    sVkDebugMarkerObjectTagInfoEXT.Set(Napi::String::New(env, "object"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerObjectTagInfoEXT, tagName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerObjectTagInfoEXT::tagName)));
    
    sVkDebugMarkerObjectTagInfoEXT.Set(Napi::String::New(env, "tagName"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerObjectTagInfoEXT, tagSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerObjectTagInfoEXT::tagSize)));
    
    sVkDebugMarkerObjectTagInfoEXT.Set(Napi::String::New(env, "tagSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerObjectTagInfoEXT, pTag)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerObjectTagInfoEXT::pTag)));
    
    sVkDebugMarkerObjectTagInfoEXT.Set(Napi::String::New(env, "pTag"), obj);
  }
  sVkDebugMarkerObjectTagInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerObjectTagInfoEXT)));
  out.Set(Napi::String::New(env, "VkDebugMarkerObjectTagInfoEXT"), sVkDebugMarkerObjectTagInfoEXT);
  Napi::Object sVkDebugMarkerMarkerInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerMarkerInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerMarkerInfoEXT::sType)));
    
    sVkDebugMarkerMarkerInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerMarkerInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerMarkerInfoEXT::pNext)));
    
    sVkDebugMarkerMarkerInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerMarkerInfoEXT, pMarkerName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerMarkerInfoEXT::pMarkerName)));
    
    sVkDebugMarkerMarkerInfoEXT.Set(Napi::String::New(env, "pMarkerName"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugMarkerMarkerInfoEXT, color)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerMarkerInfoEXT::color)));
    
    sVkDebugMarkerMarkerInfoEXT.Set(Napi::String::New(env, "color"), obj);
  }
  sVkDebugMarkerMarkerInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugMarkerMarkerInfoEXT)));
  out.Set(Napi::String::New(env, "VkDebugMarkerMarkerInfoEXT"), sVkDebugMarkerMarkerInfoEXT);
  Napi::Object sVkDedicatedAllocationImageCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDedicatedAllocationImageCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDedicatedAllocationImageCreateInfoNV::sType)));
    
    sVkDedicatedAllocationImageCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDedicatedAllocationImageCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDedicatedAllocationImageCreateInfoNV::pNext)));
    
    sVkDedicatedAllocationImageCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDedicatedAllocationImageCreateInfoNV, dedicatedAllocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation)));
    
    sVkDedicatedAllocationImageCreateInfoNV.Set(Napi::String::New(env, "dedicatedAllocation"), obj);
  }
  sVkDedicatedAllocationImageCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkDedicatedAllocationImageCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkDedicatedAllocationImageCreateInfoNV"), sVkDedicatedAllocationImageCreateInfoNV);
  Napi::Object sVkDedicatedAllocationBufferCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDedicatedAllocationBufferCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDedicatedAllocationBufferCreateInfoNV::sType)));
    
    sVkDedicatedAllocationBufferCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDedicatedAllocationBufferCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDedicatedAllocationBufferCreateInfoNV::pNext)));
    
    sVkDedicatedAllocationBufferCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDedicatedAllocationBufferCreateInfoNV, dedicatedAllocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation)));
    
    sVkDedicatedAllocationBufferCreateInfoNV.Set(Napi::String::New(env, "dedicatedAllocation"), obj);
  }
  sVkDedicatedAllocationBufferCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkDedicatedAllocationBufferCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkDedicatedAllocationBufferCreateInfoNV"), sVkDedicatedAllocationBufferCreateInfoNV);
  Napi::Object sVkDedicatedAllocationMemoryAllocateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDedicatedAllocationMemoryAllocateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDedicatedAllocationMemoryAllocateInfoNV::sType)));
    
    sVkDedicatedAllocationMemoryAllocateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDedicatedAllocationMemoryAllocateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDedicatedAllocationMemoryAllocateInfoNV::pNext)));
    
    sVkDedicatedAllocationMemoryAllocateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDedicatedAllocationMemoryAllocateInfoNV, image)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDedicatedAllocationMemoryAllocateInfoNV::image)));
    
    sVkDedicatedAllocationMemoryAllocateInfoNV.Set(Napi::String::New(env, "image"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDedicatedAllocationMemoryAllocateInfoNV, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDedicatedAllocationMemoryAllocateInfoNV::buffer)));
    
    sVkDedicatedAllocationMemoryAllocateInfoNV.Set(Napi::String::New(env, "buffer"), obj);
  }
  sVkDedicatedAllocationMemoryAllocateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkDedicatedAllocationMemoryAllocateInfoNV)));
  out.Set(Napi::String::New(env, "VkDedicatedAllocationMemoryAllocateInfoNV"), sVkDedicatedAllocationMemoryAllocateInfoNV);
  Napi::Object sVkExternalImageFormatPropertiesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalImageFormatPropertiesNV, imageFormatProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalImageFormatPropertiesNV::imageFormatProperties)));
    
    sVkExternalImageFormatPropertiesNV.Set(Napi::String::New(env, "imageFormatProperties"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalImageFormatPropertiesNV, externalMemoryFeatures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalImageFormatPropertiesNV::externalMemoryFeatures)));
    
    sVkExternalImageFormatPropertiesNV.Set(Napi::String::New(env, "externalMemoryFeatures"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalImageFormatPropertiesNV, exportFromImportedHandleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalImageFormatPropertiesNV::exportFromImportedHandleTypes)));
    
    sVkExternalImageFormatPropertiesNV.Set(Napi::String::New(env, "exportFromImportedHandleTypes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalImageFormatPropertiesNV, compatibleHandleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalImageFormatPropertiesNV::compatibleHandleTypes)));
    
    sVkExternalImageFormatPropertiesNV.Set(Napi::String::New(env, "compatibleHandleTypes"), obj);
  }
  sVkExternalImageFormatPropertiesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalImageFormatPropertiesNV)));
  out.Set(Napi::String::New(env, "VkExternalImageFormatPropertiesNV"), sVkExternalImageFormatPropertiesNV);
  Napi::Object sVkExternalMemoryImageCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryImageCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryImageCreateInfoNV::sType)));
    
    sVkExternalMemoryImageCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryImageCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryImageCreateInfoNV::pNext)));
    
    sVkExternalMemoryImageCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryImageCreateInfoNV, handleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryImageCreateInfoNV::handleTypes)));
    
    sVkExternalMemoryImageCreateInfoNV.Set(Napi::String::New(env, "handleTypes"), obj);
  }
  sVkExternalMemoryImageCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryImageCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkExternalMemoryImageCreateInfoNV"), sVkExternalMemoryImageCreateInfoNV);
  Napi::Object sVkExportMemoryAllocateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryAllocateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryAllocateInfoNV::sType)));
    
    sVkExportMemoryAllocateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryAllocateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryAllocateInfoNV::pNext)));
    
    sVkExportMemoryAllocateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryAllocateInfoNV, handleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryAllocateInfoNV::handleTypes)));
    
    sVkExportMemoryAllocateInfoNV.Set(Napi::String::New(env, "handleTypes"), obj);
  }
  sVkExportMemoryAllocateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryAllocateInfoNV)));
  out.Set(Napi::String::New(env, "VkExportMemoryAllocateInfoNV"), sVkExportMemoryAllocateInfoNV);
  Napi::Object sVkImportMemoryWin32HandleInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryWin32HandleInfoNV::sType)));
    
    sVkImportMemoryWin32HandleInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryWin32HandleInfoNV::pNext)));
    
    sVkImportMemoryWin32HandleInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoNV, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryWin32HandleInfoNV::handleType)));
    
    sVkImportMemoryWin32HandleInfoNV.Set(Napi::String::New(env, "handleType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoNV, handle)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryWin32HandleInfoNV::handle)));
    
    sVkImportMemoryWin32HandleInfoNV.Set(Napi::String::New(env, "handle"), obj);
  }
  sVkImportMemoryWin32HandleInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryWin32HandleInfoNV)));
  out.Set(Napi::String::New(env, "VkImportMemoryWin32HandleInfoNV"), sVkImportMemoryWin32HandleInfoNV);
  Napi::Object sVkExportMemoryWin32HandleInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryWin32HandleInfoNV::sType)));
    
    sVkExportMemoryWin32HandleInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryWin32HandleInfoNV::pNext)));
    
    sVkExportMemoryWin32HandleInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoNV, pAttributes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryWin32HandleInfoNV::pAttributes)));
    
    sVkExportMemoryWin32HandleInfoNV.Set(Napi::String::New(env, "pAttributes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoNV, dwAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryWin32HandleInfoNV::dwAccess)));
    
    sVkExportMemoryWin32HandleInfoNV.Set(Napi::String::New(env, "dwAccess"), obj);
  }
  sVkExportMemoryWin32HandleInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryWin32HandleInfoNV)));
  out.Set(Napi::String::New(env, "VkExportMemoryWin32HandleInfoNV"), sVkExportMemoryWin32HandleInfoNV);
  Napi::Object sVkWin32KeyedMutexAcquireReleaseInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::sType)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::pNext)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, acquireCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::acquireCount)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoNV.Set(Napi::String::New(env, "acquireCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pAcquireSyncs)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::pAcquireSyncs)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoNV.Set(Napi::String::New(env, "pAcquireSyncs"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pAcquireKeys)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::pAcquireKeys)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoNV.Set(Napi::String::New(env, "pAcquireKeys"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pAcquireTimeoutMilliseconds)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::pAcquireTimeoutMilliseconds)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoNV.Set(Napi::String::New(env, "pAcquireTimeoutMilliseconds"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, releaseCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::releaseCount)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoNV.Set(Napi::String::New(env, "releaseCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pReleaseSyncs)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::pReleaseSyncs)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoNV.Set(Napi::String::New(env, "pReleaseSyncs"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pReleaseKeys)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::pReleaseKeys)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoNV.Set(Napi::String::New(env, "pReleaseKeys"), obj);
  }
  sVkWin32KeyedMutexAcquireReleaseInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV)));
  out.Set(Napi::String::New(env, "VkWin32KeyedMutexAcquireReleaseInfoNV"), sVkWin32KeyedMutexAcquireReleaseInfoNV);
  Napi::Object sVkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV::sType)));
    
    sVkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV::pNext)));
    
    sVkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV, deviceGeneratedCommands)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV::deviceGeneratedCommands)));
    
    sVkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.Set(Napi::String::New(env, "deviceGeneratedCommands"), obj);
  }
  sVkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV"), sVkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV);
  Napi::Object sVkDevicePrivateDataCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDevicePrivateDataCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDevicePrivateDataCreateInfoEXT::sType)));
    
    sVkDevicePrivateDataCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDevicePrivateDataCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDevicePrivateDataCreateInfoEXT::pNext)));
    
    sVkDevicePrivateDataCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDevicePrivateDataCreateInfoEXT, privateDataSlotRequestCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDevicePrivateDataCreateInfoEXT::privateDataSlotRequestCount)));
    
    sVkDevicePrivateDataCreateInfoEXT.Set(Napi::String::New(env, "privateDataSlotRequestCount"), obj);
  }
  sVkDevicePrivateDataCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDevicePrivateDataCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkDevicePrivateDataCreateInfoEXT"), sVkDevicePrivateDataCreateInfoEXT);
  Napi::Object sVkPrivateDataSlotCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPrivateDataSlotCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPrivateDataSlotCreateInfoEXT::sType)));
    
    sVkPrivateDataSlotCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPrivateDataSlotCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPrivateDataSlotCreateInfoEXT::pNext)));
    
    sVkPrivateDataSlotCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPrivateDataSlotCreateInfoEXT, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPrivateDataSlotCreateInfoEXT::flags)));
    
    sVkPrivateDataSlotCreateInfoEXT.Set(Napi::String::New(env, "flags"), obj);
  }
  sVkPrivateDataSlotCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPrivateDataSlotCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkPrivateDataSlotCreateInfoEXT"), sVkPrivateDataSlotCreateInfoEXT);
  Napi::Object sVkPhysicalDevicePrivateDataFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePrivateDataFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePrivateDataFeaturesEXT::sType)));
    
    sVkPhysicalDevicePrivateDataFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePrivateDataFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePrivateDataFeaturesEXT::pNext)));
    
    sVkPhysicalDevicePrivateDataFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePrivateDataFeaturesEXT, privateData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePrivateDataFeaturesEXT::privateData)));
    
    sVkPhysicalDevicePrivateDataFeaturesEXT.Set(Napi::String::New(env, "privateData"), obj);
  }
  sVkPhysicalDevicePrivateDataFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePrivateDataFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDevicePrivateDataFeaturesEXT"), sVkPhysicalDevicePrivateDataFeaturesEXT);
  Napi::Object sVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::sType)));
    
    sVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::pNext)));
    
    sVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, maxGraphicsShaderGroupCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxGraphicsShaderGroupCount)));
    
    sVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.Set(Napi::String::New(env, "maxGraphicsShaderGroupCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, maxIndirectSequenceCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxIndirectSequenceCount)));
    
    sVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.Set(Napi::String::New(env, "maxIndirectSequenceCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, maxIndirectCommandsTokenCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxIndirectCommandsTokenCount)));
    
    sVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.Set(Napi::String::New(env, "maxIndirectCommandsTokenCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, maxIndirectCommandsStreamCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxIndirectCommandsStreamCount)));
    
    sVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.Set(Napi::String::New(env, "maxIndirectCommandsStreamCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, maxIndirectCommandsTokenOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxIndirectCommandsTokenOffset)));
    
    sVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.Set(Napi::String::New(env, "maxIndirectCommandsTokenOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, maxIndirectCommandsStreamStride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxIndirectCommandsStreamStride)));
    
    sVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.Set(Napi::String::New(env, "maxIndirectCommandsStreamStride"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, minSequencesCountBufferOffsetAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::minSequencesCountBufferOffsetAlignment)));
    
    sVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.Set(Napi::String::New(env, "minSequencesCountBufferOffsetAlignment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, minSequencesIndexBufferOffsetAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::minSequencesIndexBufferOffsetAlignment)));
    
    sVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.Set(Napi::String::New(env, "minSequencesIndexBufferOffsetAlignment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, minIndirectCommandsBufferOffsetAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::minIndirectCommandsBufferOffsetAlignment)));
    
    sVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.Set(Napi::String::New(env, "minIndirectCommandsBufferOffsetAlignment"), obj);
  }
  sVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV"), sVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV);
  Napi::Object sVkGraphicsShaderGroupCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsShaderGroupCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsShaderGroupCreateInfoNV::sType)));
    
    sVkGraphicsShaderGroupCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsShaderGroupCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsShaderGroupCreateInfoNV::pNext)));
    
    sVkGraphicsShaderGroupCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsShaderGroupCreateInfoNV, stageCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsShaderGroupCreateInfoNV::stageCount)));
    
    sVkGraphicsShaderGroupCreateInfoNV.Set(Napi::String::New(env, "stageCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsShaderGroupCreateInfoNV, pStages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsShaderGroupCreateInfoNV::pStages)));
    
    sVkGraphicsShaderGroupCreateInfoNV.Set(Napi::String::New(env, "pStages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsShaderGroupCreateInfoNV, pVertexInputState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsShaderGroupCreateInfoNV::pVertexInputState)));
    
    sVkGraphicsShaderGroupCreateInfoNV.Set(Napi::String::New(env, "pVertexInputState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsShaderGroupCreateInfoNV, pTessellationState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsShaderGroupCreateInfoNV::pTessellationState)));
    
    sVkGraphicsShaderGroupCreateInfoNV.Set(Napi::String::New(env, "pTessellationState"), obj);
  }
  sVkGraphicsShaderGroupCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsShaderGroupCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkGraphicsShaderGroupCreateInfoNV"), sVkGraphicsShaderGroupCreateInfoNV);
  Napi::Object sVkGraphicsPipelineShaderGroupsCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineShaderGroupsCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineShaderGroupsCreateInfoNV::sType)));
    
    sVkGraphicsPipelineShaderGroupsCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineShaderGroupsCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineShaderGroupsCreateInfoNV::pNext)));
    
    sVkGraphicsPipelineShaderGroupsCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineShaderGroupsCreateInfoNV, groupCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineShaderGroupsCreateInfoNV::groupCount)));
    
    sVkGraphicsPipelineShaderGroupsCreateInfoNV.Set(Napi::String::New(env, "groupCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineShaderGroupsCreateInfoNV, pGroups)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineShaderGroupsCreateInfoNV::pGroups)));
    
    sVkGraphicsPipelineShaderGroupsCreateInfoNV.Set(Napi::String::New(env, "pGroups"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineShaderGroupsCreateInfoNV, pipelineCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineShaderGroupsCreateInfoNV::pipelineCount)));
    
    sVkGraphicsPipelineShaderGroupsCreateInfoNV.Set(Napi::String::New(env, "pipelineCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGraphicsPipelineShaderGroupsCreateInfoNV, pPipelines)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineShaderGroupsCreateInfoNV::pPipelines)));
    
    sVkGraphicsPipelineShaderGroupsCreateInfoNV.Set(Napi::String::New(env, "pPipelines"), obj);
  }
  sVkGraphicsPipelineShaderGroupsCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkGraphicsPipelineShaderGroupsCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkGraphicsPipelineShaderGroupsCreateInfoNV"), sVkGraphicsPipelineShaderGroupsCreateInfoNV);
  Napi::Object sVkBindShaderGroupIndirectCommandNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindShaderGroupIndirectCommandNV, groupIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindShaderGroupIndirectCommandNV::groupIndex)));
    
    sVkBindShaderGroupIndirectCommandNV.Set(Napi::String::New(env, "groupIndex"), obj);
  }
  sVkBindShaderGroupIndirectCommandNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindShaderGroupIndirectCommandNV)));
  out.Set(Napi::String::New(env, "VkBindShaderGroupIndirectCommandNV"), sVkBindShaderGroupIndirectCommandNV);
  Napi::Object sVkBindIndexBufferIndirectCommandNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindIndexBufferIndirectCommandNV, bufferAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindIndexBufferIndirectCommandNV::bufferAddress)));
    
    sVkBindIndexBufferIndirectCommandNV.Set(Napi::String::New(env, "bufferAddress"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindIndexBufferIndirectCommandNV, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindIndexBufferIndirectCommandNV::size)));
    
    sVkBindIndexBufferIndirectCommandNV.Set(Napi::String::New(env, "size"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindIndexBufferIndirectCommandNV, indexType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindIndexBufferIndirectCommandNV::indexType)));
    
    sVkBindIndexBufferIndirectCommandNV.Set(Napi::String::New(env, "indexType"), obj);
  }
  sVkBindIndexBufferIndirectCommandNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindIndexBufferIndirectCommandNV)));
  out.Set(Napi::String::New(env, "VkBindIndexBufferIndirectCommandNV"), sVkBindIndexBufferIndirectCommandNV);
  Napi::Object sVkBindVertexBufferIndirectCommandNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindVertexBufferIndirectCommandNV, bufferAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindVertexBufferIndirectCommandNV::bufferAddress)));
    
    sVkBindVertexBufferIndirectCommandNV.Set(Napi::String::New(env, "bufferAddress"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindVertexBufferIndirectCommandNV, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindVertexBufferIndirectCommandNV::size)));
    
    sVkBindVertexBufferIndirectCommandNV.Set(Napi::String::New(env, "size"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindVertexBufferIndirectCommandNV, stride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindVertexBufferIndirectCommandNV::stride)));
    
    sVkBindVertexBufferIndirectCommandNV.Set(Napi::String::New(env, "stride"), obj);
  }
  sVkBindVertexBufferIndirectCommandNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindVertexBufferIndirectCommandNV)));
  out.Set(Napi::String::New(env, "VkBindVertexBufferIndirectCommandNV"), sVkBindVertexBufferIndirectCommandNV);
  Napi::Object sVkSetStateFlagsIndirectCommandNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSetStateFlagsIndirectCommandNV, data)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSetStateFlagsIndirectCommandNV::data)));
    
    sVkSetStateFlagsIndirectCommandNV.Set(Napi::String::New(env, "data"), obj);
  }
  sVkSetStateFlagsIndirectCommandNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkSetStateFlagsIndirectCommandNV)));
  out.Set(Napi::String::New(env, "VkSetStateFlagsIndirectCommandNV"), sVkSetStateFlagsIndirectCommandNV);
  Napi::Object sVkIndirectCommandsStreamNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsStreamNV, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsStreamNV::buffer)));
    
    sVkIndirectCommandsStreamNV.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsStreamNV, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsStreamNV::offset)));
    
    sVkIndirectCommandsStreamNV.Set(Napi::String::New(env, "offset"), obj);
  }
  sVkIndirectCommandsStreamNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsStreamNV)));
  out.Set(Napi::String::New(env, "VkIndirectCommandsStreamNV"), sVkIndirectCommandsStreamNV);
  Napi::Object sVkIndirectCommandsLayoutTokenNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV::sType)));
    
    sVkIndirectCommandsLayoutTokenNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV::pNext)));
    
    sVkIndirectCommandsLayoutTokenNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, tokenType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV::tokenType)));
    
    sVkIndirectCommandsLayoutTokenNV.Set(Napi::String::New(env, "tokenType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, stream)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV::stream)));
    
    sVkIndirectCommandsLayoutTokenNV.Set(Napi::String::New(env, "stream"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV::offset)));
    
    sVkIndirectCommandsLayoutTokenNV.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, vertexBindingUnit)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV::vertexBindingUnit)));
    
    sVkIndirectCommandsLayoutTokenNV.Set(Napi::String::New(env, "vertexBindingUnit"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, vertexDynamicStride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV::vertexDynamicStride)));
    
    sVkIndirectCommandsLayoutTokenNV.Set(Napi::String::New(env, "vertexDynamicStride"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, pushconstantPipelineLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV::pushconstantPipelineLayout)));
    
    sVkIndirectCommandsLayoutTokenNV.Set(Napi::String::New(env, "pushconstantPipelineLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, pushconstantShaderStageFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV::pushconstantShaderStageFlags)));
    
    sVkIndirectCommandsLayoutTokenNV.Set(Napi::String::New(env, "pushconstantShaderStageFlags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, pushconstantOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV::pushconstantOffset)));
    
    sVkIndirectCommandsLayoutTokenNV.Set(Napi::String::New(env, "pushconstantOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, pushconstantSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV::pushconstantSize)));
    
    sVkIndirectCommandsLayoutTokenNV.Set(Napi::String::New(env, "pushconstantSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, indirectStateFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV::indirectStateFlags)));
    
    sVkIndirectCommandsLayoutTokenNV.Set(Napi::String::New(env, "indirectStateFlags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, indexTypeCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV::indexTypeCount)));
    
    sVkIndirectCommandsLayoutTokenNV.Set(Napi::String::New(env, "indexTypeCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, pIndexTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV::pIndexTypes)));
    
    sVkIndirectCommandsLayoutTokenNV.Set(Napi::String::New(env, "pIndexTypes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, pIndexTypeValues)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV::pIndexTypeValues)));
    
    sVkIndirectCommandsLayoutTokenNV.Set(Napi::String::New(env, "pIndexTypeValues"), obj);
  }
  sVkIndirectCommandsLayoutTokenNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNV)));
  out.Set(Napi::String::New(env, "VkIndirectCommandsLayoutTokenNV"), sVkIndirectCommandsLayoutTokenNV);
  Napi::Object sVkIndirectCommandsLayoutCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutCreateInfoNV::sType)));
    
    sVkIndirectCommandsLayoutCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutCreateInfoNV::pNext)));
    
    sVkIndirectCommandsLayoutCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutCreateInfoNV::flags)));
    
    sVkIndirectCommandsLayoutCreateInfoNV.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, pipelineBindPoint)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutCreateInfoNV::pipelineBindPoint)));
    
    sVkIndirectCommandsLayoutCreateInfoNV.Set(Napi::String::New(env, "pipelineBindPoint"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, tokenCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutCreateInfoNV::tokenCount)));
    
    sVkIndirectCommandsLayoutCreateInfoNV.Set(Napi::String::New(env, "tokenCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, pTokens)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutCreateInfoNV::pTokens)));
    
    sVkIndirectCommandsLayoutCreateInfoNV.Set(Napi::String::New(env, "pTokens"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, streamCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutCreateInfoNV::streamCount)));
    
    sVkIndirectCommandsLayoutCreateInfoNV.Set(Napi::String::New(env, "streamCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, pStreamStrides)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutCreateInfoNV::pStreamStrides)));
    
    sVkIndirectCommandsLayoutCreateInfoNV.Set(Napi::String::New(env, "pStreamStrides"), obj);
  }
  sVkIndirectCommandsLayoutCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkIndirectCommandsLayoutCreateInfoNV"), sVkIndirectCommandsLayoutCreateInfoNV);
  Napi::Object sVkGeneratedCommandsInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV::sType)));
    
    sVkGeneratedCommandsInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV::pNext)));
    
    sVkGeneratedCommandsInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, pipelineBindPoint)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV::pipelineBindPoint)));
    
    sVkGeneratedCommandsInfoNV.Set(Napi::String::New(env, "pipelineBindPoint"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, pipeline)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV::pipeline)));
    
    sVkGeneratedCommandsInfoNV.Set(Napi::String::New(env, "pipeline"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, indirectCommandsLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV::indirectCommandsLayout)));
    
    sVkGeneratedCommandsInfoNV.Set(Napi::String::New(env, "indirectCommandsLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, streamCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV::streamCount)));
    
    sVkGeneratedCommandsInfoNV.Set(Napi::String::New(env, "streamCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, pStreams)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV::pStreams)));
    
    sVkGeneratedCommandsInfoNV.Set(Napi::String::New(env, "pStreams"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, sequencesCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV::sequencesCount)));
    
    sVkGeneratedCommandsInfoNV.Set(Napi::String::New(env, "sequencesCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, preprocessBuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV::preprocessBuffer)));
    
    sVkGeneratedCommandsInfoNV.Set(Napi::String::New(env, "preprocessBuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, preprocessOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV::preprocessOffset)));
    
    sVkGeneratedCommandsInfoNV.Set(Napi::String::New(env, "preprocessOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, preprocessSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV::preprocessSize)));
    
    sVkGeneratedCommandsInfoNV.Set(Napi::String::New(env, "preprocessSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, sequencesCountBuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV::sequencesCountBuffer)));
    
    sVkGeneratedCommandsInfoNV.Set(Napi::String::New(env, "sequencesCountBuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, sequencesCountOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV::sequencesCountOffset)));
    
    sVkGeneratedCommandsInfoNV.Set(Napi::String::New(env, "sequencesCountOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, sequencesIndexBuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV::sequencesIndexBuffer)));
    
    sVkGeneratedCommandsInfoNV.Set(Napi::String::New(env, "sequencesIndexBuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, sequencesIndexOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV::sequencesIndexOffset)));
    
    sVkGeneratedCommandsInfoNV.Set(Napi::String::New(env, "sequencesIndexOffset"), obj);
  }
  sVkGeneratedCommandsInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsInfoNV)));
  out.Set(Napi::String::New(env, "VkGeneratedCommandsInfoNV"), sVkGeneratedCommandsInfoNV);
  Napi::Object sVkGeneratedCommandsMemoryRequirementsInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsMemoryRequirementsInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsMemoryRequirementsInfoNV::sType)));
    
    sVkGeneratedCommandsMemoryRequirementsInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsMemoryRequirementsInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsMemoryRequirementsInfoNV::pNext)));
    
    sVkGeneratedCommandsMemoryRequirementsInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsMemoryRequirementsInfoNV, pipelineBindPoint)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsMemoryRequirementsInfoNV::pipelineBindPoint)));
    
    sVkGeneratedCommandsMemoryRequirementsInfoNV.Set(Napi::String::New(env, "pipelineBindPoint"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsMemoryRequirementsInfoNV, pipeline)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsMemoryRequirementsInfoNV::pipeline)));
    
    sVkGeneratedCommandsMemoryRequirementsInfoNV.Set(Napi::String::New(env, "pipeline"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsMemoryRequirementsInfoNV, indirectCommandsLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsMemoryRequirementsInfoNV::indirectCommandsLayout)));
    
    sVkGeneratedCommandsMemoryRequirementsInfoNV.Set(Napi::String::New(env, "indirectCommandsLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeneratedCommandsMemoryRequirementsInfoNV, maxSequencesCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsMemoryRequirementsInfoNV::maxSequencesCount)));
    
    sVkGeneratedCommandsMemoryRequirementsInfoNV.Set(Napi::String::New(env, "maxSequencesCount"), obj);
  }
  sVkGeneratedCommandsMemoryRequirementsInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeneratedCommandsMemoryRequirementsInfoNV)));
  out.Set(Napi::String::New(env, "VkGeneratedCommandsMemoryRequirementsInfoNV"), sVkGeneratedCommandsMemoryRequirementsInfoNV);
  Napi::Object sVkPhysicalDeviceFeatures2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures2::sType)));
    
    sVkPhysicalDeviceFeatures2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures2::pNext)));
    
    sVkPhysicalDeviceFeatures2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures2, features)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures2::features)));
    
    sVkPhysicalDeviceFeatures2.Set(Napi::String::New(env, "features"), obj);
  }
  sVkPhysicalDeviceFeatures2.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures2)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFeatures2"), sVkPhysicalDeviceFeatures2);
  Napi::Object sVkPhysicalDeviceFeatures2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures2KHR::sType)));
    
    sVkPhysicalDeviceFeatures2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures2KHR::pNext)));
    
    sVkPhysicalDeviceFeatures2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures2KHR, features)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures2KHR::features)));
    
    sVkPhysicalDeviceFeatures2KHR.Set(Napi::String::New(env, "features"), obj);
  }
  sVkPhysicalDeviceFeatures2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures2KHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFeatures2KHR"), sVkPhysicalDeviceFeatures2KHR);
  Napi::Object sVkPhysicalDeviceProperties2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties2::sType)));
    
    sVkPhysicalDeviceProperties2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties2::pNext)));
    
    sVkPhysicalDeviceProperties2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties2, properties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties2::properties)));
    
    sVkPhysicalDeviceProperties2.Set(Napi::String::New(env, "properties"), obj);
  }
  sVkPhysicalDeviceProperties2.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties2)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceProperties2"), sVkPhysicalDeviceProperties2);
  Napi::Object sVkPhysicalDeviceProperties2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties2KHR::sType)));
    
    sVkPhysicalDeviceProperties2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties2KHR::pNext)));
    
    sVkPhysicalDeviceProperties2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties2KHR, properties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties2KHR::properties)));
    
    sVkPhysicalDeviceProperties2KHR.Set(Napi::String::New(env, "properties"), obj);
  }
  sVkPhysicalDeviceProperties2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties2KHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceProperties2KHR"), sVkPhysicalDeviceProperties2KHR);
  Napi::Object sVkFormatProperties2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFormatProperties2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFormatProperties2::sType)));
    
    sVkFormatProperties2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFormatProperties2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFormatProperties2::pNext)));
    
    sVkFormatProperties2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFormatProperties2, formatProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFormatProperties2::formatProperties)));
    
    sVkFormatProperties2.Set(Napi::String::New(env, "formatProperties"), obj);
  }
  sVkFormatProperties2.Set(strByteLength, Napi::Number::New(env, sizeof(VkFormatProperties2)));
  out.Set(Napi::String::New(env, "VkFormatProperties2"), sVkFormatProperties2);
  Napi::Object sVkFormatProperties2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFormatProperties2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFormatProperties2KHR::sType)));
    
    sVkFormatProperties2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFormatProperties2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFormatProperties2KHR::pNext)));
    
    sVkFormatProperties2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFormatProperties2KHR, formatProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFormatProperties2KHR::formatProperties)));
    
    sVkFormatProperties2KHR.Set(Napi::String::New(env, "formatProperties"), obj);
  }
  sVkFormatProperties2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkFormatProperties2KHR)));
  out.Set(Napi::String::New(env, "VkFormatProperties2KHR"), sVkFormatProperties2KHR);
  Napi::Object sVkImageFormatProperties2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatProperties2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatProperties2::sType)));
    
    sVkImageFormatProperties2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatProperties2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatProperties2::pNext)));
    
    sVkImageFormatProperties2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatProperties2, imageFormatProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatProperties2::imageFormatProperties)));
    
    sVkImageFormatProperties2.Set(Napi::String::New(env, "imageFormatProperties"), obj);
  }
  sVkImageFormatProperties2.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatProperties2)));
  out.Set(Napi::String::New(env, "VkImageFormatProperties2"), sVkImageFormatProperties2);
  Napi::Object sVkImageFormatProperties2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatProperties2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatProperties2KHR::sType)));
    
    sVkImageFormatProperties2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatProperties2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatProperties2KHR::pNext)));
    
    sVkImageFormatProperties2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatProperties2KHR, imageFormatProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatProperties2KHR::imageFormatProperties)));
    
    sVkImageFormatProperties2KHR.Set(Napi::String::New(env, "imageFormatProperties"), obj);
  }
  sVkImageFormatProperties2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatProperties2KHR)));
  out.Set(Napi::String::New(env, "VkImageFormatProperties2KHR"), sVkImageFormatProperties2KHR);
  Napi::Object sVkPhysicalDeviceImageFormatInfo2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2::sType)));
    
    sVkPhysicalDeviceImageFormatInfo2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2::pNext)));
    
    sVkPhysicalDeviceImageFormatInfo2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2::format)));
    
    sVkPhysicalDeviceImageFormatInfo2.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2::type)));
    
    sVkPhysicalDeviceImageFormatInfo2.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2, tiling)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2::tiling)));
    
    sVkPhysicalDeviceImageFormatInfo2.Set(Napi::String::New(env, "tiling"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2::usage)));
    
    sVkPhysicalDeviceImageFormatInfo2.Set(Napi::String::New(env, "usage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2::flags)));
    
    sVkPhysicalDeviceImageFormatInfo2.Set(Napi::String::New(env, "flags"), obj);
  }
  sVkPhysicalDeviceImageFormatInfo2.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceImageFormatInfo2"), sVkPhysicalDeviceImageFormatInfo2);
  Napi::Object sVkPhysicalDeviceImageFormatInfo2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2KHR::sType)));
    
    sVkPhysicalDeviceImageFormatInfo2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2KHR::pNext)));
    
    sVkPhysicalDeviceImageFormatInfo2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2KHR, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2KHR::format)));
    
    sVkPhysicalDeviceImageFormatInfo2KHR.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2KHR, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2KHR::type)));
    
    sVkPhysicalDeviceImageFormatInfo2KHR.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2KHR, tiling)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2KHR::tiling)));
    
    sVkPhysicalDeviceImageFormatInfo2KHR.Set(Napi::String::New(env, "tiling"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2KHR, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2KHR::usage)));
    
    sVkPhysicalDeviceImageFormatInfo2KHR.Set(Napi::String::New(env, "usage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2KHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2KHR::flags)));
    
    sVkPhysicalDeviceImageFormatInfo2KHR.Set(Napi::String::New(env, "flags"), obj);
  }
  sVkPhysicalDeviceImageFormatInfo2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2KHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceImageFormatInfo2KHR"), sVkPhysicalDeviceImageFormatInfo2KHR);
  Napi::Object sVkQueueFamilyProperties2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueueFamilyProperties2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyProperties2::sType)));
    
    sVkQueueFamilyProperties2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueueFamilyProperties2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyProperties2::pNext)));
    
    sVkQueueFamilyProperties2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueueFamilyProperties2, queueFamilyProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyProperties2::queueFamilyProperties)));
    
    sVkQueueFamilyProperties2.Set(Napi::String::New(env, "queueFamilyProperties"), obj);
  }
  sVkQueueFamilyProperties2.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyProperties2)));
  out.Set(Napi::String::New(env, "VkQueueFamilyProperties2"), sVkQueueFamilyProperties2);
  Napi::Object sVkQueueFamilyProperties2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueueFamilyProperties2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyProperties2KHR::sType)));
    
    sVkQueueFamilyProperties2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueueFamilyProperties2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyProperties2KHR::pNext)));
    
    sVkQueueFamilyProperties2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueueFamilyProperties2KHR, queueFamilyProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyProperties2KHR::queueFamilyProperties)));
    
    sVkQueueFamilyProperties2KHR.Set(Napi::String::New(env, "queueFamilyProperties"), obj);
  }
  sVkQueueFamilyProperties2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyProperties2KHR)));
  out.Set(Napi::String::New(env, "VkQueueFamilyProperties2KHR"), sVkQueueFamilyProperties2KHR);
  Napi::Object sVkPhysicalDeviceMemoryProperties2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties2::sType)));
    
    sVkPhysicalDeviceMemoryProperties2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties2::pNext)));
    
    sVkPhysicalDeviceMemoryProperties2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties2, memoryProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties2::memoryProperties)));
    
    sVkPhysicalDeviceMemoryProperties2.Set(Napi::String::New(env, "memoryProperties"), obj);
  }
  sVkPhysicalDeviceMemoryProperties2.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties2)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceMemoryProperties2"), sVkPhysicalDeviceMemoryProperties2);
  Napi::Object sVkPhysicalDeviceMemoryProperties2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties2KHR::sType)));
    
    sVkPhysicalDeviceMemoryProperties2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties2KHR::pNext)));
    
    sVkPhysicalDeviceMemoryProperties2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties2KHR, memoryProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties2KHR::memoryProperties)));
    
    sVkPhysicalDeviceMemoryProperties2KHR.Set(Napi::String::New(env, "memoryProperties"), obj);
  }
  sVkPhysicalDeviceMemoryProperties2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties2KHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceMemoryProperties2KHR"), sVkPhysicalDeviceMemoryProperties2KHR);
  Napi::Object sVkSparseImageFormatProperties2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageFormatProperties2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageFormatProperties2::sType)));
    
    sVkSparseImageFormatProperties2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageFormatProperties2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageFormatProperties2::pNext)));
    
    sVkSparseImageFormatProperties2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageFormatProperties2, properties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageFormatProperties2::properties)));
    
    sVkSparseImageFormatProperties2.Set(Napi::String::New(env, "properties"), obj);
  }
  sVkSparseImageFormatProperties2.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageFormatProperties2)));
  out.Set(Napi::String::New(env, "VkSparseImageFormatProperties2"), sVkSparseImageFormatProperties2);
  Napi::Object sVkSparseImageFormatProperties2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageFormatProperties2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageFormatProperties2KHR::sType)));
    
    sVkSparseImageFormatProperties2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageFormatProperties2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageFormatProperties2KHR::pNext)));
    
    sVkSparseImageFormatProperties2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageFormatProperties2KHR, properties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageFormatProperties2KHR::properties)));
    
    sVkSparseImageFormatProperties2KHR.Set(Napi::String::New(env, "properties"), obj);
  }
  sVkSparseImageFormatProperties2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageFormatProperties2KHR)));
  out.Set(Napi::String::New(env, "VkSparseImageFormatProperties2KHR"), sVkSparseImageFormatProperties2KHR);
  Napi::Object sVkPhysicalDeviceSparseImageFormatInfo2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2::sType)));
    
    sVkPhysicalDeviceSparseImageFormatInfo2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2::pNext)));
    
    sVkPhysicalDeviceSparseImageFormatInfo2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2::format)));
    
    sVkPhysicalDeviceSparseImageFormatInfo2.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2::type)));
    
    sVkPhysicalDeviceSparseImageFormatInfo2.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2, samples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2::samples)));
    
    sVkPhysicalDeviceSparseImageFormatInfo2.Set(Napi::String::New(env, "samples"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2::usage)));
    
    sVkPhysicalDeviceSparseImageFormatInfo2.Set(Napi::String::New(env, "usage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2, tiling)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2::tiling)));
    
    sVkPhysicalDeviceSparseImageFormatInfo2.Set(Napi::String::New(env, "tiling"), obj);
  }
  sVkPhysicalDeviceSparseImageFormatInfo2.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceSparseImageFormatInfo2"), sVkPhysicalDeviceSparseImageFormatInfo2);
  Napi::Object sVkPhysicalDeviceSparseImageFormatInfo2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR::sType)));
    
    sVkPhysicalDeviceSparseImageFormatInfo2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR::pNext)));
    
    sVkPhysicalDeviceSparseImageFormatInfo2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2KHR, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR::format)));
    
    sVkPhysicalDeviceSparseImageFormatInfo2KHR.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2KHR, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR::type)));
    
    sVkPhysicalDeviceSparseImageFormatInfo2KHR.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2KHR, samples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR::samples)));
    
    sVkPhysicalDeviceSparseImageFormatInfo2KHR.Set(Napi::String::New(env, "samples"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2KHR, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR::usage)));
    
    sVkPhysicalDeviceSparseImageFormatInfo2KHR.Set(Napi::String::New(env, "usage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2KHR, tiling)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR::tiling)));
    
    sVkPhysicalDeviceSparseImageFormatInfo2KHR.Set(Napi::String::New(env, "tiling"), obj);
  }
  sVkPhysicalDeviceSparseImageFormatInfo2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceSparseImageFormatInfo2KHR"), sVkPhysicalDeviceSparseImageFormatInfo2KHR);
  Napi::Object sVkPhysicalDevicePushDescriptorPropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePushDescriptorPropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePushDescriptorPropertiesKHR::sType)));
    
    sVkPhysicalDevicePushDescriptorPropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePushDescriptorPropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePushDescriptorPropertiesKHR::pNext)));
    
    sVkPhysicalDevicePushDescriptorPropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePushDescriptorPropertiesKHR, maxPushDescriptors)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePushDescriptorPropertiesKHR::maxPushDescriptors)));
    
    sVkPhysicalDevicePushDescriptorPropertiesKHR.Set(Napi::String::New(env, "maxPushDescriptors"), obj);
  }
  sVkPhysicalDevicePushDescriptorPropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePushDescriptorPropertiesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDevicePushDescriptorPropertiesKHR"), sVkPhysicalDevicePushDescriptorPropertiesKHR);
  Napi::Object sVkConformanceVersion = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkConformanceVersion, major)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkConformanceVersion::major)));
    
    sVkConformanceVersion.Set(Napi::String::New(env, "major"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkConformanceVersion, minor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkConformanceVersion::minor)));
    
    sVkConformanceVersion.Set(Napi::String::New(env, "minor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkConformanceVersion, subminor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkConformanceVersion::subminor)));
    
    sVkConformanceVersion.Set(Napi::String::New(env, "subminor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkConformanceVersion, patch)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkConformanceVersion::patch)));
    
    sVkConformanceVersion.Set(Napi::String::New(env, "patch"), obj);
  }
  sVkConformanceVersion.Set(strByteLength, Napi::Number::New(env, sizeof(VkConformanceVersion)));
  out.Set(Napi::String::New(env, "VkConformanceVersion"), sVkConformanceVersion);
  Napi::Object sVkConformanceVersionKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkConformanceVersionKHR, major)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkConformanceVersionKHR::major)));
    
    sVkConformanceVersionKHR.Set(Napi::String::New(env, "major"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkConformanceVersionKHR, minor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkConformanceVersionKHR::minor)));
    
    sVkConformanceVersionKHR.Set(Napi::String::New(env, "minor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkConformanceVersionKHR, subminor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkConformanceVersionKHR::subminor)));
    
    sVkConformanceVersionKHR.Set(Napi::String::New(env, "subminor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkConformanceVersionKHR, patch)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkConformanceVersionKHR::patch)));
    
    sVkConformanceVersionKHR.Set(Napi::String::New(env, "patch"), obj);
  }
  sVkConformanceVersionKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkConformanceVersionKHR)));
  out.Set(Napi::String::New(env, "VkConformanceVersionKHR"), sVkConformanceVersionKHR);
  Napi::Object sVkPhysicalDeviceDriverProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDriverProperties::sType)));
    
    sVkPhysicalDeviceDriverProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDriverProperties::pNext)));
    
    sVkPhysicalDeviceDriverProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverProperties, driverID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDriverProperties::driverID)));
    
    sVkPhysicalDeviceDriverProperties.Set(Napi::String::New(env, "driverID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverProperties, driverName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDriverProperties::driverName)));
    
    sVkPhysicalDeviceDriverProperties.Set(Napi::String::New(env, "driverName"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverProperties, driverInfo)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDriverProperties::driverInfo)));
    
    sVkPhysicalDeviceDriverProperties.Set(Napi::String::New(env, "driverInfo"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverProperties, conformanceVersion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDriverProperties::conformanceVersion)));
    
    sVkPhysicalDeviceDriverProperties.Set(Napi::String::New(env, "conformanceVersion"), obj);
  }
  sVkPhysicalDeviceDriverProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDriverProperties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceDriverProperties"), sVkPhysicalDeviceDriverProperties);
  Napi::Object sVkPhysicalDeviceDriverPropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverPropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDriverPropertiesKHR::sType)));
    
    sVkPhysicalDeviceDriverPropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverPropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDriverPropertiesKHR::pNext)));
    
    sVkPhysicalDeviceDriverPropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverPropertiesKHR, driverID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDriverPropertiesKHR::driverID)));
    
    sVkPhysicalDeviceDriverPropertiesKHR.Set(Napi::String::New(env, "driverID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverPropertiesKHR, driverName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDriverPropertiesKHR::driverName)));
    
    sVkPhysicalDeviceDriverPropertiesKHR.Set(Napi::String::New(env, "driverName"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverPropertiesKHR, driverInfo)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDriverPropertiesKHR::driverInfo)));
    
    sVkPhysicalDeviceDriverPropertiesKHR.Set(Napi::String::New(env, "driverInfo"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverPropertiesKHR, conformanceVersion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDriverPropertiesKHR::conformanceVersion)));
    
    sVkPhysicalDeviceDriverPropertiesKHR.Set(Napi::String::New(env, "conformanceVersion"), obj);
  }
  sVkPhysicalDeviceDriverPropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDriverPropertiesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceDriverPropertiesKHR"), sVkPhysicalDeviceDriverPropertiesKHR);
  Napi::Object sVkPresentRegionsKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentRegionsKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentRegionsKHR::sType)));
    
    sVkPresentRegionsKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentRegionsKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentRegionsKHR::pNext)));
    
    sVkPresentRegionsKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentRegionsKHR, swapchainCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentRegionsKHR::swapchainCount)));
    
    sVkPresentRegionsKHR.Set(Napi::String::New(env, "swapchainCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentRegionsKHR, pRegions)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentRegionsKHR::pRegions)));
    
    sVkPresentRegionsKHR.Set(Napi::String::New(env, "pRegions"), obj);
  }
  sVkPresentRegionsKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentRegionsKHR)));
  out.Set(Napi::String::New(env, "VkPresentRegionsKHR"), sVkPresentRegionsKHR);
  Napi::Object sVkPresentRegionKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentRegionKHR, rectangleCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentRegionKHR::rectangleCount)));
    
    sVkPresentRegionKHR.Set(Napi::String::New(env, "rectangleCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentRegionKHR, pRectangles)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentRegionKHR::pRectangles)));
    
    sVkPresentRegionKHR.Set(Napi::String::New(env, "pRectangles"), obj);
  }
  sVkPresentRegionKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentRegionKHR)));
  out.Set(Napi::String::New(env, "VkPresentRegionKHR"), sVkPresentRegionKHR);
  Napi::Object sVkRectLayerKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRectLayerKHR, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRectLayerKHR::offset)));
    
    sVkRectLayerKHR.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRectLayerKHR, extent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRectLayerKHR::extent)));
    
    sVkRectLayerKHR.Set(Napi::String::New(env, "extent"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRectLayerKHR, layer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRectLayerKHR::layer)));
    
    sVkRectLayerKHR.Set(Napi::String::New(env, "layer"), obj);
  }
  sVkRectLayerKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkRectLayerKHR)));
  out.Set(Napi::String::New(env, "VkRectLayerKHR"), sVkRectLayerKHR);
  Napi::Object sVkPhysicalDeviceVariablePointersFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointersFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointersFeatures::sType)));
    
    sVkPhysicalDeviceVariablePointersFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointersFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointersFeatures::pNext)));
    
    sVkPhysicalDeviceVariablePointersFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointersFeatures, variablePointersStorageBuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointersFeatures::variablePointersStorageBuffer)));
    
    sVkPhysicalDeviceVariablePointersFeatures.Set(Napi::String::New(env, "variablePointersStorageBuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointersFeatures, variablePointers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointersFeatures::variablePointers)));
    
    sVkPhysicalDeviceVariablePointersFeatures.Set(Napi::String::New(env, "variablePointers"), obj);
  }
  sVkPhysicalDeviceVariablePointersFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointersFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceVariablePointersFeatures"), sVkPhysicalDeviceVariablePointersFeatures);
  Napi::Object sVkPhysicalDeviceVariablePointersFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointersFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointersFeaturesKHR::sType)));
    
    sVkPhysicalDeviceVariablePointersFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointersFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointersFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceVariablePointersFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointersFeaturesKHR, variablePointersStorageBuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointersFeaturesKHR::variablePointersStorageBuffer)));
    
    sVkPhysicalDeviceVariablePointersFeaturesKHR.Set(Napi::String::New(env, "variablePointersStorageBuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointersFeaturesKHR, variablePointers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointersFeaturesKHR::variablePointers)));
    
    sVkPhysicalDeviceVariablePointersFeaturesKHR.Set(Napi::String::New(env, "variablePointers"), obj);
  }
  sVkPhysicalDeviceVariablePointersFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointersFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceVariablePointersFeaturesKHR"), sVkPhysicalDeviceVariablePointersFeaturesKHR);
  Napi::Object sVkPhysicalDeviceVariablePointerFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointerFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointerFeaturesKHR::sType)));
    
    sVkPhysicalDeviceVariablePointerFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointerFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointerFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceVariablePointerFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointerFeaturesKHR, variablePointersStorageBuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointerFeaturesKHR::variablePointersStorageBuffer)));
    
    sVkPhysicalDeviceVariablePointerFeaturesKHR.Set(Napi::String::New(env, "variablePointersStorageBuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointerFeaturesKHR, variablePointers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointerFeaturesKHR::variablePointers)));
    
    sVkPhysicalDeviceVariablePointerFeaturesKHR.Set(Napi::String::New(env, "variablePointers"), obj);
  }
  sVkPhysicalDeviceVariablePointerFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointerFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceVariablePointerFeaturesKHR"), sVkPhysicalDeviceVariablePointerFeaturesKHR);
  Napi::Object sVkPhysicalDeviceVariablePointerFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointerFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointerFeatures::sType)));
    
    sVkPhysicalDeviceVariablePointerFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointerFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointerFeatures::pNext)));
    
    sVkPhysicalDeviceVariablePointerFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointerFeatures, variablePointersStorageBuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointerFeatures::variablePointersStorageBuffer)));
    
    sVkPhysicalDeviceVariablePointerFeatures.Set(Napi::String::New(env, "variablePointersStorageBuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointerFeatures, variablePointers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointerFeatures::variablePointers)));
    
    sVkPhysicalDeviceVariablePointerFeatures.Set(Napi::String::New(env, "variablePointers"), obj);
  }
  sVkPhysicalDeviceVariablePointerFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointerFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceVariablePointerFeatures"), sVkPhysicalDeviceVariablePointerFeatures);
  Napi::Object sVkExternalMemoryProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryProperties, externalMemoryFeatures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryProperties::externalMemoryFeatures)));
    
    sVkExternalMemoryProperties.Set(Napi::String::New(env, "externalMemoryFeatures"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryProperties, exportFromImportedHandleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryProperties::exportFromImportedHandleTypes)));
    
    sVkExternalMemoryProperties.Set(Napi::String::New(env, "exportFromImportedHandleTypes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryProperties, compatibleHandleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryProperties::compatibleHandleTypes)));
    
    sVkExternalMemoryProperties.Set(Napi::String::New(env, "compatibleHandleTypes"), obj);
  }
  sVkExternalMemoryProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryProperties)));
  out.Set(Napi::String::New(env, "VkExternalMemoryProperties"), sVkExternalMemoryProperties);
  Napi::Object sVkExternalMemoryPropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryPropertiesKHR, externalMemoryFeatures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryPropertiesKHR::externalMemoryFeatures)));
    
    sVkExternalMemoryPropertiesKHR.Set(Napi::String::New(env, "externalMemoryFeatures"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryPropertiesKHR, exportFromImportedHandleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryPropertiesKHR::exportFromImportedHandleTypes)));
    
    sVkExternalMemoryPropertiesKHR.Set(Napi::String::New(env, "exportFromImportedHandleTypes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryPropertiesKHR, compatibleHandleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryPropertiesKHR::compatibleHandleTypes)));
    
    sVkExternalMemoryPropertiesKHR.Set(Napi::String::New(env, "compatibleHandleTypes"), obj);
  }
  sVkExternalMemoryPropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryPropertiesKHR)));
  out.Set(Napi::String::New(env, "VkExternalMemoryPropertiesKHR"), sVkExternalMemoryPropertiesKHR);
  Napi::Object sVkPhysicalDeviceExternalImageFormatInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalImageFormatInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalImageFormatInfo::sType)));
    
    sVkPhysicalDeviceExternalImageFormatInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalImageFormatInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalImageFormatInfo::pNext)));
    
    sVkPhysicalDeviceExternalImageFormatInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalImageFormatInfo, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalImageFormatInfo::handleType)));
    
    sVkPhysicalDeviceExternalImageFormatInfo.Set(Napi::String::New(env, "handleType"), obj);
  }
  sVkPhysicalDeviceExternalImageFormatInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalImageFormatInfo)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalImageFormatInfo"), sVkPhysicalDeviceExternalImageFormatInfo);
  Napi::Object sVkPhysicalDeviceExternalImageFormatInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalImageFormatInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalImageFormatInfoKHR::sType)));
    
    sVkPhysicalDeviceExternalImageFormatInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalImageFormatInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalImageFormatInfoKHR::pNext)));
    
    sVkPhysicalDeviceExternalImageFormatInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalImageFormatInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalImageFormatInfoKHR::handleType)));
    
    sVkPhysicalDeviceExternalImageFormatInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  sVkPhysicalDeviceExternalImageFormatInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalImageFormatInfoKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalImageFormatInfoKHR"), sVkPhysicalDeviceExternalImageFormatInfoKHR);
  Napi::Object sVkExternalImageFormatProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalImageFormatProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalImageFormatProperties::sType)));
    
    sVkExternalImageFormatProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalImageFormatProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalImageFormatProperties::pNext)));
    
    sVkExternalImageFormatProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalImageFormatProperties, externalMemoryProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalImageFormatProperties::externalMemoryProperties)));
    
    sVkExternalImageFormatProperties.Set(Napi::String::New(env, "externalMemoryProperties"), obj);
  }
  sVkExternalImageFormatProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalImageFormatProperties)));
  out.Set(Napi::String::New(env, "VkExternalImageFormatProperties"), sVkExternalImageFormatProperties);
  Napi::Object sVkExternalImageFormatPropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalImageFormatPropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalImageFormatPropertiesKHR::sType)));
    
    sVkExternalImageFormatPropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalImageFormatPropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalImageFormatPropertiesKHR::pNext)));
    
    sVkExternalImageFormatPropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalImageFormatPropertiesKHR, externalMemoryProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalImageFormatPropertiesKHR::externalMemoryProperties)));
    
    sVkExternalImageFormatPropertiesKHR.Set(Napi::String::New(env, "externalMemoryProperties"), obj);
  }
  sVkExternalImageFormatPropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalImageFormatPropertiesKHR)));
  out.Set(Napi::String::New(env, "VkExternalImageFormatPropertiesKHR"), sVkExternalImageFormatPropertiesKHR);
  Napi::Object sVkPhysicalDeviceExternalBufferInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalBufferInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalBufferInfo::sType)));
    
    sVkPhysicalDeviceExternalBufferInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalBufferInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalBufferInfo::pNext)));
    
    sVkPhysicalDeviceExternalBufferInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalBufferInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalBufferInfo::flags)));
    
    sVkPhysicalDeviceExternalBufferInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalBufferInfo, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalBufferInfo::usage)));
    
    sVkPhysicalDeviceExternalBufferInfo.Set(Napi::String::New(env, "usage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalBufferInfo, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalBufferInfo::handleType)));
    
    sVkPhysicalDeviceExternalBufferInfo.Set(Napi::String::New(env, "handleType"), obj);
  }
  sVkPhysicalDeviceExternalBufferInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalBufferInfo)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalBufferInfo"), sVkPhysicalDeviceExternalBufferInfo);
  Napi::Object sVkPhysicalDeviceExternalBufferInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalBufferInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalBufferInfoKHR::sType)));
    
    sVkPhysicalDeviceExternalBufferInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalBufferInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalBufferInfoKHR::pNext)));
    
    sVkPhysicalDeviceExternalBufferInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalBufferInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalBufferInfoKHR::flags)));
    
    sVkPhysicalDeviceExternalBufferInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalBufferInfoKHR, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalBufferInfoKHR::usage)));
    
    sVkPhysicalDeviceExternalBufferInfoKHR.Set(Napi::String::New(env, "usage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalBufferInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalBufferInfoKHR::handleType)));
    
    sVkPhysicalDeviceExternalBufferInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  sVkPhysicalDeviceExternalBufferInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalBufferInfoKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalBufferInfoKHR"), sVkPhysicalDeviceExternalBufferInfoKHR);
  Napi::Object sVkExternalBufferProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalBufferProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalBufferProperties::sType)));
    
    sVkExternalBufferProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalBufferProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalBufferProperties::pNext)));
    
    sVkExternalBufferProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalBufferProperties, externalMemoryProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalBufferProperties::externalMemoryProperties)));
    
    sVkExternalBufferProperties.Set(Napi::String::New(env, "externalMemoryProperties"), obj);
  }
  sVkExternalBufferProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalBufferProperties)));
  out.Set(Napi::String::New(env, "VkExternalBufferProperties"), sVkExternalBufferProperties);
  Napi::Object sVkExternalBufferPropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalBufferPropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalBufferPropertiesKHR::sType)));
    
    sVkExternalBufferPropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalBufferPropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalBufferPropertiesKHR::pNext)));
    
    sVkExternalBufferPropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalBufferPropertiesKHR, externalMemoryProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalBufferPropertiesKHR::externalMemoryProperties)));
    
    sVkExternalBufferPropertiesKHR.Set(Napi::String::New(env, "externalMemoryProperties"), obj);
  }
  sVkExternalBufferPropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalBufferPropertiesKHR)));
  out.Set(Napi::String::New(env, "VkExternalBufferPropertiesKHR"), sVkExternalBufferPropertiesKHR);
  Napi::Object sVkPhysicalDeviceIDProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIDProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDProperties::sType)));
    
    sVkPhysicalDeviceIDProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIDProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDProperties::pNext)));
    
    sVkPhysicalDeviceIDProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIDProperties, deviceUUID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDProperties::deviceUUID)));
    
    sVkPhysicalDeviceIDProperties.Set(Napi::String::New(env, "deviceUUID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIDProperties, driverUUID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDProperties::driverUUID)));
    
    sVkPhysicalDeviceIDProperties.Set(Napi::String::New(env, "driverUUID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIDProperties, deviceLUID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDProperties::deviceLUID)));
    
    sVkPhysicalDeviceIDProperties.Set(Napi::String::New(env, "deviceLUID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIDProperties, deviceNodeMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDProperties::deviceNodeMask)));
    
    sVkPhysicalDeviceIDProperties.Set(Napi::String::New(env, "deviceNodeMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIDProperties, deviceLUIDValid)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDProperties::deviceLUIDValid)));
    
    sVkPhysicalDeviceIDProperties.Set(Napi::String::New(env, "deviceLUIDValid"), obj);
  }
  sVkPhysicalDeviceIDProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDProperties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceIDProperties"), sVkPhysicalDeviceIDProperties);
  Napi::Object sVkPhysicalDeviceIDPropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIDPropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDPropertiesKHR::sType)));
    
    sVkPhysicalDeviceIDPropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIDPropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDPropertiesKHR::pNext)));
    
    sVkPhysicalDeviceIDPropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIDPropertiesKHR, deviceUUID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDPropertiesKHR::deviceUUID)));
    
    sVkPhysicalDeviceIDPropertiesKHR.Set(Napi::String::New(env, "deviceUUID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIDPropertiesKHR, driverUUID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDPropertiesKHR::driverUUID)));
    
    sVkPhysicalDeviceIDPropertiesKHR.Set(Napi::String::New(env, "driverUUID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIDPropertiesKHR, deviceLUID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDPropertiesKHR::deviceLUID)));
    
    sVkPhysicalDeviceIDPropertiesKHR.Set(Napi::String::New(env, "deviceLUID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIDPropertiesKHR, deviceNodeMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDPropertiesKHR::deviceNodeMask)));
    
    sVkPhysicalDeviceIDPropertiesKHR.Set(Napi::String::New(env, "deviceNodeMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIDPropertiesKHR, deviceLUIDValid)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDPropertiesKHR::deviceLUIDValid)));
    
    sVkPhysicalDeviceIDPropertiesKHR.Set(Napi::String::New(env, "deviceLUIDValid"), obj);
  }
  sVkPhysicalDeviceIDPropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIDPropertiesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceIDPropertiesKHR"), sVkPhysicalDeviceIDPropertiesKHR);
  Napi::Object sVkExternalMemoryImageCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryImageCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryImageCreateInfo::sType)));
    
    sVkExternalMemoryImageCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryImageCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryImageCreateInfo::pNext)));
    
    sVkExternalMemoryImageCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryImageCreateInfo, handleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryImageCreateInfo::handleTypes)));
    
    sVkExternalMemoryImageCreateInfo.Set(Napi::String::New(env, "handleTypes"), obj);
  }
  sVkExternalMemoryImageCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryImageCreateInfo)));
  out.Set(Napi::String::New(env, "VkExternalMemoryImageCreateInfo"), sVkExternalMemoryImageCreateInfo);
  Napi::Object sVkExternalMemoryImageCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryImageCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryImageCreateInfoKHR::sType)));
    
    sVkExternalMemoryImageCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryImageCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryImageCreateInfoKHR::pNext)));
    
    sVkExternalMemoryImageCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryImageCreateInfoKHR, handleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryImageCreateInfoKHR::handleTypes)));
    
    sVkExternalMemoryImageCreateInfoKHR.Set(Napi::String::New(env, "handleTypes"), obj);
  }
  sVkExternalMemoryImageCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryImageCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkExternalMemoryImageCreateInfoKHR"), sVkExternalMemoryImageCreateInfoKHR);
  Napi::Object sVkExternalMemoryBufferCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryBufferCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryBufferCreateInfo::sType)));
    
    sVkExternalMemoryBufferCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryBufferCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryBufferCreateInfo::pNext)));
    
    sVkExternalMemoryBufferCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryBufferCreateInfo, handleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryBufferCreateInfo::handleTypes)));
    
    sVkExternalMemoryBufferCreateInfo.Set(Napi::String::New(env, "handleTypes"), obj);
  }
  sVkExternalMemoryBufferCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryBufferCreateInfo)));
  out.Set(Napi::String::New(env, "VkExternalMemoryBufferCreateInfo"), sVkExternalMemoryBufferCreateInfo);
  Napi::Object sVkExternalMemoryBufferCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryBufferCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryBufferCreateInfoKHR::sType)));
    
    sVkExternalMemoryBufferCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryBufferCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryBufferCreateInfoKHR::pNext)));
    
    sVkExternalMemoryBufferCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalMemoryBufferCreateInfoKHR, handleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryBufferCreateInfoKHR::handleTypes)));
    
    sVkExternalMemoryBufferCreateInfoKHR.Set(Napi::String::New(env, "handleTypes"), obj);
  }
  sVkExternalMemoryBufferCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalMemoryBufferCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkExternalMemoryBufferCreateInfoKHR"), sVkExternalMemoryBufferCreateInfoKHR);
  Napi::Object sVkExportMemoryAllocateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryAllocateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryAllocateInfo::sType)));
    
    sVkExportMemoryAllocateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryAllocateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryAllocateInfo::pNext)));
    
    sVkExportMemoryAllocateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryAllocateInfo, handleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryAllocateInfo::handleTypes)));
    
    sVkExportMemoryAllocateInfo.Set(Napi::String::New(env, "handleTypes"), obj);
  }
  sVkExportMemoryAllocateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryAllocateInfo)));
  out.Set(Napi::String::New(env, "VkExportMemoryAllocateInfo"), sVkExportMemoryAllocateInfo);
  Napi::Object sVkExportMemoryAllocateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryAllocateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryAllocateInfoKHR::sType)));
    
    sVkExportMemoryAllocateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryAllocateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryAllocateInfoKHR::pNext)));
    
    sVkExportMemoryAllocateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryAllocateInfoKHR, handleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryAllocateInfoKHR::handleTypes)));
    
    sVkExportMemoryAllocateInfoKHR.Set(Napi::String::New(env, "handleTypes"), obj);
  }
  sVkExportMemoryAllocateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryAllocateInfoKHR)));
  out.Set(Napi::String::New(env, "VkExportMemoryAllocateInfoKHR"), sVkExportMemoryAllocateInfoKHR);
  Napi::Object sVkImportMemoryWin32HandleInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryWin32HandleInfoKHR::sType)));
    
    sVkImportMemoryWin32HandleInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryWin32HandleInfoKHR::pNext)));
    
    sVkImportMemoryWin32HandleInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryWin32HandleInfoKHR::handleType)));
    
    sVkImportMemoryWin32HandleInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoKHR, handle)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryWin32HandleInfoKHR::handle)));
    
    sVkImportMemoryWin32HandleInfoKHR.Set(Napi::String::New(env, "handle"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoKHR, name)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryWin32HandleInfoKHR::name)));
    
    sVkImportMemoryWin32HandleInfoKHR.Set(Napi::String::New(env, "name"), obj);
  }
  sVkImportMemoryWin32HandleInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryWin32HandleInfoKHR)));
  out.Set(Napi::String::New(env, "VkImportMemoryWin32HandleInfoKHR"), sVkImportMemoryWin32HandleInfoKHR);
  Napi::Object sVkExportMemoryWin32HandleInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryWin32HandleInfoKHR::sType)));
    
    sVkExportMemoryWin32HandleInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryWin32HandleInfoKHR::pNext)));
    
    sVkExportMemoryWin32HandleInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoKHR, pAttributes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryWin32HandleInfoKHR::pAttributes)));
    
    sVkExportMemoryWin32HandleInfoKHR.Set(Napi::String::New(env, "pAttributes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoKHR, dwAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryWin32HandleInfoKHR::dwAccess)));
    
    sVkExportMemoryWin32HandleInfoKHR.Set(Napi::String::New(env, "dwAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoKHR, name)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryWin32HandleInfoKHR::name)));
    
    sVkExportMemoryWin32HandleInfoKHR.Set(Napi::String::New(env, "name"), obj);
  }
  sVkExportMemoryWin32HandleInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportMemoryWin32HandleInfoKHR)));
  out.Set(Napi::String::New(env, "VkExportMemoryWin32HandleInfoKHR"), sVkExportMemoryWin32HandleInfoKHR);
  Napi::Object sVkMemoryWin32HandlePropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryWin32HandlePropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryWin32HandlePropertiesKHR::sType)));
    
    sVkMemoryWin32HandlePropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryWin32HandlePropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryWin32HandlePropertiesKHR::pNext)));
    
    sVkMemoryWin32HandlePropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryWin32HandlePropertiesKHR, memoryTypeBits)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryWin32HandlePropertiesKHR::memoryTypeBits)));
    
    sVkMemoryWin32HandlePropertiesKHR.Set(Napi::String::New(env, "memoryTypeBits"), obj);
  }
  sVkMemoryWin32HandlePropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryWin32HandlePropertiesKHR)));
  out.Set(Napi::String::New(env, "VkMemoryWin32HandlePropertiesKHR"), sVkMemoryWin32HandlePropertiesKHR);
  Napi::Object sVkMemoryGetWin32HandleInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryGetWin32HandleInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryGetWin32HandleInfoKHR::sType)));
    
    sVkMemoryGetWin32HandleInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryGetWin32HandleInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryGetWin32HandleInfoKHR::pNext)));
    
    sVkMemoryGetWin32HandleInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryGetWin32HandleInfoKHR, memory)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryGetWin32HandleInfoKHR::memory)));
    
    sVkMemoryGetWin32HandleInfoKHR.Set(Napi::String::New(env, "memory"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryGetWin32HandleInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryGetWin32HandleInfoKHR::handleType)));
    
    sVkMemoryGetWin32HandleInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  sVkMemoryGetWin32HandleInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryGetWin32HandleInfoKHR)));
  out.Set(Napi::String::New(env, "VkMemoryGetWin32HandleInfoKHR"), sVkMemoryGetWin32HandleInfoKHR);
  Napi::Object sVkImportMemoryFdInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryFdInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryFdInfoKHR::sType)));
    
    sVkImportMemoryFdInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryFdInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryFdInfoKHR::pNext)));
    
    sVkImportMemoryFdInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryFdInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryFdInfoKHR::handleType)));
    
    sVkImportMemoryFdInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryFdInfoKHR, fd)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryFdInfoKHR::fd)));
    
    sVkImportMemoryFdInfoKHR.Set(Napi::String::New(env, "fd"), obj);
  }
  sVkImportMemoryFdInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryFdInfoKHR)));
  out.Set(Napi::String::New(env, "VkImportMemoryFdInfoKHR"), sVkImportMemoryFdInfoKHR);
  Napi::Object sVkMemoryFdPropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryFdPropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryFdPropertiesKHR::sType)));
    
    sVkMemoryFdPropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryFdPropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryFdPropertiesKHR::pNext)));
    
    sVkMemoryFdPropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryFdPropertiesKHR, memoryTypeBits)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryFdPropertiesKHR::memoryTypeBits)));
    
    sVkMemoryFdPropertiesKHR.Set(Napi::String::New(env, "memoryTypeBits"), obj);
  }
  sVkMemoryFdPropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryFdPropertiesKHR)));
  out.Set(Napi::String::New(env, "VkMemoryFdPropertiesKHR"), sVkMemoryFdPropertiesKHR);
  Napi::Object sVkMemoryGetFdInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryGetFdInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryGetFdInfoKHR::sType)));
    
    sVkMemoryGetFdInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryGetFdInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryGetFdInfoKHR::pNext)));
    
    sVkMemoryGetFdInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryGetFdInfoKHR, memory)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryGetFdInfoKHR::memory)));
    
    sVkMemoryGetFdInfoKHR.Set(Napi::String::New(env, "memory"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryGetFdInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryGetFdInfoKHR::handleType)));
    
    sVkMemoryGetFdInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  sVkMemoryGetFdInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryGetFdInfoKHR)));
  out.Set(Napi::String::New(env, "VkMemoryGetFdInfoKHR"), sVkMemoryGetFdInfoKHR);
  Napi::Object sVkWin32KeyedMutexAcquireReleaseInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::sType)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::pNext)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, acquireCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::acquireCount)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoKHR.Set(Napi::String::New(env, "acquireCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pAcquireSyncs)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::pAcquireSyncs)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoKHR.Set(Napi::String::New(env, "pAcquireSyncs"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pAcquireKeys)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::pAcquireKeys)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoKHR.Set(Napi::String::New(env, "pAcquireKeys"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pAcquireTimeouts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::pAcquireTimeouts)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoKHR.Set(Napi::String::New(env, "pAcquireTimeouts"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, releaseCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::releaseCount)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoKHR.Set(Napi::String::New(env, "releaseCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pReleaseSyncs)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::pReleaseSyncs)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoKHR.Set(Napi::String::New(env, "pReleaseSyncs"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pReleaseKeys)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::pReleaseKeys)));
    
    sVkWin32KeyedMutexAcquireReleaseInfoKHR.Set(Napi::String::New(env, "pReleaseKeys"), obj);
  }
  sVkWin32KeyedMutexAcquireReleaseInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR)));
  out.Set(Napi::String::New(env, "VkWin32KeyedMutexAcquireReleaseInfoKHR"), sVkWin32KeyedMutexAcquireReleaseInfoKHR);
  Napi::Object sVkPhysicalDeviceExternalSemaphoreInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalSemaphoreInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalSemaphoreInfo::sType)));
    
    sVkPhysicalDeviceExternalSemaphoreInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalSemaphoreInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalSemaphoreInfo::pNext)));
    
    sVkPhysicalDeviceExternalSemaphoreInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalSemaphoreInfo, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalSemaphoreInfo::handleType)));
    
    sVkPhysicalDeviceExternalSemaphoreInfo.Set(Napi::String::New(env, "handleType"), obj);
  }
  sVkPhysicalDeviceExternalSemaphoreInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalSemaphoreInfo)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalSemaphoreInfo"), sVkPhysicalDeviceExternalSemaphoreInfo);
  Napi::Object sVkPhysicalDeviceExternalSemaphoreInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalSemaphoreInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalSemaphoreInfoKHR::sType)));
    
    sVkPhysicalDeviceExternalSemaphoreInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalSemaphoreInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalSemaphoreInfoKHR::pNext)));
    
    sVkPhysicalDeviceExternalSemaphoreInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalSemaphoreInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalSemaphoreInfoKHR::handleType)));
    
    sVkPhysicalDeviceExternalSemaphoreInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  sVkPhysicalDeviceExternalSemaphoreInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalSemaphoreInfoKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalSemaphoreInfoKHR"), sVkPhysicalDeviceExternalSemaphoreInfoKHR);
  Napi::Object sVkExternalSemaphoreProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalSemaphoreProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalSemaphoreProperties::sType)));
    
    sVkExternalSemaphoreProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalSemaphoreProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalSemaphoreProperties::pNext)));
    
    sVkExternalSemaphoreProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalSemaphoreProperties, exportFromImportedHandleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalSemaphoreProperties::exportFromImportedHandleTypes)));
    
    sVkExternalSemaphoreProperties.Set(Napi::String::New(env, "exportFromImportedHandleTypes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalSemaphoreProperties, compatibleHandleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalSemaphoreProperties::compatibleHandleTypes)));
    
    sVkExternalSemaphoreProperties.Set(Napi::String::New(env, "compatibleHandleTypes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalSemaphoreProperties, externalSemaphoreFeatures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalSemaphoreProperties::externalSemaphoreFeatures)));
    
    sVkExternalSemaphoreProperties.Set(Napi::String::New(env, "externalSemaphoreFeatures"), obj);
  }
  sVkExternalSemaphoreProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalSemaphoreProperties)));
  out.Set(Napi::String::New(env, "VkExternalSemaphoreProperties"), sVkExternalSemaphoreProperties);
  Napi::Object sVkExternalSemaphorePropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalSemaphorePropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalSemaphorePropertiesKHR::sType)));
    
    sVkExternalSemaphorePropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalSemaphorePropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalSemaphorePropertiesKHR::pNext)));
    
    sVkExternalSemaphorePropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalSemaphorePropertiesKHR, exportFromImportedHandleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalSemaphorePropertiesKHR::exportFromImportedHandleTypes)));
    
    sVkExternalSemaphorePropertiesKHR.Set(Napi::String::New(env, "exportFromImportedHandleTypes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalSemaphorePropertiesKHR, compatibleHandleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalSemaphorePropertiesKHR::compatibleHandleTypes)));
    
    sVkExternalSemaphorePropertiesKHR.Set(Napi::String::New(env, "compatibleHandleTypes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalSemaphorePropertiesKHR, externalSemaphoreFeatures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalSemaphorePropertiesKHR::externalSemaphoreFeatures)));
    
    sVkExternalSemaphorePropertiesKHR.Set(Napi::String::New(env, "externalSemaphoreFeatures"), obj);
  }
  sVkExternalSemaphorePropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalSemaphorePropertiesKHR)));
  out.Set(Napi::String::New(env, "VkExternalSemaphorePropertiesKHR"), sVkExternalSemaphorePropertiesKHR);
  Napi::Object sVkExportSemaphoreCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportSemaphoreCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportSemaphoreCreateInfo::sType)));
    
    sVkExportSemaphoreCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportSemaphoreCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportSemaphoreCreateInfo::pNext)));
    
    sVkExportSemaphoreCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportSemaphoreCreateInfo, handleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportSemaphoreCreateInfo::handleTypes)));
    
    sVkExportSemaphoreCreateInfo.Set(Napi::String::New(env, "handleTypes"), obj);
  }
  sVkExportSemaphoreCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportSemaphoreCreateInfo)));
  out.Set(Napi::String::New(env, "VkExportSemaphoreCreateInfo"), sVkExportSemaphoreCreateInfo);
  Napi::Object sVkExportSemaphoreCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportSemaphoreCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportSemaphoreCreateInfoKHR::sType)));
    
    sVkExportSemaphoreCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportSemaphoreCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportSemaphoreCreateInfoKHR::pNext)));
    
    sVkExportSemaphoreCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportSemaphoreCreateInfoKHR, handleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportSemaphoreCreateInfoKHR::handleTypes)));
    
    sVkExportSemaphoreCreateInfoKHR.Set(Napi::String::New(env, "handleTypes"), obj);
  }
  sVkExportSemaphoreCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportSemaphoreCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkExportSemaphoreCreateInfoKHR"), sVkExportSemaphoreCreateInfoKHR);
  Napi::Object sVkImportSemaphoreWin32HandleInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportSemaphoreWin32HandleInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportSemaphoreWin32HandleInfoKHR::sType)));
    
    sVkImportSemaphoreWin32HandleInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportSemaphoreWin32HandleInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportSemaphoreWin32HandleInfoKHR::pNext)));
    
    sVkImportSemaphoreWin32HandleInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportSemaphoreWin32HandleInfoKHR, semaphore)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportSemaphoreWin32HandleInfoKHR::semaphore)));
    
    sVkImportSemaphoreWin32HandleInfoKHR.Set(Napi::String::New(env, "semaphore"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportSemaphoreWin32HandleInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportSemaphoreWin32HandleInfoKHR::flags)));
    
    sVkImportSemaphoreWin32HandleInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportSemaphoreWin32HandleInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportSemaphoreWin32HandleInfoKHR::handleType)));
    
    sVkImportSemaphoreWin32HandleInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportSemaphoreWin32HandleInfoKHR, handle)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportSemaphoreWin32HandleInfoKHR::handle)));
    
    sVkImportSemaphoreWin32HandleInfoKHR.Set(Napi::String::New(env, "handle"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportSemaphoreWin32HandleInfoKHR, name)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportSemaphoreWin32HandleInfoKHR::name)));
    
    sVkImportSemaphoreWin32HandleInfoKHR.Set(Napi::String::New(env, "name"), obj);
  }
  sVkImportSemaphoreWin32HandleInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportSemaphoreWin32HandleInfoKHR)));
  out.Set(Napi::String::New(env, "VkImportSemaphoreWin32HandleInfoKHR"), sVkImportSemaphoreWin32HandleInfoKHR);
  Napi::Object sVkExportSemaphoreWin32HandleInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportSemaphoreWin32HandleInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportSemaphoreWin32HandleInfoKHR::sType)));
    
    sVkExportSemaphoreWin32HandleInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportSemaphoreWin32HandleInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportSemaphoreWin32HandleInfoKHR::pNext)));
    
    sVkExportSemaphoreWin32HandleInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportSemaphoreWin32HandleInfoKHR, pAttributes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportSemaphoreWin32HandleInfoKHR::pAttributes)));
    
    sVkExportSemaphoreWin32HandleInfoKHR.Set(Napi::String::New(env, "pAttributes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportSemaphoreWin32HandleInfoKHR, dwAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportSemaphoreWin32HandleInfoKHR::dwAccess)));
    
    sVkExportSemaphoreWin32HandleInfoKHR.Set(Napi::String::New(env, "dwAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportSemaphoreWin32HandleInfoKHR, name)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportSemaphoreWin32HandleInfoKHR::name)));
    
    sVkExportSemaphoreWin32HandleInfoKHR.Set(Napi::String::New(env, "name"), obj);
  }
  sVkExportSemaphoreWin32HandleInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportSemaphoreWin32HandleInfoKHR)));
  out.Set(Napi::String::New(env, "VkExportSemaphoreWin32HandleInfoKHR"), sVkExportSemaphoreWin32HandleInfoKHR);
  Napi::Object sVkD3D12FenceSubmitInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkD3D12FenceSubmitInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkD3D12FenceSubmitInfoKHR::sType)));
    
    sVkD3D12FenceSubmitInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkD3D12FenceSubmitInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkD3D12FenceSubmitInfoKHR::pNext)));
    
    sVkD3D12FenceSubmitInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkD3D12FenceSubmitInfoKHR, waitSemaphoreValuesCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkD3D12FenceSubmitInfoKHR::waitSemaphoreValuesCount)));
    
    sVkD3D12FenceSubmitInfoKHR.Set(Napi::String::New(env, "waitSemaphoreValuesCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkD3D12FenceSubmitInfoKHR, pWaitSemaphoreValues)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkD3D12FenceSubmitInfoKHR::pWaitSemaphoreValues)));
    
    sVkD3D12FenceSubmitInfoKHR.Set(Napi::String::New(env, "pWaitSemaphoreValues"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkD3D12FenceSubmitInfoKHR, signalSemaphoreValuesCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkD3D12FenceSubmitInfoKHR::signalSemaphoreValuesCount)));
    
    sVkD3D12FenceSubmitInfoKHR.Set(Napi::String::New(env, "signalSemaphoreValuesCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkD3D12FenceSubmitInfoKHR, pSignalSemaphoreValues)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkD3D12FenceSubmitInfoKHR::pSignalSemaphoreValues)));
    
    sVkD3D12FenceSubmitInfoKHR.Set(Napi::String::New(env, "pSignalSemaphoreValues"), obj);
  }
  sVkD3D12FenceSubmitInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkD3D12FenceSubmitInfoKHR)));
  out.Set(Napi::String::New(env, "VkD3D12FenceSubmitInfoKHR"), sVkD3D12FenceSubmitInfoKHR);
  Napi::Object sVkSemaphoreGetWin32HandleInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreGetWin32HandleInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreGetWin32HandleInfoKHR::sType)));
    
    sVkSemaphoreGetWin32HandleInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreGetWin32HandleInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreGetWin32HandleInfoKHR::pNext)));
    
    sVkSemaphoreGetWin32HandleInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreGetWin32HandleInfoKHR, semaphore)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreGetWin32HandleInfoKHR::semaphore)));
    
    sVkSemaphoreGetWin32HandleInfoKHR.Set(Napi::String::New(env, "semaphore"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreGetWin32HandleInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreGetWin32HandleInfoKHR::handleType)));
    
    sVkSemaphoreGetWin32HandleInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  sVkSemaphoreGetWin32HandleInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreGetWin32HandleInfoKHR)));
  out.Set(Napi::String::New(env, "VkSemaphoreGetWin32HandleInfoKHR"), sVkSemaphoreGetWin32HandleInfoKHR);
  Napi::Object sVkImportSemaphoreFdInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportSemaphoreFdInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportSemaphoreFdInfoKHR::sType)));
    
    sVkImportSemaphoreFdInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportSemaphoreFdInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportSemaphoreFdInfoKHR::pNext)));
    
    sVkImportSemaphoreFdInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportSemaphoreFdInfoKHR, semaphore)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportSemaphoreFdInfoKHR::semaphore)));
    
    sVkImportSemaphoreFdInfoKHR.Set(Napi::String::New(env, "semaphore"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportSemaphoreFdInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportSemaphoreFdInfoKHR::flags)));
    
    sVkImportSemaphoreFdInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportSemaphoreFdInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportSemaphoreFdInfoKHR::handleType)));
    
    sVkImportSemaphoreFdInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportSemaphoreFdInfoKHR, fd)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportSemaphoreFdInfoKHR::fd)));
    
    sVkImportSemaphoreFdInfoKHR.Set(Napi::String::New(env, "fd"), obj);
  }
  sVkImportSemaphoreFdInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportSemaphoreFdInfoKHR)));
  out.Set(Napi::String::New(env, "VkImportSemaphoreFdInfoKHR"), sVkImportSemaphoreFdInfoKHR);
  Napi::Object sVkSemaphoreGetFdInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreGetFdInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreGetFdInfoKHR::sType)));
    
    sVkSemaphoreGetFdInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreGetFdInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreGetFdInfoKHR::pNext)));
    
    sVkSemaphoreGetFdInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreGetFdInfoKHR, semaphore)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreGetFdInfoKHR::semaphore)));
    
    sVkSemaphoreGetFdInfoKHR.Set(Napi::String::New(env, "semaphore"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreGetFdInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreGetFdInfoKHR::handleType)));
    
    sVkSemaphoreGetFdInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  sVkSemaphoreGetFdInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreGetFdInfoKHR)));
  out.Set(Napi::String::New(env, "VkSemaphoreGetFdInfoKHR"), sVkSemaphoreGetFdInfoKHR);
  Napi::Object sVkPhysicalDeviceExternalFenceInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalFenceInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalFenceInfo::sType)));
    
    sVkPhysicalDeviceExternalFenceInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalFenceInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalFenceInfo::pNext)));
    
    sVkPhysicalDeviceExternalFenceInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalFenceInfo, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalFenceInfo::handleType)));
    
    sVkPhysicalDeviceExternalFenceInfo.Set(Napi::String::New(env, "handleType"), obj);
  }
  sVkPhysicalDeviceExternalFenceInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalFenceInfo)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalFenceInfo"), sVkPhysicalDeviceExternalFenceInfo);
  Napi::Object sVkPhysicalDeviceExternalFenceInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalFenceInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalFenceInfoKHR::sType)));
    
    sVkPhysicalDeviceExternalFenceInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalFenceInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalFenceInfoKHR::pNext)));
    
    sVkPhysicalDeviceExternalFenceInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalFenceInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalFenceInfoKHR::handleType)));
    
    sVkPhysicalDeviceExternalFenceInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  sVkPhysicalDeviceExternalFenceInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalFenceInfoKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalFenceInfoKHR"), sVkPhysicalDeviceExternalFenceInfoKHR);
  Napi::Object sVkExternalFenceProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalFenceProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalFenceProperties::sType)));
    
    sVkExternalFenceProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalFenceProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalFenceProperties::pNext)));
    
    sVkExternalFenceProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalFenceProperties, exportFromImportedHandleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalFenceProperties::exportFromImportedHandleTypes)));
    
    sVkExternalFenceProperties.Set(Napi::String::New(env, "exportFromImportedHandleTypes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalFenceProperties, compatibleHandleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalFenceProperties::compatibleHandleTypes)));
    
    sVkExternalFenceProperties.Set(Napi::String::New(env, "compatibleHandleTypes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalFenceProperties, externalFenceFeatures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalFenceProperties::externalFenceFeatures)));
    
    sVkExternalFenceProperties.Set(Napi::String::New(env, "externalFenceFeatures"), obj);
  }
  sVkExternalFenceProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalFenceProperties)));
  out.Set(Napi::String::New(env, "VkExternalFenceProperties"), sVkExternalFenceProperties);
  Napi::Object sVkExternalFencePropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalFencePropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalFencePropertiesKHR::sType)));
    
    sVkExternalFencePropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalFencePropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalFencePropertiesKHR::pNext)));
    
    sVkExternalFencePropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalFencePropertiesKHR, exportFromImportedHandleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalFencePropertiesKHR::exportFromImportedHandleTypes)));
    
    sVkExternalFencePropertiesKHR.Set(Napi::String::New(env, "exportFromImportedHandleTypes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalFencePropertiesKHR, compatibleHandleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalFencePropertiesKHR::compatibleHandleTypes)));
    
    sVkExternalFencePropertiesKHR.Set(Napi::String::New(env, "compatibleHandleTypes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExternalFencePropertiesKHR, externalFenceFeatures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalFencePropertiesKHR::externalFenceFeatures)));
    
    sVkExternalFencePropertiesKHR.Set(Napi::String::New(env, "externalFenceFeatures"), obj);
  }
  sVkExternalFencePropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkExternalFencePropertiesKHR)));
  out.Set(Napi::String::New(env, "VkExternalFencePropertiesKHR"), sVkExternalFencePropertiesKHR);
  Napi::Object sVkExportFenceCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportFenceCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportFenceCreateInfo::sType)));
    
    sVkExportFenceCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportFenceCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportFenceCreateInfo::pNext)));
    
    sVkExportFenceCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportFenceCreateInfo, handleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportFenceCreateInfo::handleTypes)));
    
    sVkExportFenceCreateInfo.Set(Napi::String::New(env, "handleTypes"), obj);
  }
  sVkExportFenceCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportFenceCreateInfo)));
  out.Set(Napi::String::New(env, "VkExportFenceCreateInfo"), sVkExportFenceCreateInfo);
  Napi::Object sVkExportFenceCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportFenceCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportFenceCreateInfoKHR::sType)));
    
    sVkExportFenceCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportFenceCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportFenceCreateInfoKHR::pNext)));
    
    sVkExportFenceCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportFenceCreateInfoKHR, handleTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportFenceCreateInfoKHR::handleTypes)));
    
    sVkExportFenceCreateInfoKHR.Set(Napi::String::New(env, "handleTypes"), obj);
  }
  sVkExportFenceCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportFenceCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkExportFenceCreateInfoKHR"), sVkExportFenceCreateInfoKHR);
  Napi::Object sVkImportFenceWin32HandleInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportFenceWin32HandleInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportFenceWin32HandleInfoKHR::sType)));
    
    sVkImportFenceWin32HandleInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportFenceWin32HandleInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportFenceWin32HandleInfoKHR::pNext)));
    
    sVkImportFenceWin32HandleInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportFenceWin32HandleInfoKHR, fence)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportFenceWin32HandleInfoKHR::fence)));
    
    sVkImportFenceWin32HandleInfoKHR.Set(Napi::String::New(env, "fence"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportFenceWin32HandleInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportFenceWin32HandleInfoKHR::flags)));
    
    sVkImportFenceWin32HandleInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportFenceWin32HandleInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportFenceWin32HandleInfoKHR::handleType)));
    
    sVkImportFenceWin32HandleInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportFenceWin32HandleInfoKHR, handle)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportFenceWin32HandleInfoKHR::handle)));
    
    sVkImportFenceWin32HandleInfoKHR.Set(Napi::String::New(env, "handle"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportFenceWin32HandleInfoKHR, name)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportFenceWin32HandleInfoKHR::name)));
    
    sVkImportFenceWin32HandleInfoKHR.Set(Napi::String::New(env, "name"), obj);
  }
  sVkImportFenceWin32HandleInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportFenceWin32HandleInfoKHR)));
  out.Set(Napi::String::New(env, "VkImportFenceWin32HandleInfoKHR"), sVkImportFenceWin32HandleInfoKHR);
  Napi::Object sVkExportFenceWin32HandleInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportFenceWin32HandleInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportFenceWin32HandleInfoKHR::sType)));
    
    sVkExportFenceWin32HandleInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportFenceWin32HandleInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportFenceWin32HandleInfoKHR::pNext)));
    
    sVkExportFenceWin32HandleInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportFenceWin32HandleInfoKHR, pAttributes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportFenceWin32HandleInfoKHR::pAttributes)));
    
    sVkExportFenceWin32HandleInfoKHR.Set(Napi::String::New(env, "pAttributes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportFenceWin32HandleInfoKHR, dwAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportFenceWin32HandleInfoKHR::dwAccess)));
    
    sVkExportFenceWin32HandleInfoKHR.Set(Napi::String::New(env, "dwAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkExportFenceWin32HandleInfoKHR, name)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportFenceWin32HandleInfoKHR::name)));
    
    sVkExportFenceWin32HandleInfoKHR.Set(Napi::String::New(env, "name"), obj);
  }
  sVkExportFenceWin32HandleInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkExportFenceWin32HandleInfoKHR)));
  out.Set(Napi::String::New(env, "VkExportFenceWin32HandleInfoKHR"), sVkExportFenceWin32HandleInfoKHR);
  Napi::Object sVkFenceGetWin32HandleInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFenceGetWin32HandleInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFenceGetWin32HandleInfoKHR::sType)));
    
    sVkFenceGetWin32HandleInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFenceGetWin32HandleInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFenceGetWin32HandleInfoKHR::pNext)));
    
    sVkFenceGetWin32HandleInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFenceGetWin32HandleInfoKHR, fence)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFenceGetWin32HandleInfoKHR::fence)));
    
    sVkFenceGetWin32HandleInfoKHR.Set(Napi::String::New(env, "fence"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFenceGetWin32HandleInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFenceGetWin32HandleInfoKHR::handleType)));
    
    sVkFenceGetWin32HandleInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  sVkFenceGetWin32HandleInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkFenceGetWin32HandleInfoKHR)));
  out.Set(Napi::String::New(env, "VkFenceGetWin32HandleInfoKHR"), sVkFenceGetWin32HandleInfoKHR);
  Napi::Object sVkImportFenceFdInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportFenceFdInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportFenceFdInfoKHR::sType)));
    
    sVkImportFenceFdInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportFenceFdInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportFenceFdInfoKHR::pNext)));
    
    sVkImportFenceFdInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportFenceFdInfoKHR, fence)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportFenceFdInfoKHR::fence)));
    
    sVkImportFenceFdInfoKHR.Set(Napi::String::New(env, "fence"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportFenceFdInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportFenceFdInfoKHR::flags)));
    
    sVkImportFenceFdInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportFenceFdInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportFenceFdInfoKHR::handleType)));
    
    sVkImportFenceFdInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportFenceFdInfoKHR, fd)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportFenceFdInfoKHR::fd)));
    
    sVkImportFenceFdInfoKHR.Set(Napi::String::New(env, "fd"), obj);
  }
  sVkImportFenceFdInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportFenceFdInfoKHR)));
  out.Set(Napi::String::New(env, "VkImportFenceFdInfoKHR"), sVkImportFenceFdInfoKHR);
  Napi::Object sVkFenceGetFdInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFenceGetFdInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFenceGetFdInfoKHR::sType)));
    
    sVkFenceGetFdInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFenceGetFdInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFenceGetFdInfoKHR::pNext)));
    
    sVkFenceGetFdInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFenceGetFdInfoKHR, fence)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFenceGetFdInfoKHR::fence)));
    
    sVkFenceGetFdInfoKHR.Set(Napi::String::New(env, "fence"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFenceGetFdInfoKHR, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFenceGetFdInfoKHR::handleType)));
    
    sVkFenceGetFdInfoKHR.Set(Napi::String::New(env, "handleType"), obj);
  }
  sVkFenceGetFdInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkFenceGetFdInfoKHR)));
  out.Set(Napi::String::New(env, "VkFenceGetFdInfoKHR"), sVkFenceGetFdInfoKHR);
  Napi::Object sVkPhysicalDeviceMultiviewFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewFeatures::sType)));
    
    sVkPhysicalDeviceMultiviewFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewFeatures::pNext)));
    
    sVkPhysicalDeviceMultiviewFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewFeatures, multiview)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewFeatures::multiview)));
    
    sVkPhysicalDeviceMultiviewFeatures.Set(Napi::String::New(env, "multiview"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewFeatures, multiviewGeometryShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewFeatures::multiviewGeometryShader)));
    
    sVkPhysicalDeviceMultiviewFeatures.Set(Napi::String::New(env, "multiviewGeometryShader"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewFeatures, multiviewTessellationShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewFeatures::multiviewTessellationShader)));
    
    sVkPhysicalDeviceMultiviewFeatures.Set(Napi::String::New(env, "multiviewTessellationShader"), obj);
  }
  sVkPhysicalDeviceMultiviewFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceMultiviewFeatures"), sVkPhysicalDeviceMultiviewFeatures);
  Napi::Object sVkPhysicalDeviceMultiviewFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewFeaturesKHR::sType)));
    
    sVkPhysicalDeviceMultiviewFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceMultiviewFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewFeaturesKHR, multiview)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewFeaturesKHR::multiview)));
    
    sVkPhysicalDeviceMultiviewFeaturesKHR.Set(Napi::String::New(env, "multiview"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewFeaturesKHR, multiviewGeometryShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewFeaturesKHR::multiviewGeometryShader)));
    
    sVkPhysicalDeviceMultiviewFeaturesKHR.Set(Napi::String::New(env, "multiviewGeometryShader"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewFeaturesKHR, multiviewTessellationShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewFeaturesKHR::multiviewTessellationShader)));
    
    sVkPhysicalDeviceMultiviewFeaturesKHR.Set(Napi::String::New(env, "multiviewTessellationShader"), obj);
  }
  sVkPhysicalDeviceMultiviewFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceMultiviewFeaturesKHR"), sVkPhysicalDeviceMultiviewFeaturesKHR);
  Napi::Object sVkPhysicalDeviceMultiviewProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewProperties::sType)));
    
    sVkPhysicalDeviceMultiviewProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewProperties::pNext)));
    
    sVkPhysicalDeviceMultiviewProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewProperties, maxMultiviewViewCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewProperties::maxMultiviewViewCount)));
    
    sVkPhysicalDeviceMultiviewProperties.Set(Napi::String::New(env, "maxMultiviewViewCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewProperties, maxMultiviewInstanceIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex)));
    
    sVkPhysicalDeviceMultiviewProperties.Set(Napi::String::New(env, "maxMultiviewInstanceIndex"), obj);
  }
  sVkPhysicalDeviceMultiviewProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewProperties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceMultiviewProperties"), sVkPhysicalDeviceMultiviewProperties);
  Napi::Object sVkPhysicalDeviceMultiviewPropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewPropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewPropertiesKHR::sType)));
    
    sVkPhysicalDeviceMultiviewPropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewPropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewPropertiesKHR::pNext)));
    
    sVkPhysicalDeviceMultiviewPropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewPropertiesKHR, maxMultiviewViewCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewPropertiesKHR::maxMultiviewViewCount)));
    
    sVkPhysicalDeviceMultiviewPropertiesKHR.Set(Napi::String::New(env, "maxMultiviewViewCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewPropertiesKHR, maxMultiviewInstanceIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewPropertiesKHR::maxMultiviewInstanceIndex)));
    
    sVkPhysicalDeviceMultiviewPropertiesKHR.Set(Napi::String::New(env, "maxMultiviewInstanceIndex"), obj);
  }
  sVkPhysicalDeviceMultiviewPropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewPropertiesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceMultiviewPropertiesKHR"), sVkPhysicalDeviceMultiviewPropertiesKHR);
  Napi::Object sVkRenderPassMultiviewCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfo::sType)));
    
    sVkRenderPassMultiviewCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfo::pNext)));
    
    sVkRenderPassMultiviewCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, subpassCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfo::subpassCount)));
    
    sVkRenderPassMultiviewCreateInfo.Set(Napi::String::New(env, "subpassCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, pViewMasks)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfo::pViewMasks)));
    
    sVkRenderPassMultiviewCreateInfo.Set(Napi::String::New(env, "pViewMasks"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, dependencyCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfo::dependencyCount)));
    
    sVkRenderPassMultiviewCreateInfo.Set(Napi::String::New(env, "dependencyCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, pViewOffsets)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfo::pViewOffsets)));
    
    sVkRenderPassMultiviewCreateInfo.Set(Napi::String::New(env, "pViewOffsets"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, correlationMaskCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfo::correlationMaskCount)));
    
    sVkRenderPassMultiviewCreateInfo.Set(Napi::String::New(env, "correlationMaskCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, pCorrelationMasks)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfo::pCorrelationMasks)));
    
    sVkRenderPassMultiviewCreateInfo.Set(Napi::String::New(env, "pCorrelationMasks"), obj);
  }
  sVkRenderPassMultiviewCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfo)));
  out.Set(Napi::String::New(env, "VkRenderPassMultiviewCreateInfo"), sVkRenderPassMultiviewCreateInfo);
  Napi::Object sVkRenderPassMultiviewCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfoKHR::sType)));
    
    sVkRenderPassMultiviewCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfoKHR::pNext)));
    
    sVkRenderPassMultiviewCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfoKHR, subpassCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfoKHR::subpassCount)));
    
    sVkRenderPassMultiviewCreateInfoKHR.Set(Napi::String::New(env, "subpassCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfoKHR, pViewMasks)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfoKHR::pViewMasks)));
    
    sVkRenderPassMultiviewCreateInfoKHR.Set(Napi::String::New(env, "pViewMasks"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfoKHR, dependencyCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfoKHR::dependencyCount)));
    
    sVkRenderPassMultiviewCreateInfoKHR.Set(Napi::String::New(env, "dependencyCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfoKHR, pViewOffsets)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfoKHR::pViewOffsets)));
    
    sVkRenderPassMultiviewCreateInfoKHR.Set(Napi::String::New(env, "pViewOffsets"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfoKHR, correlationMaskCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfoKHR::correlationMaskCount)));
    
    sVkRenderPassMultiviewCreateInfoKHR.Set(Napi::String::New(env, "correlationMaskCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfoKHR, pCorrelationMasks)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfoKHR::pCorrelationMasks)));
    
    sVkRenderPassMultiviewCreateInfoKHR.Set(Napi::String::New(env, "pCorrelationMasks"), obj);
  }
  sVkRenderPassMultiviewCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkRenderPassMultiviewCreateInfoKHR"), sVkRenderPassMultiviewCreateInfoKHR);
  Napi::Object sVkSurfaceCapabilities2EXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2EXT::sType)));
    
    sVkSurfaceCapabilities2EXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2EXT::pNext)));
    
    sVkSurfaceCapabilities2EXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, minImageCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2EXT::minImageCount)));
    
    sVkSurfaceCapabilities2EXT.Set(Napi::String::New(env, "minImageCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, maxImageCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2EXT::maxImageCount)));
    
    sVkSurfaceCapabilities2EXT.Set(Napi::String::New(env, "maxImageCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, currentExtent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2EXT::currentExtent)));
    
    sVkSurfaceCapabilities2EXT.Set(Napi::String::New(env, "currentExtent"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, minImageExtent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2EXT::minImageExtent)));
    
    sVkSurfaceCapabilities2EXT.Set(Napi::String::New(env, "minImageExtent"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, maxImageExtent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2EXT::maxImageExtent)));
    
    sVkSurfaceCapabilities2EXT.Set(Napi::String::New(env, "maxImageExtent"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, maxImageArrayLayers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2EXT::maxImageArrayLayers)));
    
    sVkSurfaceCapabilities2EXT.Set(Napi::String::New(env, "maxImageArrayLayers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, supportedTransforms)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2EXT::supportedTransforms)));
    
    sVkSurfaceCapabilities2EXT.Set(Napi::String::New(env, "supportedTransforms"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, currentTransform)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2EXT::currentTransform)));
    
    sVkSurfaceCapabilities2EXT.Set(Napi::String::New(env, "currentTransform"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, supportedCompositeAlpha)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2EXT::supportedCompositeAlpha)));
    
    sVkSurfaceCapabilities2EXT.Set(Napi::String::New(env, "supportedCompositeAlpha"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, supportedUsageFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2EXT::supportedUsageFlags)));
    
    sVkSurfaceCapabilities2EXT.Set(Napi::String::New(env, "supportedUsageFlags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, supportedSurfaceCounters)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2EXT::supportedSurfaceCounters)));
    
    sVkSurfaceCapabilities2EXT.Set(Napi::String::New(env, "supportedSurfaceCounters"), obj);
  }
  sVkSurfaceCapabilities2EXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2EXT)));
  out.Set(Napi::String::New(env, "VkSurfaceCapabilities2EXT"), sVkSurfaceCapabilities2EXT);
  Napi::Object sVkDisplayPowerInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPowerInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPowerInfoEXT::sType)));
    
    sVkDisplayPowerInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPowerInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPowerInfoEXT::pNext)));
    
    sVkDisplayPowerInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPowerInfoEXT, powerState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPowerInfoEXT::powerState)));
    
    sVkDisplayPowerInfoEXT.Set(Napi::String::New(env, "powerState"), obj);
  }
  sVkDisplayPowerInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPowerInfoEXT)));
  out.Set(Napi::String::New(env, "VkDisplayPowerInfoEXT"), sVkDisplayPowerInfoEXT);
  Napi::Object sVkDeviceEventInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceEventInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceEventInfoEXT::sType)));
    
    sVkDeviceEventInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceEventInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceEventInfoEXT::pNext)));
    
    sVkDeviceEventInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceEventInfoEXT, deviceEvent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceEventInfoEXT::deviceEvent)));
    
    sVkDeviceEventInfoEXT.Set(Napi::String::New(env, "deviceEvent"), obj);
  }
  sVkDeviceEventInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceEventInfoEXT)));
  out.Set(Napi::String::New(env, "VkDeviceEventInfoEXT"), sVkDeviceEventInfoEXT);
  Napi::Object sVkDisplayEventInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayEventInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayEventInfoEXT::sType)));
    
    sVkDisplayEventInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayEventInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayEventInfoEXT::pNext)));
    
    sVkDisplayEventInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayEventInfoEXT, displayEvent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayEventInfoEXT::displayEvent)));
    
    sVkDisplayEventInfoEXT.Set(Napi::String::New(env, "displayEvent"), obj);
  }
  sVkDisplayEventInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayEventInfoEXT)));
  out.Set(Napi::String::New(env, "VkDisplayEventInfoEXT"), sVkDisplayEventInfoEXT);
  Napi::Object sVkSwapchainCounterCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCounterCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCounterCreateInfoEXT::sType)));
    
    sVkSwapchainCounterCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCounterCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCounterCreateInfoEXT::pNext)));
    
    sVkSwapchainCounterCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainCounterCreateInfoEXT, surfaceCounters)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCounterCreateInfoEXT::surfaceCounters)));
    
    sVkSwapchainCounterCreateInfoEXT.Set(Napi::String::New(env, "surfaceCounters"), obj);
  }
  sVkSwapchainCounterCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainCounterCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkSwapchainCounterCreateInfoEXT"), sVkSwapchainCounterCreateInfoEXT);
  Napi::Object sVkPhysicalDeviceGroupProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceGroupProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceGroupProperties::sType)));
    
    sVkPhysicalDeviceGroupProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceGroupProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceGroupProperties::pNext)));
    
    sVkPhysicalDeviceGroupProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceGroupProperties, physicalDeviceCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceGroupProperties::physicalDeviceCount)));
    
    sVkPhysicalDeviceGroupProperties.Set(Napi::String::New(env, "physicalDeviceCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceGroupProperties, physicalDevices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceGroupProperties::physicalDevices)));
    
    sVkPhysicalDeviceGroupProperties.Set(Napi::String::New(env, "physicalDevices"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceGroupProperties, subsetAllocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceGroupProperties::subsetAllocation)));
    
    sVkPhysicalDeviceGroupProperties.Set(Napi::String::New(env, "subsetAllocation"), obj);
  }
  sVkPhysicalDeviceGroupProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceGroupProperties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceGroupProperties"), sVkPhysicalDeviceGroupProperties);
  Napi::Object sVkPhysicalDeviceGroupPropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceGroupPropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceGroupPropertiesKHR::sType)));
    
    sVkPhysicalDeviceGroupPropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceGroupPropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceGroupPropertiesKHR::pNext)));
    
    sVkPhysicalDeviceGroupPropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceGroupPropertiesKHR, physicalDeviceCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceGroupPropertiesKHR::physicalDeviceCount)));
    
    sVkPhysicalDeviceGroupPropertiesKHR.Set(Napi::String::New(env, "physicalDeviceCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceGroupPropertiesKHR, physicalDevices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceGroupPropertiesKHR::physicalDevices)));
    
    sVkPhysicalDeviceGroupPropertiesKHR.Set(Napi::String::New(env, "physicalDevices"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceGroupPropertiesKHR, subsetAllocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceGroupPropertiesKHR::subsetAllocation)));
    
    sVkPhysicalDeviceGroupPropertiesKHR.Set(Napi::String::New(env, "subsetAllocation"), obj);
  }
  sVkPhysicalDeviceGroupPropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceGroupPropertiesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceGroupPropertiesKHR"), sVkPhysicalDeviceGroupPropertiesKHR);
  Napi::Object sVkMemoryAllocateFlagsInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryAllocateFlagsInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryAllocateFlagsInfo::sType)));
    
    sVkMemoryAllocateFlagsInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryAllocateFlagsInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryAllocateFlagsInfo::pNext)));
    
    sVkMemoryAllocateFlagsInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryAllocateFlagsInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryAllocateFlagsInfo::flags)));
    
    sVkMemoryAllocateFlagsInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryAllocateFlagsInfo, deviceMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryAllocateFlagsInfo::deviceMask)));
    
    sVkMemoryAllocateFlagsInfo.Set(Napi::String::New(env, "deviceMask"), obj);
  }
  sVkMemoryAllocateFlagsInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryAllocateFlagsInfo)));
  out.Set(Napi::String::New(env, "VkMemoryAllocateFlagsInfo"), sVkMemoryAllocateFlagsInfo);
  Napi::Object sVkMemoryAllocateFlagsInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryAllocateFlagsInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryAllocateFlagsInfoKHR::sType)));
    
    sVkMemoryAllocateFlagsInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryAllocateFlagsInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryAllocateFlagsInfoKHR::pNext)));
    
    sVkMemoryAllocateFlagsInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryAllocateFlagsInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryAllocateFlagsInfoKHR::flags)));
    
    sVkMemoryAllocateFlagsInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryAllocateFlagsInfoKHR, deviceMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryAllocateFlagsInfoKHR::deviceMask)));
    
    sVkMemoryAllocateFlagsInfoKHR.Set(Napi::String::New(env, "deviceMask"), obj);
  }
  sVkMemoryAllocateFlagsInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryAllocateFlagsInfoKHR)));
  out.Set(Napi::String::New(env, "VkMemoryAllocateFlagsInfoKHR"), sVkMemoryAllocateFlagsInfoKHR);
  Napi::Object sVkBindBufferMemoryInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryInfo::sType)));
    
    sVkBindBufferMemoryInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryInfo::pNext)));
    
    sVkBindBufferMemoryInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryInfo, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryInfo::buffer)));
    
    sVkBindBufferMemoryInfo.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryInfo, memory)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryInfo::memory)));
    
    sVkBindBufferMemoryInfo.Set(Napi::String::New(env, "memory"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryInfo, memoryOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryInfo::memoryOffset)));
    
    sVkBindBufferMemoryInfo.Set(Napi::String::New(env, "memoryOffset"), obj);
  }
  sVkBindBufferMemoryInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryInfo)));
  out.Set(Napi::String::New(env, "VkBindBufferMemoryInfo"), sVkBindBufferMemoryInfo);
  Napi::Object sVkBindBufferMemoryInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryInfoKHR::sType)));
    
    sVkBindBufferMemoryInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryInfoKHR::pNext)));
    
    sVkBindBufferMemoryInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryInfoKHR, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryInfoKHR::buffer)));
    
    sVkBindBufferMemoryInfoKHR.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryInfoKHR, memory)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryInfoKHR::memory)));
    
    sVkBindBufferMemoryInfoKHR.Set(Napi::String::New(env, "memory"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryInfoKHR, memoryOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryInfoKHR::memoryOffset)));
    
    sVkBindBufferMemoryInfoKHR.Set(Napi::String::New(env, "memoryOffset"), obj);
  }
  sVkBindBufferMemoryInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryInfoKHR)));
  out.Set(Napi::String::New(env, "VkBindBufferMemoryInfoKHR"), sVkBindBufferMemoryInfoKHR);
  Napi::Object sVkBindBufferMemoryDeviceGroupInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryDeviceGroupInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryDeviceGroupInfo::sType)));
    
    sVkBindBufferMemoryDeviceGroupInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryDeviceGroupInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryDeviceGroupInfo::pNext)));
    
    sVkBindBufferMemoryDeviceGroupInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryDeviceGroupInfo, deviceIndexCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryDeviceGroupInfo::deviceIndexCount)));
    
    sVkBindBufferMemoryDeviceGroupInfo.Set(Napi::String::New(env, "deviceIndexCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryDeviceGroupInfo, pDeviceIndices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryDeviceGroupInfo::pDeviceIndices)));
    
    sVkBindBufferMemoryDeviceGroupInfo.Set(Napi::String::New(env, "pDeviceIndices"), obj);
  }
  sVkBindBufferMemoryDeviceGroupInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryDeviceGroupInfo)));
  out.Set(Napi::String::New(env, "VkBindBufferMemoryDeviceGroupInfo"), sVkBindBufferMemoryDeviceGroupInfo);
  Napi::Object sVkBindBufferMemoryDeviceGroupInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryDeviceGroupInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryDeviceGroupInfoKHR::sType)));
    
    sVkBindBufferMemoryDeviceGroupInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryDeviceGroupInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryDeviceGroupInfoKHR::pNext)));
    
    sVkBindBufferMemoryDeviceGroupInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryDeviceGroupInfoKHR, deviceIndexCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryDeviceGroupInfoKHR::deviceIndexCount)));
    
    sVkBindBufferMemoryDeviceGroupInfoKHR.Set(Napi::String::New(env, "deviceIndexCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindBufferMemoryDeviceGroupInfoKHR, pDeviceIndices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryDeviceGroupInfoKHR::pDeviceIndices)));
    
    sVkBindBufferMemoryDeviceGroupInfoKHR.Set(Napi::String::New(env, "pDeviceIndices"), obj);
  }
  sVkBindBufferMemoryDeviceGroupInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindBufferMemoryDeviceGroupInfoKHR)));
  out.Set(Napi::String::New(env, "VkBindBufferMemoryDeviceGroupInfoKHR"), sVkBindBufferMemoryDeviceGroupInfoKHR);
  Napi::Object sVkBindImageMemoryInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryInfo::sType)));
    
    sVkBindImageMemoryInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryInfo::pNext)));
    
    sVkBindImageMemoryInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryInfo, image)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryInfo::image)));
    
    sVkBindImageMemoryInfo.Set(Napi::String::New(env, "image"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryInfo, memory)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryInfo::memory)));
    
    sVkBindImageMemoryInfo.Set(Napi::String::New(env, "memory"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryInfo, memoryOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryInfo::memoryOffset)));
    
    sVkBindImageMemoryInfo.Set(Napi::String::New(env, "memoryOffset"), obj);
  }
  sVkBindImageMemoryInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryInfo)));
  out.Set(Napi::String::New(env, "VkBindImageMemoryInfo"), sVkBindImageMemoryInfo);
  Napi::Object sVkBindImageMemoryInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryInfoKHR::sType)));
    
    sVkBindImageMemoryInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryInfoKHR::pNext)));
    
    sVkBindImageMemoryInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryInfoKHR, image)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryInfoKHR::image)));
    
    sVkBindImageMemoryInfoKHR.Set(Napi::String::New(env, "image"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryInfoKHR, memory)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryInfoKHR::memory)));
    
    sVkBindImageMemoryInfoKHR.Set(Napi::String::New(env, "memory"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryInfoKHR, memoryOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryInfoKHR::memoryOffset)));
    
    sVkBindImageMemoryInfoKHR.Set(Napi::String::New(env, "memoryOffset"), obj);
  }
  sVkBindImageMemoryInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryInfoKHR)));
  out.Set(Napi::String::New(env, "VkBindImageMemoryInfoKHR"), sVkBindImageMemoryInfoKHR);
  Napi::Object sVkBindImageMemoryDeviceGroupInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfo::sType)));
    
    sVkBindImageMemoryDeviceGroupInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfo::pNext)));
    
    sVkBindImageMemoryDeviceGroupInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfo, deviceIndexCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfo::deviceIndexCount)));
    
    sVkBindImageMemoryDeviceGroupInfo.Set(Napi::String::New(env, "deviceIndexCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfo, pDeviceIndices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfo::pDeviceIndices)));
    
    sVkBindImageMemoryDeviceGroupInfo.Set(Napi::String::New(env, "pDeviceIndices"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfo, splitInstanceBindRegionCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfo::splitInstanceBindRegionCount)));
    
    sVkBindImageMemoryDeviceGroupInfo.Set(Napi::String::New(env, "splitInstanceBindRegionCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfo, pSplitInstanceBindRegions)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfo::pSplitInstanceBindRegions)));
    
    sVkBindImageMemoryDeviceGroupInfo.Set(Napi::String::New(env, "pSplitInstanceBindRegions"), obj);
  }
  sVkBindImageMemoryDeviceGroupInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfo)));
  out.Set(Napi::String::New(env, "VkBindImageMemoryDeviceGroupInfo"), sVkBindImageMemoryDeviceGroupInfo);
  Napi::Object sVkBindImageMemoryDeviceGroupInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfoKHR::sType)));
    
    sVkBindImageMemoryDeviceGroupInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfoKHR::pNext)));
    
    sVkBindImageMemoryDeviceGroupInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfoKHR, deviceIndexCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfoKHR::deviceIndexCount)));
    
    sVkBindImageMemoryDeviceGroupInfoKHR.Set(Napi::String::New(env, "deviceIndexCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfoKHR, pDeviceIndices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfoKHR::pDeviceIndices)));
    
    sVkBindImageMemoryDeviceGroupInfoKHR.Set(Napi::String::New(env, "pDeviceIndices"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfoKHR, splitInstanceBindRegionCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfoKHR::splitInstanceBindRegionCount)));
    
    sVkBindImageMemoryDeviceGroupInfoKHR.Set(Napi::String::New(env, "splitInstanceBindRegionCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfoKHR, pSplitInstanceBindRegions)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfoKHR::pSplitInstanceBindRegions)));
    
    sVkBindImageMemoryDeviceGroupInfoKHR.Set(Napi::String::New(env, "pSplitInstanceBindRegions"), obj);
  }
  sVkBindImageMemoryDeviceGroupInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfoKHR)));
  out.Set(Napi::String::New(env, "VkBindImageMemoryDeviceGroupInfoKHR"), sVkBindImageMemoryDeviceGroupInfoKHR);
  Napi::Object sVkDeviceGroupRenderPassBeginInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupRenderPassBeginInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupRenderPassBeginInfo::sType)));
    
    sVkDeviceGroupRenderPassBeginInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupRenderPassBeginInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupRenderPassBeginInfo::pNext)));
    
    sVkDeviceGroupRenderPassBeginInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupRenderPassBeginInfo, deviceMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupRenderPassBeginInfo::deviceMask)));
    
    sVkDeviceGroupRenderPassBeginInfo.Set(Napi::String::New(env, "deviceMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupRenderPassBeginInfo, deviceRenderAreaCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupRenderPassBeginInfo::deviceRenderAreaCount)));
    
    sVkDeviceGroupRenderPassBeginInfo.Set(Napi::String::New(env, "deviceRenderAreaCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupRenderPassBeginInfo, pDeviceRenderAreas)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupRenderPassBeginInfo::pDeviceRenderAreas)));
    
    sVkDeviceGroupRenderPassBeginInfo.Set(Napi::String::New(env, "pDeviceRenderAreas"), obj);
  }
  sVkDeviceGroupRenderPassBeginInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupRenderPassBeginInfo)));
  out.Set(Napi::String::New(env, "VkDeviceGroupRenderPassBeginInfo"), sVkDeviceGroupRenderPassBeginInfo);
  Napi::Object sVkDeviceGroupRenderPassBeginInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupRenderPassBeginInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupRenderPassBeginInfoKHR::sType)));
    
    sVkDeviceGroupRenderPassBeginInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupRenderPassBeginInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupRenderPassBeginInfoKHR::pNext)));
    
    sVkDeviceGroupRenderPassBeginInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupRenderPassBeginInfoKHR, deviceMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupRenderPassBeginInfoKHR::deviceMask)));
    
    sVkDeviceGroupRenderPassBeginInfoKHR.Set(Napi::String::New(env, "deviceMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupRenderPassBeginInfoKHR, deviceRenderAreaCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupRenderPassBeginInfoKHR::deviceRenderAreaCount)));
    
    sVkDeviceGroupRenderPassBeginInfoKHR.Set(Napi::String::New(env, "deviceRenderAreaCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupRenderPassBeginInfoKHR, pDeviceRenderAreas)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupRenderPassBeginInfoKHR::pDeviceRenderAreas)));
    
    sVkDeviceGroupRenderPassBeginInfoKHR.Set(Napi::String::New(env, "pDeviceRenderAreas"), obj);
  }
  sVkDeviceGroupRenderPassBeginInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupRenderPassBeginInfoKHR)));
  out.Set(Napi::String::New(env, "VkDeviceGroupRenderPassBeginInfoKHR"), sVkDeviceGroupRenderPassBeginInfoKHR);
  Napi::Object sVkDeviceGroupCommandBufferBeginInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupCommandBufferBeginInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupCommandBufferBeginInfo::sType)));
    
    sVkDeviceGroupCommandBufferBeginInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupCommandBufferBeginInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupCommandBufferBeginInfo::pNext)));
    
    sVkDeviceGroupCommandBufferBeginInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupCommandBufferBeginInfo, deviceMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupCommandBufferBeginInfo::deviceMask)));
    
    sVkDeviceGroupCommandBufferBeginInfo.Set(Napi::String::New(env, "deviceMask"), obj);
  }
  sVkDeviceGroupCommandBufferBeginInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupCommandBufferBeginInfo)));
  out.Set(Napi::String::New(env, "VkDeviceGroupCommandBufferBeginInfo"), sVkDeviceGroupCommandBufferBeginInfo);
  Napi::Object sVkDeviceGroupCommandBufferBeginInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupCommandBufferBeginInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupCommandBufferBeginInfoKHR::sType)));
    
    sVkDeviceGroupCommandBufferBeginInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupCommandBufferBeginInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupCommandBufferBeginInfoKHR::pNext)));
    
    sVkDeviceGroupCommandBufferBeginInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupCommandBufferBeginInfoKHR, deviceMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupCommandBufferBeginInfoKHR::deviceMask)));
    
    sVkDeviceGroupCommandBufferBeginInfoKHR.Set(Napi::String::New(env, "deviceMask"), obj);
  }
  sVkDeviceGroupCommandBufferBeginInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupCommandBufferBeginInfoKHR)));
  out.Set(Napi::String::New(env, "VkDeviceGroupCommandBufferBeginInfoKHR"), sVkDeviceGroupCommandBufferBeginInfoKHR);
  Napi::Object sVkDeviceGroupSubmitInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfo::sType)));
    
    sVkDeviceGroupSubmitInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfo::pNext)));
    
    sVkDeviceGroupSubmitInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, waitSemaphoreCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfo::waitSemaphoreCount)));
    
    sVkDeviceGroupSubmitInfo.Set(Napi::String::New(env, "waitSemaphoreCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, pWaitSemaphoreDeviceIndices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfo::pWaitSemaphoreDeviceIndices)));
    
    sVkDeviceGroupSubmitInfo.Set(Napi::String::New(env, "pWaitSemaphoreDeviceIndices"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, commandBufferCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfo::commandBufferCount)));
    
    sVkDeviceGroupSubmitInfo.Set(Napi::String::New(env, "commandBufferCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, pCommandBufferDeviceMasks)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfo::pCommandBufferDeviceMasks)));
    
    sVkDeviceGroupSubmitInfo.Set(Napi::String::New(env, "pCommandBufferDeviceMasks"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, signalSemaphoreCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfo::signalSemaphoreCount)));
    
    sVkDeviceGroupSubmitInfo.Set(Napi::String::New(env, "signalSemaphoreCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, pSignalSemaphoreDeviceIndices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfo::pSignalSemaphoreDeviceIndices)));
    
    sVkDeviceGroupSubmitInfo.Set(Napi::String::New(env, "pSignalSemaphoreDeviceIndices"), obj);
  }
  sVkDeviceGroupSubmitInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfo)));
  out.Set(Napi::String::New(env, "VkDeviceGroupSubmitInfo"), sVkDeviceGroupSubmitInfo);
  Napi::Object sVkDeviceGroupSubmitInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfoKHR::sType)));
    
    sVkDeviceGroupSubmitInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfoKHR::pNext)));
    
    sVkDeviceGroupSubmitInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfoKHR, waitSemaphoreCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfoKHR::waitSemaphoreCount)));
    
    sVkDeviceGroupSubmitInfoKHR.Set(Napi::String::New(env, "waitSemaphoreCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfoKHR, pWaitSemaphoreDeviceIndices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfoKHR::pWaitSemaphoreDeviceIndices)));
    
    sVkDeviceGroupSubmitInfoKHR.Set(Napi::String::New(env, "pWaitSemaphoreDeviceIndices"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfoKHR, commandBufferCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfoKHR::commandBufferCount)));
    
    sVkDeviceGroupSubmitInfoKHR.Set(Napi::String::New(env, "commandBufferCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfoKHR, pCommandBufferDeviceMasks)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfoKHR::pCommandBufferDeviceMasks)));
    
    sVkDeviceGroupSubmitInfoKHR.Set(Napi::String::New(env, "pCommandBufferDeviceMasks"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfoKHR, signalSemaphoreCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfoKHR::signalSemaphoreCount)));
    
    sVkDeviceGroupSubmitInfoKHR.Set(Napi::String::New(env, "signalSemaphoreCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfoKHR, pSignalSemaphoreDeviceIndices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfoKHR::pSignalSemaphoreDeviceIndices)));
    
    sVkDeviceGroupSubmitInfoKHR.Set(Napi::String::New(env, "pSignalSemaphoreDeviceIndices"), obj);
  }
  sVkDeviceGroupSubmitInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfoKHR)));
  out.Set(Napi::String::New(env, "VkDeviceGroupSubmitInfoKHR"), sVkDeviceGroupSubmitInfoKHR);
  Napi::Object sVkDeviceGroupBindSparseInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupBindSparseInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupBindSparseInfo::sType)));
    
    sVkDeviceGroupBindSparseInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupBindSparseInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupBindSparseInfo::pNext)));
    
    sVkDeviceGroupBindSparseInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupBindSparseInfo, resourceDeviceIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupBindSparseInfo::resourceDeviceIndex)));
    
    sVkDeviceGroupBindSparseInfo.Set(Napi::String::New(env, "resourceDeviceIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupBindSparseInfo, memoryDeviceIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupBindSparseInfo::memoryDeviceIndex)));
    
    sVkDeviceGroupBindSparseInfo.Set(Napi::String::New(env, "memoryDeviceIndex"), obj);
  }
  sVkDeviceGroupBindSparseInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupBindSparseInfo)));
  out.Set(Napi::String::New(env, "VkDeviceGroupBindSparseInfo"), sVkDeviceGroupBindSparseInfo);
  Napi::Object sVkDeviceGroupBindSparseInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupBindSparseInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupBindSparseInfoKHR::sType)));
    
    sVkDeviceGroupBindSparseInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupBindSparseInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupBindSparseInfoKHR::pNext)));
    
    sVkDeviceGroupBindSparseInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupBindSparseInfoKHR, resourceDeviceIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupBindSparseInfoKHR::resourceDeviceIndex)));
    
    sVkDeviceGroupBindSparseInfoKHR.Set(Napi::String::New(env, "resourceDeviceIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupBindSparseInfoKHR, memoryDeviceIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupBindSparseInfoKHR::memoryDeviceIndex)));
    
    sVkDeviceGroupBindSparseInfoKHR.Set(Napi::String::New(env, "memoryDeviceIndex"), obj);
  }
  sVkDeviceGroupBindSparseInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupBindSparseInfoKHR)));
  out.Set(Napi::String::New(env, "VkDeviceGroupBindSparseInfoKHR"), sVkDeviceGroupBindSparseInfoKHR);
  Napi::Object sVkDeviceGroupPresentCapabilitiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupPresentCapabilitiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupPresentCapabilitiesKHR::sType)));
    
    sVkDeviceGroupPresentCapabilitiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupPresentCapabilitiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupPresentCapabilitiesKHR::pNext)));
    
    sVkDeviceGroupPresentCapabilitiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupPresentCapabilitiesKHR, presentMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupPresentCapabilitiesKHR::presentMask)));
    
    sVkDeviceGroupPresentCapabilitiesKHR.Set(Napi::String::New(env, "presentMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupPresentCapabilitiesKHR, modes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupPresentCapabilitiesKHR::modes)));
    
    sVkDeviceGroupPresentCapabilitiesKHR.Set(Napi::String::New(env, "modes"), obj);
  }
  sVkDeviceGroupPresentCapabilitiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupPresentCapabilitiesKHR)));
  out.Set(Napi::String::New(env, "VkDeviceGroupPresentCapabilitiesKHR"), sVkDeviceGroupPresentCapabilitiesKHR);
  Napi::Object sVkImageSwapchainCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSwapchainCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSwapchainCreateInfoKHR::sType)));
    
    sVkImageSwapchainCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSwapchainCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSwapchainCreateInfoKHR::pNext)));
    
    sVkImageSwapchainCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSwapchainCreateInfoKHR, swapchain)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSwapchainCreateInfoKHR::swapchain)));
    
    sVkImageSwapchainCreateInfoKHR.Set(Napi::String::New(env, "swapchain"), obj);
  }
  sVkImageSwapchainCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSwapchainCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkImageSwapchainCreateInfoKHR"), sVkImageSwapchainCreateInfoKHR);
  Napi::Object sVkBindImageMemorySwapchainInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemorySwapchainInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemorySwapchainInfoKHR::sType)));
    
    sVkBindImageMemorySwapchainInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemorySwapchainInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemorySwapchainInfoKHR::pNext)));
    
    sVkBindImageMemorySwapchainInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemorySwapchainInfoKHR, swapchain)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemorySwapchainInfoKHR::swapchain)));
    
    sVkBindImageMemorySwapchainInfoKHR.Set(Napi::String::New(env, "swapchain"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImageMemorySwapchainInfoKHR, imageIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemorySwapchainInfoKHR::imageIndex)));
    
    sVkBindImageMemorySwapchainInfoKHR.Set(Napi::String::New(env, "imageIndex"), obj);
  }
  sVkBindImageMemorySwapchainInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImageMemorySwapchainInfoKHR)));
  out.Set(Napi::String::New(env, "VkBindImageMemorySwapchainInfoKHR"), sVkBindImageMemorySwapchainInfoKHR);
  Napi::Object sVkAcquireNextImageInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAcquireNextImageInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAcquireNextImageInfoKHR::sType)));
    
    sVkAcquireNextImageInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAcquireNextImageInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAcquireNextImageInfoKHR::pNext)));
    
    sVkAcquireNextImageInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAcquireNextImageInfoKHR, swapchain)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAcquireNextImageInfoKHR::swapchain)));
    
    sVkAcquireNextImageInfoKHR.Set(Napi::String::New(env, "swapchain"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAcquireNextImageInfoKHR, timeout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAcquireNextImageInfoKHR::timeout)));
    
    sVkAcquireNextImageInfoKHR.Set(Napi::String::New(env, "timeout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAcquireNextImageInfoKHR, semaphore)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAcquireNextImageInfoKHR::semaphore)));
    
    sVkAcquireNextImageInfoKHR.Set(Napi::String::New(env, "semaphore"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAcquireNextImageInfoKHR, fence)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAcquireNextImageInfoKHR::fence)));
    
    sVkAcquireNextImageInfoKHR.Set(Napi::String::New(env, "fence"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAcquireNextImageInfoKHR, deviceMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAcquireNextImageInfoKHR::deviceMask)));
    
    sVkAcquireNextImageInfoKHR.Set(Napi::String::New(env, "deviceMask"), obj);
  }
  sVkAcquireNextImageInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAcquireNextImageInfoKHR)));
  out.Set(Napi::String::New(env, "VkAcquireNextImageInfoKHR"), sVkAcquireNextImageInfoKHR);
  Napi::Object sVkDeviceGroupPresentInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupPresentInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupPresentInfoKHR::sType)));
    
    sVkDeviceGroupPresentInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupPresentInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupPresentInfoKHR::pNext)));
    
    sVkDeviceGroupPresentInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupPresentInfoKHR, swapchainCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupPresentInfoKHR::swapchainCount)));
    
    sVkDeviceGroupPresentInfoKHR.Set(Napi::String::New(env, "swapchainCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupPresentInfoKHR, pDeviceMasks)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupPresentInfoKHR::pDeviceMasks)));
    
    sVkDeviceGroupPresentInfoKHR.Set(Napi::String::New(env, "pDeviceMasks"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupPresentInfoKHR, mode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupPresentInfoKHR::mode)));
    
    sVkDeviceGroupPresentInfoKHR.Set(Napi::String::New(env, "mode"), obj);
  }
  sVkDeviceGroupPresentInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupPresentInfoKHR)));
  out.Set(Napi::String::New(env, "VkDeviceGroupPresentInfoKHR"), sVkDeviceGroupPresentInfoKHR);
  Napi::Object sVkDeviceGroupDeviceCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupDeviceCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupDeviceCreateInfo::sType)));
    
    sVkDeviceGroupDeviceCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupDeviceCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupDeviceCreateInfo::pNext)));
    
    sVkDeviceGroupDeviceCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupDeviceCreateInfo, physicalDeviceCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupDeviceCreateInfo::physicalDeviceCount)));
    
    sVkDeviceGroupDeviceCreateInfo.Set(Napi::String::New(env, "physicalDeviceCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupDeviceCreateInfo, pPhysicalDevices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupDeviceCreateInfo::pPhysicalDevices)));
    
    sVkDeviceGroupDeviceCreateInfo.Set(Napi::String::New(env, "pPhysicalDevices"), obj);
  }
  sVkDeviceGroupDeviceCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupDeviceCreateInfo)));
  out.Set(Napi::String::New(env, "VkDeviceGroupDeviceCreateInfo"), sVkDeviceGroupDeviceCreateInfo);
  Napi::Object sVkDeviceGroupDeviceCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupDeviceCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupDeviceCreateInfoKHR::sType)));
    
    sVkDeviceGroupDeviceCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupDeviceCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupDeviceCreateInfoKHR::pNext)));
    
    sVkDeviceGroupDeviceCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupDeviceCreateInfoKHR, physicalDeviceCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupDeviceCreateInfoKHR::physicalDeviceCount)));
    
    sVkDeviceGroupDeviceCreateInfoKHR.Set(Napi::String::New(env, "physicalDeviceCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupDeviceCreateInfoKHR, pPhysicalDevices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupDeviceCreateInfoKHR::pPhysicalDevices)));
    
    sVkDeviceGroupDeviceCreateInfoKHR.Set(Napi::String::New(env, "pPhysicalDevices"), obj);
  }
  sVkDeviceGroupDeviceCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupDeviceCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkDeviceGroupDeviceCreateInfoKHR"), sVkDeviceGroupDeviceCreateInfoKHR);
  Napi::Object sVkDeviceGroupSwapchainCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSwapchainCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSwapchainCreateInfoKHR::sType)));
    
    sVkDeviceGroupSwapchainCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSwapchainCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSwapchainCreateInfoKHR::pNext)));
    
    sVkDeviceGroupSwapchainCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceGroupSwapchainCreateInfoKHR, modes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSwapchainCreateInfoKHR::modes)));
    
    sVkDeviceGroupSwapchainCreateInfoKHR.Set(Napi::String::New(env, "modes"), obj);
  }
  sVkDeviceGroupSwapchainCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceGroupSwapchainCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkDeviceGroupSwapchainCreateInfoKHR"), sVkDeviceGroupSwapchainCreateInfoKHR);
  Napi::Object sVkDescriptorUpdateTemplateEntry = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntry, dstBinding)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntry::dstBinding)));
    
    sVkDescriptorUpdateTemplateEntry.Set(Napi::String::New(env, "dstBinding"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntry, dstArrayElement)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntry::dstArrayElement)));
    
    sVkDescriptorUpdateTemplateEntry.Set(Napi::String::New(env, "dstArrayElement"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntry, descriptorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntry::descriptorCount)));
    
    sVkDescriptorUpdateTemplateEntry.Set(Napi::String::New(env, "descriptorCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntry, descriptorType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntry::descriptorType)));
    
    sVkDescriptorUpdateTemplateEntry.Set(Napi::String::New(env, "descriptorType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntry, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntry::offset)));
    
    sVkDescriptorUpdateTemplateEntry.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntry, stride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntry::stride)));
    
    sVkDescriptorUpdateTemplateEntry.Set(Napi::String::New(env, "stride"), obj);
  }
  sVkDescriptorUpdateTemplateEntry.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntry)));
  out.Set(Napi::String::New(env, "VkDescriptorUpdateTemplateEntry"), sVkDescriptorUpdateTemplateEntry);
  Napi::Object sVkDescriptorUpdateTemplateEntryKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntryKHR, dstBinding)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntryKHR::dstBinding)));
    
    sVkDescriptorUpdateTemplateEntryKHR.Set(Napi::String::New(env, "dstBinding"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntryKHR, dstArrayElement)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntryKHR::dstArrayElement)));
    
    sVkDescriptorUpdateTemplateEntryKHR.Set(Napi::String::New(env, "dstArrayElement"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntryKHR, descriptorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntryKHR::descriptorCount)));
    
    sVkDescriptorUpdateTemplateEntryKHR.Set(Napi::String::New(env, "descriptorCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntryKHR, descriptorType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntryKHR::descriptorType)));
    
    sVkDescriptorUpdateTemplateEntryKHR.Set(Napi::String::New(env, "descriptorType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntryKHR, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntryKHR::offset)));
    
    sVkDescriptorUpdateTemplateEntryKHR.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntryKHR, stride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntryKHR::stride)));
    
    sVkDescriptorUpdateTemplateEntryKHR.Set(Napi::String::New(env, "stride"), obj);
  }
  sVkDescriptorUpdateTemplateEntryKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntryKHR)));
  out.Set(Napi::String::New(env, "VkDescriptorUpdateTemplateEntryKHR"), sVkDescriptorUpdateTemplateEntryKHR);
  Napi::Object sVkDescriptorUpdateTemplateCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfo::sType)));
    
    sVkDescriptorUpdateTemplateCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfo::pNext)));
    
    sVkDescriptorUpdateTemplateCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfo::flags)));
    
    sVkDescriptorUpdateTemplateCreateInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, descriptorUpdateEntryCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfo::descriptorUpdateEntryCount)));
    
    sVkDescriptorUpdateTemplateCreateInfo.Set(Napi::String::New(env, "descriptorUpdateEntryCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, pDescriptorUpdateEntries)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfo::pDescriptorUpdateEntries)));
    
    sVkDescriptorUpdateTemplateCreateInfo.Set(Napi::String::New(env, "pDescriptorUpdateEntries"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, templateType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfo::templateType)));
    
    sVkDescriptorUpdateTemplateCreateInfo.Set(Napi::String::New(env, "templateType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, descriptorSetLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfo::descriptorSetLayout)));
    
    sVkDescriptorUpdateTemplateCreateInfo.Set(Napi::String::New(env, "descriptorSetLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, pipelineBindPoint)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfo::pipelineBindPoint)));
    
    sVkDescriptorUpdateTemplateCreateInfo.Set(Napi::String::New(env, "pipelineBindPoint"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, pipelineLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfo::pipelineLayout)));
    
    sVkDescriptorUpdateTemplateCreateInfo.Set(Napi::String::New(env, "pipelineLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, set)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfo::set)));
    
    sVkDescriptorUpdateTemplateCreateInfo.Set(Napi::String::New(env, "set"), obj);
  }
  sVkDescriptorUpdateTemplateCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfo)));
  out.Set(Napi::String::New(env, "VkDescriptorUpdateTemplateCreateInfo"), sVkDescriptorUpdateTemplateCreateInfo);
  Napi::Object sVkDescriptorUpdateTemplateCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::sType)));
    
    sVkDescriptorUpdateTemplateCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::pNext)));
    
    sVkDescriptorUpdateTemplateCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::flags)));
    
    sVkDescriptorUpdateTemplateCreateInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, descriptorUpdateEntryCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::descriptorUpdateEntryCount)));
    
    sVkDescriptorUpdateTemplateCreateInfoKHR.Set(Napi::String::New(env, "descriptorUpdateEntryCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, pDescriptorUpdateEntries)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::pDescriptorUpdateEntries)));
    
    sVkDescriptorUpdateTemplateCreateInfoKHR.Set(Napi::String::New(env, "pDescriptorUpdateEntries"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, templateType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::templateType)));
    
    sVkDescriptorUpdateTemplateCreateInfoKHR.Set(Napi::String::New(env, "templateType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, descriptorSetLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::descriptorSetLayout)));
    
    sVkDescriptorUpdateTemplateCreateInfoKHR.Set(Napi::String::New(env, "descriptorSetLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, pipelineBindPoint)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::pipelineBindPoint)));
    
    sVkDescriptorUpdateTemplateCreateInfoKHR.Set(Napi::String::New(env, "pipelineBindPoint"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, pipelineLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::pipelineLayout)));
    
    sVkDescriptorUpdateTemplateCreateInfoKHR.Set(Napi::String::New(env, "pipelineLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, set)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::set)));
    
    sVkDescriptorUpdateTemplateCreateInfoKHR.Set(Napi::String::New(env, "set"), obj);
  }
  sVkDescriptorUpdateTemplateCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkDescriptorUpdateTemplateCreateInfoKHR"), sVkDescriptorUpdateTemplateCreateInfoKHR);
  Napi::Object sVkXYColorEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkXYColorEXT, x)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkXYColorEXT::x)));
    
    sVkXYColorEXT.Set(Napi::String::New(env, "x"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkXYColorEXT, y)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkXYColorEXT::y)));
    
    sVkXYColorEXT.Set(Napi::String::New(env, "y"), obj);
  }
  sVkXYColorEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkXYColorEXT)));
  out.Set(Napi::String::New(env, "VkXYColorEXT"), sVkXYColorEXT);
  Napi::Object sVkHdrMetadataEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkHdrMetadataEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkHdrMetadataEXT::sType)));
    
    sVkHdrMetadataEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkHdrMetadataEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkHdrMetadataEXT::pNext)));
    
    sVkHdrMetadataEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkHdrMetadataEXT, displayPrimaryRed)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkHdrMetadataEXT::displayPrimaryRed)));
    
    sVkHdrMetadataEXT.Set(Napi::String::New(env, "displayPrimaryRed"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkHdrMetadataEXT, displayPrimaryGreen)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkHdrMetadataEXT::displayPrimaryGreen)));
    
    sVkHdrMetadataEXT.Set(Napi::String::New(env, "displayPrimaryGreen"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkHdrMetadataEXT, displayPrimaryBlue)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkHdrMetadataEXT::displayPrimaryBlue)));
    
    sVkHdrMetadataEXT.Set(Napi::String::New(env, "displayPrimaryBlue"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkHdrMetadataEXT, whitePoint)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkHdrMetadataEXT::whitePoint)));
    
    sVkHdrMetadataEXT.Set(Napi::String::New(env, "whitePoint"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkHdrMetadataEXT, maxLuminance)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkHdrMetadataEXT::maxLuminance)));
    
    sVkHdrMetadataEXT.Set(Napi::String::New(env, "maxLuminance"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkHdrMetadataEXT, minLuminance)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkHdrMetadataEXT::minLuminance)));
    
    sVkHdrMetadataEXT.Set(Napi::String::New(env, "minLuminance"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkHdrMetadataEXT, maxContentLightLevel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkHdrMetadataEXT::maxContentLightLevel)));
    
    sVkHdrMetadataEXT.Set(Napi::String::New(env, "maxContentLightLevel"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkHdrMetadataEXT, maxFrameAverageLightLevel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkHdrMetadataEXT::maxFrameAverageLightLevel)));
    
    sVkHdrMetadataEXT.Set(Napi::String::New(env, "maxFrameAverageLightLevel"), obj);
  }
  sVkHdrMetadataEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkHdrMetadataEXT)));
  out.Set(Napi::String::New(env, "VkHdrMetadataEXT"), sVkHdrMetadataEXT);
  Napi::Object sVkDisplayNativeHdrSurfaceCapabilitiesAMD = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayNativeHdrSurfaceCapabilitiesAMD, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayNativeHdrSurfaceCapabilitiesAMD::sType)));
    
    sVkDisplayNativeHdrSurfaceCapabilitiesAMD.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayNativeHdrSurfaceCapabilitiesAMD, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayNativeHdrSurfaceCapabilitiesAMD::pNext)));
    
    sVkDisplayNativeHdrSurfaceCapabilitiesAMD.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayNativeHdrSurfaceCapabilitiesAMD, localDimmingSupport)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayNativeHdrSurfaceCapabilitiesAMD::localDimmingSupport)));
    
    sVkDisplayNativeHdrSurfaceCapabilitiesAMD.Set(Napi::String::New(env, "localDimmingSupport"), obj);
  }
  sVkDisplayNativeHdrSurfaceCapabilitiesAMD.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayNativeHdrSurfaceCapabilitiesAMD)));
  out.Set(Napi::String::New(env, "VkDisplayNativeHdrSurfaceCapabilitiesAMD"), sVkDisplayNativeHdrSurfaceCapabilitiesAMD);
  Napi::Object sVkSwapchainDisplayNativeHdrCreateInfoAMD = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainDisplayNativeHdrCreateInfoAMD, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainDisplayNativeHdrCreateInfoAMD::sType)));
    
    sVkSwapchainDisplayNativeHdrCreateInfoAMD.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainDisplayNativeHdrCreateInfoAMD, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainDisplayNativeHdrCreateInfoAMD::pNext)));
    
    sVkSwapchainDisplayNativeHdrCreateInfoAMD.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSwapchainDisplayNativeHdrCreateInfoAMD, localDimmingEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainDisplayNativeHdrCreateInfoAMD::localDimmingEnable)));
    
    sVkSwapchainDisplayNativeHdrCreateInfoAMD.Set(Napi::String::New(env, "localDimmingEnable"), obj);
  }
  sVkSwapchainDisplayNativeHdrCreateInfoAMD.Set(strByteLength, Napi::Number::New(env, sizeof(VkSwapchainDisplayNativeHdrCreateInfoAMD)));
  out.Set(Napi::String::New(env, "VkSwapchainDisplayNativeHdrCreateInfoAMD"), sVkSwapchainDisplayNativeHdrCreateInfoAMD);
  Napi::Object sVkRefreshCycleDurationGOOGLE = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRefreshCycleDurationGOOGLE, refreshDuration)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRefreshCycleDurationGOOGLE::refreshDuration)));
    
    sVkRefreshCycleDurationGOOGLE.Set(Napi::String::New(env, "refreshDuration"), obj);
  }
  sVkRefreshCycleDurationGOOGLE.Set(strByteLength, Napi::Number::New(env, sizeof(VkRefreshCycleDurationGOOGLE)));
  out.Set(Napi::String::New(env, "VkRefreshCycleDurationGOOGLE"), sVkRefreshCycleDurationGOOGLE);
  Napi::Object sVkPastPresentationTimingGOOGLE = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPastPresentationTimingGOOGLE, presentID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPastPresentationTimingGOOGLE::presentID)));
    
    sVkPastPresentationTimingGOOGLE.Set(Napi::String::New(env, "presentID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPastPresentationTimingGOOGLE, desiredPresentTime)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPastPresentationTimingGOOGLE::desiredPresentTime)));
    
    sVkPastPresentationTimingGOOGLE.Set(Napi::String::New(env, "desiredPresentTime"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPastPresentationTimingGOOGLE, actualPresentTime)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPastPresentationTimingGOOGLE::actualPresentTime)));
    
    sVkPastPresentationTimingGOOGLE.Set(Napi::String::New(env, "actualPresentTime"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPastPresentationTimingGOOGLE, earliestPresentTime)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPastPresentationTimingGOOGLE::earliestPresentTime)));
    
    sVkPastPresentationTimingGOOGLE.Set(Napi::String::New(env, "earliestPresentTime"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPastPresentationTimingGOOGLE, presentMargin)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPastPresentationTimingGOOGLE::presentMargin)));
    
    sVkPastPresentationTimingGOOGLE.Set(Napi::String::New(env, "presentMargin"), obj);
  }
  sVkPastPresentationTimingGOOGLE.Set(strByteLength, Napi::Number::New(env, sizeof(VkPastPresentationTimingGOOGLE)));
  out.Set(Napi::String::New(env, "VkPastPresentationTimingGOOGLE"), sVkPastPresentationTimingGOOGLE);
  Napi::Object sVkPresentTimesInfoGOOGLE = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentTimesInfoGOOGLE, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentTimesInfoGOOGLE::sType)));
    
    sVkPresentTimesInfoGOOGLE.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentTimesInfoGOOGLE, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentTimesInfoGOOGLE::pNext)));
    
    sVkPresentTimesInfoGOOGLE.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentTimesInfoGOOGLE, swapchainCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentTimesInfoGOOGLE::swapchainCount)));
    
    sVkPresentTimesInfoGOOGLE.Set(Napi::String::New(env, "swapchainCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentTimesInfoGOOGLE, pTimes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentTimesInfoGOOGLE::pTimes)));
    
    sVkPresentTimesInfoGOOGLE.Set(Napi::String::New(env, "pTimes"), obj);
  }
  sVkPresentTimesInfoGOOGLE.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentTimesInfoGOOGLE)));
  out.Set(Napi::String::New(env, "VkPresentTimesInfoGOOGLE"), sVkPresentTimesInfoGOOGLE);
  Napi::Object sVkPresentTimeGOOGLE = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentTimeGOOGLE, presentID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentTimeGOOGLE::presentID)));
    
    sVkPresentTimeGOOGLE.Set(Napi::String::New(env, "presentID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPresentTimeGOOGLE, desiredPresentTime)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentTimeGOOGLE::desiredPresentTime)));
    
    sVkPresentTimeGOOGLE.Set(Napi::String::New(env, "desiredPresentTime"), obj);
  }
  sVkPresentTimeGOOGLE.Set(strByteLength, Napi::Number::New(env, sizeof(VkPresentTimeGOOGLE)));
  out.Set(Napi::String::New(env, "VkPresentTimeGOOGLE"), sVkPresentTimeGOOGLE);
  Napi::Object sVkViewportWScalingNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkViewportWScalingNV, xcoeff)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkViewportWScalingNV::xcoeff)));
    
    sVkViewportWScalingNV.Set(Napi::String::New(env, "xcoeff"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkViewportWScalingNV, ycoeff)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkViewportWScalingNV::ycoeff)));
    
    sVkViewportWScalingNV.Set(Napi::String::New(env, "ycoeff"), obj);
  }
  sVkViewportWScalingNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkViewportWScalingNV)));
  out.Set(Napi::String::New(env, "VkViewportWScalingNV"), sVkViewportWScalingNV);
  Napi::Object sVkPipelineViewportWScalingStateCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportWScalingStateCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportWScalingStateCreateInfoNV::sType)));
    
    sVkPipelineViewportWScalingStateCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportWScalingStateCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportWScalingStateCreateInfoNV::pNext)));
    
    sVkPipelineViewportWScalingStateCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportWScalingStateCreateInfoNV, viewportWScalingEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportWScalingStateCreateInfoNV::viewportWScalingEnable)));
    
    sVkPipelineViewportWScalingStateCreateInfoNV.Set(Napi::String::New(env, "viewportWScalingEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportWScalingStateCreateInfoNV, viewportCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportWScalingStateCreateInfoNV::viewportCount)));
    
    sVkPipelineViewportWScalingStateCreateInfoNV.Set(Napi::String::New(env, "viewportCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportWScalingStateCreateInfoNV, pViewportWScalings)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportWScalingStateCreateInfoNV::pViewportWScalings)));
    
    sVkPipelineViewportWScalingStateCreateInfoNV.Set(Napi::String::New(env, "pViewportWScalings"), obj);
  }
  sVkPipelineViewportWScalingStateCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportWScalingStateCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkPipelineViewportWScalingStateCreateInfoNV"), sVkPipelineViewportWScalingStateCreateInfoNV);
  Napi::Object sVkViewportSwizzleNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkViewportSwizzleNV, x)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkViewportSwizzleNV::x)));
    
    sVkViewportSwizzleNV.Set(Napi::String::New(env, "x"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkViewportSwizzleNV, y)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkViewportSwizzleNV::y)));
    
    sVkViewportSwizzleNV.Set(Napi::String::New(env, "y"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkViewportSwizzleNV, z)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkViewportSwizzleNV::z)));
    
    sVkViewportSwizzleNV.Set(Napi::String::New(env, "z"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkViewportSwizzleNV, w)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkViewportSwizzleNV::w)));
    
    sVkViewportSwizzleNV.Set(Napi::String::New(env, "w"), obj);
  }
  sVkViewportSwizzleNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkViewportSwizzleNV)));
  out.Set(Napi::String::New(env, "VkViewportSwizzleNV"), sVkViewportSwizzleNV);
  Napi::Object sVkPipelineViewportSwizzleStateCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportSwizzleStateCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportSwizzleStateCreateInfoNV::sType)));
    
    sVkPipelineViewportSwizzleStateCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportSwizzleStateCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportSwizzleStateCreateInfoNV::pNext)));
    
    sVkPipelineViewportSwizzleStateCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportSwizzleStateCreateInfoNV, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportSwizzleStateCreateInfoNV::flags)));
    
    sVkPipelineViewportSwizzleStateCreateInfoNV.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportSwizzleStateCreateInfoNV, viewportCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportSwizzleStateCreateInfoNV::viewportCount)));
    
    sVkPipelineViewportSwizzleStateCreateInfoNV.Set(Napi::String::New(env, "viewportCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportSwizzleStateCreateInfoNV, pViewportSwizzles)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportSwizzleStateCreateInfoNV::pViewportSwizzles)));
    
    sVkPipelineViewportSwizzleStateCreateInfoNV.Set(Napi::String::New(env, "pViewportSwizzles"), obj);
  }
  sVkPipelineViewportSwizzleStateCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportSwizzleStateCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkPipelineViewportSwizzleStateCreateInfoNV"), sVkPipelineViewportSwizzleStateCreateInfoNV);
  Napi::Object sVkPhysicalDeviceDiscardRectanglePropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDiscardRectanglePropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT::sType)));
    
    sVkPhysicalDeviceDiscardRectanglePropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDiscardRectanglePropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT::pNext)));
    
    sVkPhysicalDeviceDiscardRectanglePropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDiscardRectanglePropertiesEXT, maxDiscardRectangles)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT::maxDiscardRectangles)));
    
    sVkPhysicalDeviceDiscardRectanglePropertiesEXT.Set(Napi::String::New(env, "maxDiscardRectangles"), obj);
  }
  sVkPhysicalDeviceDiscardRectanglePropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceDiscardRectanglePropertiesEXT"), sVkPhysicalDeviceDiscardRectanglePropertiesEXT);
  Napi::Object sVkPipelineDiscardRectangleStateCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT::sType)));
    
    sVkPipelineDiscardRectangleStateCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT::pNext)));
    
    sVkPipelineDiscardRectangleStateCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT::flags)));
    
    sVkPipelineDiscardRectangleStateCreateInfoEXT.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, discardRectangleMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT::discardRectangleMode)));
    
    sVkPipelineDiscardRectangleStateCreateInfoEXT.Set(Napi::String::New(env, "discardRectangleMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, discardRectangleCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT::discardRectangleCount)));
    
    sVkPipelineDiscardRectangleStateCreateInfoEXT.Set(Napi::String::New(env, "discardRectangleCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, pDiscardRectangles)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT::pDiscardRectangles)));
    
    sVkPipelineDiscardRectangleStateCreateInfoEXT.Set(Napi::String::New(env, "pDiscardRectangles"), obj);
  }
  sVkPipelineDiscardRectangleStateCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkPipelineDiscardRectangleStateCreateInfoEXT"), sVkPipelineDiscardRectangleStateCreateInfoEXT);
  Napi::Object sVkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX::sType)));
    
    sVkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX::pNext)));
    
    sVkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX, perViewPositionAllComponents)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX::perViewPositionAllComponents)));
    
    sVkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.Set(Napi::String::New(env, "perViewPositionAllComponents"), obj);
  }
  sVkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX"), sVkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX);
  Napi::Object sVkInputAttachmentAspectReference = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInputAttachmentAspectReference, subpass)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInputAttachmentAspectReference::subpass)));
    
    sVkInputAttachmentAspectReference.Set(Napi::String::New(env, "subpass"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInputAttachmentAspectReference, inputAttachmentIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInputAttachmentAspectReference::inputAttachmentIndex)));
    
    sVkInputAttachmentAspectReference.Set(Napi::String::New(env, "inputAttachmentIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInputAttachmentAspectReference, aspectMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInputAttachmentAspectReference::aspectMask)));
    
    sVkInputAttachmentAspectReference.Set(Napi::String::New(env, "aspectMask"), obj);
  }
  sVkInputAttachmentAspectReference.Set(strByteLength, Napi::Number::New(env, sizeof(VkInputAttachmentAspectReference)));
  out.Set(Napi::String::New(env, "VkInputAttachmentAspectReference"), sVkInputAttachmentAspectReference);
  Napi::Object sVkInputAttachmentAspectReferenceKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInputAttachmentAspectReferenceKHR, subpass)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInputAttachmentAspectReferenceKHR::subpass)));
    
    sVkInputAttachmentAspectReferenceKHR.Set(Napi::String::New(env, "subpass"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInputAttachmentAspectReferenceKHR, inputAttachmentIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInputAttachmentAspectReferenceKHR::inputAttachmentIndex)));
    
    sVkInputAttachmentAspectReferenceKHR.Set(Napi::String::New(env, "inputAttachmentIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInputAttachmentAspectReferenceKHR, aspectMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInputAttachmentAspectReferenceKHR::aspectMask)));
    
    sVkInputAttachmentAspectReferenceKHR.Set(Napi::String::New(env, "aspectMask"), obj);
  }
  sVkInputAttachmentAspectReferenceKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkInputAttachmentAspectReferenceKHR)));
  out.Set(Napi::String::New(env, "VkInputAttachmentAspectReferenceKHR"), sVkInputAttachmentAspectReferenceKHR);
  Napi::Object sVkRenderPassInputAttachmentAspectCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassInputAttachmentAspectCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassInputAttachmentAspectCreateInfo::sType)));
    
    sVkRenderPassInputAttachmentAspectCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassInputAttachmentAspectCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassInputAttachmentAspectCreateInfo::pNext)));
    
    sVkRenderPassInputAttachmentAspectCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassInputAttachmentAspectCreateInfo, aspectReferenceCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassInputAttachmentAspectCreateInfo::aspectReferenceCount)));
    
    sVkRenderPassInputAttachmentAspectCreateInfo.Set(Napi::String::New(env, "aspectReferenceCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassInputAttachmentAspectCreateInfo, pAspectReferences)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassInputAttachmentAspectCreateInfo::pAspectReferences)));
    
    sVkRenderPassInputAttachmentAspectCreateInfo.Set(Napi::String::New(env, "pAspectReferences"), obj);
  }
  sVkRenderPassInputAttachmentAspectCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassInputAttachmentAspectCreateInfo)));
  out.Set(Napi::String::New(env, "VkRenderPassInputAttachmentAspectCreateInfo"), sVkRenderPassInputAttachmentAspectCreateInfo);
  Napi::Object sVkRenderPassInputAttachmentAspectCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassInputAttachmentAspectCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR::sType)));
    
    sVkRenderPassInputAttachmentAspectCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassInputAttachmentAspectCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR::pNext)));
    
    sVkRenderPassInputAttachmentAspectCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassInputAttachmentAspectCreateInfoKHR, aspectReferenceCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR::aspectReferenceCount)));
    
    sVkRenderPassInputAttachmentAspectCreateInfoKHR.Set(Napi::String::New(env, "aspectReferenceCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassInputAttachmentAspectCreateInfoKHR, pAspectReferences)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR::pAspectReferences)));
    
    sVkRenderPassInputAttachmentAspectCreateInfoKHR.Set(Napi::String::New(env, "pAspectReferences"), obj);
  }
  sVkRenderPassInputAttachmentAspectCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkRenderPassInputAttachmentAspectCreateInfoKHR"), sVkRenderPassInputAttachmentAspectCreateInfoKHR);
  Napi::Object sVkPhysicalDeviceSurfaceInfo2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSurfaceInfo2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSurfaceInfo2KHR::sType)));
    
    sVkPhysicalDeviceSurfaceInfo2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSurfaceInfo2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSurfaceInfo2KHR::pNext)));
    
    sVkPhysicalDeviceSurfaceInfo2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSurfaceInfo2KHR, surface)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSurfaceInfo2KHR::surface)));
    
    sVkPhysicalDeviceSurfaceInfo2KHR.Set(Napi::String::New(env, "surface"), obj);
  }
  sVkPhysicalDeviceSurfaceInfo2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSurfaceInfo2KHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceSurfaceInfo2KHR"), sVkPhysicalDeviceSurfaceInfo2KHR);
  Napi::Object sVkSurfaceCapabilities2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2KHR::sType)));
    
    sVkSurfaceCapabilities2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2KHR::pNext)));
    
    sVkSurfaceCapabilities2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilities2KHR, surfaceCapabilities)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2KHR::surfaceCapabilities)));
    
    sVkSurfaceCapabilities2KHR.Set(Napi::String::New(env, "surfaceCapabilities"), obj);
  }
  sVkSurfaceCapabilities2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilities2KHR)));
  out.Set(Napi::String::New(env, "VkSurfaceCapabilities2KHR"), sVkSurfaceCapabilities2KHR);
  Napi::Object sVkSurfaceFormat2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceFormat2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceFormat2KHR::sType)));
    
    sVkSurfaceFormat2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceFormat2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceFormat2KHR::pNext)));
    
    sVkSurfaceFormat2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceFormat2KHR, surfaceFormat)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceFormat2KHR::surfaceFormat)));
    
    sVkSurfaceFormat2KHR.Set(Napi::String::New(env, "surfaceFormat"), obj);
  }
  sVkSurfaceFormat2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceFormat2KHR)));
  out.Set(Napi::String::New(env, "VkSurfaceFormat2KHR"), sVkSurfaceFormat2KHR);
  Napi::Object sVkDisplayProperties2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayProperties2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayProperties2KHR::sType)));
    
    sVkDisplayProperties2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayProperties2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayProperties2KHR::pNext)));
    
    sVkDisplayProperties2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayProperties2KHR, displayProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayProperties2KHR::displayProperties)));
    
    sVkDisplayProperties2KHR.Set(Napi::String::New(env, "displayProperties"), obj);
  }
  sVkDisplayProperties2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayProperties2KHR)));
  out.Set(Napi::String::New(env, "VkDisplayProperties2KHR"), sVkDisplayProperties2KHR);
  Napi::Object sVkDisplayPlaneProperties2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneProperties2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneProperties2KHR::sType)));
    
    sVkDisplayPlaneProperties2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneProperties2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneProperties2KHR::pNext)));
    
    sVkDisplayPlaneProperties2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneProperties2KHR, displayPlaneProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneProperties2KHR::displayPlaneProperties)));
    
    sVkDisplayPlaneProperties2KHR.Set(Napi::String::New(env, "displayPlaneProperties"), obj);
  }
  sVkDisplayPlaneProperties2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneProperties2KHR)));
  out.Set(Napi::String::New(env, "VkDisplayPlaneProperties2KHR"), sVkDisplayPlaneProperties2KHR);
  Napi::Object sVkDisplayModeProperties2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayModeProperties2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayModeProperties2KHR::sType)));
    
    sVkDisplayModeProperties2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayModeProperties2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayModeProperties2KHR::pNext)));
    
    sVkDisplayModeProperties2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayModeProperties2KHR, displayModeProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayModeProperties2KHR::displayModeProperties)));
    
    sVkDisplayModeProperties2KHR.Set(Napi::String::New(env, "displayModeProperties"), obj);
  }
  sVkDisplayModeProperties2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayModeProperties2KHR)));
  out.Set(Napi::String::New(env, "VkDisplayModeProperties2KHR"), sVkDisplayModeProperties2KHR);
  Napi::Object sVkDisplayPlaneInfo2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneInfo2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneInfo2KHR::sType)));
    
    sVkDisplayPlaneInfo2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneInfo2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneInfo2KHR::pNext)));
    
    sVkDisplayPlaneInfo2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneInfo2KHR, mode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneInfo2KHR::mode)));
    
    sVkDisplayPlaneInfo2KHR.Set(Napi::String::New(env, "mode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneInfo2KHR, planeIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneInfo2KHR::planeIndex)));
    
    sVkDisplayPlaneInfo2KHR.Set(Napi::String::New(env, "planeIndex"), obj);
  }
  sVkDisplayPlaneInfo2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneInfo2KHR)));
  out.Set(Napi::String::New(env, "VkDisplayPlaneInfo2KHR"), sVkDisplayPlaneInfo2KHR);
  Napi::Object sVkDisplayPlaneCapabilities2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilities2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilities2KHR::sType)));
    
    sVkDisplayPlaneCapabilities2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilities2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilities2KHR::pNext)));
    
    sVkDisplayPlaneCapabilities2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilities2KHR, capabilities)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilities2KHR::capabilities)));
    
    sVkDisplayPlaneCapabilities2KHR.Set(Napi::String::New(env, "capabilities"), obj);
  }
  sVkDisplayPlaneCapabilities2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilities2KHR)));
  out.Set(Napi::String::New(env, "VkDisplayPlaneCapabilities2KHR"), sVkDisplayPlaneCapabilities2KHR);
  Napi::Object sVkSharedPresentSurfaceCapabilitiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSharedPresentSurfaceCapabilitiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSharedPresentSurfaceCapabilitiesKHR::sType)));
    
    sVkSharedPresentSurfaceCapabilitiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSharedPresentSurfaceCapabilitiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSharedPresentSurfaceCapabilitiesKHR::pNext)));
    
    sVkSharedPresentSurfaceCapabilitiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSharedPresentSurfaceCapabilitiesKHR, sharedPresentSupportedUsageFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSharedPresentSurfaceCapabilitiesKHR::sharedPresentSupportedUsageFlags)));
    
    sVkSharedPresentSurfaceCapabilitiesKHR.Set(Napi::String::New(env, "sharedPresentSupportedUsageFlags"), obj);
  }
  sVkSharedPresentSurfaceCapabilitiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSharedPresentSurfaceCapabilitiesKHR)));
  out.Set(Napi::String::New(env, "VkSharedPresentSurfaceCapabilitiesKHR"), sVkSharedPresentSurfaceCapabilitiesKHR);
  Napi::Object sVkPhysicalDevice16BitStorageFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeatures::sType)));
    
    sVkPhysicalDevice16BitStorageFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeatures::pNext)));
    
    sVkPhysicalDevice16BitStorageFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeatures, storageBuffer16BitAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeatures::storageBuffer16BitAccess)));
    
    sVkPhysicalDevice16BitStorageFeatures.Set(Napi::String::New(env, "storageBuffer16BitAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeatures, uniformAndStorageBuffer16BitAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeatures::uniformAndStorageBuffer16BitAccess)));
    
    sVkPhysicalDevice16BitStorageFeatures.Set(Napi::String::New(env, "uniformAndStorageBuffer16BitAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeatures, storagePushConstant16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeatures::storagePushConstant16)));
    
    sVkPhysicalDevice16BitStorageFeatures.Set(Napi::String::New(env, "storagePushConstant16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeatures, storageInputOutput16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeatures::storageInputOutput16)));
    
    sVkPhysicalDevice16BitStorageFeatures.Set(Napi::String::New(env, "storageInputOutput16"), obj);
  }
  sVkPhysicalDevice16BitStorageFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDevice16BitStorageFeatures"), sVkPhysicalDevice16BitStorageFeatures);
  Napi::Object sVkPhysicalDevice16BitStorageFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeaturesKHR::sType)));
    
    sVkPhysicalDevice16BitStorageFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeaturesKHR::pNext)));
    
    sVkPhysicalDevice16BitStorageFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeaturesKHR, storageBuffer16BitAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeaturesKHR::storageBuffer16BitAccess)));
    
    sVkPhysicalDevice16BitStorageFeaturesKHR.Set(Napi::String::New(env, "storageBuffer16BitAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeaturesKHR, uniformAndStorageBuffer16BitAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeaturesKHR::uniformAndStorageBuffer16BitAccess)));
    
    sVkPhysicalDevice16BitStorageFeaturesKHR.Set(Napi::String::New(env, "uniformAndStorageBuffer16BitAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeaturesKHR, storagePushConstant16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeaturesKHR::storagePushConstant16)));
    
    sVkPhysicalDevice16BitStorageFeaturesKHR.Set(Napi::String::New(env, "storagePushConstant16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeaturesKHR, storageInputOutput16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeaturesKHR::storageInputOutput16)));
    
    sVkPhysicalDevice16BitStorageFeaturesKHR.Set(Napi::String::New(env, "storageInputOutput16"), obj);
  }
  sVkPhysicalDevice16BitStorageFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDevice16BitStorageFeaturesKHR"), sVkPhysicalDevice16BitStorageFeaturesKHR);
  Napi::Object sVkPhysicalDeviceSubgroupProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupProperties::sType)));
    
    sVkPhysicalDeviceSubgroupProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupProperties::pNext)));
    
    sVkPhysicalDeviceSubgroupProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupProperties, subgroupSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupProperties::subgroupSize)));
    
    sVkPhysicalDeviceSubgroupProperties.Set(Napi::String::New(env, "subgroupSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupProperties, supportedStages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupProperties::supportedStages)));
    
    sVkPhysicalDeviceSubgroupProperties.Set(Napi::String::New(env, "supportedStages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupProperties, supportedOperations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupProperties::supportedOperations)));
    
    sVkPhysicalDeviceSubgroupProperties.Set(Napi::String::New(env, "supportedOperations"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupProperties, quadOperationsInAllStages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupProperties::quadOperationsInAllStages)));
    
    sVkPhysicalDeviceSubgroupProperties.Set(Napi::String::New(env, "quadOperationsInAllStages"), obj);
  }
  sVkPhysicalDeviceSubgroupProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupProperties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceSubgroupProperties"), sVkPhysicalDeviceSubgroupProperties);
  Napi::Object sVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures::sType)));
    
    sVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures::pNext)));
    
    sVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, shaderSubgroupExtendedTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures::shaderSubgroupExtendedTypes)));
    
    sVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.Set(Napi::String::New(env, "shaderSubgroupExtendedTypes"), obj);
  }
  sVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures"), sVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures);
  Napi::Object sVkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR::sType)));
    
    sVkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR, shaderSubgroupExtendedTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR::shaderSubgroupExtendedTypes)));
    
    sVkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR.Set(Napi::String::New(env, "shaderSubgroupExtendedTypes"), obj);
  }
  sVkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR"), sVkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR);
  Napi::Object sVkBufferMemoryRequirementsInfo2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferMemoryRequirementsInfo2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryRequirementsInfo2::sType)));
    
    sVkBufferMemoryRequirementsInfo2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferMemoryRequirementsInfo2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryRequirementsInfo2::pNext)));
    
    sVkBufferMemoryRequirementsInfo2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferMemoryRequirementsInfo2, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryRequirementsInfo2::buffer)));
    
    sVkBufferMemoryRequirementsInfo2.Set(Napi::String::New(env, "buffer"), obj);
  }
  sVkBufferMemoryRequirementsInfo2.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryRequirementsInfo2)));
  out.Set(Napi::String::New(env, "VkBufferMemoryRequirementsInfo2"), sVkBufferMemoryRequirementsInfo2);
  Napi::Object sVkBufferMemoryRequirementsInfo2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferMemoryRequirementsInfo2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryRequirementsInfo2KHR::sType)));
    
    sVkBufferMemoryRequirementsInfo2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferMemoryRequirementsInfo2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryRequirementsInfo2KHR::pNext)));
    
    sVkBufferMemoryRequirementsInfo2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferMemoryRequirementsInfo2KHR, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryRequirementsInfo2KHR::buffer)));
    
    sVkBufferMemoryRequirementsInfo2KHR.Set(Napi::String::New(env, "buffer"), obj);
  }
  sVkBufferMemoryRequirementsInfo2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferMemoryRequirementsInfo2KHR)));
  out.Set(Napi::String::New(env, "VkBufferMemoryRequirementsInfo2KHR"), sVkBufferMemoryRequirementsInfo2KHR);
  Napi::Object sVkImageMemoryRequirementsInfo2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryRequirementsInfo2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryRequirementsInfo2::sType)));
    
    sVkImageMemoryRequirementsInfo2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryRequirementsInfo2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryRequirementsInfo2::pNext)));
    
    sVkImageMemoryRequirementsInfo2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryRequirementsInfo2, image)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryRequirementsInfo2::image)));
    
    sVkImageMemoryRequirementsInfo2.Set(Napi::String::New(env, "image"), obj);
  }
  sVkImageMemoryRequirementsInfo2.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryRequirementsInfo2)));
  out.Set(Napi::String::New(env, "VkImageMemoryRequirementsInfo2"), sVkImageMemoryRequirementsInfo2);
  Napi::Object sVkImageMemoryRequirementsInfo2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryRequirementsInfo2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryRequirementsInfo2KHR::sType)));
    
    sVkImageMemoryRequirementsInfo2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryRequirementsInfo2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryRequirementsInfo2KHR::pNext)));
    
    sVkImageMemoryRequirementsInfo2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageMemoryRequirementsInfo2KHR, image)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryRequirementsInfo2KHR::image)));
    
    sVkImageMemoryRequirementsInfo2KHR.Set(Napi::String::New(env, "image"), obj);
  }
  sVkImageMemoryRequirementsInfo2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageMemoryRequirementsInfo2KHR)));
  out.Set(Napi::String::New(env, "VkImageMemoryRequirementsInfo2KHR"), sVkImageMemoryRequirementsInfo2KHR);
  Napi::Object sVkImageSparseMemoryRequirementsInfo2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSparseMemoryRequirementsInfo2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSparseMemoryRequirementsInfo2::sType)));
    
    sVkImageSparseMemoryRequirementsInfo2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSparseMemoryRequirementsInfo2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSparseMemoryRequirementsInfo2::pNext)));
    
    sVkImageSparseMemoryRequirementsInfo2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSparseMemoryRequirementsInfo2, image)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSparseMemoryRequirementsInfo2::image)));
    
    sVkImageSparseMemoryRequirementsInfo2.Set(Napi::String::New(env, "image"), obj);
  }
  sVkImageSparseMemoryRequirementsInfo2.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSparseMemoryRequirementsInfo2)));
  out.Set(Napi::String::New(env, "VkImageSparseMemoryRequirementsInfo2"), sVkImageSparseMemoryRequirementsInfo2);
  Napi::Object sVkImageSparseMemoryRequirementsInfo2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSparseMemoryRequirementsInfo2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSparseMemoryRequirementsInfo2KHR::sType)));
    
    sVkImageSparseMemoryRequirementsInfo2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSparseMemoryRequirementsInfo2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSparseMemoryRequirementsInfo2KHR::pNext)));
    
    sVkImageSparseMemoryRequirementsInfo2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageSparseMemoryRequirementsInfo2KHR, image)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSparseMemoryRequirementsInfo2KHR::image)));
    
    sVkImageSparseMemoryRequirementsInfo2KHR.Set(Napi::String::New(env, "image"), obj);
  }
  sVkImageSparseMemoryRequirementsInfo2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageSparseMemoryRequirementsInfo2KHR)));
  out.Set(Napi::String::New(env, "VkImageSparseMemoryRequirementsInfo2KHR"), sVkImageSparseMemoryRequirementsInfo2KHR);
  Napi::Object sVkMemoryRequirements2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryRequirements2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryRequirements2::sType)));
    
    sVkMemoryRequirements2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryRequirements2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryRequirements2::pNext)));
    
    sVkMemoryRequirements2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryRequirements2, memoryRequirements)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryRequirements2::memoryRequirements)));
    
    sVkMemoryRequirements2.Set(Napi::String::New(env, "memoryRequirements"), obj);
  }
  sVkMemoryRequirements2.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryRequirements2)));
  out.Set(Napi::String::New(env, "VkMemoryRequirements2"), sVkMemoryRequirements2);
  Napi::Object sVkMemoryRequirements2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryRequirements2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryRequirements2KHR::sType)));
    
    sVkMemoryRequirements2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryRequirements2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryRequirements2KHR::pNext)));
    
    sVkMemoryRequirements2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryRequirements2KHR, memoryRequirements)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryRequirements2KHR::memoryRequirements)));
    
    sVkMemoryRequirements2KHR.Set(Napi::String::New(env, "memoryRequirements"), obj);
  }
  sVkMemoryRequirements2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryRequirements2KHR)));
  out.Set(Napi::String::New(env, "VkMemoryRequirements2KHR"), sVkMemoryRequirements2KHR);
  Napi::Object sVkSparseImageMemoryRequirements2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements2::sType)));
    
    sVkSparseImageMemoryRequirements2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements2::pNext)));
    
    sVkSparseImageMemoryRequirements2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements2, memoryRequirements)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements2::memoryRequirements)));
    
    sVkSparseImageMemoryRequirements2.Set(Napi::String::New(env, "memoryRequirements"), obj);
  }
  sVkSparseImageMemoryRequirements2.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements2)));
  out.Set(Napi::String::New(env, "VkSparseImageMemoryRequirements2"), sVkSparseImageMemoryRequirements2);
  Napi::Object sVkSparseImageMemoryRequirements2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements2KHR::sType)));
    
    sVkSparseImageMemoryRequirements2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements2KHR::pNext)));
    
    sVkSparseImageMemoryRequirements2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements2KHR, memoryRequirements)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements2KHR::memoryRequirements)));
    
    sVkSparseImageMemoryRequirements2KHR.Set(Napi::String::New(env, "memoryRequirements"), obj);
  }
  sVkSparseImageMemoryRequirements2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements2KHR)));
  out.Set(Napi::String::New(env, "VkSparseImageMemoryRequirements2KHR"), sVkSparseImageMemoryRequirements2KHR);
  Napi::Object sVkPhysicalDevicePointClippingProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePointClippingProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePointClippingProperties::sType)));
    
    sVkPhysicalDevicePointClippingProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePointClippingProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePointClippingProperties::pNext)));
    
    sVkPhysicalDevicePointClippingProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePointClippingProperties, pointClippingBehavior)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePointClippingProperties::pointClippingBehavior)));
    
    sVkPhysicalDevicePointClippingProperties.Set(Napi::String::New(env, "pointClippingBehavior"), obj);
  }
  sVkPhysicalDevicePointClippingProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePointClippingProperties)));
  out.Set(Napi::String::New(env, "VkPhysicalDevicePointClippingProperties"), sVkPhysicalDevicePointClippingProperties);
  Napi::Object sVkPhysicalDevicePointClippingPropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePointClippingPropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePointClippingPropertiesKHR::sType)));
    
    sVkPhysicalDevicePointClippingPropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePointClippingPropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePointClippingPropertiesKHR::pNext)));
    
    sVkPhysicalDevicePointClippingPropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePointClippingPropertiesKHR, pointClippingBehavior)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePointClippingPropertiesKHR::pointClippingBehavior)));
    
    sVkPhysicalDevicePointClippingPropertiesKHR.Set(Napi::String::New(env, "pointClippingBehavior"), obj);
  }
  sVkPhysicalDevicePointClippingPropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePointClippingPropertiesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDevicePointClippingPropertiesKHR"), sVkPhysicalDevicePointClippingPropertiesKHR);
  Napi::Object sVkMemoryDedicatedRequirements = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedRequirements, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedRequirements::sType)));
    
    sVkMemoryDedicatedRequirements.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedRequirements, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedRequirements::pNext)));
    
    sVkMemoryDedicatedRequirements.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedRequirements, prefersDedicatedAllocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedRequirements::prefersDedicatedAllocation)));
    
    sVkMemoryDedicatedRequirements.Set(Napi::String::New(env, "prefersDedicatedAllocation"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedRequirements, requiresDedicatedAllocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedRequirements::requiresDedicatedAllocation)));
    
    sVkMemoryDedicatedRequirements.Set(Napi::String::New(env, "requiresDedicatedAllocation"), obj);
  }
  sVkMemoryDedicatedRequirements.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedRequirements)));
  out.Set(Napi::String::New(env, "VkMemoryDedicatedRequirements"), sVkMemoryDedicatedRequirements);
  Napi::Object sVkMemoryDedicatedRequirementsKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedRequirementsKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedRequirementsKHR::sType)));
    
    sVkMemoryDedicatedRequirementsKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedRequirementsKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedRequirementsKHR::pNext)));
    
    sVkMemoryDedicatedRequirementsKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedRequirementsKHR, prefersDedicatedAllocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedRequirementsKHR::prefersDedicatedAllocation)));
    
    sVkMemoryDedicatedRequirementsKHR.Set(Napi::String::New(env, "prefersDedicatedAllocation"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedRequirementsKHR, requiresDedicatedAllocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedRequirementsKHR::requiresDedicatedAllocation)));
    
    sVkMemoryDedicatedRequirementsKHR.Set(Napi::String::New(env, "requiresDedicatedAllocation"), obj);
  }
  sVkMemoryDedicatedRequirementsKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedRequirementsKHR)));
  out.Set(Napi::String::New(env, "VkMemoryDedicatedRequirementsKHR"), sVkMemoryDedicatedRequirementsKHR);
  Napi::Object sVkMemoryDedicatedAllocateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedAllocateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedAllocateInfo::sType)));
    
    sVkMemoryDedicatedAllocateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedAllocateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedAllocateInfo::pNext)));
    
    sVkMemoryDedicatedAllocateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedAllocateInfo, image)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedAllocateInfo::image)));
    
    sVkMemoryDedicatedAllocateInfo.Set(Napi::String::New(env, "image"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedAllocateInfo, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedAllocateInfo::buffer)));
    
    sVkMemoryDedicatedAllocateInfo.Set(Napi::String::New(env, "buffer"), obj);
  }
  sVkMemoryDedicatedAllocateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedAllocateInfo)));
  out.Set(Napi::String::New(env, "VkMemoryDedicatedAllocateInfo"), sVkMemoryDedicatedAllocateInfo);
  Napi::Object sVkMemoryDedicatedAllocateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedAllocateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedAllocateInfoKHR::sType)));
    
    sVkMemoryDedicatedAllocateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedAllocateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedAllocateInfoKHR::pNext)));
    
    sVkMemoryDedicatedAllocateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedAllocateInfoKHR, image)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedAllocateInfoKHR::image)));
    
    sVkMemoryDedicatedAllocateInfoKHR.Set(Napi::String::New(env, "image"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryDedicatedAllocateInfoKHR, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedAllocateInfoKHR::buffer)));
    
    sVkMemoryDedicatedAllocateInfoKHR.Set(Napi::String::New(env, "buffer"), obj);
  }
  sVkMemoryDedicatedAllocateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryDedicatedAllocateInfoKHR)));
  out.Set(Napi::String::New(env, "VkMemoryDedicatedAllocateInfoKHR"), sVkMemoryDedicatedAllocateInfoKHR);
  Napi::Object sVkImageViewUsageCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewUsageCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewUsageCreateInfo::sType)));
    
    sVkImageViewUsageCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewUsageCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewUsageCreateInfo::pNext)));
    
    sVkImageViewUsageCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewUsageCreateInfo, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewUsageCreateInfo::usage)));
    
    sVkImageViewUsageCreateInfo.Set(Napi::String::New(env, "usage"), obj);
  }
  sVkImageViewUsageCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewUsageCreateInfo)));
  out.Set(Napi::String::New(env, "VkImageViewUsageCreateInfo"), sVkImageViewUsageCreateInfo);
  Napi::Object sVkImageViewUsageCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewUsageCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewUsageCreateInfoKHR::sType)));
    
    sVkImageViewUsageCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewUsageCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewUsageCreateInfoKHR::pNext)));
    
    sVkImageViewUsageCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewUsageCreateInfoKHR, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewUsageCreateInfoKHR::usage)));
    
    sVkImageViewUsageCreateInfoKHR.Set(Napi::String::New(env, "usage"), obj);
  }
  sVkImageViewUsageCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewUsageCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkImageViewUsageCreateInfoKHR"), sVkImageViewUsageCreateInfoKHR);
  Napi::Object sVkPipelineTessellationDomainOriginStateCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineTessellationDomainOriginStateCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineTessellationDomainOriginStateCreateInfo::sType)));
    
    sVkPipelineTessellationDomainOriginStateCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineTessellationDomainOriginStateCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineTessellationDomainOriginStateCreateInfo::pNext)));
    
    sVkPipelineTessellationDomainOriginStateCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineTessellationDomainOriginStateCreateInfo, domainOrigin)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineTessellationDomainOriginStateCreateInfo::domainOrigin)));
    
    sVkPipelineTessellationDomainOriginStateCreateInfo.Set(Napi::String::New(env, "domainOrigin"), obj);
  }
  sVkPipelineTessellationDomainOriginStateCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineTessellationDomainOriginStateCreateInfo)));
  out.Set(Napi::String::New(env, "VkPipelineTessellationDomainOriginStateCreateInfo"), sVkPipelineTessellationDomainOriginStateCreateInfo);
  Napi::Object sVkPipelineTessellationDomainOriginStateCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineTessellationDomainOriginStateCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineTessellationDomainOriginStateCreateInfoKHR::sType)));
    
    sVkPipelineTessellationDomainOriginStateCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineTessellationDomainOriginStateCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineTessellationDomainOriginStateCreateInfoKHR::pNext)));
    
    sVkPipelineTessellationDomainOriginStateCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineTessellationDomainOriginStateCreateInfoKHR, domainOrigin)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineTessellationDomainOriginStateCreateInfoKHR::domainOrigin)));
    
    sVkPipelineTessellationDomainOriginStateCreateInfoKHR.Set(Napi::String::New(env, "domainOrigin"), obj);
  }
  sVkPipelineTessellationDomainOriginStateCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineTessellationDomainOriginStateCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkPipelineTessellationDomainOriginStateCreateInfoKHR"), sVkPipelineTessellationDomainOriginStateCreateInfoKHR);
  Napi::Object sVkSamplerYcbcrConversionInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionInfo::sType)));
    
    sVkSamplerYcbcrConversionInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionInfo::pNext)));
    
    sVkSamplerYcbcrConversionInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionInfo, conversion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionInfo::conversion)));
    
    sVkSamplerYcbcrConversionInfo.Set(Napi::String::New(env, "conversion"), obj);
  }
  sVkSamplerYcbcrConversionInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionInfo)));
  out.Set(Napi::String::New(env, "VkSamplerYcbcrConversionInfo"), sVkSamplerYcbcrConversionInfo);
  Napi::Object sVkSamplerYcbcrConversionInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionInfoKHR::sType)));
    
    sVkSamplerYcbcrConversionInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionInfoKHR::pNext)));
    
    sVkSamplerYcbcrConversionInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionInfoKHR, conversion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionInfoKHR::conversion)));
    
    sVkSamplerYcbcrConversionInfoKHR.Set(Napi::String::New(env, "conversion"), obj);
  }
  sVkSamplerYcbcrConversionInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionInfoKHR)));
  out.Set(Napi::String::New(env, "VkSamplerYcbcrConversionInfoKHR"), sVkSamplerYcbcrConversionInfoKHR);
  Napi::Object sVkSamplerYcbcrConversionCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfo::sType)));
    
    sVkSamplerYcbcrConversionCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfo::pNext)));
    
    sVkSamplerYcbcrConversionCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfo::format)));
    
    sVkSamplerYcbcrConversionCreateInfo.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, ycbcrModel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfo::ycbcrModel)));
    
    sVkSamplerYcbcrConversionCreateInfo.Set(Napi::String::New(env, "ycbcrModel"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, ycbcrRange)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfo::ycbcrRange)));
    
    sVkSamplerYcbcrConversionCreateInfo.Set(Napi::String::New(env, "ycbcrRange"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, components)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfo::components)));
    
    sVkSamplerYcbcrConversionCreateInfo.Set(Napi::String::New(env, "components"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, xChromaOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfo::xChromaOffset)));
    
    sVkSamplerYcbcrConversionCreateInfo.Set(Napi::String::New(env, "xChromaOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, yChromaOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfo::yChromaOffset)));
    
    sVkSamplerYcbcrConversionCreateInfo.Set(Napi::String::New(env, "yChromaOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, chromaFilter)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfo::chromaFilter)));
    
    sVkSamplerYcbcrConversionCreateInfo.Set(Napi::String::New(env, "chromaFilter"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, forceExplicitReconstruction)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfo::forceExplicitReconstruction)));
    
    sVkSamplerYcbcrConversionCreateInfo.Set(Napi::String::New(env, "forceExplicitReconstruction"), obj);
  }
  sVkSamplerYcbcrConversionCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfo)));
  out.Set(Napi::String::New(env, "VkSamplerYcbcrConversionCreateInfo"), sVkSamplerYcbcrConversionCreateInfo);
  Napi::Object sVkSamplerYcbcrConversionCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfoKHR::sType)));
    
    sVkSamplerYcbcrConversionCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfoKHR::pNext)));
    
    sVkSamplerYcbcrConversionCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfoKHR, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfoKHR::format)));
    
    sVkSamplerYcbcrConversionCreateInfoKHR.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfoKHR, ycbcrModel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfoKHR::ycbcrModel)));
    
    sVkSamplerYcbcrConversionCreateInfoKHR.Set(Napi::String::New(env, "ycbcrModel"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfoKHR, ycbcrRange)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfoKHR::ycbcrRange)));
    
    sVkSamplerYcbcrConversionCreateInfoKHR.Set(Napi::String::New(env, "ycbcrRange"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfoKHR, components)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfoKHR::components)));
    
    sVkSamplerYcbcrConversionCreateInfoKHR.Set(Napi::String::New(env, "components"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfoKHR, xChromaOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfoKHR::xChromaOffset)));
    
    sVkSamplerYcbcrConversionCreateInfoKHR.Set(Napi::String::New(env, "xChromaOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfoKHR, yChromaOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfoKHR::yChromaOffset)));
    
    sVkSamplerYcbcrConversionCreateInfoKHR.Set(Napi::String::New(env, "yChromaOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfoKHR, chromaFilter)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfoKHR::chromaFilter)));
    
    sVkSamplerYcbcrConversionCreateInfoKHR.Set(Napi::String::New(env, "chromaFilter"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfoKHR, forceExplicitReconstruction)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfoKHR::forceExplicitReconstruction)));
    
    sVkSamplerYcbcrConversionCreateInfoKHR.Set(Napi::String::New(env, "forceExplicitReconstruction"), obj);
  }
  sVkSamplerYcbcrConversionCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkSamplerYcbcrConversionCreateInfoKHR"), sVkSamplerYcbcrConversionCreateInfoKHR);
  Napi::Object sVkBindImagePlaneMemoryInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImagePlaneMemoryInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImagePlaneMemoryInfo::sType)));
    
    sVkBindImagePlaneMemoryInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImagePlaneMemoryInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImagePlaneMemoryInfo::pNext)));
    
    sVkBindImagePlaneMemoryInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImagePlaneMemoryInfo, planeAspect)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImagePlaneMemoryInfo::planeAspect)));
    
    sVkBindImagePlaneMemoryInfo.Set(Napi::String::New(env, "planeAspect"), obj);
  }
  sVkBindImagePlaneMemoryInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImagePlaneMemoryInfo)));
  out.Set(Napi::String::New(env, "VkBindImagePlaneMemoryInfo"), sVkBindImagePlaneMemoryInfo);
  Napi::Object sVkBindImagePlaneMemoryInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImagePlaneMemoryInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImagePlaneMemoryInfoKHR::sType)));
    
    sVkBindImagePlaneMemoryInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImagePlaneMemoryInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImagePlaneMemoryInfoKHR::pNext)));
    
    sVkBindImagePlaneMemoryInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindImagePlaneMemoryInfoKHR, planeAspect)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImagePlaneMemoryInfoKHR::planeAspect)));
    
    sVkBindImagePlaneMemoryInfoKHR.Set(Napi::String::New(env, "planeAspect"), obj);
  }
  sVkBindImagePlaneMemoryInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindImagePlaneMemoryInfoKHR)));
  out.Set(Napi::String::New(env, "VkBindImagePlaneMemoryInfoKHR"), sVkBindImagePlaneMemoryInfoKHR);
  Napi::Object sVkImagePlaneMemoryRequirementsInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImagePlaneMemoryRequirementsInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImagePlaneMemoryRequirementsInfo::sType)));
    
    sVkImagePlaneMemoryRequirementsInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImagePlaneMemoryRequirementsInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImagePlaneMemoryRequirementsInfo::pNext)));
    
    sVkImagePlaneMemoryRequirementsInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImagePlaneMemoryRequirementsInfo, planeAspect)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImagePlaneMemoryRequirementsInfo::planeAspect)));
    
    sVkImagePlaneMemoryRequirementsInfo.Set(Napi::String::New(env, "planeAspect"), obj);
  }
  sVkImagePlaneMemoryRequirementsInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkImagePlaneMemoryRequirementsInfo)));
  out.Set(Napi::String::New(env, "VkImagePlaneMemoryRequirementsInfo"), sVkImagePlaneMemoryRequirementsInfo);
  Napi::Object sVkImagePlaneMemoryRequirementsInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImagePlaneMemoryRequirementsInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImagePlaneMemoryRequirementsInfoKHR::sType)));
    
    sVkImagePlaneMemoryRequirementsInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImagePlaneMemoryRequirementsInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImagePlaneMemoryRequirementsInfoKHR::pNext)));
    
    sVkImagePlaneMemoryRequirementsInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImagePlaneMemoryRequirementsInfoKHR, planeAspect)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImagePlaneMemoryRequirementsInfoKHR::planeAspect)));
    
    sVkImagePlaneMemoryRequirementsInfoKHR.Set(Napi::String::New(env, "planeAspect"), obj);
  }
  sVkImagePlaneMemoryRequirementsInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImagePlaneMemoryRequirementsInfoKHR)));
  out.Set(Napi::String::New(env, "VkImagePlaneMemoryRequirementsInfoKHR"), sVkImagePlaneMemoryRequirementsInfoKHR);
  Napi::Object sVkPhysicalDeviceSamplerYcbcrConversionFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures::sType)));
    
    sVkPhysicalDeviceSamplerYcbcrConversionFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures::pNext)));
    
    sVkPhysicalDeviceSamplerYcbcrConversionFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeatures, samplerYcbcrConversion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures::samplerYcbcrConversion)));
    
    sVkPhysicalDeviceSamplerYcbcrConversionFeatures.Set(Napi::String::New(env, "samplerYcbcrConversion"), obj);
  }
  sVkPhysicalDeviceSamplerYcbcrConversionFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceSamplerYcbcrConversionFeatures"), sVkPhysicalDeviceSamplerYcbcrConversionFeatures);
  Napi::Object sVkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR::sType)));
    
    sVkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR, samplerYcbcrConversion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR::samplerYcbcrConversion)));
    
    sVkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.Set(Napi::String::New(env, "samplerYcbcrConversion"), obj);
  }
  sVkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR"), sVkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR);
  Napi::Object sVkSamplerYcbcrConversionImageFormatProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionImageFormatProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionImageFormatProperties::sType)));
    
    sVkSamplerYcbcrConversionImageFormatProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionImageFormatProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionImageFormatProperties::pNext)));
    
    sVkSamplerYcbcrConversionImageFormatProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionImageFormatProperties, combinedImageSamplerDescriptorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionImageFormatProperties::combinedImageSamplerDescriptorCount)));
    
    sVkSamplerYcbcrConversionImageFormatProperties.Set(Napi::String::New(env, "combinedImageSamplerDescriptorCount"), obj);
  }
  sVkSamplerYcbcrConversionImageFormatProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionImageFormatProperties)));
  out.Set(Napi::String::New(env, "VkSamplerYcbcrConversionImageFormatProperties"), sVkSamplerYcbcrConversionImageFormatProperties);
  Napi::Object sVkSamplerYcbcrConversionImageFormatPropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionImageFormatPropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionImageFormatPropertiesKHR::sType)));
    
    sVkSamplerYcbcrConversionImageFormatPropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionImageFormatPropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionImageFormatPropertiesKHR::pNext)));
    
    sVkSamplerYcbcrConversionImageFormatPropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionImageFormatPropertiesKHR, combinedImageSamplerDescriptorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionImageFormatPropertiesKHR::combinedImageSamplerDescriptorCount)));
    
    sVkSamplerYcbcrConversionImageFormatPropertiesKHR.Set(Napi::String::New(env, "combinedImageSamplerDescriptorCount"), obj);
  }
  sVkSamplerYcbcrConversionImageFormatPropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionImageFormatPropertiesKHR)));
  out.Set(Napi::String::New(env, "VkSamplerYcbcrConversionImageFormatPropertiesKHR"), sVkSamplerYcbcrConversionImageFormatPropertiesKHR);
  Napi::Object sVkTextureLODGatherFormatPropertiesAMD = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTextureLODGatherFormatPropertiesAMD, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTextureLODGatherFormatPropertiesAMD::sType)));
    
    sVkTextureLODGatherFormatPropertiesAMD.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTextureLODGatherFormatPropertiesAMD, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTextureLODGatherFormatPropertiesAMD::pNext)));
    
    sVkTextureLODGatherFormatPropertiesAMD.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTextureLODGatherFormatPropertiesAMD, supportsTextureGatherLODBiasAMD)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTextureLODGatherFormatPropertiesAMD::supportsTextureGatherLODBiasAMD)));
    
    sVkTextureLODGatherFormatPropertiesAMD.Set(Napi::String::New(env, "supportsTextureGatherLODBiasAMD"), obj);
  }
  sVkTextureLODGatherFormatPropertiesAMD.Set(strByteLength, Napi::Number::New(env, sizeof(VkTextureLODGatherFormatPropertiesAMD)));
  out.Set(Napi::String::New(env, "VkTextureLODGatherFormatPropertiesAMD"), sVkTextureLODGatherFormatPropertiesAMD);
  Napi::Object sVkConditionalRenderingBeginInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkConditionalRenderingBeginInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkConditionalRenderingBeginInfoEXT::sType)));
    
    sVkConditionalRenderingBeginInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkConditionalRenderingBeginInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkConditionalRenderingBeginInfoEXT::pNext)));
    
    sVkConditionalRenderingBeginInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkConditionalRenderingBeginInfoEXT, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkConditionalRenderingBeginInfoEXT::buffer)));
    
    sVkConditionalRenderingBeginInfoEXT.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkConditionalRenderingBeginInfoEXT, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkConditionalRenderingBeginInfoEXT::offset)));
    
    sVkConditionalRenderingBeginInfoEXT.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkConditionalRenderingBeginInfoEXT, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkConditionalRenderingBeginInfoEXT::flags)));
    
    sVkConditionalRenderingBeginInfoEXT.Set(Napi::String::New(env, "flags"), obj);
  }
  sVkConditionalRenderingBeginInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkConditionalRenderingBeginInfoEXT)));
  out.Set(Napi::String::New(env, "VkConditionalRenderingBeginInfoEXT"), sVkConditionalRenderingBeginInfoEXT);
  Napi::Object sVkProtectedSubmitInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkProtectedSubmitInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkProtectedSubmitInfo::sType)));
    
    sVkProtectedSubmitInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkProtectedSubmitInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkProtectedSubmitInfo::pNext)));
    
    sVkProtectedSubmitInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkProtectedSubmitInfo, protectedSubmit)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkProtectedSubmitInfo::protectedSubmit)));
    
    sVkProtectedSubmitInfo.Set(Napi::String::New(env, "protectedSubmit"), obj);
  }
  sVkProtectedSubmitInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkProtectedSubmitInfo)));
  out.Set(Napi::String::New(env, "VkProtectedSubmitInfo"), sVkProtectedSubmitInfo);
  Napi::Object sVkPhysicalDeviceProtectedMemoryFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProtectedMemoryFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProtectedMemoryFeatures::sType)));
    
    sVkPhysicalDeviceProtectedMemoryFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProtectedMemoryFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProtectedMemoryFeatures::pNext)));
    
    sVkPhysicalDeviceProtectedMemoryFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProtectedMemoryFeatures, protectedMemory)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProtectedMemoryFeatures::protectedMemory)));
    
    sVkPhysicalDeviceProtectedMemoryFeatures.Set(Napi::String::New(env, "protectedMemory"), obj);
  }
  sVkPhysicalDeviceProtectedMemoryFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProtectedMemoryFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceProtectedMemoryFeatures"), sVkPhysicalDeviceProtectedMemoryFeatures);
  Napi::Object sVkPhysicalDeviceProtectedMemoryProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProtectedMemoryProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProtectedMemoryProperties::sType)));
    
    sVkPhysicalDeviceProtectedMemoryProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProtectedMemoryProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProtectedMemoryProperties::pNext)));
    
    sVkPhysicalDeviceProtectedMemoryProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceProtectedMemoryProperties, protectedNoFault)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProtectedMemoryProperties::protectedNoFault)));
    
    sVkPhysicalDeviceProtectedMemoryProperties.Set(Napi::String::New(env, "protectedNoFault"), obj);
  }
  sVkPhysicalDeviceProtectedMemoryProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceProtectedMemoryProperties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceProtectedMemoryProperties"), sVkPhysicalDeviceProtectedMemoryProperties);
  Napi::Object sVkDeviceQueueInfo2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceQueueInfo2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueInfo2::sType)));
    
    sVkDeviceQueueInfo2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceQueueInfo2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueInfo2::pNext)));
    
    sVkDeviceQueueInfo2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceQueueInfo2, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueInfo2::flags)));
    
    sVkDeviceQueueInfo2.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceQueueInfo2, queueFamilyIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueInfo2::queueFamilyIndex)));
    
    sVkDeviceQueueInfo2.Set(Napi::String::New(env, "queueFamilyIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceQueueInfo2, queueIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueInfo2::queueIndex)));
    
    sVkDeviceQueueInfo2.Set(Napi::String::New(env, "queueIndex"), obj);
  }
  sVkDeviceQueueInfo2.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueInfo2)));
  out.Set(Napi::String::New(env, "VkDeviceQueueInfo2"), sVkDeviceQueueInfo2);
  Napi::Object sVkPipelineCoverageToColorStateCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageToColorStateCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageToColorStateCreateInfoNV::sType)));
    
    sVkPipelineCoverageToColorStateCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageToColorStateCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageToColorStateCreateInfoNV::pNext)));
    
    sVkPipelineCoverageToColorStateCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageToColorStateCreateInfoNV, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageToColorStateCreateInfoNV::flags)));
    
    sVkPipelineCoverageToColorStateCreateInfoNV.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageToColorStateCreateInfoNV, coverageToColorEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageToColorStateCreateInfoNV::coverageToColorEnable)));
    
    sVkPipelineCoverageToColorStateCreateInfoNV.Set(Napi::String::New(env, "coverageToColorEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageToColorStateCreateInfoNV, coverageToColorLocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageToColorStateCreateInfoNV::coverageToColorLocation)));
    
    sVkPipelineCoverageToColorStateCreateInfoNV.Set(Napi::String::New(env, "coverageToColorLocation"), obj);
  }
  sVkPipelineCoverageToColorStateCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageToColorStateCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkPipelineCoverageToColorStateCreateInfoNV"), sVkPipelineCoverageToColorStateCreateInfoNV);
  Napi::Object sVkPhysicalDeviceSamplerFilterMinmaxProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerFilterMinmaxProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerFilterMinmaxProperties::sType)));
    
    sVkPhysicalDeviceSamplerFilterMinmaxProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerFilterMinmaxProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerFilterMinmaxProperties::pNext)));
    
    sVkPhysicalDeviceSamplerFilterMinmaxProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerFilterMinmaxProperties, filterMinmaxSingleComponentFormats)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerFilterMinmaxProperties::filterMinmaxSingleComponentFormats)));
    
    sVkPhysicalDeviceSamplerFilterMinmaxProperties.Set(Napi::String::New(env, "filterMinmaxSingleComponentFormats"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerFilterMinmaxProperties, filterMinmaxImageComponentMapping)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerFilterMinmaxProperties::filterMinmaxImageComponentMapping)));
    
    sVkPhysicalDeviceSamplerFilterMinmaxProperties.Set(Napi::String::New(env, "filterMinmaxImageComponentMapping"), obj);
  }
  sVkPhysicalDeviceSamplerFilterMinmaxProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerFilterMinmaxProperties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceSamplerFilterMinmaxProperties"), sVkPhysicalDeviceSamplerFilterMinmaxProperties);
  Napi::Object sVkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT::sType)));
    
    sVkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT, filterMinmaxSingleComponentFormats)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT::filterMinmaxSingleComponentFormats)));
    
    sVkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.Set(Napi::String::New(env, "filterMinmaxSingleComponentFormats"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT, filterMinmaxImageComponentMapping)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT::filterMinmaxImageComponentMapping)));
    
    sVkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.Set(Napi::String::New(env, "filterMinmaxImageComponentMapping"), obj);
  }
  sVkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT"), sVkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT);
  Napi::Object sVkSampleLocationEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSampleLocationEXT, x)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSampleLocationEXT::x)));
    
    sVkSampleLocationEXT.Set(Napi::String::New(env, "x"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSampleLocationEXT, y)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSampleLocationEXT::y)));
    
    sVkSampleLocationEXT.Set(Napi::String::New(env, "y"), obj);
  }
  sVkSampleLocationEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkSampleLocationEXT)));
  out.Set(Napi::String::New(env, "VkSampleLocationEXT"), sVkSampleLocationEXT);
  Napi::Object sVkSampleLocationsInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSampleLocationsInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSampleLocationsInfoEXT::sType)));
    
    sVkSampleLocationsInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSampleLocationsInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSampleLocationsInfoEXT::pNext)));
    
    sVkSampleLocationsInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSampleLocationsInfoEXT, sampleLocationsPerPixel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSampleLocationsInfoEXT::sampleLocationsPerPixel)));
    
    sVkSampleLocationsInfoEXT.Set(Napi::String::New(env, "sampleLocationsPerPixel"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSampleLocationsInfoEXT, sampleLocationGridSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSampleLocationsInfoEXT::sampleLocationGridSize)));
    
    sVkSampleLocationsInfoEXT.Set(Napi::String::New(env, "sampleLocationGridSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSampleLocationsInfoEXT, sampleLocationsCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSampleLocationsInfoEXT::sampleLocationsCount)));
    
    sVkSampleLocationsInfoEXT.Set(Napi::String::New(env, "sampleLocationsCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSampleLocationsInfoEXT, pSampleLocations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSampleLocationsInfoEXT::pSampleLocations)));
    
    sVkSampleLocationsInfoEXT.Set(Napi::String::New(env, "pSampleLocations"), obj);
  }
  sVkSampleLocationsInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkSampleLocationsInfoEXT)));
  out.Set(Napi::String::New(env, "VkSampleLocationsInfoEXT"), sVkSampleLocationsInfoEXT);
  Napi::Object sVkAttachmentSampleLocationsEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentSampleLocationsEXT, attachmentIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentSampleLocationsEXT::attachmentIndex)));
    
    sVkAttachmentSampleLocationsEXT.Set(Napi::String::New(env, "attachmentIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentSampleLocationsEXT, sampleLocationsInfo)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentSampleLocationsEXT::sampleLocationsInfo)));
    
    sVkAttachmentSampleLocationsEXT.Set(Napi::String::New(env, "sampleLocationsInfo"), obj);
  }
  sVkAttachmentSampleLocationsEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentSampleLocationsEXT)));
  out.Set(Napi::String::New(env, "VkAttachmentSampleLocationsEXT"), sVkAttachmentSampleLocationsEXT);
  Napi::Object sVkSubpassSampleLocationsEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassSampleLocationsEXT, subpassIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassSampleLocationsEXT::subpassIndex)));
    
    sVkSubpassSampleLocationsEXT.Set(Napi::String::New(env, "subpassIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassSampleLocationsEXT, sampleLocationsInfo)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassSampleLocationsEXT::sampleLocationsInfo)));
    
    sVkSubpassSampleLocationsEXT.Set(Napi::String::New(env, "sampleLocationsInfo"), obj);
  }
  sVkSubpassSampleLocationsEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassSampleLocationsEXT)));
  out.Set(Napi::String::New(env, "VkSubpassSampleLocationsEXT"), sVkSubpassSampleLocationsEXT);
  Napi::Object sVkRenderPassSampleLocationsBeginInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassSampleLocationsBeginInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassSampleLocationsBeginInfoEXT::sType)));
    
    sVkRenderPassSampleLocationsBeginInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassSampleLocationsBeginInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassSampleLocationsBeginInfoEXT::pNext)));
    
    sVkRenderPassSampleLocationsBeginInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassSampleLocationsBeginInfoEXT, attachmentInitialSampleLocationsCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassSampleLocationsBeginInfoEXT::attachmentInitialSampleLocationsCount)));
    
    sVkRenderPassSampleLocationsBeginInfoEXT.Set(Napi::String::New(env, "attachmentInitialSampleLocationsCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassSampleLocationsBeginInfoEXT, pAttachmentInitialSampleLocations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassSampleLocationsBeginInfoEXT::pAttachmentInitialSampleLocations)));
    
    sVkRenderPassSampleLocationsBeginInfoEXT.Set(Napi::String::New(env, "pAttachmentInitialSampleLocations"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassSampleLocationsBeginInfoEXT, postSubpassSampleLocationsCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassSampleLocationsBeginInfoEXT::postSubpassSampleLocationsCount)));
    
    sVkRenderPassSampleLocationsBeginInfoEXT.Set(Napi::String::New(env, "postSubpassSampleLocationsCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassSampleLocationsBeginInfoEXT, pPostSubpassSampleLocations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassSampleLocationsBeginInfoEXT::pPostSubpassSampleLocations)));
    
    sVkRenderPassSampleLocationsBeginInfoEXT.Set(Napi::String::New(env, "pPostSubpassSampleLocations"), obj);
  }
  sVkRenderPassSampleLocationsBeginInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassSampleLocationsBeginInfoEXT)));
  out.Set(Napi::String::New(env, "VkRenderPassSampleLocationsBeginInfoEXT"), sVkRenderPassSampleLocationsBeginInfoEXT);
  Napi::Object sVkPipelineSampleLocationsStateCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineSampleLocationsStateCreateInfoEXT::sType)));
    
    sVkPipelineSampleLocationsStateCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineSampleLocationsStateCreateInfoEXT::pNext)));
    
    sVkPipelineSampleLocationsStateCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, sampleLocationsEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable)));
    
    sVkPipelineSampleLocationsStateCreateInfoEXT.Set(Napi::String::New(env, "sampleLocationsEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, sampleLocationsInfo)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsInfo)));
    
    sVkPipelineSampleLocationsStateCreateInfoEXT.Set(Napi::String::New(env, "sampleLocationsInfo"), obj);
  }
  sVkPipelineSampleLocationsStateCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineSampleLocationsStateCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkPipelineSampleLocationsStateCreateInfoEXT"), sVkPipelineSampleLocationsStateCreateInfoEXT);
  Napi::Object sVkPhysicalDeviceSampleLocationsPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT::sType)));
    
    sVkPhysicalDeviceSampleLocationsPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceSampleLocationsPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationSampleCounts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT::sampleLocationSampleCounts)));
    
    sVkPhysicalDeviceSampleLocationsPropertiesEXT.Set(Napi::String::New(env, "sampleLocationSampleCounts"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, maxSampleLocationGridSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT::maxSampleLocationGridSize)));
    
    sVkPhysicalDeviceSampleLocationsPropertiesEXT.Set(Napi::String::New(env, "maxSampleLocationGridSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationCoordinateRange)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT::sampleLocationCoordinateRange)));
    
    sVkPhysicalDeviceSampleLocationsPropertiesEXT.Set(Napi::String::New(env, "sampleLocationCoordinateRange"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationSubPixelBits)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT::sampleLocationSubPixelBits)));
    
    sVkPhysicalDeviceSampleLocationsPropertiesEXT.Set(Napi::String::New(env, "sampleLocationSubPixelBits"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, variableSampleLocations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT::variableSampleLocations)));
    
    sVkPhysicalDeviceSampleLocationsPropertiesEXT.Set(Napi::String::New(env, "variableSampleLocations"), obj);
  }
  sVkPhysicalDeviceSampleLocationsPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceSampleLocationsPropertiesEXT"), sVkPhysicalDeviceSampleLocationsPropertiesEXT);
  Napi::Object sVkMultisamplePropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMultisamplePropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMultisamplePropertiesEXT::sType)));
    
    sVkMultisamplePropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMultisamplePropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMultisamplePropertiesEXT::pNext)));
    
    sVkMultisamplePropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMultisamplePropertiesEXT, maxSampleLocationGridSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMultisamplePropertiesEXT::maxSampleLocationGridSize)));
    
    sVkMultisamplePropertiesEXT.Set(Napi::String::New(env, "maxSampleLocationGridSize"), obj);
  }
  sVkMultisamplePropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkMultisamplePropertiesEXT)));
  out.Set(Napi::String::New(env, "VkMultisamplePropertiesEXT"), sVkMultisamplePropertiesEXT);
  Napi::Object sVkSamplerReductionModeCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerReductionModeCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerReductionModeCreateInfo::sType)));
    
    sVkSamplerReductionModeCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerReductionModeCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerReductionModeCreateInfo::pNext)));
    
    sVkSamplerReductionModeCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerReductionModeCreateInfo, reductionMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerReductionModeCreateInfo::reductionMode)));
    
    sVkSamplerReductionModeCreateInfo.Set(Napi::String::New(env, "reductionMode"), obj);
  }
  sVkSamplerReductionModeCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerReductionModeCreateInfo)));
  out.Set(Napi::String::New(env, "VkSamplerReductionModeCreateInfo"), sVkSamplerReductionModeCreateInfo);
  Napi::Object sVkSamplerReductionModeCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerReductionModeCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerReductionModeCreateInfoEXT::sType)));
    
    sVkSamplerReductionModeCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerReductionModeCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerReductionModeCreateInfoEXT::pNext)));
    
    sVkSamplerReductionModeCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerReductionModeCreateInfoEXT, reductionMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerReductionModeCreateInfoEXT::reductionMode)));
    
    sVkSamplerReductionModeCreateInfoEXT.Set(Napi::String::New(env, "reductionMode"), obj);
  }
  sVkSamplerReductionModeCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerReductionModeCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkSamplerReductionModeCreateInfoEXT"), sVkSamplerReductionModeCreateInfoEXT);
  Napi::Object sVkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT::sType)));
    
    sVkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT, advancedBlendCoherentOperations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT::advancedBlendCoherentOperations)));
    
    sVkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.Set(Napi::String::New(env, "advancedBlendCoherentOperations"), obj);
  }
  sVkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT"), sVkPhysicalDeviceBlendOperationAdvancedFeaturesEXT);
  Napi::Object sVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::sType)));
    
    sVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendMaxColorAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendMaxColorAttachments)));
    
    sVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.Set(Napi::String::New(env, "advancedBlendMaxColorAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendIndependentBlend)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendIndependentBlend)));
    
    sVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.Set(Napi::String::New(env, "advancedBlendIndependentBlend"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendNonPremultipliedSrcColor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendNonPremultipliedSrcColor)));
    
    sVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.Set(Napi::String::New(env, "advancedBlendNonPremultipliedSrcColor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendNonPremultipliedDstColor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendNonPremultipliedDstColor)));
    
    sVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.Set(Napi::String::New(env, "advancedBlendNonPremultipliedDstColor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendCorrelatedOverlap)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendCorrelatedOverlap)));
    
    sVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.Set(Napi::String::New(env, "advancedBlendCorrelatedOverlap"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendAllOperations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendAllOperations)));
    
    sVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.Set(Napi::String::New(env, "advancedBlendAllOperations"), obj);
  }
  sVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT"), sVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT);
  Napi::Object sVkPipelineColorBlendAdvancedStateCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendAdvancedStateCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT::sType)));
    
    sVkPipelineColorBlendAdvancedStateCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendAdvancedStateCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT::pNext)));
    
    sVkPipelineColorBlendAdvancedStateCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendAdvancedStateCreateInfoEXT, srcPremultiplied)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT::srcPremultiplied)));
    
    sVkPipelineColorBlendAdvancedStateCreateInfoEXT.Set(Napi::String::New(env, "srcPremultiplied"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendAdvancedStateCreateInfoEXT, dstPremultiplied)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT::dstPremultiplied)));
    
    sVkPipelineColorBlendAdvancedStateCreateInfoEXT.Set(Napi::String::New(env, "dstPremultiplied"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineColorBlendAdvancedStateCreateInfoEXT, blendOverlap)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT::blendOverlap)));
    
    sVkPipelineColorBlendAdvancedStateCreateInfoEXT.Set(Napi::String::New(env, "blendOverlap"), obj);
  }
  sVkPipelineColorBlendAdvancedStateCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkPipelineColorBlendAdvancedStateCreateInfoEXT"), sVkPipelineColorBlendAdvancedStateCreateInfoEXT);
  Napi::Object sVkPhysicalDeviceInlineUniformBlockFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT::sType)));
    
    sVkPhysicalDeviceInlineUniformBlockFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceInlineUniformBlockFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT, inlineUniformBlock)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT::inlineUniformBlock)));
    
    sVkPhysicalDeviceInlineUniformBlockFeaturesEXT.Set(Napi::String::New(env, "inlineUniformBlock"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT, descriptorBindingInlineUniformBlockUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT::descriptorBindingInlineUniformBlockUpdateAfterBind)));
    
    sVkPhysicalDeviceInlineUniformBlockFeaturesEXT.Set(Napi::String::New(env, "descriptorBindingInlineUniformBlockUpdateAfterBind"), obj);
  }
  sVkPhysicalDeviceInlineUniformBlockFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceInlineUniformBlockFeaturesEXT"), sVkPhysicalDeviceInlineUniformBlockFeaturesEXT);
  Napi::Object sVkPhysicalDeviceInlineUniformBlockPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT::sType)));
    
    sVkPhysicalDeviceInlineUniformBlockPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceInlineUniformBlockPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, maxInlineUniformBlockSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxInlineUniformBlockSize)));
    
    sVkPhysicalDeviceInlineUniformBlockPropertiesEXT.Set(Napi::String::New(env, "maxInlineUniformBlockSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, maxPerStageDescriptorInlineUniformBlocks)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxPerStageDescriptorInlineUniformBlocks)));
    
    sVkPhysicalDeviceInlineUniformBlockPropertiesEXT.Set(Napi::String::New(env, "maxPerStageDescriptorInlineUniformBlocks"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks)));
    
    sVkPhysicalDeviceInlineUniformBlockPropertiesEXT.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, maxDescriptorSetInlineUniformBlocks)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxDescriptorSetInlineUniformBlocks)));
    
    sVkPhysicalDeviceInlineUniformBlockPropertiesEXT.Set(Napi::String::New(env, "maxDescriptorSetInlineUniformBlocks"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, maxDescriptorSetUpdateAfterBindInlineUniformBlocks)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxDescriptorSetUpdateAfterBindInlineUniformBlocks)));
    
    sVkPhysicalDeviceInlineUniformBlockPropertiesEXT.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindInlineUniformBlocks"), obj);
  }
  sVkPhysicalDeviceInlineUniformBlockPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceInlineUniformBlockPropertiesEXT"), sVkPhysicalDeviceInlineUniformBlockPropertiesEXT);
  Napi::Object sVkWriteDescriptorSetInlineUniformBlockEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSetInlineUniformBlockEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSetInlineUniformBlockEXT::sType)));
    
    sVkWriteDescriptorSetInlineUniformBlockEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSetInlineUniformBlockEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSetInlineUniformBlockEXT::pNext)));
    
    sVkWriteDescriptorSetInlineUniformBlockEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSetInlineUniformBlockEXT, dataSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSetInlineUniformBlockEXT::dataSize)));
    
    sVkWriteDescriptorSetInlineUniformBlockEXT.Set(Napi::String::New(env, "dataSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSetInlineUniformBlockEXT, pData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSetInlineUniformBlockEXT::pData)));
    
    sVkWriteDescriptorSetInlineUniformBlockEXT.Set(Napi::String::New(env, "pData"), obj);
  }
  sVkWriteDescriptorSetInlineUniformBlockEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSetInlineUniformBlockEXT)));
  out.Set(Napi::String::New(env, "VkWriteDescriptorSetInlineUniformBlockEXT"), sVkWriteDescriptorSetInlineUniformBlockEXT);
  Napi::Object sVkDescriptorPoolInlineUniformBlockCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT::sType)));
    
    sVkDescriptorPoolInlineUniformBlockCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT::pNext)));
    
    sVkDescriptorPoolInlineUniformBlockCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT, maxInlineUniformBlockBindings)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT::maxInlineUniformBlockBindings)));
    
    sVkDescriptorPoolInlineUniformBlockCreateInfoEXT.Set(Napi::String::New(env, "maxInlineUniformBlockBindings"), obj);
  }
  sVkDescriptorPoolInlineUniformBlockCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkDescriptorPoolInlineUniformBlockCreateInfoEXT"), sVkDescriptorPoolInlineUniformBlockCreateInfoEXT);
  Napi::Object sVkPipelineCoverageModulationStateCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageModulationStateCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageModulationStateCreateInfoNV::sType)));
    
    sVkPipelineCoverageModulationStateCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageModulationStateCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageModulationStateCreateInfoNV::pNext)));
    
    sVkPipelineCoverageModulationStateCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageModulationStateCreateInfoNV, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageModulationStateCreateInfoNV::flags)));
    
    sVkPipelineCoverageModulationStateCreateInfoNV.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageModulationStateCreateInfoNV, coverageModulationMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageModulationStateCreateInfoNV::coverageModulationMode)));
    
    sVkPipelineCoverageModulationStateCreateInfoNV.Set(Napi::String::New(env, "coverageModulationMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageModulationStateCreateInfoNV, coverageModulationTableEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageModulationStateCreateInfoNV::coverageModulationTableEnable)));
    
    sVkPipelineCoverageModulationStateCreateInfoNV.Set(Napi::String::New(env, "coverageModulationTableEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageModulationStateCreateInfoNV, coverageModulationTableCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageModulationStateCreateInfoNV::coverageModulationTableCount)));
    
    sVkPipelineCoverageModulationStateCreateInfoNV.Set(Napi::String::New(env, "coverageModulationTableCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageModulationStateCreateInfoNV, pCoverageModulationTable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageModulationStateCreateInfoNV::pCoverageModulationTable)));
    
    sVkPipelineCoverageModulationStateCreateInfoNV.Set(Napi::String::New(env, "pCoverageModulationTable"), obj);
  }
  sVkPipelineCoverageModulationStateCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageModulationStateCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkPipelineCoverageModulationStateCreateInfoNV"), sVkPipelineCoverageModulationStateCreateInfoNV);
  Napi::Object sVkImageFormatListCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatListCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatListCreateInfo::sType)));
    
    sVkImageFormatListCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatListCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatListCreateInfo::pNext)));
    
    sVkImageFormatListCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatListCreateInfo, viewFormatCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatListCreateInfo::viewFormatCount)));
    
    sVkImageFormatListCreateInfo.Set(Napi::String::New(env, "viewFormatCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatListCreateInfo, pViewFormats)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatListCreateInfo::pViewFormats)));
    
    sVkImageFormatListCreateInfo.Set(Napi::String::New(env, "pViewFormats"), obj);
  }
  sVkImageFormatListCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatListCreateInfo)));
  out.Set(Napi::String::New(env, "VkImageFormatListCreateInfo"), sVkImageFormatListCreateInfo);
  Napi::Object sVkImageFormatListCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatListCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatListCreateInfoKHR::sType)));
    
    sVkImageFormatListCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatListCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatListCreateInfoKHR::pNext)));
    
    sVkImageFormatListCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatListCreateInfoKHR, viewFormatCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatListCreateInfoKHR::viewFormatCount)));
    
    sVkImageFormatListCreateInfoKHR.Set(Napi::String::New(env, "viewFormatCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageFormatListCreateInfoKHR, pViewFormats)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatListCreateInfoKHR::pViewFormats)));
    
    sVkImageFormatListCreateInfoKHR.Set(Napi::String::New(env, "pViewFormats"), obj);
  }
  sVkImageFormatListCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageFormatListCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkImageFormatListCreateInfoKHR"), sVkImageFormatListCreateInfoKHR);
  Napi::Object sVkValidationCacheCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkValidationCacheCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationCacheCreateInfoEXT::sType)));
    
    sVkValidationCacheCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkValidationCacheCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationCacheCreateInfoEXT::pNext)));
    
    sVkValidationCacheCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkValidationCacheCreateInfoEXT, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationCacheCreateInfoEXT::flags)));
    
    sVkValidationCacheCreateInfoEXT.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkValidationCacheCreateInfoEXT, initialDataSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationCacheCreateInfoEXT::initialDataSize)));
    
    sVkValidationCacheCreateInfoEXT.Set(Napi::String::New(env, "initialDataSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkValidationCacheCreateInfoEXT, pInitialData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationCacheCreateInfoEXT::pInitialData)));
    
    sVkValidationCacheCreateInfoEXT.Set(Napi::String::New(env, "pInitialData"), obj);
  }
  sVkValidationCacheCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkValidationCacheCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkValidationCacheCreateInfoEXT"), sVkValidationCacheCreateInfoEXT);
  Napi::Object sVkShaderModuleValidationCacheCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderModuleValidationCacheCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderModuleValidationCacheCreateInfoEXT::sType)));
    
    sVkShaderModuleValidationCacheCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderModuleValidationCacheCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderModuleValidationCacheCreateInfoEXT::pNext)));
    
    sVkShaderModuleValidationCacheCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderModuleValidationCacheCreateInfoEXT, validationCache)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderModuleValidationCacheCreateInfoEXT::validationCache)));
    
    sVkShaderModuleValidationCacheCreateInfoEXT.Set(Napi::String::New(env, "validationCache"), obj);
  }
  sVkShaderModuleValidationCacheCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderModuleValidationCacheCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkShaderModuleValidationCacheCreateInfoEXT"), sVkShaderModuleValidationCacheCreateInfoEXT);
  Napi::Object sVkPhysicalDeviceMaintenance3Properties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance3Properties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMaintenance3Properties::sType)));
    
    sVkPhysicalDeviceMaintenance3Properties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance3Properties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMaintenance3Properties::pNext)));
    
    sVkPhysicalDeviceMaintenance3Properties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance3Properties, maxPerSetDescriptors)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMaintenance3Properties::maxPerSetDescriptors)));
    
    sVkPhysicalDeviceMaintenance3Properties.Set(Napi::String::New(env, "maxPerSetDescriptors"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance3Properties, maxMemoryAllocationSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMaintenance3Properties::maxMemoryAllocationSize)));
    
    sVkPhysicalDeviceMaintenance3Properties.Set(Napi::String::New(env, "maxMemoryAllocationSize"), obj);
  }
  sVkPhysicalDeviceMaintenance3Properties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMaintenance3Properties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceMaintenance3Properties"), sVkPhysicalDeviceMaintenance3Properties);
  Napi::Object sVkPhysicalDeviceMaintenance3PropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance3PropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMaintenance3PropertiesKHR::sType)));
    
    sVkPhysicalDeviceMaintenance3PropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance3PropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMaintenance3PropertiesKHR::pNext)));
    
    sVkPhysicalDeviceMaintenance3PropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance3PropertiesKHR, maxPerSetDescriptors)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMaintenance3PropertiesKHR::maxPerSetDescriptors)));
    
    sVkPhysicalDeviceMaintenance3PropertiesKHR.Set(Napi::String::New(env, "maxPerSetDescriptors"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance3PropertiesKHR, maxMemoryAllocationSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMaintenance3PropertiesKHR::maxMemoryAllocationSize)));
    
    sVkPhysicalDeviceMaintenance3PropertiesKHR.Set(Napi::String::New(env, "maxMemoryAllocationSize"), obj);
  }
  sVkPhysicalDeviceMaintenance3PropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMaintenance3PropertiesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceMaintenance3PropertiesKHR"), sVkPhysicalDeviceMaintenance3PropertiesKHR);
  Napi::Object sVkDescriptorSetLayoutSupport = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutSupport, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutSupport::sType)));
    
    sVkDescriptorSetLayoutSupport.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutSupport, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutSupport::pNext)));
    
    sVkDescriptorSetLayoutSupport.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutSupport, supported)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutSupport::supported)));
    
    sVkDescriptorSetLayoutSupport.Set(Napi::String::New(env, "supported"), obj);
  }
  sVkDescriptorSetLayoutSupport.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutSupport)));
  out.Set(Napi::String::New(env, "VkDescriptorSetLayoutSupport"), sVkDescriptorSetLayoutSupport);
  Napi::Object sVkDescriptorSetLayoutSupportKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutSupportKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutSupportKHR::sType)));
    
    sVkDescriptorSetLayoutSupportKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutSupportKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutSupportKHR::pNext)));
    
    sVkDescriptorSetLayoutSupportKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutSupportKHR, supported)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutSupportKHR::supported)));
    
    sVkDescriptorSetLayoutSupportKHR.Set(Napi::String::New(env, "supported"), obj);
  }
  sVkDescriptorSetLayoutSupportKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutSupportKHR)));
  out.Set(Napi::String::New(env, "VkDescriptorSetLayoutSupportKHR"), sVkDescriptorSetLayoutSupportKHR);
  Napi::Object sVkPhysicalDeviceShaderDrawParametersFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderDrawParametersFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderDrawParametersFeatures::sType)));
    
    sVkPhysicalDeviceShaderDrawParametersFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderDrawParametersFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderDrawParametersFeatures::pNext)));
    
    sVkPhysicalDeviceShaderDrawParametersFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderDrawParametersFeatures, shaderDrawParameters)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderDrawParametersFeatures::shaderDrawParameters)));
    
    sVkPhysicalDeviceShaderDrawParametersFeatures.Set(Napi::String::New(env, "shaderDrawParameters"), obj);
  }
  sVkPhysicalDeviceShaderDrawParametersFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderDrawParametersFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderDrawParametersFeatures"), sVkPhysicalDeviceShaderDrawParametersFeatures);
  Napi::Object sVkPhysicalDeviceShaderDrawParameterFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderDrawParameterFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderDrawParameterFeatures::sType)));
    
    sVkPhysicalDeviceShaderDrawParameterFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderDrawParameterFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderDrawParameterFeatures::pNext)));
    
    sVkPhysicalDeviceShaderDrawParameterFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderDrawParameterFeatures, shaderDrawParameters)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderDrawParameterFeatures::shaderDrawParameters)));
    
    sVkPhysicalDeviceShaderDrawParameterFeatures.Set(Napi::String::New(env, "shaderDrawParameters"), obj);
  }
  sVkPhysicalDeviceShaderDrawParameterFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderDrawParameterFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderDrawParameterFeatures"), sVkPhysicalDeviceShaderDrawParameterFeatures);
  Napi::Object sVkPhysicalDeviceShaderFloat16Int8Features = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderFloat16Int8Features, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderFloat16Int8Features::sType)));
    
    sVkPhysicalDeviceShaderFloat16Int8Features.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderFloat16Int8Features, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderFloat16Int8Features::pNext)));
    
    sVkPhysicalDeviceShaderFloat16Int8Features.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderFloat16Int8Features, shaderFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderFloat16Int8Features::shaderFloat16)));
    
    sVkPhysicalDeviceShaderFloat16Int8Features.Set(Napi::String::New(env, "shaderFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderFloat16Int8Features, shaderInt8)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderFloat16Int8Features::shaderInt8)));
    
    sVkPhysicalDeviceShaderFloat16Int8Features.Set(Napi::String::New(env, "shaderInt8"), obj);
  }
  sVkPhysicalDeviceShaderFloat16Int8Features.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderFloat16Int8Features)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderFloat16Int8Features"), sVkPhysicalDeviceShaderFloat16Int8Features);
  Napi::Object sVkPhysicalDeviceShaderFloat16Int8FeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR::sType)));
    
    sVkPhysicalDeviceShaderFloat16Int8FeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR::pNext)));
    
    sVkPhysicalDeviceShaderFloat16Int8FeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR, shaderFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR::shaderFloat16)));
    
    sVkPhysicalDeviceShaderFloat16Int8FeaturesKHR.Set(Napi::String::New(env, "shaderFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR, shaderInt8)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR::shaderInt8)));
    
    sVkPhysicalDeviceShaderFloat16Int8FeaturesKHR.Set(Napi::String::New(env, "shaderInt8"), obj);
  }
  sVkPhysicalDeviceShaderFloat16Int8FeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderFloat16Int8FeaturesKHR"), sVkPhysicalDeviceShaderFloat16Int8FeaturesKHR);
  Napi::Object sVkPhysicalDeviceFloat16Int8FeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloat16Int8FeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloat16Int8FeaturesKHR::sType)));
    
    sVkPhysicalDeviceFloat16Int8FeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloat16Int8FeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloat16Int8FeaturesKHR::pNext)));
    
    sVkPhysicalDeviceFloat16Int8FeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloat16Int8FeaturesKHR, shaderFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloat16Int8FeaturesKHR::shaderFloat16)));
    
    sVkPhysicalDeviceFloat16Int8FeaturesKHR.Set(Napi::String::New(env, "shaderFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloat16Int8FeaturesKHR, shaderInt8)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloat16Int8FeaturesKHR::shaderInt8)));
    
    sVkPhysicalDeviceFloat16Int8FeaturesKHR.Set(Napi::String::New(env, "shaderInt8"), obj);
  }
  sVkPhysicalDeviceFloat16Int8FeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloat16Int8FeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFloat16Int8FeaturesKHR"), sVkPhysicalDeviceFloat16Int8FeaturesKHR);
  Napi::Object sVkPhysicalDeviceFloatControlsProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::sType)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::pNext)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, denormBehaviorIndependence)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::denormBehaviorIndependence)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "denormBehaviorIndependence"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, roundingModeIndependence)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::roundingModeIndependence)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "roundingModeIndependence"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderSignedZeroInfNanPreserveFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::shaderSignedZeroInfNanPreserveFloat16)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "shaderSignedZeroInfNanPreserveFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderSignedZeroInfNanPreserveFloat32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::shaderSignedZeroInfNanPreserveFloat32)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "shaderSignedZeroInfNanPreserveFloat32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderSignedZeroInfNanPreserveFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::shaderSignedZeroInfNanPreserveFloat64)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "shaderSignedZeroInfNanPreserveFloat64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormPreserveFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::shaderDenormPreserveFloat16)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "shaderDenormPreserveFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormPreserveFloat32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::shaderDenormPreserveFloat32)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "shaderDenormPreserveFloat32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormPreserveFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::shaderDenormPreserveFloat64)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "shaderDenormPreserveFloat64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormFlushToZeroFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::shaderDenormFlushToZeroFloat16)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "shaderDenormFlushToZeroFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormFlushToZeroFloat32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::shaderDenormFlushToZeroFloat32)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "shaderDenormFlushToZeroFloat32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormFlushToZeroFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::shaderDenormFlushToZeroFloat64)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "shaderDenormFlushToZeroFloat64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTEFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTEFloat16)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "shaderRoundingModeRTEFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTEFloat32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTEFloat32)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "shaderRoundingModeRTEFloat32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTEFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTEFloat64)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "shaderRoundingModeRTEFloat64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTZFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTZFloat16)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "shaderRoundingModeRTZFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTZFloat32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTZFloat32)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "shaderRoundingModeRTZFloat32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTZFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTZFloat64)));
    
    sVkPhysicalDeviceFloatControlsProperties.Set(Napi::String::New(env, "shaderRoundingModeRTZFloat64"), obj);
  }
  sVkPhysicalDeviceFloatControlsProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsProperties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFloatControlsProperties"), sVkPhysicalDeviceFloatControlsProperties);
  Napi::Object sVkPhysicalDeviceFloatControlsPropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::sType)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::pNext)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, denormBehaviorIndependence)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::denormBehaviorIndependence)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "denormBehaviorIndependence"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, roundingModeIndependence)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::roundingModeIndependence)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "roundingModeIndependence"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderSignedZeroInfNanPreserveFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderSignedZeroInfNanPreserveFloat16)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "shaderSignedZeroInfNanPreserveFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderSignedZeroInfNanPreserveFloat32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderSignedZeroInfNanPreserveFloat32)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "shaderSignedZeroInfNanPreserveFloat32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderSignedZeroInfNanPreserveFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderSignedZeroInfNanPreserveFloat64)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "shaderSignedZeroInfNanPreserveFloat64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderDenormPreserveFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderDenormPreserveFloat16)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "shaderDenormPreserveFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderDenormPreserveFloat32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderDenormPreserveFloat32)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "shaderDenormPreserveFloat32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderDenormPreserveFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderDenormPreserveFloat64)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "shaderDenormPreserveFloat64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderDenormFlushToZeroFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderDenormFlushToZeroFloat16)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "shaderDenormFlushToZeroFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderDenormFlushToZeroFloat32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderDenormFlushToZeroFloat32)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "shaderDenormFlushToZeroFloat32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderDenormFlushToZeroFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderDenormFlushToZeroFloat64)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "shaderDenormFlushToZeroFloat64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderRoundingModeRTEFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderRoundingModeRTEFloat16)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "shaderRoundingModeRTEFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderRoundingModeRTEFloat32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderRoundingModeRTEFloat32)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "shaderRoundingModeRTEFloat32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderRoundingModeRTEFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderRoundingModeRTEFloat64)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "shaderRoundingModeRTEFloat64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderRoundingModeRTZFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderRoundingModeRTZFloat16)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "shaderRoundingModeRTZFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderRoundingModeRTZFloat32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderRoundingModeRTZFloat32)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "shaderRoundingModeRTZFloat32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderRoundingModeRTZFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderRoundingModeRTZFloat64)));
    
    sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(Napi::String::New(env, "shaderRoundingModeRTZFloat64"), obj);
  }
  sVkPhysicalDeviceFloatControlsPropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFloatControlsPropertiesKHR"), sVkPhysicalDeviceFloatControlsPropertiesKHR);
  Napi::Object sVkPhysicalDeviceHostQueryResetFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceHostQueryResetFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceHostQueryResetFeatures::sType)));
    
    sVkPhysicalDeviceHostQueryResetFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceHostQueryResetFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceHostQueryResetFeatures::pNext)));
    
    sVkPhysicalDeviceHostQueryResetFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceHostQueryResetFeatures, hostQueryReset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceHostQueryResetFeatures::hostQueryReset)));
    
    sVkPhysicalDeviceHostQueryResetFeatures.Set(Napi::String::New(env, "hostQueryReset"), obj);
  }
  sVkPhysicalDeviceHostQueryResetFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceHostQueryResetFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceHostQueryResetFeatures"), sVkPhysicalDeviceHostQueryResetFeatures);
  Napi::Object sVkPhysicalDeviceHostQueryResetFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceHostQueryResetFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceHostQueryResetFeaturesEXT::sType)));
    
    sVkPhysicalDeviceHostQueryResetFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceHostQueryResetFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceHostQueryResetFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceHostQueryResetFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceHostQueryResetFeaturesEXT, hostQueryReset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceHostQueryResetFeaturesEXT::hostQueryReset)));
    
    sVkPhysicalDeviceHostQueryResetFeaturesEXT.Set(Napi::String::New(env, "hostQueryReset"), obj);
  }
  sVkPhysicalDeviceHostQueryResetFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceHostQueryResetFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceHostQueryResetFeaturesEXT"), sVkPhysicalDeviceHostQueryResetFeaturesEXT);
  Napi::Object sVkShaderResourceUsageAMD = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderResourceUsageAMD, numUsedVgprs)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderResourceUsageAMD::numUsedVgprs)));
    
    sVkShaderResourceUsageAMD.Set(Napi::String::New(env, "numUsedVgprs"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderResourceUsageAMD, numUsedSgprs)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderResourceUsageAMD::numUsedSgprs)));
    
    sVkShaderResourceUsageAMD.Set(Napi::String::New(env, "numUsedSgprs"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderResourceUsageAMD, ldsSizePerLocalWorkGroup)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderResourceUsageAMD::ldsSizePerLocalWorkGroup)));
    
    sVkShaderResourceUsageAMD.Set(Napi::String::New(env, "ldsSizePerLocalWorkGroup"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderResourceUsageAMD, ldsUsageSizeInBytes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderResourceUsageAMD::ldsUsageSizeInBytes)));
    
    sVkShaderResourceUsageAMD.Set(Napi::String::New(env, "ldsUsageSizeInBytes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderResourceUsageAMD, scratchMemUsageInBytes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderResourceUsageAMD::scratchMemUsageInBytes)));
    
    sVkShaderResourceUsageAMD.Set(Napi::String::New(env, "scratchMemUsageInBytes"), obj);
  }
  sVkShaderResourceUsageAMD.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderResourceUsageAMD)));
  out.Set(Napi::String::New(env, "VkShaderResourceUsageAMD"), sVkShaderResourceUsageAMD);
  Napi::Object sVkShaderStatisticsInfoAMD = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderStatisticsInfoAMD, shaderStageMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderStatisticsInfoAMD::shaderStageMask)));
    
    sVkShaderStatisticsInfoAMD.Set(Napi::String::New(env, "shaderStageMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderStatisticsInfoAMD, resourceUsage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderStatisticsInfoAMD::resourceUsage)));
    
    sVkShaderStatisticsInfoAMD.Set(Napi::String::New(env, "resourceUsage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderStatisticsInfoAMD, numPhysicalVgprs)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderStatisticsInfoAMD::numPhysicalVgprs)));
    
    sVkShaderStatisticsInfoAMD.Set(Napi::String::New(env, "numPhysicalVgprs"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderStatisticsInfoAMD, numPhysicalSgprs)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderStatisticsInfoAMD::numPhysicalSgprs)));
    
    sVkShaderStatisticsInfoAMD.Set(Napi::String::New(env, "numPhysicalSgprs"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderStatisticsInfoAMD, numAvailableVgprs)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderStatisticsInfoAMD::numAvailableVgprs)));
    
    sVkShaderStatisticsInfoAMD.Set(Napi::String::New(env, "numAvailableVgprs"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderStatisticsInfoAMD, numAvailableSgprs)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderStatisticsInfoAMD::numAvailableSgprs)));
    
    sVkShaderStatisticsInfoAMD.Set(Napi::String::New(env, "numAvailableSgprs"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShaderStatisticsInfoAMD, computeWorkGroupSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderStatisticsInfoAMD::computeWorkGroupSize)));
    
    sVkShaderStatisticsInfoAMD.Set(Napi::String::New(env, "computeWorkGroupSize"), obj);
  }
  sVkShaderStatisticsInfoAMD.Set(strByteLength, Napi::Number::New(env, sizeof(VkShaderStatisticsInfoAMD)));
  out.Set(Napi::String::New(env, "VkShaderStatisticsInfoAMD"), sVkShaderStatisticsInfoAMD);
  Napi::Object sVkDeviceQueueGlobalPriorityCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceQueueGlobalPriorityCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueGlobalPriorityCreateInfoEXT::sType)));
    
    sVkDeviceQueueGlobalPriorityCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceQueueGlobalPriorityCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueGlobalPriorityCreateInfoEXT::pNext)));
    
    sVkDeviceQueueGlobalPriorityCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceQueueGlobalPriorityCreateInfoEXT, globalPriority)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueGlobalPriorityCreateInfoEXT::globalPriority)));
    
    sVkDeviceQueueGlobalPriorityCreateInfoEXT.Set(Napi::String::New(env, "globalPriority"), obj);
  }
  sVkDeviceQueueGlobalPriorityCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceQueueGlobalPriorityCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkDeviceQueueGlobalPriorityCreateInfoEXT"), sVkDeviceQueueGlobalPriorityCreateInfoEXT);
  Napi::Object sVkDebugUtilsObjectNameInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsObjectNameInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsObjectNameInfoEXT::sType)));
    
    sVkDebugUtilsObjectNameInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsObjectNameInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsObjectNameInfoEXT::pNext)));
    
    sVkDebugUtilsObjectNameInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsObjectNameInfoEXT, objectType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsObjectNameInfoEXT::objectType)));
    
    sVkDebugUtilsObjectNameInfoEXT.Set(Napi::String::New(env, "objectType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsObjectNameInfoEXT, objectHandle)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsObjectNameInfoEXT::objectHandle)));
    
    sVkDebugUtilsObjectNameInfoEXT.Set(Napi::String::New(env, "objectHandle"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsObjectNameInfoEXT, pObjectName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsObjectNameInfoEXT::pObjectName)));
    
    sVkDebugUtilsObjectNameInfoEXT.Set(Napi::String::New(env, "pObjectName"), obj);
  }
  sVkDebugUtilsObjectNameInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsObjectNameInfoEXT)));
  out.Set(Napi::String::New(env, "VkDebugUtilsObjectNameInfoEXT"), sVkDebugUtilsObjectNameInfoEXT);
  Napi::Object sVkDebugUtilsObjectTagInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsObjectTagInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsObjectTagInfoEXT::sType)));
    
    sVkDebugUtilsObjectTagInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsObjectTagInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsObjectTagInfoEXT::pNext)));
    
    sVkDebugUtilsObjectTagInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsObjectTagInfoEXT, objectType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsObjectTagInfoEXT::objectType)));
    
    sVkDebugUtilsObjectTagInfoEXT.Set(Napi::String::New(env, "objectType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsObjectTagInfoEXT, objectHandle)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsObjectTagInfoEXT::objectHandle)));
    
    sVkDebugUtilsObjectTagInfoEXT.Set(Napi::String::New(env, "objectHandle"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsObjectTagInfoEXT, tagName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsObjectTagInfoEXT::tagName)));
    
    sVkDebugUtilsObjectTagInfoEXT.Set(Napi::String::New(env, "tagName"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsObjectTagInfoEXT, tagSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsObjectTagInfoEXT::tagSize)));
    
    sVkDebugUtilsObjectTagInfoEXT.Set(Napi::String::New(env, "tagSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsObjectTagInfoEXT, pTag)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsObjectTagInfoEXT::pTag)));
    
    sVkDebugUtilsObjectTagInfoEXT.Set(Napi::String::New(env, "pTag"), obj);
  }
  sVkDebugUtilsObjectTagInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsObjectTagInfoEXT)));
  out.Set(Napi::String::New(env, "VkDebugUtilsObjectTagInfoEXT"), sVkDebugUtilsObjectTagInfoEXT);
  Napi::Object sVkDebugUtilsLabelEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsLabelEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsLabelEXT::sType)));
    
    sVkDebugUtilsLabelEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsLabelEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsLabelEXT::pNext)));
    
    sVkDebugUtilsLabelEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsLabelEXT, pLabelName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsLabelEXT::pLabelName)));
    
    sVkDebugUtilsLabelEXT.Set(Napi::String::New(env, "pLabelName"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsLabelEXT, color)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsLabelEXT::color)));
    
    sVkDebugUtilsLabelEXT.Set(Napi::String::New(env, "color"), obj);
  }
  sVkDebugUtilsLabelEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsLabelEXT)));
  out.Set(Napi::String::New(env, "VkDebugUtilsLabelEXT"), sVkDebugUtilsLabelEXT);
  Napi::Object sVkDebugUtilsMessengerCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCreateInfoEXT::sType)));
    
    sVkDebugUtilsMessengerCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCreateInfoEXT::pNext)));
    
    sVkDebugUtilsMessengerCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCreateInfoEXT, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCreateInfoEXT::flags)));
    
    sVkDebugUtilsMessengerCreateInfoEXT.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCreateInfoEXT, messageSeverity)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCreateInfoEXT::messageSeverity)));
    
    sVkDebugUtilsMessengerCreateInfoEXT.Set(Napi::String::New(env, "messageSeverity"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCreateInfoEXT, messageType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCreateInfoEXT::messageType)));
    
    sVkDebugUtilsMessengerCreateInfoEXT.Set(Napi::String::New(env, "messageType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCreateInfoEXT, pfnUserCallback)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCreateInfoEXT::pfnUserCallback)));
    
    sVkDebugUtilsMessengerCreateInfoEXT.Set(Napi::String::New(env, "pfnUserCallback"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCreateInfoEXT, pUserData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCreateInfoEXT::pUserData)));
    
    sVkDebugUtilsMessengerCreateInfoEXT.Set(Napi::String::New(env, "pUserData"), obj);
  }
  sVkDebugUtilsMessengerCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkDebugUtilsMessengerCreateInfoEXT"), sVkDebugUtilsMessengerCreateInfoEXT);
  Napi::Object sVkDebugUtilsMessengerCallbackDataEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCallbackDataEXT::sType)));
    
    sVkDebugUtilsMessengerCallbackDataEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCallbackDataEXT::pNext)));
    
    sVkDebugUtilsMessengerCallbackDataEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCallbackDataEXT::flags)));
    
    sVkDebugUtilsMessengerCallbackDataEXT.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, pMessageIdName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCallbackDataEXT::pMessageIdName)));
    
    sVkDebugUtilsMessengerCallbackDataEXT.Set(Napi::String::New(env, "pMessageIdName"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, messageIdNumber)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCallbackDataEXT::messageIdNumber)));
    
    sVkDebugUtilsMessengerCallbackDataEXT.Set(Napi::String::New(env, "messageIdNumber"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, pMessage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCallbackDataEXT::pMessage)));
    
    sVkDebugUtilsMessengerCallbackDataEXT.Set(Napi::String::New(env, "pMessage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, queueLabelCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCallbackDataEXT::queueLabelCount)));
    
    sVkDebugUtilsMessengerCallbackDataEXT.Set(Napi::String::New(env, "queueLabelCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, pQueueLabels)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCallbackDataEXT::pQueueLabels)));
    
    sVkDebugUtilsMessengerCallbackDataEXT.Set(Napi::String::New(env, "pQueueLabels"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, cmdBufLabelCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCallbackDataEXT::cmdBufLabelCount)));
    
    sVkDebugUtilsMessengerCallbackDataEXT.Set(Napi::String::New(env, "cmdBufLabelCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, pCmdBufLabels)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCallbackDataEXT::pCmdBufLabels)));
    
    sVkDebugUtilsMessengerCallbackDataEXT.Set(Napi::String::New(env, "pCmdBufLabels"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, objectCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCallbackDataEXT::objectCount)));
    
    sVkDebugUtilsMessengerCallbackDataEXT.Set(Napi::String::New(env, "objectCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, pObjects)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCallbackDataEXT::pObjects)));
    
    sVkDebugUtilsMessengerCallbackDataEXT.Set(Napi::String::New(env, "pObjects"), obj);
  }
  sVkDebugUtilsMessengerCallbackDataEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCallbackDataEXT)));
  out.Set(Napi::String::New(env, "VkDebugUtilsMessengerCallbackDataEXT"), sVkDebugUtilsMessengerCallbackDataEXT);
  Napi::Object sVkPhysicalDeviceDeviceMemoryReportFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT::sType)));
    
    sVkPhysicalDeviceDeviceMemoryReportFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceDeviceMemoryReportFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT, deviceMemoryReport)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT::deviceMemoryReport)));
    
    sVkPhysicalDeviceDeviceMemoryReportFeaturesEXT.Set(Napi::String::New(env, "deviceMemoryReport"), obj);
  }
  sVkPhysicalDeviceDeviceMemoryReportFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceDeviceMemoryReportFeaturesEXT"), sVkPhysicalDeviceDeviceMemoryReportFeaturesEXT);
  Napi::Object sVkDeviceDeviceMemoryReportCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceDeviceMemoryReportCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceDeviceMemoryReportCreateInfoEXT::sType)));
    
    sVkDeviceDeviceMemoryReportCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceDeviceMemoryReportCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceDeviceMemoryReportCreateInfoEXT::pNext)));
    
    sVkDeviceDeviceMemoryReportCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceDeviceMemoryReportCreateInfoEXT, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceDeviceMemoryReportCreateInfoEXT::flags)));
    
    sVkDeviceDeviceMemoryReportCreateInfoEXT.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceDeviceMemoryReportCreateInfoEXT, pfnUserCallback)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceDeviceMemoryReportCreateInfoEXT::pfnUserCallback)));
    
    sVkDeviceDeviceMemoryReportCreateInfoEXT.Set(Napi::String::New(env, "pfnUserCallback"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceDeviceMemoryReportCreateInfoEXT, pUserData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceDeviceMemoryReportCreateInfoEXT::pUserData)));
    
    sVkDeviceDeviceMemoryReportCreateInfoEXT.Set(Napi::String::New(env, "pUserData"), obj);
  }
  sVkDeviceDeviceMemoryReportCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceDeviceMemoryReportCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkDeviceDeviceMemoryReportCreateInfoEXT"), sVkDeviceDeviceMemoryReportCreateInfoEXT);
  Napi::Object sVkDeviceMemoryReportCallbackDataEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryReportCallbackDataEXT::sType)));
    
    sVkDeviceMemoryReportCallbackDataEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryReportCallbackDataEXT::pNext)));
    
    sVkDeviceMemoryReportCallbackDataEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryReportCallbackDataEXT::flags)));
    
    sVkDeviceMemoryReportCallbackDataEXT.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryReportCallbackDataEXT::type)));
    
    sVkDeviceMemoryReportCallbackDataEXT.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, memoryObjectId)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryReportCallbackDataEXT::memoryObjectId)));
    
    sVkDeviceMemoryReportCallbackDataEXT.Set(Napi::String::New(env, "memoryObjectId"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryReportCallbackDataEXT::size)));
    
    sVkDeviceMemoryReportCallbackDataEXT.Set(Napi::String::New(env, "size"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, objectType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryReportCallbackDataEXT::objectType)));
    
    sVkDeviceMemoryReportCallbackDataEXT.Set(Napi::String::New(env, "objectType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, objectHandle)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryReportCallbackDataEXT::objectHandle)));
    
    sVkDeviceMemoryReportCallbackDataEXT.Set(Napi::String::New(env, "objectHandle"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, heapIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryReportCallbackDataEXT::heapIndex)));
    
    sVkDeviceMemoryReportCallbackDataEXT.Set(Napi::String::New(env, "heapIndex"), obj);
  }
  sVkDeviceMemoryReportCallbackDataEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryReportCallbackDataEXT)));
  out.Set(Napi::String::New(env, "VkDeviceMemoryReportCallbackDataEXT"), sVkDeviceMemoryReportCallbackDataEXT);
  Napi::Object sVkImportMemoryHostPointerInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryHostPointerInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryHostPointerInfoEXT::sType)));
    
    sVkImportMemoryHostPointerInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryHostPointerInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryHostPointerInfoEXT::pNext)));
    
    sVkImportMemoryHostPointerInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryHostPointerInfoEXT, handleType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryHostPointerInfoEXT::handleType)));
    
    sVkImportMemoryHostPointerInfoEXT.Set(Napi::String::New(env, "handleType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImportMemoryHostPointerInfoEXT, pHostPointer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryHostPointerInfoEXT::pHostPointer)));
    
    sVkImportMemoryHostPointerInfoEXT.Set(Napi::String::New(env, "pHostPointer"), obj);
  }
  sVkImportMemoryHostPointerInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkImportMemoryHostPointerInfoEXT)));
  out.Set(Napi::String::New(env, "VkImportMemoryHostPointerInfoEXT"), sVkImportMemoryHostPointerInfoEXT);
  Napi::Object sVkMemoryHostPointerPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryHostPointerPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryHostPointerPropertiesEXT::sType)));
    
    sVkMemoryHostPointerPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryHostPointerPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryHostPointerPropertiesEXT::pNext)));
    
    sVkMemoryHostPointerPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryHostPointerPropertiesEXT, memoryTypeBits)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryHostPointerPropertiesEXT::memoryTypeBits)));
    
    sVkMemoryHostPointerPropertiesEXT.Set(Napi::String::New(env, "memoryTypeBits"), obj);
  }
  sVkMemoryHostPointerPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryHostPointerPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkMemoryHostPointerPropertiesEXT"), sVkMemoryHostPointerPropertiesEXT);
  Napi::Object sVkPhysicalDeviceExternalMemoryHostPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT::sType)));
    
    sVkPhysicalDeviceExternalMemoryHostPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceExternalMemoryHostPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, minImportedHostPointerAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT::minImportedHostPointerAlignment)));
    
    sVkPhysicalDeviceExternalMemoryHostPropertiesEXT.Set(Napi::String::New(env, "minImportedHostPointerAlignment"), obj);
  }
  sVkPhysicalDeviceExternalMemoryHostPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalMemoryHostPropertiesEXT"), sVkPhysicalDeviceExternalMemoryHostPropertiesEXT);
  Napi::Object sVkPhysicalDeviceConservativeRasterizationPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::sType)));
    
    sVkPhysicalDeviceConservativeRasterizationPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceConservativeRasterizationPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, primitiveOverestimationSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::primitiveOverestimationSize)));
    
    sVkPhysicalDeviceConservativeRasterizationPropertiesEXT.Set(Napi::String::New(env, "primitiveOverestimationSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, maxExtraPrimitiveOverestimationSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::maxExtraPrimitiveOverestimationSize)));
    
    sVkPhysicalDeviceConservativeRasterizationPropertiesEXT.Set(Napi::String::New(env, "maxExtraPrimitiveOverestimationSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, extraPrimitiveOverestimationSizeGranularity)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::extraPrimitiveOverestimationSizeGranularity)));
    
    sVkPhysicalDeviceConservativeRasterizationPropertiesEXT.Set(Napi::String::New(env, "extraPrimitiveOverestimationSizeGranularity"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, primitiveUnderestimation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::primitiveUnderestimation)));
    
    sVkPhysicalDeviceConservativeRasterizationPropertiesEXT.Set(Napi::String::New(env, "primitiveUnderestimation"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, conservativePointAndLineRasterization)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::conservativePointAndLineRasterization)));
    
    sVkPhysicalDeviceConservativeRasterizationPropertiesEXT.Set(Napi::String::New(env, "conservativePointAndLineRasterization"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, degenerateTrianglesRasterized)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::degenerateTrianglesRasterized)));
    
    sVkPhysicalDeviceConservativeRasterizationPropertiesEXT.Set(Napi::String::New(env, "degenerateTrianglesRasterized"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, degenerateLinesRasterized)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::degenerateLinesRasterized)));
    
    sVkPhysicalDeviceConservativeRasterizationPropertiesEXT.Set(Napi::String::New(env, "degenerateLinesRasterized"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, fullyCoveredFragmentShaderInputVariable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::fullyCoveredFragmentShaderInputVariable)));
    
    sVkPhysicalDeviceConservativeRasterizationPropertiesEXT.Set(Napi::String::New(env, "fullyCoveredFragmentShaderInputVariable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, conservativeRasterizationPostDepthCoverage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::conservativeRasterizationPostDepthCoverage)));
    
    sVkPhysicalDeviceConservativeRasterizationPropertiesEXT.Set(Napi::String::New(env, "conservativeRasterizationPostDepthCoverage"), obj);
  }
  sVkPhysicalDeviceConservativeRasterizationPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceConservativeRasterizationPropertiesEXT"), sVkPhysicalDeviceConservativeRasterizationPropertiesEXT);
  Napi::Object sVkCalibratedTimestampInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCalibratedTimestampInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCalibratedTimestampInfoEXT::sType)));
    
    sVkCalibratedTimestampInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCalibratedTimestampInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCalibratedTimestampInfoEXT::pNext)));
    
    sVkCalibratedTimestampInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCalibratedTimestampInfoEXT, timeDomain)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCalibratedTimestampInfoEXT::timeDomain)));
    
    sVkCalibratedTimestampInfoEXT.Set(Napi::String::New(env, "timeDomain"), obj);
  }
  sVkCalibratedTimestampInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkCalibratedTimestampInfoEXT)));
  out.Set(Napi::String::New(env, "VkCalibratedTimestampInfoEXT"), sVkCalibratedTimestampInfoEXT);
  Napi::Object sVkPhysicalDeviceShaderCorePropertiesAMD = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::sType)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::pNext)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, shaderEngineCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::shaderEngineCount)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "shaderEngineCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, shaderArraysPerEngineCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::shaderArraysPerEngineCount)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "shaderArraysPerEngineCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, computeUnitsPerShaderArray)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::computeUnitsPerShaderArray)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "computeUnitsPerShaderArray"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, simdPerComputeUnit)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::simdPerComputeUnit)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "simdPerComputeUnit"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, wavefrontsPerSimd)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::wavefrontsPerSimd)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "wavefrontsPerSimd"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, wavefrontSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::wavefrontSize)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "wavefrontSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, sgprsPerSimd)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::sgprsPerSimd)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "sgprsPerSimd"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, minSgprAllocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::minSgprAllocation)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "minSgprAllocation"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, maxSgprAllocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::maxSgprAllocation)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "maxSgprAllocation"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, sgprAllocationGranularity)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::sgprAllocationGranularity)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "sgprAllocationGranularity"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, vgprsPerSimd)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::vgprsPerSimd)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "vgprsPerSimd"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, minVgprAllocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::minVgprAllocation)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "minVgprAllocation"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, maxVgprAllocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::maxVgprAllocation)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "maxVgprAllocation"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, vgprAllocationGranularity)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::vgprAllocationGranularity)));
    
    sVkPhysicalDeviceShaderCorePropertiesAMD.Set(Napi::String::New(env, "vgprAllocationGranularity"), obj);
  }
  sVkPhysicalDeviceShaderCorePropertiesAMD.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderCorePropertiesAMD"), sVkPhysicalDeviceShaderCorePropertiesAMD);
  Napi::Object sVkPhysicalDeviceShaderCoreProperties2AMD = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreProperties2AMD, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCoreProperties2AMD::sType)));
    
    sVkPhysicalDeviceShaderCoreProperties2AMD.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreProperties2AMD, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCoreProperties2AMD::pNext)));
    
    sVkPhysicalDeviceShaderCoreProperties2AMD.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreProperties2AMD, shaderCoreFeatures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCoreProperties2AMD::shaderCoreFeatures)));
    
    sVkPhysicalDeviceShaderCoreProperties2AMD.Set(Napi::String::New(env, "shaderCoreFeatures"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreProperties2AMD, activeComputeUnitCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCoreProperties2AMD::activeComputeUnitCount)));
    
    sVkPhysicalDeviceShaderCoreProperties2AMD.Set(Napi::String::New(env, "activeComputeUnitCount"), obj);
  }
  sVkPhysicalDeviceShaderCoreProperties2AMD.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCoreProperties2AMD)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderCoreProperties2AMD"), sVkPhysicalDeviceShaderCoreProperties2AMD);
  Napi::Object sVkPipelineRasterizationConservativeStateCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationConservativeStateCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT::sType)));
    
    sVkPipelineRasterizationConservativeStateCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationConservativeStateCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT::pNext)));
    
    sVkPipelineRasterizationConservativeStateCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationConservativeStateCreateInfoEXT, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT::flags)));
    
    sVkPipelineRasterizationConservativeStateCreateInfoEXT.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationConservativeStateCreateInfoEXT, conservativeRasterizationMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT::conservativeRasterizationMode)));
    
    sVkPipelineRasterizationConservativeStateCreateInfoEXT.Set(Napi::String::New(env, "conservativeRasterizationMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationConservativeStateCreateInfoEXT, extraPrimitiveOverestimationSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT::extraPrimitiveOverestimationSize)));
    
    sVkPipelineRasterizationConservativeStateCreateInfoEXT.Set(Napi::String::New(env, "extraPrimitiveOverestimationSize"), obj);
  }
  sVkPipelineRasterizationConservativeStateCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkPipelineRasterizationConservativeStateCreateInfoEXT"), sVkPipelineRasterizationConservativeStateCreateInfoEXT);
  Napi::Object sVkPhysicalDeviceDescriptorIndexingFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::sType)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::pNext)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderInputAttachmentArrayDynamicIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::shaderInputAttachmentArrayDynamicIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "shaderInputAttachmentArrayDynamicIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderUniformTexelBufferArrayDynamicIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::shaderUniformTexelBufferArrayDynamicIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "shaderUniformTexelBufferArrayDynamicIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageTexelBufferArrayDynamicIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::shaderStorageTexelBufferArrayDynamicIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "shaderStorageTexelBufferArrayDynamicIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderUniformBufferArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::shaderUniformBufferArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "shaderUniformBufferArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderSampledImageArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::shaderSampledImageArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "shaderSampledImageArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageBufferArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::shaderStorageBufferArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "shaderStorageBufferArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageImageArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::shaderStorageImageArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "shaderStorageImageArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderInputAttachmentArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::shaderInputAttachmentArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "shaderInputAttachmentArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderUniformTexelBufferArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::shaderUniformTexelBufferArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "shaderUniformTexelBufferArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageTexelBufferArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::shaderStorageTexelBufferArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "shaderStorageTexelBufferArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingUniformBufferUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingUniformBufferUpdateAfterBind)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "descriptorBindingUniformBufferUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingSampledImageUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingSampledImageUpdateAfterBind)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "descriptorBindingSampledImageUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingStorageImageUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingStorageImageUpdateAfterBind)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "descriptorBindingStorageImageUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingStorageBufferUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingStorageBufferUpdateAfterBind)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "descriptorBindingStorageBufferUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingUniformTexelBufferUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingUniformTexelBufferUpdateAfterBind)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "descriptorBindingUniformTexelBufferUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingStorageTexelBufferUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingStorageTexelBufferUpdateAfterBind)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "descriptorBindingStorageTexelBufferUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingUpdateUnusedWhilePending)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingUpdateUnusedWhilePending)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "descriptorBindingUpdateUnusedWhilePending"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingPartiallyBound)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingPartiallyBound)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "descriptorBindingPartiallyBound"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingVariableDescriptorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingVariableDescriptorCount)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "descriptorBindingVariableDescriptorCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, runtimeDescriptorArray)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures::runtimeDescriptorArray)));
    
    sVkPhysicalDeviceDescriptorIndexingFeatures.Set(Napi::String::New(env, "runtimeDescriptorArray"), obj);
  }
  sVkPhysicalDeviceDescriptorIndexingFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceDescriptorIndexingFeatures"), sVkPhysicalDeviceDescriptorIndexingFeatures);
  Napi::Object sVkPhysicalDeviceDescriptorIndexingFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::sType)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderInputAttachmentArrayDynamicIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderInputAttachmentArrayDynamicIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "shaderInputAttachmentArrayDynamicIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderUniformTexelBufferArrayDynamicIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderUniformTexelBufferArrayDynamicIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "shaderUniformTexelBufferArrayDynamicIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderStorageTexelBufferArrayDynamicIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderStorageTexelBufferArrayDynamicIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "shaderStorageTexelBufferArrayDynamicIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderUniformBufferArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderUniformBufferArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "shaderUniformBufferArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderSampledImageArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderSampledImageArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "shaderSampledImageArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderStorageBufferArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderStorageBufferArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "shaderStorageBufferArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderStorageImageArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderStorageImageArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "shaderStorageImageArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderInputAttachmentArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderInputAttachmentArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "shaderInputAttachmentArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderUniformTexelBufferArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderUniformTexelBufferArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "shaderUniformTexelBufferArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderStorageTexelBufferArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderStorageTexelBufferArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "shaderStorageTexelBufferArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingUniformBufferUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingUniformBufferUpdateAfterBind)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "descriptorBindingUniformBufferUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingSampledImageUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingSampledImageUpdateAfterBind)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "descriptorBindingSampledImageUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingStorageImageUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingStorageImageUpdateAfterBind)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "descriptorBindingStorageImageUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingStorageBufferUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingStorageBufferUpdateAfterBind)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "descriptorBindingStorageBufferUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingUniformTexelBufferUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingUniformTexelBufferUpdateAfterBind)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "descriptorBindingUniformTexelBufferUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingStorageTexelBufferUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingStorageTexelBufferUpdateAfterBind)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "descriptorBindingStorageTexelBufferUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingUpdateUnusedWhilePending)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingUpdateUnusedWhilePending)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "descriptorBindingUpdateUnusedWhilePending"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingPartiallyBound)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingPartiallyBound)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "descriptorBindingPartiallyBound"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingVariableDescriptorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingVariableDescriptorCount)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "descriptorBindingVariableDescriptorCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, runtimeDescriptorArray)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::runtimeDescriptorArray)));
    
    sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(Napi::String::New(env, "runtimeDescriptorArray"), obj);
  }
  sVkPhysicalDeviceDescriptorIndexingFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceDescriptorIndexingFeaturesEXT"), sVkPhysicalDeviceDescriptorIndexingFeaturesEXT);
  Napi::Object sVkPhysicalDeviceDescriptorIndexingProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::sType)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::pNext)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxUpdateAfterBindDescriptorsInAllPools)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxUpdateAfterBindDescriptorsInAllPools)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxUpdateAfterBindDescriptorsInAllPools"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, shaderUniformBufferArrayNonUniformIndexingNative)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::shaderUniformBufferArrayNonUniformIndexingNative)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "shaderUniformBufferArrayNonUniformIndexingNative"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, shaderSampledImageArrayNonUniformIndexingNative)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::shaderSampledImageArrayNonUniformIndexingNative)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "shaderSampledImageArrayNonUniformIndexingNative"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, shaderStorageBufferArrayNonUniformIndexingNative)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::shaderStorageBufferArrayNonUniformIndexingNative)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "shaderStorageBufferArrayNonUniformIndexingNative"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, shaderStorageImageArrayNonUniformIndexingNative)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::shaderStorageImageArrayNonUniformIndexingNative)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "shaderStorageImageArrayNonUniformIndexingNative"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, shaderInputAttachmentArrayNonUniformIndexingNative)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::shaderInputAttachmentArrayNonUniformIndexingNative)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "shaderInputAttachmentArrayNonUniformIndexingNative"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, robustBufferAccessUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::robustBufferAccessUpdateAfterBind)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "robustBufferAccessUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, quadDivergentImplicitLod)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::quadDivergentImplicitLod)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "quadDivergentImplicitLod"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindSamplers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindSamplers)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindSamplers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindUniformBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindUniformBuffers)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindUniformBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindStorageBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindStorageBuffers)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindStorageBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindSampledImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindSampledImages)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindSampledImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindStorageImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindStorageImages)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindStorageImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindInputAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindInputAttachments)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindInputAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageUpdateAfterBindResources)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageUpdateAfterBindResources)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxPerStageUpdateAfterBindResources"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindSamplers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindSamplers)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindSamplers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindUniformBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindUniformBuffers)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindUniformBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindStorageBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindStorageBuffers)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindStorageBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindSampledImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindSampledImages)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindSampledImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindStorageImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindStorageImages)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindStorageImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindInputAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindInputAttachments)));
    
    sVkPhysicalDeviceDescriptorIndexingProperties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindInputAttachments"), obj);
  }
  sVkPhysicalDeviceDescriptorIndexingProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingProperties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceDescriptorIndexingProperties"), sVkPhysicalDeviceDescriptorIndexingProperties);
  Napi::Object sVkPhysicalDeviceDescriptorIndexingPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::sType)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxUpdateAfterBindDescriptorsInAllPools)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxUpdateAfterBindDescriptorsInAllPools)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxUpdateAfterBindDescriptorsInAllPools"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, shaderUniformBufferArrayNonUniformIndexingNative)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::shaderUniformBufferArrayNonUniformIndexingNative)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "shaderUniformBufferArrayNonUniformIndexingNative"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, shaderSampledImageArrayNonUniformIndexingNative)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::shaderSampledImageArrayNonUniformIndexingNative)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "shaderSampledImageArrayNonUniformIndexingNative"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, shaderStorageBufferArrayNonUniformIndexingNative)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::shaderStorageBufferArrayNonUniformIndexingNative)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "shaderStorageBufferArrayNonUniformIndexingNative"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, shaderStorageImageArrayNonUniformIndexingNative)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::shaderStorageImageArrayNonUniformIndexingNative)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "shaderStorageImageArrayNonUniformIndexingNative"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, shaderInputAttachmentArrayNonUniformIndexingNative)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::shaderInputAttachmentArrayNonUniformIndexingNative)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "shaderInputAttachmentArrayNonUniformIndexingNative"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, robustBufferAccessUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::robustBufferAccessUpdateAfterBind)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "robustBufferAccessUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, quadDivergentImplicitLod)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::quadDivergentImplicitLod)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "quadDivergentImplicitLod"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxPerStageDescriptorUpdateAfterBindSamplers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindSamplers)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindSamplers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxPerStageDescriptorUpdateAfterBindUniformBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindUniformBuffers)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindUniformBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxPerStageDescriptorUpdateAfterBindStorageBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindStorageBuffers)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindStorageBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxPerStageDescriptorUpdateAfterBindSampledImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindSampledImages)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindSampledImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxPerStageDescriptorUpdateAfterBindStorageImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindStorageImages)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindStorageImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxPerStageDescriptorUpdateAfterBindInputAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindInputAttachments)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindInputAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxPerStageUpdateAfterBindResources)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageUpdateAfterBindResources)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxPerStageUpdateAfterBindResources"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindSamplers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindSamplers)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindSamplers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindUniformBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindUniformBuffers)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindUniformBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindStorageBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindStorageBuffers)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindStorageBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindSampledImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindSampledImages)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindSampledImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindStorageImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindStorageImages)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindStorageImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindInputAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindInputAttachments)));
    
    sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindInputAttachments"), obj);
  }
  sVkPhysicalDeviceDescriptorIndexingPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceDescriptorIndexingPropertiesEXT"), sVkPhysicalDeviceDescriptorIndexingPropertiesEXT);
  Napi::Object sVkDescriptorSetLayoutBindingFlagsCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfo::sType)));
    
    sVkDescriptorSetLayoutBindingFlagsCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfo::pNext)));
    
    sVkDescriptorSetLayoutBindingFlagsCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfo, bindingCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfo::bindingCount)));
    
    sVkDescriptorSetLayoutBindingFlagsCreateInfo.Set(Napi::String::New(env, "bindingCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfo, pBindingFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfo::pBindingFlags)));
    
    sVkDescriptorSetLayoutBindingFlagsCreateInfo.Set(Napi::String::New(env, "pBindingFlags"), obj);
  }
  sVkDescriptorSetLayoutBindingFlagsCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfo)));
  out.Set(Napi::String::New(env, "VkDescriptorSetLayoutBindingFlagsCreateInfo"), sVkDescriptorSetLayoutBindingFlagsCreateInfo);
  Napi::Object sVkDescriptorSetLayoutBindingFlagsCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::sType)));
    
    sVkDescriptorSetLayoutBindingFlagsCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::pNext)));
    
    sVkDescriptorSetLayoutBindingFlagsCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT, bindingCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::bindingCount)));
    
    sVkDescriptorSetLayoutBindingFlagsCreateInfoEXT.Set(Napi::String::New(env, "bindingCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT, pBindingFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::pBindingFlags)));
    
    sVkDescriptorSetLayoutBindingFlagsCreateInfoEXT.Set(Napi::String::New(env, "pBindingFlags"), obj);
  }
  sVkDescriptorSetLayoutBindingFlagsCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkDescriptorSetLayoutBindingFlagsCreateInfoEXT"), sVkDescriptorSetLayoutBindingFlagsCreateInfoEXT);
  Napi::Object sVkDescriptorSetVariableDescriptorCountAllocateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfo::sType)));
    
    sVkDescriptorSetVariableDescriptorCountAllocateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfo::pNext)));
    
    sVkDescriptorSetVariableDescriptorCountAllocateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfo, descriptorSetCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfo::descriptorSetCount)));
    
    sVkDescriptorSetVariableDescriptorCountAllocateInfo.Set(Napi::String::New(env, "descriptorSetCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfo, pDescriptorCounts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfo::pDescriptorCounts)));
    
    sVkDescriptorSetVariableDescriptorCountAllocateInfo.Set(Napi::String::New(env, "pDescriptorCounts"), obj);
  }
  sVkDescriptorSetVariableDescriptorCountAllocateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfo)));
  out.Set(Napi::String::New(env, "VkDescriptorSetVariableDescriptorCountAllocateInfo"), sVkDescriptorSetVariableDescriptorCountAllocateInfo);
  Napi::Object sVkDescriptorSetVariableDescriptorCountAllocateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::sType)));
    
    sVkDescriptorSetVariableDescriptorCountAllocateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::pNext)));
    
    sVkDescriptorSetVariableDescriptorCountAllocateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT, descriptorSetCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::descriptorSetCount)));
    
    sVkDescriptorSetVariableDescriptorCountAllocateInfoEXT.Set(Napi::String::New(env, "descriptorSetCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT, pDescriptorCounts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::pDescriptorCounts)));
    
    sVkDescriptorSetVariableDescriptorCountAllocateInfoEXT.Set(Napi::String::New(env, "pDescriptorCounts"), obj);
  }
  sVkDescriptorSetVariableDescriptorCountAllocateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT)));
  out.Set(Napi::String::New(env, "VkDescriptorSetVariableDescriptorCountAllocateInfoEXT"), sVkDescriptorSetVariableDescriptorCountAllocateInfoEXT);
  Napi::Object sVkDescriptorSetVariableDescriptorCountLayoutSupport = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountLayoutSupport, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupport::sType)));
    
    sVkDescriptorSetVariableDescriptorCountLayoutSupport.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountLayoutSupport, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupport::pNext)));
    
    sVkDescriptorSetVariableDescriptorCountLayoutSupport.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountLayoutSupport, maxVariableDescriptorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupport::maxVariableDescriptorCount)));
    
    sVkDescriptorSetVariableDescriptorCountLayoutSupport.Set(Napi::String::New(env, "maxVariableDescriptorCount"), obj);
  }
  sVkDescriptorSetVariableDescriptorCountLayoutSupport.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupport)));
  out.Set(Napi::String::New(env, "VkDescriptorSetVariableDescriptorCountLayoutSupport"), sVkDescriptorSetVariableDescriptorCountLayoutSupport);
  Napi::Object sVkDescriptorSetVariableDescriptorCountLayoutSupportEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::sType)));
    
    sVkDescriptorSetVariableDescriptorCountLayoutSupportEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::pNext)));
    
    sVkDescriptorSetVariableDescriptorCountLayoutSupportEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT, maxVariableDescriptorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::maxVariableDescriptorCount)));
    
    sVkDescriptorSetVariableDescriptorCountLayoutSupportEXT.Set(Napi::String::New(env, "maxVariableDescriptorCount"), obj);
  }
  sVkDescriptorSetVariableDescriptorCountLayoutSupportEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT)));
  out.Set(Napi::String::New(env, "VkDescriptorSetVariableDescriptorCountLayoutSupportEXT"), sVkDescriptorSetVariableDescriptorCountLayoutSupportEXT);
  Napi::Object sVkAttachmentDescription2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2::sType)));
    
    sVkAttachmentDescription2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2::pNext)));
    
    sVkAttachmentDescription2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2::flags)));
    
    sVkAttachmentDescription2.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2::format)));
    
    sVkAttachmentDescription2.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2, samples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2::samples)));
    
    sVkAttachmentDescription2.Set(Napi::String::New(env, "samples"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2, loadOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2::loadOp)));
    
    sVkAttachmentDescription2.Set(Napi::String::New(env, "loadOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2, storeOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2::storeOp)));
    
    sVkAttachmentDescription2.Set(Napi::String::New(env, "storeOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2, stencilLoadOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2::stencilLoadOp)));
    
    sVkAttachmentDescription2.Set(Napi::String::New(env, "stencilLoadOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2, stencilStoreOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2::stencilStoreOp)));
    
    sVkAttachmentDescription2.Set(Napi::String::New(env, "stencilStoreOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2, initialLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2::initialLayout)));
    
    sVkAttachmentDescription2.Set(Napi::String::New(env, "initialLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2, finalLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2::finalLayout)));
    
    sVkAttachmentDescription2.Set(Napi::String::New(env, "finalLayout"), obj);
  }
  sVkAttachmentDescription2.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2)));
  out.Set(Napi::String::New(env, "VkAttachmentDescription2"), sVkAttachmentDescription2);
  Napi::Object sVkAttachmentDescription2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2KHR::sType)));
    
    sVkAttachmentDescription2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2KHR::pNext)));
    
    sVkAttachmentDescription2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2KHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2KHR::flags)));
    
    sVkAttachmentDescription2KHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2KHR, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2KHR::format)));
    
    sVkAttachmentDescription2KHR.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2KHR, samples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2KHR::samples)));
    
    sVkAttachmentDescription2KHR.Set(Napi::String::New(env, "samples"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2KHR, loadOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2KHR::loadOp)));
    
    sVkAttachmentDescription2KHR.Set(Napi::String::New(env, "loadOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2KHR, storeOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2KHR::storeOp)));
    
    sVkAttachmentDescription2KHR.Set(Napi::String::New(env, "storeOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2KHR, stencilLoadOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2KHR::stencilLoadOp)));
    
    sVkAttachmentDescription2KHR.Set(Napi::String::New(env, "stencilLoadOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2KHR, stencilStoreOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2KHR::stencilStoreOp)));
    
    sVkAttachmentDescription2KHR.Set(Napi::String::New(env, "stencilStoreOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2KHR, initialLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2KHR::initialLayout)));
    
    sVkAttachmentDescription2KHR.Set(Napi::String::New(env, "initialLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescription2KHR, finalLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2KHR::finalLayout)));
    
    sVkAttachmentDescription2KHR.Set(Napi::String::New(env, "finalLayout"), obj);
  }
  sVkAttachmentDescription2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescription2KHR)));
  out.Set(Napi::String::New(env, "VkAttachmentDescription2KHR"), sVkAttachmentDescription2KHR);
  Napi::Object sVkAttachmentReference2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReference2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReference2::sType)));
    
    sVkAttachmentReference2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReference2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReference2::pNext)));
    
    sVkAttachmentReference2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReference2, attachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReference2::attachment)));
    
    sVkAttachmentReference2.Set(Napi::String::New(env, "attachment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReference2, layout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReference2::layout)));
    
    sVkAttachmentReference2.Set(Napi::String::New(env, "layout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReference2, aspectMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReference2::aspectMask)));
    
    sVkAttachmentReference2.Set(Napi::String::New(env, "aspectMask"), obj);
  }
  sVkAttachmentReference2.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReference2)));
  out.Set(Napi::String::New(env, "VkAttachmentReference2"), sVkAttachmentReference2);
  Napi::Object sVkAttachmentReference2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReference2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReference2KHR::sType)));
    
    sVkAttachmentReference2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReference2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReference2KHR::pNext)));
    
    sVkAttachmentReference2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReference2KHR, attachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReference2KHR::attachment)));
    
    sVkAttachmentReference2KHR.Set(Napi::String::New(env, "attachment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReference2KHR, layout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReference2KHR::layout)));
    
    sVkAttachmentReference2KHR.Set(Napi::String::New(env, "layout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReference2KHR, aspectMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReference2KHR::aspectMask)));
    
    sVkAttachmentReference2KHR.Set(Napi::String::New(env, "aspectMask"), obj);
  }
  sVkAttachmentReference2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReference2KHR)));
  out.Set(Napi::String::New(env, "VkAttachmentReference2KHR"), sVkAttachmentReference2KHR);
  Napi::Object sVkSubpassDescription2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2::sType)));
    
    sVkSubpassDescription2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2::pNext)));
    
    sVkSubpassDescription2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2::flags)));
    
    sVkSubpassDescription2.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2, pipelineBindPoint)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2::pipelineBindPoint)));
    
    sVkSubpassDescription2.Set(Napi::String::New(env, "pipelineBindPoint"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2, viewMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2::viewMask)));
    
    sVkSubpassDescription2.Set(Napi::String::New(env, "viewMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2, inputAttachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2::inputAttachmentCount)));
    
    sVkSubpassDescription2.Set(Napi::String::New(env, "inputAttachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2, pInputAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2::pInputAttachments)));
    
    sVkSubpassDescription2.Set(Napi::String::New(env, "pInputAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2, colorAttachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2::colorAttachmentCount)));
    
    sVkSubpassDescription2.Set(Napi::String::New(env, "colorAttachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2, pColorAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2::pColorAttachments)));
    
    sVkSubpassDescription2.Set(Napi::String::New(env, "pColorAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2, pResolveAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2::pResolveAttachments)));
    
    sVkSubpassDescription2.Set(Napi::String::New(env, "pResolveAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2, pDepthStencilAttachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2::pDepthStencilAttachment)));
    
    sVkSubpassDescription2.Set(Napi::String::New(env, "pDepthStencilAttachment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2, preserveAttachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2::preserveAttachmentCount)));
    
    sVkSubpassDescription2.Set(Napi::String::New(env, "preserveAttachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2, pPreserveAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2::pPreserveAttachments)));
    
    sVkSubpassDescription2.Set(Napi::String::New(env, "pPreserveAttachments"), obj);
  }
  sVkSubpassDescription2.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2)));
  out.Set(Napi::String::New(env, "VkSubpassDescription2"), sVkSubpassDescription2);
  Napi::Object sVkSubpassDescription2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2KHR::sType)));
    
    sVkSubpassDescription2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2KHR::pNext)));
    
    sVkSubpassDescription2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2KHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2KHR::flags)));
    
    sVkSubpassDescription2KHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2KHR, pipelineBindPoint)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2KHR::pipelineBindPoint)));
    
    sVkSubpassDescription2KHR.Set(Napi::String::New(env, "pipelineBindPoint"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2KHR, viewMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2KHR::viewMask)));
    
    sVkSubpassDescription2KHR.Set(Napi::String::New(env, "viewMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2KHR, inputAttachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2KHR::inputAttachmentCount)));
    
    sVkSubpassDescription2KHR.Set(Napi::String::New(env, "inputAttachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2KHR, pInputAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2KHR::pInputAttachments)));
    
    sVkSubpassDescription2KHR.Set(Napi::String::New(env, "pInputAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2KHR, colorAttachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2KHR::colorAttachmentCount)));
    
    sVkSubpassDescription2KHR.Set(Napi::String::New(env, "colorAttachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2KHR, pColorAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2KHR::pColorAttachments)));
    
    sVkSubpassDescription2KHR.Set(Napi::String::New(env, "pColorAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2KHR, pResolveAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2KHR::pResolveAttachments)));
    
    sVkSubpassDescription2KHR.Set(Napi::String::New(env, "pResolveAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2KHR, pDepthStencilAttachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2KHR::pDepthStencilAttachment)));
    
    sVkSubpassDescription2KHR.Set(Napi::String::New(env, "pDepthStencilAttachment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2KHR, preserveAttachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2KHR::preserveAttachmentCount)));
    
    sVkSubpassDescription2KHR.Set(Napi::String::New(env, "preserveAttachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescription2KHR, pPreserveAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2KHR::pPreserveAttachments)));
    
    sVkSubpassDescription2KHR.Set(Napi::String::New(env, "pPreserveAttachments"), obj);
  }
  sVkSubpassDescription2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescription2KHR)));
  out.Set(Napi::String::New(env, "VkSubpassDescription2KHR"), sVkSubpassDescription2KHR);
  Napi::Object sVkSubpassDependency2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2::sType)));
    
    sVkSubpassDependency2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2::pNext)));
    
    sVkSubpassDependency2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2, srcSubpass)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2::srcSubpass)));
    
    sVkSubpassDependency2.Set(Napi::String::New(env, "srcSubpass"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2, dstSubpass)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2::dstSubpass)));
    
    sVkSubpassDependency2.Set(Napi::String::New(env, "dstSubpass"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2, srcStageMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2::srcStageMask)));
    
    sVkSubpassDependency2.Set(Napi::String::New(env, "srcStageMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2, dstStageMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2::dstStageMask)));
    
    sVkSubpassDependency2.Set(Napi::String::New(env, "dstStageMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2, srcAccessMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2::srcAccessMask)));
    
    sVkSubpassDependency2.Set(Napi::String::New(env, "srcAccessMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2, dstAccessMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2::dstAccessMask)));
    
    sVkSubpassDependency2.Set(Napi::String::New(env, "dstAccessMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2, dependencyFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2::dependencyFlags)));
    
    sVkSubpassDependency2.Set(Napi::String::New(env, "dependencyFlags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2, viewOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2::viewOffset)));
    
    sVkSubpassDependency2.Set(Napi::String::New(env, "viewOffset"), obj);
  }
  sVkSubpassDependency2.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2)));
  out.Set(Napi::String::New(env, "VkSubpassDependency2"), sVkSubpassDependency2);
  Napi::Object sVkSubpassDependency2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2KHR::sType)));
    
    sVkSubpassDependency2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2KHR::pNext)));
    
    sVkSubpassDependency2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2KHR, srcSubpass)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2KHR::srcSubpass)));
    
    sVkSubpassDependency2KHR.Set(Napi::String::New(env, "srcSubpass"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2KHR, dstSubpass)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2KHR::dstSubpass)));
    
    sVkSubpassDependency2KHR.Set(Napi::String::New(env, "dstSubpass"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2KHR, srcStageMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2KHR::srcStageMask)));
    
    sVkSubpassDependency2KHR.Set(Napi::String::New(env, "srcStageMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2KHR, dstStageMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2KHR::dstStageMask)));
    
    sVkSubpassDependency2KHR.Set(Napi::String::New(env, "dstStageMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2KHR, srcAccessMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2KHR::srcAccessMask)));
    
    sVkSubpassDependency2KHR.Set(Napi::String::New(env, "srcAccessMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2KHR, dstAccessMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2KHR::dstAccessMask)));
    
    sVkSubpassDependency2KHR.Set(Napi::String::New(env, "dstAccessMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2KHR, dependencyFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2KHR::dependencyFlags)));
    
    sVkSubpassDependency2KHR.Set(Napi::String::New(env, "dependencyFlags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDependency2KHR, viewOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2KHR::viewOffset)));
    
    sVkSubpassDependency2KHR.Set(Napi::String::New(env, "viewOffset"), obj);
  }
  sVkSubpassDependency2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDependency2KHR)));
  out.Set(Napi::String::New(env, "VkSubpassDependency2KHR"), sVkSubpassDependency2KHR);
  Napi::Object sVkRenderPassCreateInfo2 = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2::sType)));
    
    sVkRenderPassCreateInfo2.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2::pNext)));
    
    sVkRenderPassCreateInfo2.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2::flags)));
    
    sVkRenderPassCreateInfo2.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, attachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2::attachmentCount)));
    
    sVkRenderPassCreateInfo2.Set(Napi::String::New(env, "attachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, pAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2::pAttachments)));
    
    sVkRenderPassCreateInfo2.Set(Napi::String::New(env, "pAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, subpassCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2::subpassCount)));
    
    sVkRenderPassCreateInfo2.Set(Napi::String::New(env, "subpassCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, pSubpasses)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2::pSubpasses)));
    
    sVkRenderPassCreateInfo2.Set(Napi::String::New(env, "pSubpasses"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, dependencyCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2::dependencyCount)));
    
    sVkRenderPassCreateInfo2.Set(Napi::String::New(env, "dependencyCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, pDependencies)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2::pDependencies)));
    
    sVkRenderPassCreateInfo2.Set(Napi::String::New(env, "pDependencies"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, correlatedViewMaskCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2::correlatedViewMaskCount)));
    
    sVkRenderPassCreateInfo2.Set(Napi::String::New(env, "correlatedViewMaskCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, pCorrelatedViewMasks)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2::pCorrelatedViewMasks)));
    
    sVkRenderPassCreateInfo2.Set(Napi::String::New(env, "pCorrelatedViewMasks"), obj);
  }
  sVkRenderPassCreateInfo2.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2)));
  out.Set(Napi::String::New(env, "VkRenderPassCreateInfo2"), sVkRenderPassCreateInfo2);
  Napi::Object sVkRenderPassCreateInfo2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2KHR::sType)));
    
    sVkRenderPassCreateInfo2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2KHR::pNext)));
    
    sVkRenderPassCreateInfo2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2KHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2KHR::flags)));
    
    sVkRenderPassCreateInfo2KHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2KHR, attachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2KHR::attachmentCount)));
    
    sVkRenderPassCreateInfo2KHR.Set(Napi::String::New(env, "attachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2KHR, pAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2KHR::pAttachments)));
    
    sVkRenderPassCreateInfo2KHR.Set(Napi::String::New(env, "pAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2KHR, subpassCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2KHR::subpassCount)));
    
    sVkRenderPassCreateInfo2KHR.Set(Napi::String::New(env, "subpassCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2KHR, pSubpasses)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2KHR::pSubpasses)));
    
    sVkRenderPassCreateInfo2KHR.Set(Napi::String::New(env, "pSubpasses"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2KHR, dependencyCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2KHR::dependencyCount)));
    
    sVkRenderPassCreateInfo2KHR.Set(Napi::String::New(env, "dependencyCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2KHR, pDependencies)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2KHR::pDependencies)));
    
    sVkRenderPassCreateInfo2KHR.Set(Napi::String::New(env, "pDependencies"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2KHR, correlatedViewMaskCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2KHR::correlatedViewMaskCount)));
    
    sVkRenderPassCreateInfo2KHR.Set(Napi::String::New(env, "correlatedViewMaskCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2KHR, pCorrelatedViewMasks)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2KHR::pCorrelatedViewMasks)));
    
    sVkRenderPassCreateInfo2KHR.Set(Napi::String::New(env, "pCorrelatedViewMasks"), obj);
  }
  sVkRenderPassCreateInfo2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2KHR)));
  out.Set(Napi::String::New(env, "VkRenderPassCreateInfo2KHR"), sVkRenderPassCreateInfo2KHR);
  Napi::Object sVkSubpassBeginInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassBeginInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassBeginInfo::sType)));
    
    sVkSubpassBeginInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassBeginInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassBeginInfo::pNext)));
    
    sVkSubpassBeginInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassBeginInfo, contents)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassBeginInfo::contents)));
    
    sVkSubpassBeginInfo.Set(Napi::String::New(env, "contents"), obj);
  }
  sVkSubpassBeginInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassBeginInfo)));
  out.Set(Napi::String::New(env, "VkSubpassBeginInfo"), sVkSubpassBeginInfo);
  Napi::Object sVkSubpassBeginInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassBeginInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassBeginInfoKHR::sType)));
    
    sVkSubpassBeginInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassBeginInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassBeginInfoKHR::pNext)));
    
    sVkSubpassBeginInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassBeginInfoKHR, contents)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassBeginInfoKHR::contents)));
    
    sVkSubpassBeginInfoKHR.Set(Napi::String::New(env, "contents"), obj);
  }
  sVkSubpassBeginInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassBeginInfoKHR)));
  out.Set(Napi::String::New(env, "VkSubpassBeginInfoKHR"), sVkSubpassBeginInfoKHR);
  Napi::Object sVkSubpassEndInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassEndInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassEndInfo::sType)));
    
    sVkSubpassEndInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassEndInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassEndInfo::pNext)));
    
    sVkSubpassEndInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  sVkSubpassEndInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassEndInfo)));
  out.Set(Napi::String::New(env, "VkSubpassEndInfo"), sVkSubpassEndInfo);
  Napi::Object sVkSubpassEndInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassEndInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassEndInfoKHR::sType)));
    
    sVkSubpassEndInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassEndInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassEndInfoKHR::pNext)));
    
    sVkSubpassEndInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  sVkSubpassEndInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassEndInfoKHR)));
  out.Set(Napi::String::New(env, "VkSubpassEndInfoKHR"), sVkSubpassEndInfoKHR);
  Napi::Object sVkPhysicalDeviceTimelineSemaphoreFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphoreFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphoreFeatures::sType)));
    
    sVkPhysicalDeviceTimelineSemaphoreFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphoreFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphoreFeatures::pNext)));
    
    sVkPhysicalDeviceTimelineSemaphoreFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphoreFeatures, timelineSemaphore)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphoreFeatures::timelineSemaphore)));
    
    sVkPhysicalDeviceTimelineSemaphoreFeatures.Set(Napi::String::New(env, "timelineSemaphore"), obj);
  }
  sVkPhysicalDeviceTimelineSemaphoreFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphoreFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceTimelineSemaphoreFeatures"), sVkPhysicalDeviceTimelineSemaphoreFeatures);
  Napi::Object sVkPhysicalDeviceTimelineSemaphoreFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphoreFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphoreFeaturesKHR::sType)));
    
    sVkPhysicalDeviceTimelineSemaphoreFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphoreFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphoreFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceTimelineSemaphoreFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphoreFeaturesKHR, timelineSemaphore)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphoreFeaturesKHR::timelineSemaphore)));
    
    sVkPhysicalDeviceTimelineSemaphoreFeaturesKHR.Set(Napi::String::New(env, "timelineSemaphore"), obj);
  }
  sVkPhysicalDeviceTimelineSemaphoreFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphoreFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceTimelineSemaphoreFeaturesKHR"), sVkPhysicalDeviceTimelineSemaphoreFeaturesKHR);
  Napi::Object sVkPhysicalDeviceTimelineSemaphoreProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphoreProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphoreProperties::sType)));
    
    sVkPhysicalDeviceTimelineSemaphoreProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphoreProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphoreProperties::pNext)));
    
    sVkPhysicalDeviceTimelineSemaphoreProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphoreProperties, maxTimelineSemaphoreValueDifference)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphoreProperties::maxTimelineSemaphoreValueDifference)));
    
    sVkPhysicalDeviceTimelineSemaphoreProperties.Set(Napi::String::New(env, "maxTimelineSemaphoreValueDifference"), obj);
  }
  sVkPhysicalDeviceTimelineSemaphoreProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphoreProperties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceTimelineSemaphoreProperties"), sVkPhysicalDeviceTimelineSemaphoreProperties);
  Napi::Object sVkPhysicalDeviceTimelineSemaphorePropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphorePropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphorePropertiesKHR::sType)));
    
    sVkPhysicalDeviceTimelineSemaphorePropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphorePropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphorePropertiesKHR::pNext)));
    
    sVkPhysicalDeviceTimelineSemaphorePropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphorePropertiesKHR, maxTimelineSemaphoreValueDifference)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphorePropertiesKHR::maxTimelineSemaphoreValueDifference)));
    
    sVkPhysicalDeviceTimelineSemaphorePropertiesKHR.Set(Napi::String::New(env, "maxTimelineSemaphoreValueDifference"), obj);
  }
  sVkPhysicalDeviceTimelineSemaphorePropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTimelineSemaphorePropertiesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceTimelineSemaphorePropertiesKHR"), sVkPhysicalDeviceTimelineSemaphorePropertiesKHR);
  Napi::Object sVkSemaphoreTypeCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreTypeCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreTypeCreateInfo::sType)));
    
    sVkSemaphoreTypeCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreTypeCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreTypeCreateInfo::pNext)));
    
    sVkSemaphoreTypeCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreTypeCreateInfo, semaphoreType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreTypeCreateInfo::semaphoreType)));
    
    sVkSemaphoreTypeCreateInfo.Set(Napi::String::New(env, "semaphoreType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreTypeCreateInfo, initialValue)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreTypeCreateInfo::initialValue)));
    
    sVkSemaphoreTypeCreateInfo.Set(Napi::String::New(env, "initialValue"), obj);
  }
  sVkSemaphoreTypeCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreTypeCreateInfo)));
  out.Set(Napi::String::New(env, "VkSemaphoreTypeCreateInfo"), sVkSemaphoreTypeCreateInfo);
  Napi::Object sVkSemaphoreTypeCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreTypeCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreTypeCreateInfoKHR::sType)));
    
    sVkSemaphoreTypeCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreTypeCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreTypeCreateInfoKHR::pNext)));
    
    sVkSemaphoreTypeCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreTypeCreateInfoKHR, semaphoreType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreTypeCreateInfoKHR::semaphoreType)));
    
    sVkSemaphoreTypeCreateInfoKHR.Set(Napi::String::New(env, "semaphoreType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreTypeCreateInfoKHR, initialValue)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreTypeCreateInfoKHR::initialValue)));
    
    sVkSemaphoreTypeCreateInfoKHR.Set(Napi::String::New(env, "initialValue"), obj);
  }
  sVkSemaphoreTypeCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreTypeCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkSemaphoreTypeCreateInfoKHR"), sVkSemaphoreTypeCreateInfoKHR);
  Napi::Object sVkTimelineSemaphoreSubmitInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTimelineSemaphoreSubmitInfo::sType)));
    
    sVkTimelineSemaphoreSubmitInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTimelineSemaphoreSubmitInfo::pNext)));
    
    sVkTimelineSemaphoreSubmitInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfo, waitSemaphoreValueCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTimelineSemaphoreSubmitInfo::waitSemaphoreValueCount)));
    
    sVkTimelineSemaphoreSubmitInfo.Set(Napi::String::New(env, "waitSemaphoreValueCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfo, pWaitSemaphoreValues)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTimelineSemaphoreSubmitInfo::pWaitSemaphoreValues)));
    
    sVkTimelineSemaphoreSubmitInfo.Set(Napi::String::New(env, "pWaitSemaphoreValues"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfo, signalSemaphoreValueCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTimelineSemaphoreSubmitInfo::signalSemaphoreValueCount)));
    
    sVkTimelineSemaphoreSubmitInfo.Set(Napi::String::New(env, "signalSemaphoreValueCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfo, pSignalSemaphoreValues)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTimelineSemaphoreSubmitInfo::pSignalSemaphoreValues)));
    
    sVkTimelineSemaphoreSubmitInfo.Set(Napi::String::New(env, "pSignalSemaphoreValues"), obj);
  }
  sVkTimelineSemaphoreSubmitInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkTimelineSemaphoreSubmitInfo)));
  out.Set(Napi::String::New(env, "VkTimelineSemaphoreSubmitInfo"), sVkTimelineSemaphoreSubmitInfo);
  Napi::Object sVkTimelineSemaphoreSubmitInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTimelineSemaphoreSubmitInfoKHR::sType)));
    
    sVkTimelineSemaphoreSubmitInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTimelineSemaphoreSubmitInfoKHR::pNext)));
    
    sVkTimelineSemaphoreSubmitInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfoKHR, waitSemaphoreValueCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTimelineSemaphoreSubmitInfoKHR::waitSemaphoreValueCount)));
    
    sVkTimelineSemaphoreSubmitInfoKHR.Set(Napi::String::New(env, "waitSemaphoreValueCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfoKHR, pWaitSemaphoreValues)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTimelineSemaphoreSubmitInfoKHR::pWaitSemaphoreValues)));
    
    sVkTimelineSemaphoreSubmitInfoKHR.Set(Napi::String::New(env, "pWaitSemaphoreValues"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfoKHR, signalSemaphoreValueCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTimelineSemaphoreSubmitInfoKHR::signalSemaphoreValueCount)));
    
    sVkTimelineSemaphoreSubmitInfoKHR.Set(Napi::String::New(env, "signalSemaphoreValueCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfoKHR, pSignalSemaphoreValues)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTimelineSemaphoreSubmitInfoKHR::pSignalSemaphoreValues)));
    
    sVkTimelineSemaphoreSubmitInfoKHR.Set(Napi::String::New(env, "pSignalSemaphoreValues"), obj);
  }
  sVkTimelineSemaphoreSubmitInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkTimelineSemaphoreSubmitInfoKHR)));
  out.Set(Napi::String::New(env, "VkTimelineSemaphoreSubmitInfoKHR"), sVkTimelineSemaphoreSubmitInfoKHR);
  Napi::Object sVkSemaphoreWaitInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreWaitInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreWaitInfo::sType)));
    
    sVkSemaphoreWaitInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreWaitInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreWaitInfo::pNext)));
    
    sVkSemaphoreWaitInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreWaitInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreWaitInfo::flags)));
    
    sVkSemaphoreWaitInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreWaitInfo, semaphoreCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreWaitInfo::semaphoreCount)));
    
    sVkSemaphoreWaitInfo.Set(Napi::String::New(env, "semaphoreCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreWaitInfo, pSemaphores)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreWaitInfo::pSemaphores)));
    
    sVkSemaphoreWaitInfo.Set(Napi::String::New(env, "pSemaphores"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreWaitInfo, pValues)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreWaitInfo::pValues)));
    
    sVkSemaphoreWaitInfo.Set(Napi::String::New(env, "pValues"), obj);
  }
  sVkSemaphoreWaitInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreWaitInfo)));
  out.Set(Napi::String::New(env, "VkSemaphoreWaitInfo"), sVkSemaphoreWaitInfo);
  Napi::Object sVkSemaphoreWaitInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreWaitInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreWaitInfoKHR::sType)));
    
    sVkSemaphoreWaitInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreWaitInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreWaitInfoKHR::pNext)));
    
    sVkSemaphoreWaitInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreWaitInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreWaitInfoKHR::flags)));
    
    sVkSemaphoreWaitInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreWaitInfoKHR, semaphoreCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreWaitInfoKHR::semaphoreCount)));
    
    sVkSemaphoreWaitInfoKHR.Set(Napi::String::New(env, "semaphoreCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreWaitInfoKHR, pSemaphores)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreWaitInfoKHR::pSemaphores)));
    
    sVkSemaphoreWaitInfoKHR.Set(Napi::String::New(env, "pSemaphores"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreWaitInfoKHR, pValues)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreWaitInfoKHR::pValues)));
    
    sVkSemaphoreWaitInfoKHR.Set(Napi::String::New(env, "pValues"), obj);
  }
  sVkSemaphoreWaitInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreWaitInfoKHR)));
  out.Set(Napi::String::New(env, "VkSemaphoreWaitInfoKHR"), sVkSemaphoreWaitInfoKHR);
  Napi::Object sVkSemaphoreSignalInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreSignalInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreSignalInfo::sType)));
    
    sVkSemaphoreSignalInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreSignalInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreSignalInfo::pNext)));
    
    sVkSemaphoreSignalInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreSignalInfo, semaphore)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreSignalInfo::semaphore)));
    
    sVkSemaphoreSignalInfo.Set(Napi::String::New(env, "semaphore"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreSignalInfo, value)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreSignalInfo::value)));
    
    sVkSemaphoreSignalInfo.Set(Napi::String::New(env, "value"), obj);
  }
  sVkSemaphoreSignalInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreSignalInfo)));
  out.Set(Napi::String::New(env, "VkSemaphoreSignalInfo"), sVkSemaphoreSignalInfo);
  Napi::Object sVkSemaphoreSignalInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreSignalInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreSignalInfoKHR::sType)));
    
    sVkSemaphoreSignalInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreSignalInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreSignalInfoKHR::pNext)));
    
    sVkSemaphoreSignalInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreSignalInfoKHR, semaphore)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreSignalInfoKHR::semaphore)));
    
    sVkSemaphoreSignalInfoKHR.Set(Napi::String::New(env, "semaphore"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSemaphoreSignalInfoKHR, value)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreSignalInfoKHR::value)));
    
    sVkSemaphoreSignalInfoKHR.Set(Napi::String::New(env, "value"), obj);
  }
  sVkSemaphoreSignalInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSemaphoreSignalInfoKHR)));
  out.Set(Napi::String::New(env, "VkSemaphoreSignalInfoKHR"), sVkSemaphoreSignalInfoKHR);
  Napi::Object sVkVertexInputBindingDivisorDescriptionEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkVertexInputBindingDivisorDescriptionEXT, binding)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkVertexInputBindingDivisorDescriptionEXT::binding)));
    
    sVkVertexInputBindingDivisorDescriptionEXT.Set(Napi::String::New(env, "binding"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkVertexInputBindingDivisorDescriptionEXT, divisor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkVertexInputBindingDivisorDescriptionEXT::divisor)));
    
    sVkVertexInputBindingDivisorDescriptionEXT.Set(Napi::String::New(env, "divisor"), obj);
  }
  sVkVertexInputBindingDivisorDescriptionEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkVertexInputBindingDivisorDescriptionEXT)));
  out.Set(Napi::String::New(env, "VkVertexInputBindingDivisorDescriptionEXT"), sVkVertexInputBindingDivisorDescriptionEXT);
  Napi::Object sVkPipelineVertexInputDivisorStateCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT::sType)));
    
    sVkPipelineVertexInputDivisorStateCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT::pNext)));
    
    sVkPipelineVertexInputDivisorStateCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, vertexBindingDivisorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT::vertexBindingDivisorCount)));
    
    sVkPipelineVertexInputDivisorStateCreateInfoEXT.Set(Napi::String::New(env, "vertexBindingDivisorCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, pVertexBindingDivisors)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT::pVertexBindingDivisors)));
    
    sVkPipelineVertexInputDivisorStateCreateInfoEXT.Set(Napi::String::New(env, "pVertexBindingDivisors"), obj);
  }
  sVkPipelineVertexInputDivisorStateCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkPipelineVertexInputDivisorStateCreateInfoEXT"), sVkPipelineVertexInputDivisorStateCreateInfoEXT);
  Napi::Object sVkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::sType)));
    
    sVkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, maxVertexAttribDivisor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::maxVertexAttribDivisor)));
    
    sVkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.Set(Napi::String::New(env, "maxVertexAttribDivisor"), obj);
  }
  sVkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT"), sVkPhysicalDeviceVertexAttributeDivisorPropertiesEXT);
  Napi::Object sVkPhysicalDevicePCIBusInfoPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT::sType)));
    
    sVkPhysicalDevicePCIBusInfoPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT::pNext)));
    
    sVkPhysicalDevicePCIBusInfoPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciDomain)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT::pciDomain)));
    
    sVkPhysicalDevicePCIBusInfoPropertiesEXT.Set(Napi::String::New(env, "pciDomain"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciBus)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT::pciBus)));
    
    sVkPhysicalDevicePCIBusInfoPropertiesEXT.Set(Napi::String::New(env, "pciBus"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciDevice)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT::pciDevice)));
    
    sVkPhysicalDevicePCIBusInfoPropertiesEXT.Set(Napi::String::New(env, "pciDevice"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciFunction)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT::pciFunction)));
    
    sVkPhysicalDevicePCIBusInfoPropertiesEXT.Set(Napi::String::New(env, "pciFunction"), obj);
  }
  sVkPhysicalDevicePCIBusInfoPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDevicePCIBusInfoPropertiesEXT"), sVkPhysicalDevicePCIBusInfoPropertiesEXT);
  Napi::Object sVkCommandBufferInheritanceConditionalRenderingInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferInheritanceConditionalRenderingInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT::sType)));
    
    sVkCommandBufferInheritanceConditionalRenderingInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferInheritanceConditionalRenderingInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT::pNext)));
    
    sVkCommandBufferInheritanceConditionalRenderingInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferInheritanceConditionalRenderingInfoEXT, conditionalRenderingEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT::conditionalRenderingEnable)));
    
    sVkCommandBufferInheritanceConditionalRenderingInfoEXT.Set(Napi::String::New(env, "conditionalRenderingEnable"), obj);
  }
  sVkCommandBufferInheritanceConditionalRenderingInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT)));
  out.Set(Napi::String::New(env, "VkCommandBufferInheritanceConditionalRenderingInfoEXT"), sVkCommandBufferInheritanceConditionalRenderingInfoEXT);
  Napi::Object sVkPhysicalDevice8BitStorageFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice8BitStorageFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice8BitStorageFeatures::sType)));
    
    sVkPhysicalDevice8BitStorageFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice8BitStorageFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice8BitStorageFeatures::pNext)));
    
    sVkPhysicalDevice8BitStorageFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice8BitStorageFeatures, storageBuffer8BitAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice8BitStorageFeatures::storageBuffer8BitAccess)));
    
    sVkPhysicalDevice8BitStorageFeatures.Set(Napi::String::New(env, "storageBuffer8BitAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice8BitStorageFeatures, uniformAndStorageBuffer8BitAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice8BitStorageFeatures::uniformAndStorageBuffer8BitAccess)));
    
    sVkPhysicalDevice8BitStorageFeatures.Set(Napi::String::New(env, "uniformAndStorageBuffer8BitAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice8BitStorageFeatures, storagePushConstant8)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice8BitStorageFeatures::storagePushConstant8)));
    
    sVkPhysicalDevice8BitStorageFeatures.Set(Napi::String::New(env, "storagePushConstant8"), obj);
  }
  sVkPhysicalDevice8BitStorageFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice8BitStorageFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDevice8BitStorageFeatures"), sVkPhysicalDevice8BitStorageFeatures);
  Napi::Object sVkPhysicalDevice8BitStorageFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice8BitStorageFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice8BitStorageFeaturesKHR::sType)));
    
    sVkPhysicalDevice8BitStorageFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice8BitStorageFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice8BitStorageFeaturesKHR::pNext)));
    
    sVkPhysicalDevice8BitStorageFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice8BitStorageFeaturesKHR, storageBuffer8BitAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice8BitStorageFeaturesKHR::storageBuffer8BitAccess)));
    
    sVkPhysicalDevice8BitStorageFeaturesKHR.Set(Napi::String::New(env, "storageBuffer8BitAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice8BitStorageFeaturesKHR, uniformAndStorageBuffer8BitAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice8BitStorageFeaturesKHR::uniformAndStorageBuffer8BitAccess)));
    
    sVkPhysicalDevice8BitStorageFeaturesKHR.Set(Napi::String::New(env, "uniformAndStorageBuffer8BitAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice8BitStorageFeaturesKHR, storagePushConstant8)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice8BitStorageFeaturesKHR::storagePushConstant8)));
    
    sVkPhysicalDevice8BitStorageFeaturesKHR.Set(Napi::String::New(env, "storagePushConstant8"), obj);
  }
  sVkPhysicalDevice8BitStorageFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice8BitStorageFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDevice8BitStorageFeaturesKHR"), sVkPhysicalDevice8BitStorageFeaturesKHR);
  Napi::Object sVkPhysicalDeviceConditionalRenderingFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceConditionalRenderingFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT::sType)));
    
    sVkPhysicalDeviceConditionalRenderingFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceConditionalRenderingFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceConditionalRenderingFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceConditionalRenderingFeaturesEXT, conditionalRendering)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT::conditionalRendering)));
    
    sVkPhysicalDeviceConditionalRenderingFeaturesEXT.Set(Napi::String::New(env, "conditionalRendering"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceConditionalRenderingFeaturesEXT, inheritedConditionalRendering)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT::inheritedConditionalRendering)));
    
    sVkPhysicalDeviceConditionalRenderingFeaturesEXT.Set(Napi::String::New(env, "inheritedConditionalRendering"), obj);
  }
  sVkPhysicalDeviceConditionalRenderingFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceConditionalRenderingFeaturesEXT"), sVkPhysicalDeviceConditionalRenderingFeaturesEXT);
  Napi::Object sVkPhysicalDeviceVulkanMemoryModelFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkanMemoryModelFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkanMemoryModelFeatures::sType)));
    
    sVkPhysicalDeviceVulkanMemoryModelFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkanMemoryModelFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkanMemoryModelFeatures::pNext)));
    
    sVkPhysicalDeviceVulkanMemoryModelFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkanMemoryModelFeatures, vulkanMemoryModel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkanMemoryModelFeatures::vulkanMemoryModel)));
    
    sVkPhysicalDeviceVulkanMemoryModelFeatures.Set(Napi::String::New(env, "vulkanMemoryModel"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkanMemoryModelFeatures, vulkanMemoryModelDeviceScope)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkanMemoryModelFeatures::vulkanMemoryModelDeviceScope)));
    
    sVkPhysicalDeviceVulkanMemoryModelFeatures.Set(Napi::String::New(env, "vulkanMemoryModelDeviceScope"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkanMemoryModelFeatures, vulkanMemoryModelAvailabilityVisibilityChains)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkanMemoryModelFeatures::vulkanMemoryModelAvailabilityVisibilityChains)));
    
    sVkPhysicalDeviceVulkanMemoryModelFeatures.Set(Napi::String::New(env, "vulkanMemoryModelAvailabilityVisibilityChains"), obj);
  }
  sVkPhysicalDeviceVulkanMemoryModelFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkanMemoryModelFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceVulkanMemoryModelFeatures"), sVkPhysicalDeviceVulkanMemoryModelFeatures);
  Napi::Object sVkPhysicalDeviceVulkanMemoryModelFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR::sType)));
    
    sVkPhysicalDeviceVulkanMemoryModelFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceVulkanMemoryModelFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR, vulkanMemoryModel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR::vulkanMemoryModel)));
    
    sVkPhysicalDeviceVulkanMemoryModelFeaturesKHR.Set(Napi::String::New(env, "vulkanMemoryModel"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR, vulkanMemoryModelDeviceScope)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR::vulkanMemoryModelDeviceScope)));
    
    sVkPhysicalDeviceVulkanMemoryModelFeaturesKHR.Set(Napi::String::New(env, "vulkanMemoryModelDeviceScope"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR, vulkanMemoryModelAvailabilityVisibilityChains)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR::vulkanMemoryModelAvailabilityVisibilityChains)));
    
    sVkPhysicalDeviceVulkanMemoryModelFeaturesKHR.Set(Napi::String::New(env, "vulkanMemoryModelAvailabilityVisibilityChains"), obj);
  }
  sVkPhysicalDeviceVulkanMemoryModelFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceVulkanMemoryModelFeaturesKHR"), sVkPhysicalDeviceVulkanMemoryModelFeaturesKHR);
  Napi::Object sVkPhysicalDeviceShaderAtomicInt64Features = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicInt64Features, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicInt64Features::sType)));
    
    sVkPhysicalDeviceShaderAtomicInt64Features.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicInt64Features, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicInt64Features::pNext)));
    
    sVkPhysicalDeviceShaderAtomicInt64Features.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicInt64Features, shaderBufferInt64Atomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicInt64Features::shaderBufferInt64Atomics)));
    
    sVkPhysicalDeviceShaderAtomicInt64Features.Set(Napi::String::New(env, "shaderBufferInt64Atomics"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicInt64Features, shaderSharedInt64Atomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicInt64Features::shaderSharedInt64Atomics)));
    
    sVkPhysicalDeviceShaderAtomicInt64Features.Set(Napi::String::New(env, "shaderSharedInt64Atomics"), obj);
  }
  sVkPhysicalDeviceShaderAtomicInt64Features.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicInt64Features)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderAtomicInt64Features"), sVkPhysicalDeviceShaderAtomicInt64Features);
  Napi::Object sVkPhysicalDeviceShaderAtomicInt64FeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR::sType)));
    
    sVkPhysicalDeviceShaderAtomicInt64FeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR::pNext)));
    
    sVkPhysicalDeviceShaderAtomicInt64FeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR, shaderBufferInt64Atomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR::shaderBufferInt64Atomics)));
    
    sVkPhysicalDeviceShaderAtomicInt64FeaturesKHR.Set(Napi::String::New(env, "shaderBufferInt64Atomics"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR, shaderSharedInt64Atomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR::shaderSharedInt64Atomics)));
    
    sVkPhysicalDeviceShaderAtomicInt64FeaturesKHR.Set(Napi::String::New(env, "shaderSharedInt64Atomics"), obj);
  }
  sVkPhysicalDeviceShaderAtomicInt64FeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderAtomicInt64FeaturesKHR"), sVkPhysicalDeviceShaderAtomicInt64FeaturesKHR);
  Napi::Object sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::sType)));
    
    sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat32Atomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderBufferFloat32Atomics)));
    
    sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Set(Napi::String::New(env, "shaderBufferFloat32Atomics"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat32AtomicAdd)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderBufferFloat32AtomicAdd)));
    
    sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Set(Napi::String::New(env, "shaderBufferFloat32AtomicAdd"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat64Atomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderBufferFloat64Atomics)));
    
    sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Set(Napi::String::New(env, "shaderBufferFloat64Atomics"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat64AtomicAdd)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderBufferFloat64AtomicAdd)));
    
    sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Set(Napi::String::New(env, "shaderBufferFloat64AtomicAdd"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat32Atomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderSharedFloat32Atomics)));
    
    sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Set(Napi::String::New(env, "shaderSharedFloat32Atomics"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat32AtomicAdd)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderSharedFloat32AtomicAdd)));
    
    sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Set(Napi::String::New(env, "shaderSharedFloat32AtomicAdd"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat64Atomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderSharedFloat64Atomics)));
    
    sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Set(Napi::String::New(env, "shaderSharedFloat64Atomics"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat64AtomicAdd)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderSharedFloat64AtomicAdd)));
    
    sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Set(Napi::String::New(env, "shaderSharedFloat64AtomicAdd"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderImageFloat32Atomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderImageFloat32Atomics)));
    
    sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Set(Napi::String::New(env, "shaderImageFloat32Atomics"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderImageFloat32AtomicAdd)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderImageFloat32AtomicAdd)));
    
    sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Set(Napi::String::New(env, "shaderImageFloat32AtomicAdd"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, sparseImageFloat32Atomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::sparseImageFloat32Atomics)));
    
    sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Set(Napi::String::New(env, "sparseImageFloat32Atomics"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, sparseImageFloat32AtomicAdd)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::sparseImageFloat32AtomicAdd)));
    
    sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Set(Napi::String::New(env, "sparseImageFloat32AtomicAdd"), obj);
  }
  sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderAtomicFloatFeaturesEXT"), sVkPhysicalDeviceShaderAtomicFloatFeaturesEXT);
  Napi::Object sVkPhysicalDeviceVertexAttributeDivisorFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT::sType)));
    
    sVkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, vertexAttributeInstanceRateDivisor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT::vertexAttributeInstanceRateDivisor)));
    
    sVkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.Set(Napi::String::New(env, "vertexAttributeInstanceRateDivisor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, vertexAttributeInstanceRateZeroDivisor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT::vertexAttributeInstanceRateZeroDivisor)));
    
    sVkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.Set(Napi::String::New(env, "vertexAttributeInstanceRateZeroDivisor"), obj);
  }
  sVkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT"), sVkPhysicalDeviceVertexAttributeDivisorFeaturesEXT);
  Napi::Object sVkQueueFamilyCheckpointPropertiesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueueFamilyCheckpointPropertiesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyCheckpointPropertiesNV::sType)));
    
    sVkQueueFamilyCheckpointPropertiesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueueFamilyCheckpointPropertiesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyCheckpointPropertiesNV::pNext)));
    
    sVkQueueFamilyCheckpointPropertiesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueueFamilyCheckpointPropertiesNV, checkpointExecutionStageMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyCheckpointPropertiesNV::checkpointExecutionStageMask)));
    
    sVkQueueFamilyCheckpointPropertiesNV.Set(Napi::String::New(env, "checkpointExecutionStageMask"), obj);
  }
  sVkQueueFamilyCheckpointPropertiesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueueFamilyCheckpointPropertiesNV)));
  out.Set(Napi::String::New(env, "VkQueueFamilyCheckpointPropertiesNV"), sVkQueueFamilyCheckpointPropertiesNV);
  Napi::Object sVkCheckpointDataNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCheckpointDataNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCheckpointDataNV::sType)));
    
    sVkCheckpointDataNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCheckpointDataNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCheckpointDataNV::pNext)));
    
    sVkCheckpointDataNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCheckpointDataNV, stage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCheckpointDataNV::stage)));
    
    sVkCheckpointDataNV.Set(Napi::String::New(env, "stage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCheckpointDataNV, pCheckpointMarker)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCheckpointDataNV::pCheckpointMarker)));
    
    sVkCheckpointDataNV.Set(Napi::String::New(env, "pCheckpointMarker"), obj);
  }
  sVkCheckpointDataNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkCheckpointDataNV)));
  out.Set(Napi::String::New(env, "VkCheckpointDataNV"), sVkCheckpointDataNV);
  Napi::Object sVkPhysicalDeviceDepthStencilResolveProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolveProperties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthStencilResolveProperties::sType)));
    
    sVkPhysicalDeviceDepthStencilResolveProperties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolveProperties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthStencilResolveProperties::pNext)));
    
    sVkPhysicalDeviceDepthStencilResolveProperties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolveProperties, supportedDepthResolveModes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthStencilResolveProperties::supportedDepthResolveModes)));
    
    sVkPhysicalDeviceDepthStencilResolveProperties.Set(Napi::String::New(env, "supportedDepthResolveModes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolveProperties, supportedStencilResolveModes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthStencilResolveProperties::supportedStencilResolveModes)));
    
    sVkPhysicalDeviceDepthStencilResolveProperties.Set(Napi::String::New(env, "supportedStencilResolveModes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolveProperties, independentResolveNone)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthStencilResolveProperties::independentResolveNone)));
    
    sVkPhysicalDeviceDepthStencilResolveProperties.Set(Napi::String::New(env, "independentResolveNone"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolveProperties, independentResolve)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthStencilResolveProperties::independentResolve)));
    
    sVkPhysicalDeviceDepthStencilResolveProperties.Set(Napi::String::New(env, "independentResolve"), obj);
  }
  sVkPhysicalDeviceDepthStencilResolveProperties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthStencilResolveProperties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceDepthStencilResolveProperties"), sVkPhysicalDeviceDepthStencilResolveProperties);
  Napi::Object sVkPhysicalDeviceDepthStencilResolvePropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR::sType)));
    
    sVkPhysicalDeviceDepthStencilResolvePropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR::pNext)));
    
    sVkPhysicalDeviceDepthStencilResolvePropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR, supportedDepthResolveModes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR::supportedDepthResolveModes)));
    
    sVkPhysicalDeviceDepthStencilResolvePropertiesKHR.Set(Napi::String::New(env, "supportedDepthResolveModes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR, supportedStencilResolveModes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR::supportedStencilResolveModes)));
    
    sVkPhysicalDeviceDepthStencilResolvePropertiesKHR.Set(Napi::String::New(env, "supportedStencilResolveModes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR, independentResolveNone)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR::independentResolveNone)));
    
    sVkPhysicalDeviceDepthStencilResolvePropertiesKHR.Set(Napi::String::New(env, "independentResolveNone"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR, independentResolve)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR::independentResolve)));
    
    sVkPhysicalDeviceDepthStencilResolvePropertiesKHR.Set(Napi::String::New(env, "independentResolve"), obj);
  }
  sVkPhysicalDeviceDepthStencilResolvePropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceDepthStencilResolvePropertiesKHR"), sVkPhysicalDeviceDepthStencilResolvePropertiesKHR);
  Napi::Object sVkSubpassDescriptionDepthStencilResolve = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescriptionDepthStencilResolve, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescriptionDepthStencilResolve::sType)));
    
    sVkSubpassDescriptionDepthStencilResolve.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescriptionDepthStencilResolve, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescriptionDepthStencilResolve::pNext)));
    
    sVkSubpassDescriptionDepthStencilResolve.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescriptionDepthStencilResolve, depthResolveMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescriptionDepthStencilResolve::depthResolveMode)));
    
    sVkSubpassDescriptionDepthStencilResolve.Set(Napi::String::New(env, "depthResolveMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescriptionDepthStencilResolve, stencilResolveMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescriptionDepthStencilResolve::stencilResolveMode)));
    
    sVkSubpassDescriptionDepthStencilResolve.Set(Napi::String::New(env, "stencilResolveMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescriptionDepthStencilResolve, pDepthStencilResolveAttachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescriptionDepthStencilResolve::pDepthStencilResolveAttachment)));
    
    sVkSubpassDescriptionDepthStencilResolve.Set(Napi::String::New(env, "pDepthStencilResolveAttachment"), obj);
  }
  sVkSubpassDescriptionDepthStencilResolve.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescriptionDepthStencilResolve)));
  out.Set(Napi::String::New(env, "VkSubpassDescriptionDepthStencilResolve"), sVkSubpassDescriptionDepthStencilResolve);
  Napi::Object sVkSubpassDescriptionDepthStencilResolveKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescriptionDepthStencilResolveKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescriptionDepthStencilResolveKHR::sType)));
    
    sVkSubpassDescriptionDepthStencilResolveKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescriptionDepthStencilResolveKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescriptionDepthStencilResolveKHR::pNext)));
    
    sVkSubpassDescriptionDepthStencilResolveKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescriptionDepthStencilResolveKHR, depthResolveMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescriptionDepthStencilResolveKHR::depthResolveMode)));
    
    sVkSubpassDescriptionDepthStencilResolveKHR.Set(Napi::String::New(env, "depthResolveMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescriptionDepthStencilResolveKHR, stencilResolveMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescriptionDepthStencilResolveKHR::stencilResolveMode)));
    
    sVkSubpassDescriptionDepthStencilResolveKHR.Set(Napi::String::New(env, "stencilResolveMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSubpassDescriptionDepthStencilResolveKHR, pDepthStencilResolveAttachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescriptionDepthStencilResolveKHR::pDepthStencilResolveAttachment)));
    
    sVkSubpassDescriptionDepthStencilResolveKHR.Set(Napi::String::New(env, "pDepthStencilResolveAttachment"), obj);
  }
  sVkSubpassDescriptionDepthStencilResolveKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSubpassDescriptionDepthStencilResolveKHR)));
  out.Set(Napi::String::New(env, "VkSubpassDescriptionDepthStencilResolveKHR"), sVkSubpassDescriptionDepthStencilResolveKHR);
  Napi::Object sVkImageViewASTCDecodeModeEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewASTCDecodeModeEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewASTCDecodeModeEXT::sType)));
    
    sVkImageViewASTCDecodeModeEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewASTCDecodeModeEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewASTCDecodeModeEXT::pNext)));
    
    sVkImageViewASTCDecodeModeEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewASTCDecodeModeEXT, decodeMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewASTCDecodeModeEXT::decodeMode)));
    
    sVkImageViewASTCDecodeModeEXT.Set(Napi::String::New(env, "decodeMode"), obj);
  }
  sVkImageViewASTCDecodeModeEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewASTCDecodeModeEXT)));
  out.Set(Napi::String::New(env, "VkImageViewASTCDecodeModeEXT"), sVkImageViewASTCDecodeModeEXT);
  Napi::Object sVkPhysicalDeviceASTCDecodeFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceASTCDecodeFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT::sType)));
    
    sVkPhysicalDeviceASTCDecodeFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceASTCDecodeFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceASTCDecodeFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceASTCDecodeFeaturesEXT, decodeModeSharedExponent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT::decodeModeSharedExponent)));
    
    sVkPhysicalDeviceASTCDecodeFeaturesEXT.Set(Napi::String::New(env, "decodeModeSharedExponent"), obj);
  }
  sVkPhysicalDeviceASTCDecodeFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceASTCDecodeFeaturesEXT"), sVkPhysicalDeviceASTCDecodeFeaturesEXT);
  Napi::Object sVkPhysicalDeviceTransformFeedbackFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT::sType)));
    
    sVkPhysicalDeviceTransformFeedbackFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceTransformFeedbackFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, transformFeedback)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT::transformFeedback)));
    
    sVkPhysicalDeviceTransformFeedbackFeaturesEXT.Set(Napi::String::New(env, "transformFeedback"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, geometryStreams)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT::geometryStreams)));
    
    sVkPhysicalDeviceTransformFeedbackFeaturesEXT.Set(Napi::String::New(env, "geometryStreams"), obj);
  }
  sVkPhysicalDeviceTransformFeedbackFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceTransformFeedbackFeaturesEXT"), sVkPhysicalDeviceTransformFeedbackFeaturesEXT);
  Napi::Object sVkPhysicalDeviceTransformFeedbackPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::sType)));
    
    sVkPhysicalDeviceTransformFeedbackPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceTransformFeedbackPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackStreams)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackStreams)));
    
    sVkPhysicalDeviceTransformFeedbackPropertiesEXT.Set(Napi::String::New(env, "maxTransformFeedbackStreams"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBuffers)));
    
    sVkPhysicalDeviceTransformFeedbackPropertiesEXT.Set(Napi::String::New(env, "maxTransformFeedbackBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBufferSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBufferSize)));
    
    sVkPhysicalDeviceTransformFeedbackPropertiesEXT.Set(Napi::String::New(env, "maxTransformFeedbackBufferSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackStreamDataSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackStreamDataSize)));
    
    sVkPhysicalDeviceTransformFeedbackPropertiesEXT.Set(Napi::String::New(env, "maxTransformFeedbackStreamDataSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBufferDataSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBufferDataSize)));
    
    sVkPhysicalDeviceTransformFeedbackPropertiesEXT.Set(Napi::String::New(env, "maxTransformFeedbackBufferDataSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBufferDataStride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBufferDataStride)));
    
    sVkPhysicalDeviceTransformFeedbackPropertiesEXT.Set(Napi::String::New(env, "maxTransformFeedbackBufferDataStride"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackQueries)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackQueries)));
    
    sVkPhysicalDeviceTransformFeedbackPropertiesEXT.Set(Napi::String::New(env, "transformFeedbackQueries"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackStreamsLinesTriangles)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackStreamsLinesTriangles)));
    
    sVkPhysicalDeviceTransformFeedbackPropertiesEXT.Set(Napi::String::New(env, "transformFeedbackStreamsLinesTriangles"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackRasterizationStreamSelect)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackRasterizationStreamSelect)));
    
    sVkPhysicalDeviceTransformFeedbackPropertiesEXT.Set(Napi::String::New(env, "transformFeedbackRasterizationStreamSelect"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackDraw)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackDraw)));
    
    sVkPhysicalDeviceTransformFeedbackPropertiesEXT.Set(Napi::String::New(env, "transformFeedbackDraw"), obj);
  }
  sVkPhysicalDeviceTransformFeedbackPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceTransformFeedbackPropertiesEXT"), sVkPhysicalDeviceTransformFeedbackPropertiesEXT);
  Napi::Object sVkPipelineRasterizationStateStreamCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT::sType)));
    
    sVkPipelineRasterizationStateStreamCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT::pNext)));
    
    sVkPipelineRasterizationStateStreamCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT::flags)));
    
    sVkPipelineRasterizationStateStreamCreateInfoEXT.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, rasterizationStream)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT::rasterizationStream)));
    
    sVkPipelineRasterizationStateStreamCreateInfoEXT.Set(Napi::String::New(env, "rasterizationStream"), obj);
  }
  sVkPipelineRasterizationStateStreamCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkPipelineRasterizationStateStreamCreateInfoEXT"), sVkPipelineRasterizationStateStreamCreateInfoEXT);
  Napi::Object sVkPhysicalDeviceRepresentativeFragmentTestFeaturesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV::sType)));
    
    sVkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV::pNext)));
    
    sVkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV, representativeFragmentTest)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV::representativeFragmentTest)));
    
    sVkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.Set(Napi::String::New(env, "representativeFragmentTest"), obj);
  }
  sVkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV"), sVkPhysicalDeviceRepresentativeFragmentTestFeaturesNV);
  Napi::Object sVkPipelineRepresentativeFragmentTestStateCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV::sType)));
    
    sVkPipelineRepresentativeFragmentTestStateCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV::pNext)));
    
    sVkPipelineRepresentativeFragmentTestStateCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV, representativeFragmentTestEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV::representativeFragmentTestEnable)));
    
    sVkPipelineRepresentativeFragmentTestStateCreateInfoNV.Set(Napi::String::New(env, "representativeFragmentTestEnable"), obj);
  }
  sVkPipelineRepresentativeFragmentTestStateCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkPipelineRepresentativeFragmentTestStateCreateInfoNV"), sVkPipelineRepresentativeFragmentTestStateCreateInfoNV);
  Napi::Object sVkPhysicalDeviceExclusiveScissorFeaturesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExclusiveScissorFeaturesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExclusiveScissorFeaturesNV::sType)));
    
    sVkPhysicalDeviceExclusiveScissorFeaturesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExclusiveScissorFeaturesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExclusiveScissorFeaturesNV::pNext)));
    
    sVkPhysicalDeviceExclusiveScissorFeaturesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExclusiveScissorFeaturesNV, exclusiveScissor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExclusiveScissorFeaturesNV::exclusiveScissor)));
    
    sVkPhysicalDeviceExclusiveScissorFeaturesNV.Set(Napi::String::New(env, "exclusiveScissor"), obj);
  }
  sVkPhysicalDeviceExclusiveScissorFeaturesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExclusiveScissorFeaturesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceExclusiveScissorFeaturesNV"), sVkPhysicalDeviceExclusiveScissorFeaturesNV);
  Napi::Object sVkPipelineViewportExclusiveScissorStateCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportExclusiveScissorStateCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV::sType)));
    
    sVkPipelineViewportExclusiveScissorStateCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportExclusiveScissorStateCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV::pNext)));
    
    sVkPipelineViewportExclusiveScissorStateCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportExclusiveScissorStateCreateInfoNV, exclusiveScissorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV::exclusiveScissorCount)));
    
    sVkPipelineViewportExclusiveScissorStateCreateInfoNV.Set(Napi::String::New(env, "exclusiveScissorCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportExclusiveScissorStateCreateInfoNV, pExclusiveScissors)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV::pExclusiveScissors)));
    
    sVkPipelineViewportExclusiveScissorStateCreateInfoNV.Set(Napi::String::New(env, "pExclusiveScissors"), obj);
  }
  sVkPipelineViewportExclusiveScissorStateCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkPipelineViewportExclusiveScissorStateCreateInfoNV"), sVkPipelineViewportExclusiveScissorStateCreateInfoNV);
  Napi::Object sVkPhysicalDeviceCornerSampledImageFeaturesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCornerSampledImageFeaturesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCornerSampledImageFeaturesNV::sType)));
    
    sVkPhysicalDeviceCornerSampledImageFeaturesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCornerSampledImageFeaturesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCornerSampledImageFeaturesNV::pNext)));
    
    sVkPhysicalDeviceCornerSampledImageFeaturesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCornerSampledImageFeaturesNV, cornerSampledImage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCornerSampledImageFeaturesNV::cornerSampledImage)));
    
    sVkPhysicalDeviceCornerSampledImageFeaturesNV.Set(Napi::String::New(env, "cornerSampledImage"), obj);
  }
  sVkPhysicalDeviceCornerSampledImageFeaturesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCornerSampledImageFeaturesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceCornerSampledImageFeaturesNV"), sVkPhysicalDeviceCornerSampledImageFeaturesNV);
  Napi::Object sVkPhysicalDeviceComputeShaderDerivativesFeaturesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV::sType)));
    
    sVkPhysicalDeviceComputeShaderDerivativesFeaturesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV::pNext)));
    
    sVkPhysicalDeviceComputeShaderDerivativesFeaturesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV, computeDerivativeGroupQuads)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV::computeDerivativeGroupQuads)));
    
    sVkPhysicalDeviceComputeShaderDerivativesFeaturesNV.Set(Napi::String::New(env, "computeDerivativeGroupQuads"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV, computeDerivativeGroupLinear)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV::computeDerivativeGroupLinear)));
    
    sVkPhysicalDeviceComputeShaderDerivativesFeaturesNV.Set(Napi::String::New(env, "computeDerivativeGroupLinear"), obj);
  }
  sVkPhysicalDeviceComputeShaderDerivativesFeaturesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV"), sVkPhysicalDeviceComputeShaderDerivativesFeaturesNV);
  Napi::Object sVkPhysicalDeviceFragmentShaderBarycentricFeaturesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV::sType)));
    
    sVkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV::pNext)));
    
    sVkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV, fragmentShaderBarycentric)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV::fragmentShaderBarycentric)));
    
    sVkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.Set(Napi::String::New(env, "fragmentShaderBarycentric"), obj);
  }
  sVkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV"), sVkPhysicalDeviceFragmentShaderBarycentricFeaturesNV);
  Napi::Object sVkPhysicalDeviceShaderImageFootprintFeaturesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderImageFootprintFeaturesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV::sType)));
    
    sVkPhysicalDeviceShaderImageFootprintFeaturesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderImageFootprintFeaturesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV::pNext)));
    
    sVkPhysicalDeviceShaderImageFootprintFeaturesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderImageFootprintFeaturesNV, imageFootprint)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV::imageFootprint)));
    
    sVkPhysicalDeviceShaderImageFootprintFeaturesNV.Set(Napi::String::New(env, "imageFootprint"), obj);
  }
  sVkPhysicalDeviceShaderImageFootprintFeaturesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderImageFootprintFeaturesNV"), sVkPhysicalDeviceShaderImageFootprintFeaturesNV);
  Napi::Object sVkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV::sType)));
    
    sVkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV::pNext)));
    
    sVkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV, dedicatedAllocationImageAliasing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV::dedicatedAllocationImageAliasing)));
    
    sVkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.Set(Napi::String::New(env, "dedicatedAllocationImageAliasing"), obj);
  }
  sVkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV"), sVkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV);
  Napi::Object sVkShadingRatePaletteNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShadingRatePaletteNV, shadingRatePaletteEntryCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShadingRatePaletteNV::shadingRatePaletteEntryCount)));
    
    sVkShadingRatePaletteNV.Set(Napi::String::New(env, "shadingRatePaletteEntryCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkShadingRatePaletteNV, pShadingRatePaletteEntries)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkShadingRatePaletteNV::pShadingRatePaletteEntries)));
    
    sVkShadingRatePaletteNV.Set(Napi::String::New(env, "pShadingRatePaletteEntries"), obj);
  }
  sVkShadingRatePaletteNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkShadingRatePaletteNV)));
  out.Set(Napi::String::New(env, "VkShadingRatePaletteNV"), sVkShadingRatePaletteNV);
  Napi::Object sVkPipelineViewportShadingRateImageStateCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportShadingRateImageStateCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV::sType)));
    
    sVkPipelineViewportShadingRateImageStateCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportShadingRateImageStateCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV::pNext)));
    
    sVkPipelineViewportShadingRateImageStateCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportShadingRateImageStateCreateInfoNV, shadingRateImageEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV::shadingRateImageEnable)));
    
    sVkPipelineViewportShadingRateImageStateCreateInfoNV.Set(Napi::String::New(env, "shadingRateImageEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportShadingRateImageStateCreateInfoNV, viewportCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV::viewportCount)));
    
    sVkPipelineViewportShadingRateImageStateCreateInfoNV.Set(Napi::String::New(env, "viewportCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportShadingRateImageStateCreateInfoNV, pShadingRatePalettes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV::pShadingRatePalettes)));
    
    sVkPipelineViewportShadingRateImageStateCreateInfoNV.Set(Napi::String::New(env, "pShadingRatePalettes"), obj);
  }
  sVkPipelineViewportShadingRateImageStateCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkPipelineViewportShadingRateImageStateCreateInfoNV"), sVkPipelineViewportShadingRateImageStateCreateInfoNV);
  Napi::Object sVkPhysicalDeviceShadingRateImageFeaturesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImageFeaturesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV::sType)));
    
    sVkPhysicalDeviceShadingRateImageFeaturesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImageFeaturesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV::pNext)));
    
    sVkPhysicalDeviceShadingRateImageFeaturesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImageFeaturesNV, shadingRateImage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV::shadingRateImage)));
    
    sVkPhysicalDeviceShadingRateImageFeaturesNV.Set(Napi::String::New(env, "shadingRateImage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImageFeaturesNV, shadingRateCoarseSampleOrder)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV::shadingRateCoarseSampleOrder)));
    
    sVkPhysicalDeviceShadingRateImageFeaturesNV.Set(Napi::String::New(env, "shadingRateCoarseSampleOrder"), obj);
  }
  sVkPhysicalDeviceShadingRateImageFeaturesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShadingRateImageFeaturesNV"), sVkPhysicalDeviceShadingRateImageFeaturesNV);
  Napi::Object sVkPhysicalDeviceShadingRateImagePropertiesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV::sType)));
    
    sVkPhysicalDeviceShadingRateImagePropertiesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV::pNext)));
    
    sVkPhysicalDeviceShadingRateImagePropertiesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, shadingRateTexelSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV::shadingRateTexelSize)));
    
    sVkPhysicalDeviceShadingRateImagePropertiesNV.Set(Napi::String::New(env, "shadingRateTexelSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, shadingRatePaletteSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV::shadingRatePaletteSize)));
    
    sVkPhysicalDeviceShadingRateImagePropertiesNV.Set(Napi::String::New(env, "shadingRatePaletteSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, shadingRateMaxCoarseSamples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV::shadingRateMaxCoarseSamples)));
    
    sVkPhysicalDeviceShadingRateImagePropertiesNV.Set(Napi::String::New(env, "shadingRateMaxCoarseSamples"), obj);
  }
  sVkPhysicalDeviceShadingRateImagePropertiesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShadingRateImagePropertiesNV"), sVkPhysicalDeviceShadingRateImagePropertiesNV);
  Napi::Object sVkCoarseSampleLocationNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCoarseSampleLocationNV, pixelX)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCoarseSampleLocationNV::pixelX)));
    
    sVkCoarseSampleLocationNV.Set(Napi::String::New(env, "pixelX"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCoarseSampleLocationNV, pixelY)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCoarseSampleLocationNV::pixelY)));
    
    sVkCoarseSampleLocationNV.Set(Napi::String::New(env, "pixelY"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCoarseSampleLocationNV, sample)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCoarseSampleLocationNV::sample)));
    
    sVkCoarseSampleLocationNV.Set(Napi::String::New(env, "sample"), obj);
  }
  sVkCoarseSampleLocationNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkCoarseSampleLocationNV)));
  out.Set(Napi::String::New(env, "VkCoarseSampleLocationNV"), sVkCoarseSampleLocationNV);
  Napi::Object sVkCoarseSampleOrderCustomNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCoarseSampleOrderCustomNV, shadingRate)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCoarseSampleOrderCustomNV::shadingRate)));
    
    sVkCoarseSampleOrderCustomNV.Set(Napi::String::New(env, "shadingRate"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCoarseSampleOrderCustomNV, sampleCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCoarseSampleOrderCustomNV::sampleCount)));
    
    sVkCoarseSampleOrderCustomNV.Set(Napi::String::New(env, "sampleCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCoarseSampleOrderCustomNV, sampleLocationCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCoarseSampleOrderCustomNV::sampleLocationCount)));
    
    sVkCoarseSampleOrderCustomNV.Set(Napi::String::New(env, "sampleLocationCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCoarseSampleOrderCustomNV, pSampleLocations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCoarseSampleOrderCustomNV::pSampleLocations)));
    
    sVkCoarseSampleOrderCustomNV.Set(Napi::String::New(env, "pSampleLocations"), obj);
  }
  sVkCoarseSampleOrderCustomNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkCoarseSampleOrderCustomNV)));
  out.Set(Napi::String::New(env, "VkCoarseSampleOrderCustomNV"), sVkCoarseSampleOrderCustomNV);
  Napi::Object sVkPipelineViewportCoarseSampleOrderStateCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::sType)));
    
    sVkPipelineViewportCoarseSampleOrderStateCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::pNext)));
    
    sVkPipelineViewportCoarseSampleOrderStateCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, sampleOrderType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::sampleOrderType)));
    
    sVkPipelineViewportCoarseSampleOrderStateCreateInfoNV.Set(Napi::String::New(env, "sampleOrderType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, customSampleOrderCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::customSampleOrderCount)));
    
    sVkPipelineViewportCoarseSampleOrderStateCreateInfoNV.Set(Napi::String::New(env, "customSampleOrderCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, pCustomSampleOrders)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::pCustomSampleOrders)));
    
    sVkPipelineViewportCoarseSampleOrderStateCreateInfoNV.Set(Napi::String::New(env, "pCustomSampleOrders"), obj);
  }
  sVkPipelineViewportCoarseSampleOrderStateCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV"), sVkPipelineViewportCoarseSampleOrderStateCreateInfoNV);
  Napi::Object sVkPhysicalDeviceMeshShaderFeaturesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderFeaturesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderFeaturesNV::sType)));
    
    sVkPhysicalDeviceMeshShaderFeaturesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderFeaturesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderFeaturesNV::pNext)));
    
    sVkPhysicalDeviceMeshShaderFeaturesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderFeaturesNV, taskShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderFeaturesNV::taskShader)));
    
    sVkPhysicalDeviceMeshShaderFeaturesNV.Set(Napi::String::New(env, "taskShader"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderFeaturesNV, meshShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderFeaturesNV::meshShader)));
    
    sVkPhysicalDeviceMeshShaderFeaturesNV.Set(Napi::String::New(env, "meshShader"), obj);
  }
  sVkPhysicalDeviceMeshShaderFeaturesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderFeaturesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceMeshShaderFeaturesNV"), sVkPhysicalDeviceMeshShaderFeaturesNV);
  Napi::Object sVkPhysicalDeviceMeshShaderPropertiesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::sType)));
    
    sVkPhysicalDeviceMeshShaderPropertiesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::pNext)));
    
    sVkPhysicalDeviceMeshShaderPropertiesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxDrawMeshTasksCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxDrawMeshTasksCount)));
    
    sVkPhysicalDeviceMeshShaderPropertiesNV.Set(Napi::String::New(env, "maxDrawMeshTasksCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxTaskWorkGroupInvocations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskWorkGroupInvocations)));
    
    sVkPhysicalDeviceMeshShaderPropertiesNV.Set(Napi::String::New(env, "maxTaskWorkGroupInvocations"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxTaskWorkGroupSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskWorkGroupSize)));
    
    sVkPhysicalDeviceMeshShaderPropertiesNV.Set(Napi::String::New(env, "maxTaskWorkGroupSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxTaskTotalMemorySize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskTotalMemorySize)));
    
    sVkPhysicalDeviceMeshShaderPropertiesNV.Set(Napi::String::New(env, "maxTaskTotalMemorySize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxTaskOutputCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskOutputCount)));
    
    sVkPhysicalDeviceMeshShaderPropertiesNV.Set(Napi::String::New(env, "maxTaskOutputCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshWorkGroupInvocations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshWorkGroupInvocations)));
    
    sVkPhysicalDeviceMeshShaderPropertiesNV.Set(Napi::String::New(env, "maxMeshWorkGroupInvocations"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshWorkGroupSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshWorkGroupSize)));
    
    sVkPhysicalDeviceMeshShaderPropertiesNV.Set(Napi::String::New(env, "maxMeshWorkGroupSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshTotalMemorySize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshTotalMemorySize)));
    
    sVkPhysicalDeviceMeshShaderPropertiesNV.Set(Napi::String::New(env, "maxMeshTotalMemorySize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshOutputVertices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshOutputVertices)));
    
    sVkPhysicalDeviceMeshShaderPropertiesNV.Set(Napi::String::New(env, "maxMeshOutputVertices"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshOutputPrimitives)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshOutputPrimitives)));
    
    sVkPhysicalDeviceMeshShaderPropertiesNV.Set(Napi::String::New(env, "maxMeshOutputPrimitives"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshMultiviewViewCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshMultiviewViewCount)));
    
    sVkPhysicalDeviceMeshShaderPropertiesNV.Set(Napi::String::New(env, "maxMeshMultiviewViewCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, meshOutputPerVertexGranularity)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::meshOutputPerVertexGranularity)));
    
    sVkPhysicalDeviceMeshShaderPropertiesNV.Set(Napi::String::New(env, "meshOutputPerVertexGranularity"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, meshOutputPerPrimitiveGranularity)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::meshOutputPerPrimitiveGranularity)));
    
    sVkPhysicalDeviceMeshShaderPropertiesNV.Set(Napi::String::New(env, "meshOutputPerPrimitiveGranularity"), obj);
  }
  sVkPhysicalDeviceMeshShaderPropertiesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceMeshShaderPropertiesNV"), sVkPhysicalDeviceMeshShaderPropertiesNV);
  Napi::Object sVkDrawMeshTasksIndirectCommandNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrawMeshTasksIndirectCommandNV, taskCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrawMeshTasksIndirectCommandNV::taskCount)));
    
    sVkDrawMeshTasksIndirectCommandNV.Set(Napi::String::New(env, "taskCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrawMeshTasksIndirectCommandNV, firstTask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrawMeshTasksIndirectCommandNV::firstTask)));
    
    sVkDrawMeshTasksIndirectCommandNV.Set(Napi::String::New(env, "firstTask"), obj);
  }
  sVkDrawMeshTasksIndirectCommandNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrawMeshTasksIndirectCommandNV)));
  out.Set(Napi::String::New(env, "VkDrawMeshTasksIndirectCommandNV"), sVkDrawMeshTasksIndirectCommandNV);
  Napi::Object sVkRayTracingShaderGroupCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoNV::sType)));
    
    sVkRayTracingShaderGroupCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoNV::pNext)));
    
    sVkRayTracingShaderGroupCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoNV, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoNV::type)));
    
    sVkRayTracingShaderGroupCreateInfoNV.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoNV, generalShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoNV::generalShader)));
    
    sVkRayTracingShaderGroupCreateInfoNV.Set(Napi::String::New(env, "generalShader"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoNV, closestHitShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoNV::closestHitShader)));
    
    sVkRayTracingShaderGroupCreateInfoNV.Set(Napi::String::New(env, "closestHitShader"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoNV, anyHitShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoNV::anyHitShader)));
    
    sVkRayTracingShaderGroupCreateInfoNV.Set(Napi::String::New(env, "anyHitShader"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoNV, intersectionShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoNV::intersectionShader)));
    
    sVkRayTracingShaderGroupCreateInfoNV.Set(Napi::String::New(env, "intersectionShader"), obj);
  }
  sVkRayTracingShaderGroupCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkRayTracingShaderGroupCreateInfoNV"), sVkRayTracingShaderGroupCreateInfoNV);
  Napi::Object sVkRayTracingShaderGroupCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoKHR::sType)));
    
    sVkRayTracingShaderGroupCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoKHR::pNext)));
    
    sVkRayTracingShaderGroupCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoKHR::type)));
    
    sVkRayTracingShaderGroupCreateInfoKHR.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, generalShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoKHR::generalShader)));
    
    sVkRayTracingShaderGroupCreateInfoKHR.Set(Napi::String::New(env, "generalShader"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, closestHitShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoKHR::closestHitShader)));
    
    sVkRayTracingShaderGroupCreateInfoKHR.Set(Napi::String::New(env, "closestHitShader"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, anyHitShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoKHR::anyHitShader)));
    
    sVkRayTracingShaderGroupCreateInfoKHR.Set(Napi::String::New(env, "anyHitShader"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, intersectionShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoKHR::intersectionShader)));
    
    sVkRayTracingShaderGroupCreateInfoKHR.Set(Napi::String::New(env, "intersectionShader"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, pShaderGroupCaptureReplayHandle)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoKHR::pShaderGroupCaptureReplayHandle)));
    
    sVkRayTracingShaderGroupCreateInfoKHR.Set(Napi::String::New(env, "pShaderGroupCaptureReplayHandle"), obj);
  }
  sVkRayTracingShaderGroupCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkRayTracingShaderGroupCreateInfoKHR"), sVkRayTracingShaderGroupCreateInfoKHR);
  Napi::Object sVkRayTracingPipelineCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoNV::sType)));
    
    sVkRayTracingPipelineCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoNV::pNext)));
    
    sVkRayTracingPipelineCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoNV::flags)));
    
    sVkRayTracingPipelineCreateInfoNV.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, stageCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoNV::stageCount)));
    
    sVkRayTracingPipelineCreateInfoNV.Set(Napi::String::New(env, "stageCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, pStages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoNV::pStages)));
    
    sVkRayTracingPipelineCreateInfoNV.Set(Napi::String::New(env, "pStages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, groupCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoNV::groupCount)));
    
    sVkRayTracingPipelineCreateInfoNV.Set(Napi::String::New(env, "groupCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, pGroups)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoNV::pGroups)));
    
    sVkRayTracingPipelineCreateInfoNV.Set(Napi::String::New(env, "pGroups"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, maxRecursionDepth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoNV::maxRecursionDepth)));
    
    sVkRayTracingPipelineCreateInfoNV.Set(Napi::String::New(env, "maxRecursionDepth"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, layout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoNV::layout)));
    
    sVkRayTracingPipelineCreateInfoNV.Set(Napi::String::New(env, "layout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, basePipelineHandle)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoNV::basePipelineHandle)));
    
    sVkRayTracingPipelineCreateInfoNV.Set(Napi::String::New(env, "basePipelineHandle"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, basePipelineIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoNV::basePipelineIndex)));
    
    sVkRayTracingPipelineCreateInfoNV.Set(Napi::String::New(env, "basePipelineIndex"), obj);
  }
  sVkRayTracingPipelineCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkRayTracingPipelineCreateInfoNV"), sVkRayTracingPipelineCreateInfoNV);
  Napi::Object sVkRayTracingPipelineCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoKHR::sType)));
    
    sVkRayTracingPipelineCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoKHR::pNext)));
    
    sVkRayTracingPipelineCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoKHR::flags)));
    
    sVkRayTracingPipelineCreateInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, stageCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoKHR::stageCount)));
    
    sVkRayTracingPipelineCreateInfoKHR.Set(Napi::String::New(env, "stageCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, pStages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoKHR::pStages)));
    
    sVkRayTracingPipelineCreateInfoKHR.Set(Napi::String::New(env, "pStages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, groupCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoKHR::groupCount)));
    
    sVkRayTracingPipelineCreateInfoKHR.Set(Napi::String::New(env, "groupCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, pGroups)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoKHR::pGroups)));
    
    sVkRayTracingPipelineCreateInfoKHR.Set(Napi::String::New(env, "pGroups"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, maxPipelineRayRecursionDepth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoKHR::maxPipelineRayRecursionDepth)));
    
    sVkRayTracingPipelineCreateInfoKHR.Set(Napi::String::New(env, "maxPipelineRayRecursionDepth"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, pLibraryInfo)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoKHR::pLibraryInfo)));
    
    sVkRayTracingPipelineCreateInfoKHR.Set(Napi::String::New(env, "pLibraryInfo"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, pLibraryInterface)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoKHR::pLibraryInterface)));
    
    sVkRayTracingPipelineCreateInfoKHR.Set(Napi::String::New(env, "pLibraryInterface"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, pDynamicState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoKHR::pDynamicState)));
    
    sVkRayTracingPipelineCreateInfoKHR.Set(Napi::String::New(env, "pDynamicState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, layout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoKHR::layout)));
    
    sVkRayTracingPipelineCreateInfoKHR.Set(Napi::String::New(env, "layout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, basePipelineHandle)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoKHR::basePipelineHandle)));
    
    sVkRayTracingPipelineCreateInfoKHR.Set(Napi::String::New(env, "basePipelineHandle"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, basePipelineIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoKHR::basePipelineIndex)));
    
    sVkRayTracingPipelineCreateInfoKHR.Set(Napi::String::New(env, "basePipelineIndex"), obj);
  }
  sVkRayTracingPipelineCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkRayTracingPipelineCreateInfoKHR"), sVkRayTracingPipelineCreateInfoKHR);
  Napi::Object sVkGeometryTrianglesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryTrianglesNV::sType)));
    
    sVkGeometryTrianglesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryTrianglesNV::pNext)));
    
    sVkGeometryTrianglesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, vertexData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryTrianglesNV::vertexData)));
    
    sVkGeometryTrianglesNV.Set(Napi::String::New(env, "vertexData"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, vertexOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryTrianglesNV::vertexOffset)));
    
    sVkGeometryTrianglesNV.Set(Napi::String::New(env, "vertexOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, vertexCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryTrianglesNV::vertexCount)));
    
    sVkGeometryTrianglesNV.Set(Napi::String::New(env, "vertexCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, vertexStride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryTrianglesNV::vertexStride)));
    
    sVkGeometryTrianglesNV.Set(Napi::String::New(env, "vertexStride"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, vertexFormat)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryTrianglesNV::vertexFormat)));
    
    sVkGeometryTrianglesNV.Set(Napi::String::New(env, "vertexFormat"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, indexData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryTrianglesNV::indexData)));
    
    sVkGeometryTrianglesNV.Set(Napi::String::New(env, "indexData"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, indexOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryTrianglesNV::indexOffset)));
    
    sVkGeometryTrianglesNV.Set(Napi::String::New(env, "indexOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, indexCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryTrianglesNV::indexCount)));
    
    sVkGeometryTrianglesNV.Set(Napi::String::New(env, "indexCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, indexType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryTrianglesNV::indexType)));
    
    sVkGeometryTrianglesNV.Set(Napi::String::New(env, "indexType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, transformData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryTrianglesNV::transformData)));
    
    sVkGeometryTrianglesNV.Set(Napi::String::New(env, "transformData"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, transformOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryTrianglesNV::transformOffset)));
    
    sVkGeometryTrianglesNV.Set(Napi::String::New(env, "transformOffset"), obj);
  }
  sVkGeometryTrianglesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryTrianglesNV)));
  out.Set(Napi::String::New(env, "VkGeometryTrianglesNV"), sVkGeometryTrianglesNV);
  Napi::Object sVkGeometryAABBNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryAABBNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryAABBNV::sType)));
    
    sVkGeometryAABBNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryAABBNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryAABBNV::pNext)));
    
    sVkGeometryAABBNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryAABBNV, aabbData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryAABBNV::aabbData)));
    
    sVkGeometryAABBNV.Set(Napi::String::New(env, "aabbData"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryAABBNV, numAABBs)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryAABBNV::numAABBs)));
    
    sVkGeometryAABBNV.Set(Napi::String::New(env, "numAABBs"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryAABBNV, stride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryAABBNV::stride)));
    
    sVkGeometryAABBNV.Set(Napi::String::New(env, "stride"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryAABBNV, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryAABBNV::offset)));
    
    sVkGeometryAABBNV.Set(Napi::String::New(env, "offset"), obj);
  }
  sVkGeometryAABBNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryAABBNV)));
  out.Set(Napi::String::New(env, "VkGeometryAABBNV"), sVkGeometryAABBNV);
  Napi::Object sVkGeometryDataNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryDataNV, triangles)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryDataNV::triangles)));
    
    sVkGeometryDataNV.Set(Napi::String::New(env, "triangles"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryDataNV, aabbs)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryDataNV::aabbs)));
    
    sVkGeometryDataNV.Set(Napi::String::New(env, "aabbs"), obj);
  }
  sVkGeometryDataNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryDataNV)));
  out.Set(Napi::String::New(env, "VkGeometryDataNV"), sVkGeometryDataNV);
  Napi::Object sVkGeometryNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryNV::sType)));
    
    sVkGeometryNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryNV::pNext)));
    
    sVkGeometryNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryNV, geometryType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryNV::geometryType)));
    
    sVkGeometryNV.Set(Napi::String::New(env, "geometryType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryNV, geometry)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryNV::geometry)));
    
    sVkGeometryNV.Set(Napi::String::New(env, "geometry"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkGeometryNV, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryNV::flags)));
    
    sVkGeometryNV.Set(Napi::String::New(env, "flags"), obj);
  }
  sVkGeometryNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkGeometryNV)));
  out.Set(Napi::String::New(env, "VkGeometryNV"), sVkGeometryNV);
  Napi::Object sVkAccelerationStructureInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureInfoNV::sType)));
    
    sVkAccelerationStructureInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureInfoNV::pNext)));
    
    sVkAccelerationStructureInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureInfoNV, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureInfoNV::type)));
    
    sVkAccelerationStructureInfoNV.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureInfoNV, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureInfoNV::flags)));
    
    sVkAccelerationStructureInfoNV.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureInfoNV, instanceCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureInfoNV::instanceCount)));
    
    sVkAccelerationStructureInfoNV.Set(Napi::String::New(env, "instanceCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureInfoNV, geometryCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureInfoNV::geometryCount)));
    
    sVkAccelerationStructureInfoNV.Set(Napi::String::New(env, "geometryCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureInfoNV, pGeometries)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureInfoNV::pGeometries)));
    
    sVkAccelerationStructureInfoNV.Set(Napi::String::New(env, "pGeometries"), obj);
  }
  sVkAccelerationStructureInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureInfoNV)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureInfoNV"), sVkAccelerationStructureInfoNV);
  Napi::Object sVkAccelerationStructureCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureCreateInfoNV::sType)));
    
    sVkAccelerationStructureCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureCreateInfoNV::pNext)));
    
    sVkAccelerationStructureCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoNV, compactedSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureCreateInfoNV::compactedSize)));
    
    sVkAccelerationStructureCreateInfoNV.Set(Napi::String::New(env, "compactedSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoNV, info)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureCreateInfoNV::info)));
    
    sVkAccelerationStructureCreateInfoNV.Set(Napi::String::New(env, "info"), obj);
  }
  sVkAccelerationStructureCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureCreateInfoNV"), sVkAccelerationStructureCreateInfoNV);
  Napi::Object sVkBindAccelerationStructureMemoryInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindAccelerationStructureMemoryInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindAccelerationStructureMemoryInfoNV::sType)));
    
    sVkBindAccelerationStructureMemoryInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindAccelerationStructureMemoryInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindAccelerationStructureMemoryInfoNV::pNext)));
    
    sVkBindAccelerationStructureMemoryInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindAccelerationStructureMemoryInfoNV, accelerationStructure)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindAccelerationStructureMemoryInfoNV::accelerationStructure)));
    
    sVkBindAccelerationStructureMemoryInfoNV.Set(Napi::String::New(env, "accelerationStructure"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindAccelerationStructureMemoryInfoNV, memory)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindAccelerationStructureMemoryInfoNV::memory)));
    
    sVkBindAccelerationStructureMemoryInfoNV.Set(Napi::String::New(env, "memory"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindAccelerationStructureMemoryInfoNV, memoryOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindAccelerationStructureMemoryInfoNV::memoryOffset)));
    
    sVkBindAccelerationStructureMemoryInfoNV.Set(Napi::String::New(env, "memoryOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindAccelerationStructureMemoryInfoNV, deviceIndexCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindAccelerationStructureMemoryInfoNV::deviceIndexCount)));
    
    sVkBindAccelerationStructureMemoryInfoNV.Set(Napi::String::New(env, "deviceIndexCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBindAccelerationStructureMemoryInfoNV, pDeviceIndices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindAccelerationStructureMemoryInfoNV::pDeviceIndices)));
    
    sVkBindAccelerationStructureMemoryInfoNV.Set(Napi::String::New(env, "pDeviceIndices"), obj);
  }
  sVkBindAccelerationStructureMemoryInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkBindAccelerationStructureMemoryInfoNV)));
  out.Set(Napi::String::New(env, "VkBindAccelerationStructureMemoryInfoNV"), sVkBindAccelerationStructureMemoryInfoNV);
  Napi::Object sVkWriteDescriptorSetAccelerationStructureKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSetAccelerationStructureKHR::sType)));
    
    sVkWriteDescriptorSetAccelerationStructureKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSetAccelerationStructureKHR::pNext)));
    
    sVkWriteDescriptorSetAccelerationStructureKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureKHR, accelerationStructureCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSetAccelerationStructureKHR::accelerationStructureCount)));
    
    sVkWriteDescriptorSetAccelerationStructureKHR.Set(Napi::String::New(env, "accelerationStructureCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureKHR, pAccelerationStructures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSetAccelerationStructureKHR::pAccelerationStructures)));
    
    sVkWriteDescriptorSetAccelerationStructureKHR.Set(Napi::String::New(env, "pAccelerationStructures"), obj);
  }
  sVkWriteDescriptorSetAccelerationStructureKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSetAccelerationStructureKHR)));
  out.Set(Napi::String::New(env, "VkWriteDescriptorSetAccelerationStructureKHR"), sVkWriteDescriptorSetAccelerationStructureKHR);
  Napi::Object sVkWriteDescriptorSetAccelerationStructureNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSetAccelerationStructureNV::sType)));
    
    sVkWriteDescriptorSetAccelerationStructureNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSetAccelerationStructureNV::pNext)));
    
    sVkWriteDescriptorSetAccelerationStructureNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureNV, accelerationStructureCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSetAccelerationStructureNV::accelerationStructureCount)));
    
    sVkWriteDescriptorSetAccelerationStructureNV.Set(Napi::String::New(env, "accelerationStructureCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureNV, pAccelerationStructures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSetAccelerationStructureNV::pAccelerationStructures)));
    
    sVkWriteDescriptorSetAccelerationStructureNV.Set(Napi::String::New(env, "pAccelerationStructures"), obj);
  }
  sVkWriteDescriptorSetAccelerationStructureNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkWriteDescriptorSetAccelerationStructureNV)));
  out.Set(Napi::String::New(env, "VkWriteDescriptorSetAccelerationStructureNV"), sVkWriteDescriptorSetAccelerationStructureNV);
  Napi::Object sVkAccelerationStructureMemoryRequirementsInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureMemoryRequirementsInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureMemoryRequirementsInfoNV::sType)));
    
    sVkAccelerationStructureMemoryRequirementsInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureMemoryRequirementsInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureMemoryRequirementsInfoNV::pNext)));
    
    sVkAccelerationStructureMemoryRequirementsInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureMemoryRequirementsInfoNV, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureMemoryRequirementsInfoNV::type)));
    
    sVkAccelerationStructureMemoryRequirementsInfoNV.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureMemoryRequirementsInfoNV, accelerationStructure)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureMemoryRequirementsInfoNV::accelerationStructure)));
    
    sVkAccelerationStructureMemoryRequirementsInfoNV.Set(Napi::String::New(env, "accelerationStructure"), obj);
  }
  sVkAccelerationStructureMemoryRequirementsInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureMemoryRequirementsInfoNV)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureMemoryRequirementsInfoNV"), sVkAccelerationStructureMemoryRequirementsInfoNV);
  Napi::Object sVkPhysicalDeviceAccelerationStructureFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructureFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructureFeaturesKHR::sType)));
    
    sVkPhysicalDeviceAccelerationStructureFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructureFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructureFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceAccelerationStructureFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructureFeaturesKHR, accelerationStructure)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructure)));
    
    sVkPhysicalDeviceAccelerationStructureFeaturesKHR.Set(Napi::String::New(env, "accelerationStructure"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructureFeaturesKHR, accelerationStructureCaptureReplay)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructureCaptureReplay)));
    
    sVkPhysicalDeviceAccelerationStructureFeaturesKHR.Set(Napi::String::New(env, "accelerationStructureCaptureReplay"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructureFeaturesKHR, accelerationStructureIndirectBuild)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructureIndirectBuild)));
    
    sVkPhysicalDeviceAccelerationStructureFeaturesKHR.Set(Napi::String::New(env, "accelerationStructureIndirectBuild"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructureFeaturesKHR, accelerationStructureHostCommands)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructureHostCommands)));
    
    sVkPhysicalDeviceAccelerationStructureFeaturesKHR.Set(Napi::String::New(env, "accelerationStructureHostCommands"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructureFeaturesKHR, descriptorBindingAccelerationStructureUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructureFeaturesKHR::descriptorBindingAccelerationStructureUpdateAfterBind)));
    
    sVkPhysicalDeviceAccelerationStructureFeaturesKHR.Set(Napi::String::New(env, "descriptorBindingAccelerationStructureUpdateAfterBind"), obj);
  }
  sVkPhysicalDeviceAccelerationStructureFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructureFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceAccelerationStructureFeaturesKHR"), sVkPhysicalDeviceAccelerationStructureFeaturesKHR);
  Napi::Object sVkPhysicalDeviceRayTracingPipelineFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR::sType)));
    
    sVkPhysicalDeviceRayTracingPipelineFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceRayTracingPipelineFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipeline)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTracingPipeline)));
    
    sVkPhysicalDeviceRayTracingPipelineFeaturesKHR.Set(Napi::String::New(env, "rayTracingPipeline"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipelineShaderGroupHandleCaptureReplay)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTracingPipelineShaderGroupHandleCaptureReplay)));
    
    sVkPhysicalDeviceRayTracingPipelineFeaturesKHR.Set(Napi::String::New(env, "rayTracingPipelineShaderGroupHandleCaptureReplay"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipelineShaderGroupHandleCaptureReplayMixed)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTracingPipelineShaderGroupHandleCaptureReplayMixed)));
    
    sVkPhysicalDeviceRayTracingPipelineFeaturesKHR.Set(Napi::String::New(env, "rayTracingPipelineShaderGroupHandleCaptureReplayMixed"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipelineTraceRaysIndirect)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTracingPipelineTraceRaysIndirect)));
    
    sVkPhysicalDeviceRayTracingPipelineFeaturesKHR.Set(Napi::String::New(env, "rayTracingPipelineTraceRaysIndirect"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTraversalPrimitiveCulling)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTraversalPrimitiveCulling)));
    
    sVkPhysicalDeviceRayTracingPipelineFeaturesKHR.Set(Napi::String::New(env, "rayTraversalPrimitiveCulling"), obj);
  }
  sVkPhysicalDeviceRayTracingPipelineFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceRayTracingPipelineFeaturesKHR"), sVkPhysicalDeviceRayTracingPipelineFeaturesKHR);
  Napi::Object sVkPhysicalDeviceRayQueryFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayQueryFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayQueryFeaturesKHR::sType)));
    
    sVkPhysicalDeviceRayQueryFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayQueryFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayQueryFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceRayQueryFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayQueryFeaturesKHR, rayQuery)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayQueryFeaturesKHR::rayQuery)));
    
    sVkPhysicalDeviceRayQueryFeaturesKHR.Set(Napi::String::New(env, "rayQuery"), obj);
  }
  sVkPhysicalDeviceRayQueryFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayQueryFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceRayQueryFeaturesKHR"), sVkPhysicalDeviceRayQueryFeaturesKHR);
  Napi::Object sVkPhysicalDeviceAccelerationStructurePropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR::sType)));
    
    sVkPhysicalDeviceAccelerationStructurePropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR::pNext)));
    
    sVkPhysicalDeviceAccelerationStructurePropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, maxGeometryCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxGeometryCount)));
    
    sVkPhysicalDeviceAccelerationStructurePropertiesKHR.Set(Napi::String::New(env, "maxGeometryCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, maxInstanceCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxInstanceCount)));
    
    sVkPhysicalDeviceAccelerationStructurePropertiesKHR.Set(Napi::String::New(env, "maxInstanceCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, maxPrimitiveCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxPrimitiveCount)));
    
    sVkPhysicalDeviceAccelerationStructurePropertiesKHR.Set(Napi::String::New(env, "maxPrimitiveCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, maxPerStageDescriptorAccelerationStructures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxPerStageDescriptorAccelerationStructures)));
    
    sVkPhysicalDeviceAccelerationStructurePropertiesKHR.Set(Napi::String::New(env, "maxPerStageDescriptorAccelerationStructures"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, maxPerStageDescriptorUpdateAfterBindAccelerationStructures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxPerStageDescriptorUpdateAfterBindAccelerationStructures)));
    
    sVkPhysicalDeviceAccelerationStructurePropertiesKHR.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindAccelerationStructures"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, maxDescriptorSetAccelerationStructures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxDescriptorSetAccelerationStructures)));
    
    sVkPhysicalDeviceAccelerationStructurePropertiesKHR.Set(Napi::String::New(env, "maxDescriptorSetAccelerationStructures"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, maxDescriptorSetUpdateAfterBindAccelerationStructures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxDescriptorSetUpdateAfterBindAccelerationStructures)));
    
    sVkPhysicalDeviceAccelerationStructurePropertiesKHR.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindAccelerationStructures"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, minAccelerationStructureScratchOffsetAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR::minAccelerationStructureScratchOffsetAlignment)));
    
    sVkPhysicalDeviceAccelerationStructurePropertiesKHR.Set(Napi::String::New(env, "minAccelerationStructureScratchOffsetAlignment"), obj);
  }
  sVkPhysicalDeviceAccelerationStructurePropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceAccelerationStructurePropertiesKHR"), sVkPhysicalDeviceAccelerationStructurePropertiesKHR);
  Napi::Object sVkPhysicalDeviceRayTracingPipelinePropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR::sType)));
    
    sVkPhysicalDeviceRayTracingPipelinePropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR::pNext)));
    
    sVkPhysicalDeviceRayTracingPipelinePropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupHandleSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR::shaderGroupHandleSize)));
    
    sVkPhysicalDeviceRayTracingPipelinePropertiesKHR.Set(Napi::String::New(env, "shaderGroupHandleSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxRayRecursionDepth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxRayRecursionDepth)));
    
    sVkPhysicalDeviceRayTracingPipelinePropertiesKHR.Set(Napi::String::New(env, "maxRayRecursionDepth"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxShaderGroupStride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxShaderGroupStride)));
    
    sVkPhysicalDeviceRayTracingPipelinePropertiesKHR.Set(Napi::String::New(env, "maxShaderGroupStride"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupBaseAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR::shaderGroupBaseAlignment)));
    
    sVkPhysicalDeviceRayTracingPipelinePropertiesKHR.Set(Napi::String::New(env, "shaderGroupBaseAlignment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupHandleCaptureReplaySize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR::shaderGroupHandleCaptureReplaySize)));
    
    sVkPhysicalDeviceRayTracingPipelinePropertiesKHR.Set(Napi::String::New(env, "shaderGroupHandleCaptureReplaySize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxRayDispatchInvocationCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxRayDispatchInvocationCount)));
    
    sVkPhysicalDeviceRayTracingPipelinePropertiesKHR.Set(Napi::String::New(env, "maxRayDispatchInvocationCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupHandleAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR::shaderGroupHandleAlignment)));
    
    sVkPhysicalDeviceRayTracingPipelinePropertiesKHR.Set(Napi::String::New(env, "shaderGroupHandleAlignment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxRayHitAttributeSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxRayHitAttributeSize)));
    
    sVkPhysicalDeviceRayTracingPipelinePropertiesKHR.Set(Napi::String::New(env, "maxRayHitAttributeSize"), obj);
  }
  sVkPhysicalDeviceRayTracingPipelinePropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceRayTracingPipelinePropertiesKHR"), sVkPhysicalDeviceRayTracingPipelinePropertiesKHR);
  Napi::Object sVkPhysicalDeviceRayTracingPropertiesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPropertiesNV::sType)));
    
    sVkPhysicalDeviceRayTracingPropertiesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPropertiesNV::pNext)));
    
    sVkPhysicalDeviceRayTracingPropertiesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, shaderGroupHandleSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPropertiesNV::shaderGroupHandleSize)));
    
    sVkPhysicalDeviceRayTracingPropertiesNV.Set(Napi::String::New(env, "shaderGroupHandleSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxRecursionDepth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPropertiesNV::maxRecursionDepth)));
    
    sVkPhysicalDeviceRayTracingPropertiesNV.Set(Napi::String::New(env, "maxRecursionDepth"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxShaderGroupStride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPropertiesNV::maxShaderGroupStride)));
    
    sVkPhysicalDeviceRayTracingPropertiesNV.Set(Napi::String::New(env, "maxShaderGroupStride"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, shaderGroupBaseAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPropertiesNV::shaderGroupBaseAlignment)));
    
    sVkPhysicalDeviceRayTracingPropertiesNV.Set(Napi::String::New(env, "shaderGroupBaseAlignment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxGeometryCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPropertiesNV::maxGeometryCount)));
    
    sVkPhysicalDeviceRayTracingPropertiesNV.Set(Napi::String::New(env, "maxGeometryCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxInstanceCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPropertiesNV::maxInstanceCount)));
    
    sVkPhysicalDeviceRayTracingPropertiesNV.Set(Napi::String::New(env, "maxInstanceCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxTriangleCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPropertiesNV::maxTriangleCount)));
    
    sVkPhysicalDeviceRayTracingPropertiesNV.Set(Napi::String::New(env, "maxTriangleCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxDescriptorSetAccelerationStructures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPropertiesNV::maxDescriptorSetAccelerationStructures)));
    
    sVkPhysicalDeviceRayTracingPropertiesNV.Set(Napi::String::New(env, "maxDescriptorSetAccelerationStructures"), obj);
  }
  sVkPhysicalDeviceRayTracingPropertiesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPropertiesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceRayTracingPropertiesNV"), sVkPhysicalDeviceRayTracingPropertiesNV);
  Napi::Object sVkStridedDeviceAddressRegionKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkStridedDeviceAddressRegionKHR, deviceAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkStridedDeviceAddressRegionKHR::deviceAddress)));
    
    sVkStridedDeviceAddressRegionKHR.Set(Napi::String::New(env, "deviceAddress"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkStridedDeviceAddressRegionKHR, stride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkStridedDeviceAddressRegionKHR::stride)));
    
    sVkStridedDeviceAddressRegionKHR.Set(Napi::String::New(env, "stride"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkStridedDeviceAddressRegionKHR, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkStridedDeviceAddressRegionKHR::size)));
    
    sVkStridedDeviceAddressRegionKHR.Set(Napi::String::New(env, "size"), obj);
  }
  sVkStridedDeviceAddressRegionKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkStridedDeviceAddressRegionKHR)));
  out.Set(Napi::String::New(env, "VkStridedDeviceAddressRegionKHR"), sVkStridedDeviceAddressRegionKHR);
  Napi::Object sVkTraceRaysIndirectCommandKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommandKHR, width)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTraceRaysIndirectCommandKHR::width)));
    
    sVkTraceRaysIndirectCommandKHR.Set(Napi::String::New(env, "width"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommandKHR, height)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTraceRaysIndirectCommandKHR::height)));
    
    sVkTraceRaysIndirectCommandKHR.Set(Napi::String::New(env, "height"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommandKHR, depth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTraceRaysIndirectCommandKHR::depth)));
    
    sVkTraceRaysIndirectCommandKHR.Set(Napi::String::New(env, "depth"), obj);
  }
  sVkTraceRaysIndirectCommandKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkTraceRaysIndirectCommandKHR)));
  out.Set(Napi::String::New(env, "VkTraceRaysIndirectCommandKHR"), sVkTraceRaysIndirectCommandKHR);
  Napi::Object sVkDrmFormatModifierPropertiesListEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesListEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrmFormatModifierPropertiesListEXT::sType)));
    
    sVkDrmFormatModifierPropertiesListEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesListEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrmFormatModifierPropertiesListEXT::pNext)));
    
    sVkDrmFormatModifierPropertiesListEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesListEXT, drmFormatModifierCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrmFormatModifierPropertiesListEXT::drmFormatModifierCount)));
    
    sVkDrmFormatModifierPropertiesListEXT.Set(Napi::String::New(env, "drmFormatModifierCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesListEXT, pDrmFormatModifierProperties)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrmFormatModifierPropertiesListEXT::pDrmFormatModifierProperties)));
    
    sVkDrmFormatModifierPropertiesListEXT.Set(Napi::String::New(env, "pDrmFormatModifierProperties"), obj);
  }
  sVkDrmFormatModifierPropertiesListEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrmFormatModifierPropertiesListEXT)));
  out.Set(Napi::String::New(env, "VkDrmFormatModifierPropertiesListEXT"), sVkDrmFormatModifierPropertiesListEXT);
  Napi::Object sVkDrmFormatModifierPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesEXT, drmFormatModifier)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrmFormatModifierPropertiesEXT::drmFormatModifier)));
    
    sVkDrmFormatModifierPropertiesEXT.Set(Napi::String::New(env, "drmFormatModifier"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesEXT, drmFormatModifierPlaneCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrmFormatModifierPropertiesEXT::drmFormatModifierPlaneCount)));
    
    sVkDrmFormatModifierPropertiesEXT.Set(Napi::String::New(env, "drmFormatModifierPlaneCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesEXT, drmFormatModifierTilingFeatures)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrmFormatModifierPropertiesEXT::drmFormatModifierTilingFeatures)));
    
    sVkDrmFormatModifierPropertiesEXT.Set(Napi::String::New(env, "drmFormatModifierTilingFeatures"), obj);
  }
  sVkDrmFormatModifierPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkDrmFormatModifierPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkDrmFormatModifierPropertiesEXT"), sVkDrmFormatModifierPropertiesEXT);
  Napi::Object sVkPhysicalDeviceImageDrmFormatModifierInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT::sType)));
    
    sVkPhysicalDeviceImageDrmFormatModifierInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT::pNext)));
    
    sVkPhysicalDeviceImageDrmFormatModifierInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, drmFormatModifier)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT::drmFormatModifier)));
    
    sVkPhysicalDeviceImageDrmFormatModifierInfoEXT.Set(Napi::String::New(env, "drmFormatModifier"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, sharingMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT::sharingMode)));
    
    sVkPhysicalDeviceImageDrmFormatModifierInfoEXT.Set(Napi::String::New(env, "sharingMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, queueFamilyIndexCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT::queueFamilyIndexCount)));
    
    sVkPhysicalDeviceImageDrmFormatModifierInfoEXT.Set(Napi::String::New(env, "queueFamilyIndexCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, pQueueFamilyIndices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT::pQueueFamilyIndices)));
    
    sVkPhysicalDeviceImageDrmFormatModifierInfoEXT.Set(Napi::String::New(env, "pQueueFamilyIndices"), obj);
  }
  sVkPhysicalDeviceImageDrmFormatModifierInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceImageDrmFormatModifierInfoEXT"), sVkPhysicalDeviceImageDrmFormatModifierInfoEXT);
  Napi::Object sVkImageDrmFormatModifierListCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageDrmFormatModifierListCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageDrmFormatModifierListCreateInfoEXT::sType)));
    
    sVkImageDrmFormatModifierListCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageDrmFormatModifierListCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageDrmFormatModifierListCreateInfoEXT::pNext)));
    
    sVkImageDrmFormatModifierListCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageDrmFormatModifierListCreateInfoEXT, drmFormatModifierCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageDrmFormatModifierListCreateInfoEXT::drmFormatModifierCount)));
    
    sVkImageDrmFormatModifierListCreateInfoEXT.Set(Napi::String::New(env, "drmFormatModifierCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageDrmFormatModifierListCreateInfoEXT, pDrmFormatModifiers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageDrmFormatModifierListCreateInfoEXT::pDrmFormatModifiers)));
    
    sVkImageDrmFormatModifierListCreateInfoEXT.Set(Napi::String::New(env, "pDrmFormatModifiers"), obj);
  }
  sVkImageDrmFormatModifierListCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageDrmFormatModifierListCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkImageDrmFormatModifierListCreateInfoEXT"), sVkImageDrmFormatModifierListCreateInfoEXT);
  Napi::Object sVkImageDrmFormatModifierExplicitCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT::sType)));
    
    sVkImageDrmFormatModifierExplicitCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT::pNext)));
    
    sVkImageDrmFormatModifierExplicitCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, drmFormatModifier)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT::drmFormatModifier)));
    
    sVkImageDrmFormatModifierExplicitCreateInfoEXT.Set(Napi::String::New(env, "drmFormatModifier"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, drmFormatModifierPlaneCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT::drmFormatModifierPlaneCount)));
    
    sVkImageDrmFormatModifierExplicitCreateInfoEXT.Set(Napi::String::New(env, "drmFormatModifierPlaneCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, pPlaneLayouts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT::pPlaneLayouts)));
    
    sVkImageDrmFormatModifierExplicitCreateInfoEXT.Set(Napi::String::New(env, "pPlaneLayouts"), obj);
  }
  sVkImageDrmFormatModifierExplicitCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkImageDrmFormatModifierExplicitCreateInfoEXT"), sVkImageDrmFormatModifierExplicitCreateInfoEXT);
  Napi::Object sVkImageDrmFormatModifierPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageDrmFormatModifierPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageDrmFormatModifierPropertiesEXT::sType)));
    
    sVkImageDrmFormatModifierPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageDrmFormatModifierPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageDrmFormatModifierPropertiesEXT::pNext)));
    
    sVkImageDrmFormatModifierPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageDrmFormatModifierPropertiesEXT, drmFormatModifier)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageDrmFormatModifierPropertiesEXT::drmFormatModifier)));
    
    sVkImageDrmFormatModifierPropertiesEXT.Set(Napi::String::New(env, "drmFormatModifier"), obj);
  }
  sVkImageDrmFormatModifierPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageDrmFormatModifierPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkImageDrmFormatModifierPropertiesEXT"), sVkImageDrmFormatModifierPropertiesEXT);
  Napi::Object sVkImageStencilUsageCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageStencilUsageCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageStencilUsageCreateInfo::sType)));
    
    sVkImageStencilUsageCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageStencilUsageCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageStencilUsageCreateInfo::pNext)));
    
    sVkImageStencilUsageCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageStencilUsageCreateInfo, stencilUsage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageStencilUsageCreateInfo::stencilUsage)));
    
    sVkImageStencilUsageCreateInfo.Set(Napi::String::New(env, "stencilUsage"), obj);
  }
  sVkImageStencilUsageCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageStencilUsageCreateInfo)));
  out.Set(Napi::String::New(env, "VkImageStencilUsageCreateInfo"), sVkImageStencilUsageCreateInfo);
  Napi::Object sVkImageStencilUsageCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageStencilUsageCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageStencilUsageCreateInfoEXT::sType)));
    
    sVkImageStencilUsageCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageStencilUsageCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageStencilUsageCreateInfoEXT::pNext)));
    
    sVkImageStencilUsageCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageStencilUsageCreateInfoEXT, stencilUsage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageStencilUsageCreateInfoEXT::stencilUsage)));
    
    sVkImageStencilUsageCreateInfoEXT.Set(Napi::String::New(env, "stencilUsage"), obj);
  }
  sVkImageStencilUsageCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageStencilUsageCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkImageStencilUsageCreateInfoEXT"), sVkImageStencilUsageCreateInfoEXT);
  Napi::Object sVkDeviceMemoryOverallocationCreateInfoAMD = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryOverallocationCreateInfoAMD, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryOverallocationCreateInfoAMD::sType)));
    
    sVkDeviceMemoryOverallocationCreateInfoAMD.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryOverallocationCreateInfoAMD, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryOverallocationCreateInfoAMD::pNext)));
    
    sVkDeviceMemoryOverallocationCreateInfoAMD.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryOverallocationCreateInfoAMD, overallocationBehavior)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryOverallocationCreateInfoAMD::overallocationBehavior)));
    
    sVkDeviceMemoryOverallocationCreateInfoAMD.Set(Napi::String::New(env, "overallocationBehavior"), obj);
  }
  sVkDeviceMemoryOverallocationCreateInfoAMD.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryOverallocationCreateInfoAMD)));
  out.Set(Napi::String::New(env, "VkDeviceMemoryOverallocationCreateInfoAMD"), sVkDeviceMemoryOverallocationCreateInfoAMD);
  Napi::Object sVkPhysicalDeviceFragmentDensityMapFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT::sType)));
    
    sVkPhysicalDeviceFragmentDensityMapFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceFragmentDensityMapFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, fragmentDensityMap)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT::fragmentDensityMap)));
    
    sVkPhysicalDeviceFragmentDensityMapFeaturesEXT.Set(Napi::String::New(env, "fragmentDensityMap"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, fragmentDensityMapDynamic)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT::fragmentDensityMapDynamic)));
    
    sVkPhysicalDeviceFragmentDensityMapFeaturesEXT.Set(Napi::String::New(env, "fragmentDensityMapDynamic"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, fragmentDensityMapNonSubsampledImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT::fragmentDensityMapNonSubsampledImages)));
    
    sVkPhysicalDeviceFragmentDensityMapFeaturesEXT.Set(Napi::String::New(env, "fragmentDensityMapNonSubsampledImages"), obj);
  }
  sVkPhysicalDeviceFragmentDensityMapFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFragmentDensityMapFeaturesEXT"), sVkPhysicalDeviceFragmentDensityMapFeaturesEXT);
  Napi::Object sVkPhysicalDeviceFragmentDensityMap2FeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT::sType)));
    
    sVkPhysicalDeviceFragmentDensityMap2FeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT::pNext)));
    
    sVkPhysicalDeviceFragmentDensityMap2FeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, fragmentDensityMapDeferred)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT::fragmentDensityMapDeferred)));
    
    sVkPhysicalDeviceFragmentDensityMap2FeaturesEXT.Set(Napi::String::New(env, "fragmentDensityMapDeferred"), obj);
  }
  sVkPhysicalDeviceFragmentDensityMap2FeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFragmentDensityMap2FeaturesEXT"), sVkPhysicalDeviceFragmentDensityMap2FeaturesEXT);
  Napi::Object sVkPhysicalDeviceFragmentDensityMapPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT::sType)));
    
    sVkPhysicalDeviceFragmentDensityMapPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceFragmentDensityMapPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, minFragmentDensityTexelSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT::minFragmentDensityTexelSize)));
    
    sVkPhysicalDeviceFragmentDensityMapPropertiesEXT.Set(Napi::String::New(env, "minFragmentDensityTexelSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, maxFragmentDensityTexelSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT::maxFragmentDensityTexelSize)));
    
    sVkPhysicalDeviceFragmentDensityMapPropertiesEXT.Set(Napi::String::New(env, "maxFragmentDensityTexelSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, fragmentDensityInvocations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT::fragmentDensityInvocations)));
    
    sVkPhysicalDeviceFragmentDensityMapPropertiesEXT.Set(Napi::String::New(env, "fragmentDensityInvocations"), obj);
  }
  sVkPhysicalDeviceFragmentDensityMapPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFragmentDensityMapPropertiesEXT"), sVkPhysicalDeviceFragmentDensityMapPropertiesEXT);
  Napi::Object sVkPhysicalDeviceFragmentDensityMap2PropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::sType)));
    
    sVkPhysicalDeviceFragmentDensityMap2PropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::pNext)));
    
    sVkPhysicalDeviceFragmentDensityMap2PropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, subsampledLoads)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::subsampledLoads)));
    
    sVkPhysicalDeviceFragmentDensityMap2PropertiesEXT.Set(Napi::String::New(env, "subsampledLoads"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, subsampledCoarseReconstructionEarlyAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::subsampledCoarseReconstructionEarlyAccess)));
    
    sVkPhysicalDeviceFragmentDensityMap2PropertiesEXT.Set(Napi::String::New(env, "subsampledCoarseReconstructionEarlyAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, maxSubsampledArrayLayers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::maxSubsampledArrayLayers)));
    
    sVkPhysicalDeviceFragmentDensityMap2PropertiesEXT.Set(Napi::String::New(env, "maxSubsampledArrayLayers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, maxDescriptorSetSubsampledSamplers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::maxDescriptorSetSubsampledSamplers)));
    
    sVkPhysicalDeviceFragmentDensityMap2PropertiesEXT.Set(Napi::String::New(env, "maxDescriptorSetSubsampledSamplers"), obj);
  }
  sVkPhysicalDeviceFragmentDensityMap2PropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFragmentDensityMap2PropertiesEXT"), sVkPhysicalDeviceFragmentDensityMap2PropertiesEXT);
  Napi::Object sVkRenderPassFragmentDensityMapCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassFragmentDensityMapCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT::sType)));
    
    sVkRenderPassFragmentDensityMapCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassFragmentDensityMapCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT::pNext)));
    
    sVkRenderPassFragmentDensityMapCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassFragmentDensityMapCreateInfoEXT, fragmentDensityMapAttachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT::fragmentDensityMapAttachment)));
    
    sVkRenderPassFragmentDensityMapCreateInfoEXT.Set(Napi::String::New(env, "fragmentDensityMapAttachment"), obj);
  }
  sVkRenderPassFragmentDensityMapCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkRenderPassFragmentDensityMapCreateInfoEXT"), sVkRenderPassFragmentDensityMapCreateInfoEXT);
  Napi::Object sVkPhysicalDeviceScalarBlockLayoutFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceScalarBlockLayoutFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceScalarBlockLayoutFeatures::sType)));
    
    sVkPhysicalDeviceScalarBlockLayoutFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceScalarBlockLayoutFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceScalarBlockLayoutFeatures::pNext)));
    
    sVkPhysicalDeviceScalarBlockLayoutFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceScalarBlockLayoutFeatures, scalarBlockLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceScalarBlockLayoutFeatures::scalarBlockLayout)));
    
    sVkPhysicalDeviceScalarBlockLayoutFeatures.Set(Napi::String::New(env, "scalarBlockLayout"), obj);
  }
  sVkPhysicalDeviceScalarBlockLayoutFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceScalarBlockLayoutFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceScalarBlockLayoutFeatures"), sVkPhysicalDeviceScalarBlockLayoutFeatures);
  Napi::Object sVkPhysicalDeviceScalarBlockLayoutFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT::sType)));
    
    sVkPhysicalDeviceScalarBlockLayoutFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceScalarBlockLayoutFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT, scalarBlockLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT::scalarBlockLayout)));
    
    sVkPhysicalDeviceScalarBlockLayoutFeaturesEXT.Set(Napi::String::New(env, "scalarBlockLayout"), obj);
  }
  sVkPhysicalDeviceScalarBlockLayoutFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceScalarBlockLayoutFeaturesEXT"), sVkPhysicalDeviceScalarBlockLayoutFeaturesEXT);
  Napi::Object sVkSurfaceProtectedCapabilitiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceProtectedCapabilitiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceProtectedCapabilitiesKHR::sType)));
    
    sVkSurfaceProtectedCapabilitiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceProtectedCapabilitiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceProtectedCapabilitiesKHR::pNext)));
    
    sVkSurfaceProtectedCapabilitiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceProtectedCapabilitiesKHR, supportsProtected)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceProtectedCapabilitiesKHR::supportsProtected)));
    
    sVkSurfaceProtectedCapabilitiesKHR.Set(Napi::String::New(env, "supportsProtected"), obj);
  }
  sVkSurfaceProtectedCapabilitiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceProtectedCapabilitiesKHR)));
  out.Set(Napi::String::New(env, "VkSurfaceProtectedCapabilitiesKHR"), sVkSurfaceProtectedCapabilitiesKHR);
  Napi::Object sVkPhysicalDeviceUniformBufferStandardLayoutFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures::sType)));
    
    sVkPhysicalDeviceUniformBufferStandardLayoutFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures::pNext)));
    
    sVkPhysicalDeviceUniformBufferStandardLayoutFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures, uniformBufferStandardLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures::uniformBufferStandardLayout)));
    
    sVkPhysicalDeviceUniformBufferStandardLayoutFeatures.Set(Napi::String::New(env, "uniformBufferStandardLayout"), obj);
  }
  sVkPhysicalDeviceUniformBufferStandardLayoutFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceUniformBufferStandardLayoutFeatures"), sVkPhysicalDeviceUniformBufferStandardLayoutFeatures);
  Napi::Object sVkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR::sType)));
    
    sVkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR, uniformBufferStandardLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR::uniformBufferStandardLayout)));
    
    sVkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.Set(Napi::String::New(env, "uniformBufferStandardLayout"), obj);
  }
  sVkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR"), sVkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR);
  Napi::Object sVkPhysicalDeviceDepthClipEnableFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthClipEnableFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT::sType)));
    
    sVkPhysicalDeviceDepthClipEnableFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthClipEnableFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceDepthClipEnableFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthClipEnableFeaturesEXT, depthClipEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT::depthClipEnable)));
    
    sVkPhysicalDeviceDepthClipEnableFeaturesEXT.Set(Napi::String::New(env, "depthClipEnable"), obj);
  }
  sVkPhysicalDeviceDepthClipEnableFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceDepthClipEnableFeaturesEXT"), sVkPhysicalDeviceDepthClipEnableFeaturesEXT);
  Napi::Object sVkPipelineRasterizationDepthClipStateCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationDepthClipStateCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT::sType)));
    
    sVkPipelineRasterizationDepthClipStateCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationDepthClipStateCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT::pNext)));
    
    sVkPipelineRasterizationDepthClipStateCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationDepthClipStateCreateInfoEXT, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT::flags)));
    
    sVkPipelineRasterizationDepthClipStateCreateInfoEXT.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationDepthClipStateCreateInfoEXT, depthClipEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT::depthClipEnable)));
    
    sVkPipelineRasterizationDepthClipStateCreateInfoEXT.Set(Napi::String::New(env, "depthClipEnable"), obj);
  }
  sVkPipelineRasterizationDepthClipStateCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkPipelineRasterizationDepthClipStateCreateInfoEXT"), sVkPipelineRasterizationDepthClipStateCreateInfoEXT);
  Napi::Object sVkPhysicalDeviceMemoryBudgetPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT::sType)));
    
    sVkPhysicalDeviceMemoryBudgetPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceMemoryBudgetPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapBudget)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT::heapBudget)));
    
    sVkPhysicalDeviceMemoryBudgetPropertiesEXT.Set(Napi::String::New(env, "heapBudget"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapUsage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT::heapUsage)));
    
    sVkPhysicalDeviceMemoryBudgetPropertiesEXT.Set(Napi::String::New(env, "heapUsage"), obj);
  }
  sVkPhysicalDeviceMemoryBudgetPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceMemoryBudgetPropertiesEXT"), sVkPhysicalDeviceMemoryBudgetPropertiesEXT);
  Napi::Object sVkPhysicalDeviceMemoryPriorityFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryPriorityFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT::sType)));
    
    sVkPhysicalDeviceMemoryPriorityFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryPriorityFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceMemoryPriorityFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryPriorityFeaturesEXT, memoryPriority)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT::memoryPriority)));
    
    sVkPhysicalDeviceMemoryPriorityFeaturesEXT.Set(Napi::String::New(env, "memoryPriority"), obj);
  }
  sVkPhysicalDeviceMemoryPriorityFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceMemoryPriorityFeaturesEXT"), sVkPhysicalDeviceMemoryPriorityFeaturesEXT);
  Napi::Object sVkMemoryPriorityAllocateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryPriorityAllocateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryPriorityAllocateInfoEXT::sType)));
    
    sVkMemoryPriorityAllocateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryPriorityAllocateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryPriorityAllocateInfoEXT::pNext)));
    
    sVkMemoryPriorityAllocateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryPriorityAllocateInfoEXT, priority)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryPriorityAllocateInfoEXT::priority)));
    
    sVkMemoryPriorityAllocateInfoEXT.Set(Napi::String::New(env, "priority"), obj);
  }
  sVkMemoryPriorityAllocateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryPriorityAllocateInfoEXT)));
  out.Set(Napi::String::New(env, "VkMemoryPriorityAllocateInfoEXT"), sVkMemoryPriorityAllocateInfoEXT);
  Napi::Object sVkPhysicalDeviceBufferDeviceAddressFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeatures::sType)));
    
    sVkPhysicalDeviceBufferDeviceAddressFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeatures::pNext)));
    
    sVkPhysicalDeviceBufferDeviceAddressFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeatures, bufferDeviceAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeatures::bufferDeviceAddress)));
    
    sVkPhysicalDeviceBufferDeviceAddressFeatures.Set(Napi::String::New(env, "bufferDeviceAddress"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeatures, bufferDeviceAddressCaptureReplay)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeatures::bufferDeviceAddressCaptureReplay)));
    
    sVkPhysicalDeviceBufferDeviceAddressFeatures.Set(Napi::String::New(env, "bufferDeviceAddressCaptureReplay"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeatures, bufferDeviceAddressMultiDevice)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeatures::bufferDeviceAddressMultiDevice)));
    
    sVkPhysicalDeviceBufferDeviceAddressFeatures.Set(Napi::String::New(env, "bufferDeviceAddressMultiDevice"), obj);
  }
  sVkPhysicalDeviceBufferDeviceAddressFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceBufferDeviceAddressFeatures"), sVkPhysicalDeviceBufferDeviceAddressFeatures);
  Napi::Object sVkPhysicalDeviceBufferDeviceAddressFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR::sType)));
    
    sVkPhysicalDeviceBufferDeviceAddressFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceBufferDeviceAddressFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR, bufferDeviceAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR::bufferDeviceAddress)));
    
    sVkPhysicalDeviceBufferDeviceAddressFeaturesKHR.Set(Napi::String::New(env, "bufferDeviceAddress"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR, bufferDeviceAddressCaptureReplay)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR::bufferDeviceAddressCaptureReplay)));
    
    sVkPhysicalDeviceBufferDeviceAddressFeaturesKHR.Set(Napi::String::New(env, "bufferDeviceAddressCaptureReplay"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR, bufferDeviceAddressMultiDevice)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR::bufferDeviceAddressMultiDevice)));
    
    sVkPhysicalDeviceBufferDeviceAddressFeaturesKHR.Set(Napi::String::New(env, "bufferDeviceAddressMultiDevice"), obj);
  }
  sVkPhysicalDeviceBufferDeviceAddressFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceBufferDeviceAddressFeaturesKHR"), sVkPhysicalDeviceBufferDeviceAddressFeaturesKHR);
  Napi::Object sVkPhysicalDeviceBufferDeviceAddressFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::sType)));
    
    sVkPhysicalDeviceBufferDeviceAddressFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceBufferDeviceAddressFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, bufferDeviceAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::bufferDeviceAddress)));
    
    sVkPhysicalDeviceBufferDeviceAddressFeaturesEXT.Set(Napi::String::New(env, "bufferDeviceAddress"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, bufferDeviceAddressCaptureReplay)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::bufferDeviceAddressCaptureReplay)));
    
    sVkPhysicalDeviceBufferDeviceAddressFeaturesEXT.Set(Napi::String::New(env, "bufferDeviceAddressCaptureReplay"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, bufferDeviceAddressMultiDevice)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::bufferDeviceAddressMultiDevice)));
    
    sVkPhysicalDeviceBufferDeviceAddressFeaturesEXT.Set(Napi::String::New(env, "bufferDeviceAddressMultiDevice"), obj);
  }
  sVkPhysicalDeviceBufferDeviceAddressFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT"), sVkPhysicalDeviceBufferDeviceAddressFeaturesEXT);
  Napi::Object sVkPhysicalDeviceBufferAddressFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferAddressFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT::sType)));
    
    sVkPhysicalDeviceBufferAddressFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferAddressFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceBufferAddressFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferAddressFeaturesEXT, bufferDeviceAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT::bufferDeviceAddress)));
    
    sVkPhysicalDeviceBufferAddressFeaturesEXT.Set(Napi::String::New(env, "bufferDeviceAddress"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferAddressFeaturesEXT, bufferDeviceAddressCaptureReplay)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT::bufferDeviceAddressCaptureReplay)));
    
    sVkPhysicalDeviceBufferAddressFeaturesEXT.Set(Napi::String::New(env, "bufferDeviceAddressCaptureReplay"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferAddressFeaturesEXT, bufferDeviceAddressMultiDevice)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT::bufferDeviceAddressMultiDevice)));
    
    sVkPhysicalDeviceBufferAddressFeaturesEXT.Set(Napi::String::New(env, "bufferDeviceAddressMultiDevice"), obj);
  }
  sVkPhysicalDeviceBufferAddressFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceBufferAddressFeaturesEXT"), sVkPhysicalDeviceBufferAddressFeaturesEXT);
  Napi::Object sVkBufferDeviceAddressInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferDeviceAddressInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressInfo::sType)));
    
    sVkBufferDeviceAddressInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferDeviceAddressInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressInfo::pNext)));
    
    sVkBufferDeviceAddressInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferDeviceAddressInfo, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressInfo::buffer)));
    
    sVkBufferDeviceAddressInfo.Set(Napi::String::New(env, "buffer"), obj);
  }
  sVkBufferDeviceAddressInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressInfo)));
  out.Set(Napi::String::New(env, "VkBufferDeviceAddressInfo"), sVkBufferDeviceAddressInfo);
  Napi::Object sVkBufferDeviceAddressInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferDeviceAddressInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressInfoKHR::sType)));
    
    sVkBufferDeviceAddressInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferDeviceAddressInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressInfoKHR::pNext)));
    
    sVkBufferDeviceAddressInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferDeviceAddressInfoKHR, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressInfoKHR::buffer)));
    
    sVkBufferDeviceAddressInfoKHR.Set(Napi::String::New(env, "buffer"), obj);
  }
  sVkBufferDeviceAddressInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressInfoKHR)));
  out.Set(Napi::String::New(env, "VkBufferDeviceAddressInfoKHR"), sVkBufferDeviceAddressInfoKHR);
  Napi::Object sVkBufferDeviceAddressInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferDeviceAddressInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressInfoEXT::sType)));
    
    sVkBufferDeviceAddressInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferDeviceAddressInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressInfoEXT::pNext)));
    
    sVkBufferDeviceAddressInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferDeviceAddressInfoEXT, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressInfoEXT::buffer)));
    
    sVkBufferDeviceAddressInfoEXT.Set(Napi::String::New(env, "buffer"), obj);
  }
  sVkBufferDeviceAddressInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressInfoEXT)));
  out.Set(Napi::String::New(env, "VkBufferDeviceAddressInfoEXT"), sVkBufferDeviceAddressInfoEXT);
  Napi::Object sVkBufferOpaqueCaptureAddressCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferOpaqueCaptureAddressCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferOpaqueCaptureAddressCreateInfo::sType)));
    
    sVkBufferOpaqueCaptureAddressCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferOpaqueCaptureAddressCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferOpaqueCaptureAddressCreateInfo::pNext)));
    
    sVkBufferOpaqueCaptureAddressCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferOpaqueCaptureAddressCreateInfo, opaqueCaptureAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferOpaqueCaptureAddressCreateInfo::opaqueCaptureAddress)));
    
    sVkBufferOpaqueCaptureAddressCreateInfo.Set(Napi::String::New(env, "opaqueCaptureAddress"), obj);
  }
  sVkBufferOpaqueCaptureAddressCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferOpaqueCaptureAddressCreateInfo)));
  out.Set(Napi::String::New(env, "VkBufferOpaqueCaptureAddressCreateInfo"), sVkBufferOpaqueCaptureAddressCreateInfo);
  Napi::Object sVkBufferOpaqueCaptureAddressCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferOpaqueCaptureAddressCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferOpaqueCaptureAddressCreateInfoKHR::sType)));
    
    sVkBufferOpaqueCaptureAddressCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferOpaqueCaptureAddressCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferOpaqueCaptureAddressCreateInfoKHR::pNext)));
    
    sVkBufferOpaqueCaptureAddressCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferOpaqueCaptureAddressCreateInfoKHR, opaqueCaptureAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferOpaqueCaptureAddressCreateInfoKHR::opaqueCaptureAddress)));
    
    sVkBufferOpaqueCaptureAddressCreateInfoKHR.Set(Napi::String::New(env, "opaqueCaptureAddress"), obj);
  }
  sVkBufferOpaqueCaptureAddressCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferOpaqueCaptureAddressCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkBufferOpaqueCaptureAddressCreateInfoKHR"), sVkBufferOpaqueCaptureAddressCreateInfoKHR);
  Napi::Object sVkBufferDeviceAddressCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferDeviceAddressCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressCreateInfoEXT::sType)));
    
    sVkBufferDeviceAddressCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferDeviceAddressCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressCreateInfoEXT::pNext)));
    
    sVkBufferDeviceAddressCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferDeviceAddressCreateInfoEXT, deviceAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressCreateInfoEXT::deviceAddress)));
    
    sVkBufferDeviceAddressCreateInfoEXT.Set(Napi::String::New(env, "deviceAddress"), obj);
  }
  sVkBufferDeviceAddressCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferDeviceAddressCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkBufferDeviceAddressCreateInfoEXT"), sVkBufferDeviceAddressCreateInfoEXT);
  Napi::Object sVkPhysicalDeviceImageViewImageFormatInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageViewImageFormatInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT::sType)));
    
    sVkPhysicalDeviceImageViewImageFormatInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageViewImageFormatInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT::pNext)));
    
    sVkPhysicalDeviceImageViewImageFormatInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageViewImageFormatInfoEXT, imageViewType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT::imageViewType)));
    
    sVkPhysicalDeviceImageViewImageFormatInfoEXT.Set(Napi::String::New(env, "imageViewType"), obj);
  }
  sVkPhysicalDeviceImageViewImageFormatInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceImageViewImageFormatInfoEXT"), sVkPhysicalDeviceImageViewImageFormatInfoEXT);
  Napi::Object sVkFilterCubicImageViewImageFormatPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT::sType)));
    
    sVkFilterCubicImageViewImageFormatPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT::pNext)));
    
    sVkFilterCubicImageViewImageFormatPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, filterCubic)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT::filterCubic)));
    
    sVkFilterCubicImageViewImageFormatPropertiesEXT.Set(Napi::String::New(env, "filterCubic"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, filterCubicMinmax)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT::filterCubicMinmax)));
    
    sVkFilterCubicImageViewImageFormatPropertiesEXT.Set(Napi::String::New(env, "filterCubicMinmax"), obj);
  }
  sVkFilterCubicImageViewImageFormatPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkFilterCubicImageViewImageFormatPropertiesEXT"), sVkFilterCubicImageViewImageFormatPropertiesEXT);
  Napi::Object sVkPhysicalDeviceImagelessFramebufferFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImagelessFramebufferFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImagelessFramebufferFeatures::sType)));
    
    sVkPhysicalDeviceImagelessFramebufferFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImagelessFramebufferFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImagelessFramebufferFeatures::pNext)));
    
    sVkPhysicalDeviceImagelessFramebufferFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImagelessFramebufferFeatures, imagelessFramebuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImagelessFramebufferFeatures::imagelessFramebuffer)));
    
    sVkPhysicalDeviceImagelessFramebufferFeatures.Set(Napi::String::New(env, "imagelessFramebuffer"), obj);
  }
  sVkPhysicalDeviceImagelessFramebufferFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImagelessFramebufferFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceImagelessFramebufferFeatures"), sVkPhysicalDeviceImagelessFramebufferFeatures);
  Napi::Object sVkPhysicalDeviceImagelessFramebufferFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImagelessFramebufferFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImagelessFramebufferFeaturesKHR::sType)));
    
    sVkPhysicalDeviceImagelessFramebufferFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImagelessFramebufferFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImagelessFramebufferFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceImagelessFramebufferFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImagelessFramebufferFeaturesKHR, imagelessFramebuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImagelessFramebufferFeaturesKHR::imagelessFramebuffer)));
    
    sVkPhysicalDeviceImagelessFramebufferFeaturesKHR.Set(Napi::String::New(env, "imagelessFramebuffer"), obj);
  }
  sVkPhysicalDeviceImagelessFramebufferFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImagelessFramebufferFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceImagelessFramebufferFeaturesKHR"), sVkPhysicalDeviceImagelessFramebufferFeaturesKHR);
  Napi::Object sVkFramebufferAttachmentsCreateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentsCreateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentsCreateInfo::sType)));
    
    sVkFramebufferAttachmentsCreateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentsCreateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentsCreateInfo::pNext)));
    
    sVkFramebufferAttachmentsCreateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentsCreateInfo, attachmentImageInfoCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentsCreateInfo::attachmentImageInfoCount)));
    
    sVkFramebufferAttachmentsCreateInfo.Set(Napi::String::New(env, "attachmentImageInfoCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentsCreateInfo, pAttachmentImageInfos)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentsCreateInfo::pAttachmentImageInfos)));
    
    sVkFramebufferAttachmentsCreateInfo.Set(Napi::String::New(env, "pAttachmentImageInfos"), obj);
  }
  sVkFramebufferAttachmentsCreateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentsCreateInfo)));
  out.Set(Napi::String::New(env, "VkFramebufferAttachmentsCreateInfo"), sVkFramebufferAttachmentsCreateInfo);
  Napi::Object sVkFramebufferAttachmentsCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentsCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentsCreateInfoKHR::sType)));
    
    sVkFramebufferAttachmentsCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentsCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentsCreateInfoKHR::pNext)));
    
    sVkFramebufferAttachmentsCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentsCreateInfoKHR, attachmentImageInfoCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentsCreateInfoKHR::attachmentImageInfoCount)));
    
    sVkFramebufferAttachmentsCreateInfoKHR.Set(Napi::String::New(env, "attachmentImageInfoCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentsCreateInfoKHR, pAttachmentImageInfos)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentsCreateInfoKHR::pAttachmentImageInfos)));
    
    sVkFramebufferAttachmentsCreateInfoKHR.Set(Napi::String::New(env, "pAttachmentImageInfos"), obj);
  }
  sVkFramebufferAttachmentsCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentsCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkFramebufferAttachmentsCreateInfoKHR"), sVkFramebufferAttachmentsCreateInfoKHR);
  Napi::Object sVkFramebufferAttachmentImageInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfo::sType)));
    
    sVkFramebufferAttachmentImageInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfo::pNext)));
    
    sVkFramebufferAttachmentImageInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfo::flags)));
    
    sVkFramebufferAttachmentImageInfo.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfo::usage)));
    
    sVkFramebufferAttachmentImageInfo.Set(Napi::String::New(env, "usage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, width)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfo::width)));
    
    sVkFramebufferAttachmentImageInfo.Set(Napi::String::New(env, "width"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, height)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfo::height)));
    
    sVkFramebufferAttachmentImageInfo.Set(Napi::String::New(env, "height"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, layerCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfo::layerCount)));
    
    sVkFramebufferAttachmentImageInfo.Set(Napi::String::New(env, "layerCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, viewFormatCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfo::viewFormatCount)));
    
    sVkFramebufferAttachmentImageInfo.Set(Napi::String::New(env, "viewFormatCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, pViewFormats)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfo::pViewFormats)));
    
    sVkFramebufferAttachmentImageInfo.Set(Napi::String::New(env, "pViewFormats"), obj);
  }
  sVkFramebufferAttachmentImageInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfo)));
  out.Set(Napi::String::New(env, "VkFramebufferAttachmentImageInfo"), sVkFramebufferAttachmentImageInfo);
  Napi::Object sVkFramebufferAttachmentImageInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfoKHR::sType)));
    
    sVkFramebufferAttachmentImageInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfoKHR::pNext)));
    
    sVkFramebufferAttachmentImageInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfoKHR::flags)));
    
    sVkFramebufferAttachmentImageInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfoKHR, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfoKHR::usage)));
    
    sVkFramebufferAttachmentImageInfoKHR.Set(Napi::String::New(env, "usage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfoKHR, width)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfoKHR::width)));
    
    sVkFramebufferAttachmentImageInfoKHR.Set(Napi::String::New(env, "width"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfoKHR, height)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfoKHR::height)));
    
    sVkFramebufferAttachmentImageInfoKHR.Set(Napi::String::New(env, "height"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfoKHR, layerCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfoKHR::layerCount)));
    
    sVkFramebufferAttachmentImageInfoKHR.Set(Napi::String::New(env, "layerCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfoKHR, viewFormatCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfoKHR::viewFormatCount)));
    
    sVkFramebufferAttachmentImageInfoKHR.Set(Napi::String::New(env, "viewFormatCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfoKHR, pViewFormats)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfoKHR::pViewFormats)));
    
    sVkFramebufferAttachmentImageInfoKHR.Set(Napi::String::New(env, "pViewFormats"), obj);
  }
  sVkFramebufferAttachmentImageInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferAttachmentImageInfoKHR)));
  out.Set(Napi::String::New(env, "VkFramebufferAttachmentImageInfoKHR"), sVkFramebufferAttachmentImageInfoKHR);
  Napi::Object sVkRenderPassAttachmentBeginInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassAttachmentBeginInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassAttachmentBeginInfo::sType)));
    
    sVkRenderPassAttachmentBeginInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassAttachmentBeginInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassAttachmentBeginInfo::pNext)));
    
    sVkRenderPassAttachmentBeginInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassAttachmentBeginInfo, attachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassAttachmentBeginInfo::attachmentCount)));
    
    sVkRenderPassAttachmentBeginInfo.Set(Napi::String::New(env, "attachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassAttachmentBeginInfo, pAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassAttachmentBeginInfo::pAttachments)));
    
    sVkRenderPassAttachmentBeginInfo.Set(Napi::String::New(env, "pAttachments"), obj);
  }
  sVkRenderPassAttachmentBeginInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassAttachmentBeginInfo)));
  out.Set(Napi::String::New(env, "VkRenderPassAttachmentBeginInfo"), sVkRenderPassAttachmentBeginInfo);
  Napi::Object sVkRenderPassAttachmentBeginInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassAttachmentBeginInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassAttachmentBeginInfoKHR::sType)));
    
    sVkRenderPassAttachmentBeginInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassAttachmentBeginInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassAttachmentBeginInfoKHR::pNext)));
    
    sVkRenderPassAttachmentBeginInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassAttachmentBeginInfoKHR, attachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassAttachmentBeginInfoKHR::attachmentCount)));
    
    sVkRenderPassAttachmentBeginInfoKHR.Set(Napi::String::New(env, "attachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassAttachmentBeginInfoKHR, pAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassAttachmentBeginInfoKHR::pAttachments)));
    
    sVkRenderPassAttachmentBeginInfoKHR.Set(Napi::String::New(env, "pAttachments"), obj);
  }
  sVkRenderPassAttachmentBeginInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassAttachmentBeginInfoKHR)));
  out.Set(Napi::String::New(env, "VkRenderPassAttachmentBeginInfoKHR"), sVkRenderPassAttachmentBeginInfoKHR);
  Napi::Object sVkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT::sType)));
    
    sVkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT, textureCompressionASTC_HDR)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT::textureCompressionASTC_HDR)));
    
    sVkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.Set(Napi::String::New(env, "textureCompressionASTC_HDR"), obj);
  }
  sVkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT"), sVkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT);
  Napi::Object sVkPhysicalDeviceCooperativeMatrixFeaturesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCooperativeMatrixFeaturesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV::sType)));
    
    sVkPhysicalDeviceCooperativeMatrixFeaturesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCooperativeMatrixFeaturesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV::pNext)));
    
    sVkPhysicalDeviceCooperativeMatrixFeaturesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCooperativeMatrixFeaturesNV, cooperativeMatrix)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV::cooperativeMatrix)));
    
    sVkPhysicalDeviceCooperativeMatrixFeaturesNV.Set(Napi::String::New(env, "cooperativeMatrix"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCooperativeMatrixFeaturesNV, cooperativeMatrixRobustBufferAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV::cooperativeMatrixRobustBufferAccess)));
    
    sVkPhysicalDeviceCooperativeMatrixFeaturesNV.Set(Napi::String::New(env, "cooperativeMatrixRobustBufferAccess"), obj);
  }
  sVkPhysicalDeviceCooperativeMatrixFeaturesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceCooperativeMatrixFeaturesNV"), sVkPhysicalDeviceCooperativeMatrixFeaturesNV);
  Napi::Object sVkPhysicalDeviceCooperativeMatrixPropertiesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCooperativeMatrixPropertiesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV::sType)));
    
    sVkPhysicalDeviceCooperativeMatrixPropertiesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCooperativeMatrixPropertiesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV::pNext)));
    
    sVkPhysicalDeviceCooperativeMatrixPropertiesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCooperativeMatrixPropertiesNV, cooperativeMatrixSupportedStages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV::cooperativeMatrixSupportedStages)));
    
    sVkPhysicalDeviceCooperativeMatrixPropertiesNV.Set(Napi::String::New(env, "cooperativeMatrixSupportedStages"), obj);
  }
  sVkPhysicalDeviceCooperativeMatrixPropertiesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceCooperativeMatrixPropertiesNV"), sVkPhysicalDeviceCooperativeMatrixPropertiesNV);
  Napi::Object sVkCooperativeMatrixPropertiesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCooperativeMatrixPropertiesNV::sType)));
    
    sVkCooperativeMatrixPropertiesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCooperativeMatrixPropertiesNV::pNext)));
    
    sVkCooperativeMatrixPropertiesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, MSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCooperativeMatrixPropertiesNV::MSize)));
    
    sVkCooperativeMatrixPropertiesNV.Set(Napi::String::New(env, "MSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, NSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCooperativeMatrixPropertiesNV::NSize)));
    
    sVkCooperativeMatrixPropertiesNV.Set(Napi::String::New(env, "NSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, KSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCooperativeMatrixPropertiesNV::KSize)));
    
    sVkCooperativeMatrixPropertiesNV.Set(Napi::String::New(env, "KSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, AType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCooperativeMatrixPropertiesNV::AType)));
    
    sVkCooperativeMatrixPropertiesNV.Set(Napi::String::New(env, "AType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, BType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCooperativeMatrixPropertiesNV::BType)));
    
    sVkCooperativeMatrixPropertiesNV.Set(Napi::String::New(env, "BType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, CType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCooperativeMatrixPropertiesNV::CType)));
    
    sVkCooperativeMatrixPropertiesNV.Set(Napi::String::New(env, "CType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, DType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCooperativeMatrixPropertiesNV::DType)));
    
    sVkCooperativeMatrixPropertiesNV.Set(Napi::String::New(env, "DType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, scope)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCooperativeMatrixPropertiesNV::scope)));
    
    sVkCooperativeMatrixPropertiesNV.Set(Napi::String::New(env, "scope"), obj);
  }
  sVkCooperativeMatrixPropertiesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkCooperativeMatrixPropertiesNV)));
  out.Set(Napi::String::New(env, "VkCooperativeMatrixPropertiesNV"), sVkCooperativeMatrixPropertiesNV);
  Napi::Object sVkPhysicalDeviceYcbcrImageArraysFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT::sType)));
    
    sVkPhysicalDeviceYcbcrImageArraysFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceYcbcrImageArraysFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, ycbcrImageArrays)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT::ycbcrImageArrays)));
    
    sVkPhysicalDeviceYcbcrImageArraysFeaturesEXT.Set(Napi::String::New(env, "ycbcrImageArrays"), obj);
  }
  sVkPhysicalDeviceYcbcrImageArraysFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceYcbcrImageArraysFeaturesEXT"), sVkPhysicalDeviceYcbcrImageArraysFeaturesEXT);
  Napi::Object sVkImageViewHandleInfoNVX = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewHandleInfoNVX, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewHandleInfoNVX::sType)));
    
    sVkImageViewHandleInfoNVX.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewHandleInfoNVX, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewHandleInfoNVX::pNext)));
    
    sVkImageViewHandleInfoNVX.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewHandleInfoNVX, imageView)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewHandleInfoNVX::imageView)));
    
    sVkImageViewHandleInfoNVX.Set(Napi::String::New(env, "imageView"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewHandleInfoNVX, descriptorType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewHandleInfoNVX::descriptorType)));
    
    sVkImageViewHandleInfoNVX.Set(Napi::String::New(env, "descriptorType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewHandleInfoNVX, sampler)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewHandleInfoNVX::sampler)));
    
    sVkImageViewHandleInfoNVX.Set(Napi::String::New(env, "sampler"), obj);
  }
  sVkImageViewHandleInfoNVX.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewHandleInfoNVX)));
  out.Set(Napi::String::New(env, "VkImageViewHandleInfoNVX"), sVkImageViewHandleInfoNVX);
  Napi::Object sVkImageViewAddressPropertiesNVX = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewAddressPropertiesNVX, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewAddressPropertiesNVX::sType)));
    
    sVkImageViewAddressPropertiesNVX.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewAddressPropertiesNVX, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewAddressPropertiesNVX::pNext)));
    
    sVkImageViewAddressPropertiesNVX.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewAddressPropertiesNVX, deviceAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewAddressPropertiesNVX::deviceAddress)));
    
    sVkImageViewAddressPropertiesNVX.Set(Napi::String::New(env, "deviceAddress"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageViewAddressPropertiesNVX, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewAddressPropertiesNVX::size)));
    
    sVkImageViewAddressPropertiesNVX.Set(Napi::String::New(env, "size"), obj);
  }
  sVkImageViewAddressPropertiesNVX.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageViewAddressPropertiesNVX)));
  out.Set(Napi::String::New(env, "VkImageViewAddressPropertiesNVX"), sVkImageViewAddressPropertiesNVX);
  Napi::Object sVkPipelineCreationFeedbackEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCreationFeedbackEXT, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCreationFeedbackEXT::flags)));
    
    sVkPipelineCreationFeedbackEXT.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCreationFeedbackEXT, duration)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCreationFeedbackEXT::duration)));
    
    sVkPipelineCreationFeedbackEXT.Set(Napi::String::New(env, "duration"), obj);
  }
  sVkPipelineCreationFeedbackEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCreationFeedbackEXT)));
  out.Set(Napi::String::New(env, "VkPipelineCreationFeedbackEXT"), sVkPipelineCreationFeedbackEXT);
  Napi::Object sVkPipelineCreationFeedbackCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCreationFeedbackCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCreationFeedbackCreateInfoEXT::sType)));
    
    sVkPipelineCreationFeedbackCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCreationFeedbackCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCreationFeedbackCreateInfoEXT::pNext)));
    
    sVkPipelineCreationFeedbackCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCreationFeedbackCreateInfoEXT, pPipelineCreationFeedback)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCreationFeedbackCreateInfoEXT::pPipelineCreationFeedback)));
    
    sVkPipelineCreationFeedbackCreateInfoEXT.Set(Napi::String::New(env, "pPipelineCreationFeedback"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCreationFeedbackCreateInfoEXT, pipelineStageCreationFeedbackCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCreationFeedbackCreateInfoEXT::pipelineStageCreationFeedbackCount)));
    
    sVkPipelineCreationFeedbackCreateInfoEXT.Set(Napi::String::New(env, "pipelineStageCreationFeedbackCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCreationFeedbackCreateInfoEXT, pPipelineStageCreationFeedbacks)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCreationFeedbackCreateInfoEXT::pPipelineStageCreationFeedbacks)));
    
    sVkPipelineCreationFeedbackCreateInfoEXT.Set(Napi::String::New(env, "pPipelineStageCreationFeedbacks"), obj);
  }
  sVkPipelineCreationFeedbackCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCreationFeedbackCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkPipelineCreationFeedbackCreateInfoEXT"), sVkPipelineCreationFeedbackCreateInfoEXT);
  Napi::Object sVkSurfaceFullScreenExclusiveInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceFullScreenExclusiveInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceFullScreenExclusiveInfoEXT::sType)));
    
    sVkSurfaceFullScreenExclusiveInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceFullScreenExclusiveInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceFullScreenExclusiveInfoEXT::pNext)));
    
    sVkSurfaceFullScreenExclusiveInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceFullScreenExclusiveInfoEXT, fullScreenExclusive)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceFullScreenExclusiveInfoEXT::fullScreenExclusive)));
    
    sVkSurfaceFullScreenExclusiveInfoEXT.Set(Napi::String::New(env, "fullScreenExclusive"), obj);
  }
  sVkSurfaceFullScreenExclusiveInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceFullScreenExclusiveInfoEXT)));
  out.Set(Napi::String::New(env, "VkSurfaceFullScreenExclusiveInfoEXT"), sVkSurfaceFullScreenExclusiveInfoEXT);
  Napi::Object sVkSurfaceFullScreenExclusiveWin32InfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceFullScreenExclusiveWin32InfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceFullScreenExclusiveWin32InfoEXT::sType)));
    
    sVkSurfaceFullScreenExclusiveWin32InfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceFullScreenExclusiveWin32InfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceFullScreenExclusiveWin32InfoEXT::pNext)));
    
    sVkSurfaceFullScreenExclusiveWin32InfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceFullScreenExclusiveWin32InfoEXT, hmonitor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceFullScreenExclusiveWin32InfoEXT::hmonitor)));
    
    sVkSurfaceFullScreenExclusiveWin32InfoEXT.Set(Napi::String::New(env, "hmonitor"), obj);
  }
  sVkSurfaceFullScreenExclusiveWin32InfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceFullScreenExclusiveWin32InfoEXT)));
  out.Set(Napi::String::New(env, "VkSurfaceFullScreenExclusiveWin32InfoEXT"), sVkSurfaceFullScreenExclusiveWin32InfoEXT);
  Napi::Object sVkSurfaceCapabilitiesFullScreenExclusiveEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesFullScreenExclusiveEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesFullScreenExclusiveEXT::sType)));
    
    sVkSurfaceCapabilitiesFullScreenExclusiveEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesFullScreenExclusiveEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesFullScreenExclusiveEXT::pNext)));
    
    sVkSurfaceCapabilitiesFullScreenExclusiveEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesFullScreenExclusiveEXT, fullScreenExclusiveSupported)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesFullScreenExclusiveEXT::fullScreenExclusiveSupported)));
    
    sVkSurfaceCapabilitiesFullScreenExclusiveEXT.Set(Napi::String::New(env, "fullScreenExclusiveSupported"), obj);
  }
  sVkSurfaceCapabilitiesFullScreenExclusiveEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesFullScreenExclusiveEXT)));
  out.Set(Napi::String::New(env, "VkSurfaceCapabilitiesFullScreenExclusiveEXT"), sVkSurfaceCapabilitiesFullScreenExclusiveEXT);
  Napi::Object sVkPhysicalDevicePerformanceQueryFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePerformanceQueryFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePerformanceQueryFeaturesKHR::sType)));
    
    sVkPhysicalDevicePerformanceQueryFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePerformanceQueryFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePerformanceQueryFeaturesKHR::pNext)));
    
    sVkPhysicalDevicePerformanceQueryFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePerformanceQueryFeaturesKHR, performanceCounterQueryPools)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePerformanceQueryFeaturesKHR::performanceCounterQueryPools)));
    
    sVkPhysicalDevicePerformanceQueryFeaturesKHR.Set(Napi::String::New(env, "performanceCounterQueryPools"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePerformanceQueryFeaturesKHR, performanceCounterMultipleQueryPools)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePerformanceQueryFeaturesKHR::performanceCounterMultipleQueryPools)));
    
    sVkPhysicalDevicePerformanceQueryFeaturesKHR.Set(Napi::String::New(env, "performanceCounterMultipleQueryPools"), obj);
  }
  sVkPhysicalDevicePerformanceQueryFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePerformanceQueryFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDevicePerformanceQueryFeaturesKHR"), sVkPhysicalDevicePerformanceQueryFeaturesKHR);
  Napi::Object sVkPhysicalDevicePerformanceQueryPropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePerformanceQueryPropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePerformanceQueryPropertiesKHR::sType)));
    
    sVkPhysicalDevicePerformanceQueryPropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePerformanceQueryPropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePerformanceQueryPropertiesKHR::pNext)));
    
    sVkPhysicalDevicePerformanceQueryPropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePerformanceQueryPropertiesKHR, allowCommandBufferQueryCopies)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePerformanceQueryPropertiesKHR::allowCommandBufferQueryCopies)));
    
    sVkPhysicalDevicePerformanceQueryPropertiesKHR.Set(Napi::String::New(env, "allowCommandBufferQueryCopies"), obj);
  }
  sVkPhysicalDevicePerformanceQueryPropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePerformanceQueryPropertiesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDevicePerformanceQueryPropertiesKHR"), sVkPhysicalDevicePerformanceQueryPropertiesKHR);
  Napi::Object sVkPerformanceCounterKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterKHR::sType)));
    
    sVkPerformanceCounterKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterKHR::pNext)));
    
    sVkPerformanceCounterKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterKHR, unit)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterKHR::unit)));
    
    sVkPerformanceCounterKHR.Set(Napi::String::New(env, "unit"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterKHR, scope)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterKHR::scope)));
    
    sVkPerformanceCounterKHR.Set(Napi::String::New(env, "scope"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterKHR, storage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterKHR::storage)));
    
    sVkPerformanceCounterKHR.Set(Napi::String::New(env, "storage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterKHR, uuid)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterKHR::uuid)));
    
    sVkPerformanceCounterKHR.Set(Napi::String::New(env, "uuid"), obj);
  }
  sVkPerformanceCounterKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterKHR)));
  out.Set(Napi::String::New(env, "VkPerformanceCounterKHR"), sVkPerformanceCounterKHR);
  Napi::Object sVkPerformanceCounterDescriptionKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterDescriptionKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterDescriptionKHR::sType)));
    
    sVkPerformanceCounterDescriptionKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterDescriptionKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterDescriptionKHR::pNext)));
    
    sVkPerformanceCounterDescriptionKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterDescriptionKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterDescriptionKHR::flags)));
    
    sVkPerformanceCounterDescriptionKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterDescriptionKHR, name)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterDescriptionKHR::name)));
    
    sVkPerformanceCounterDescriptionKHR.Set(Napi::String::New(env, "name"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterDescriptionKHR, category)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterDescriptionKHR::category)));
    
    sVkPerformanceCounterDescriptionKHR.Set(Napi::String::New(env, "category"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceCounterDescriptionKHR, description)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterDescriptionKHR::description)));
    
    sVkPerformanceCounterDescriptionKHR.Set(Napi::String::New(env, "description"), obj);
  }
  sVkPerformanceCounterDescriptionKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceCounterDescriptionKHR)));
  out.Set(Napi::String::New(env, "VkPerformanceCounterDescriptionKHR"), sVkPerformanceCounterDescriptionKHR);
  Napi::Object sVkQueryPoolPerformanceCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolPerformanceCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolPerformanceCreateInfoKHR::sType)));
    
    sVkQueryPoolPerformanceCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolPerformanceCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolPerformanceCreateInfoKHR::pNext)));
    
    sVkQueryPoolPerformanceCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolPerformanceCreateInfoKHR, queueFamilyIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolPerformanceCreateInfoKHR::queueFamilyIndex)));
    
    sVkQueryPoolPerformanceCreateInfoKHR.Set(Napi::String::New(env, "queueFamilyIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolPerformanceCreateInfoKHR, counterIndexCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolPerformanceCreateInfoKHR::counterIndexCount)));
    
    sVkQueryPoolPerformanceCreateInfoKHR.Set(Napi::String::New(env, "counterIndexCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolPerformanceCreateInfoKHR, pCounterIndices)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolPerformanceCreateInfoKHR::pCounterIndices)));
    
    sVkQueryPoolPerformanceCreateInfoKHR.Set(Napi::String::New(env, "pCounterIndices"), obj);
  }
  sVkQueryPoolPerformanceCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolPerformanceCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkQueryPoolPerformanceCreateInfoKHR"), sVkQueryPoolPerformanceCreateInfoKHR);
  Napi::Object sVkAcquireProfilingLockInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAcquireProfilingLockInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAcquireProfilingLockInfoKHR::sType)));
    
    sVkAcquireProfilingLockInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAcquireProfilingLockInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAcquireProfilingLockInfoKHR::pNext)));
    
    sVkAcquireProfilingLockInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAcquireProfilingLockInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAcquireProfilingLockInfoKHR::flags)));
    
    sVkAcquireProfilingLockInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAcquireProfilingLockInfoKHR, timeout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAcquireProfilingLockInfoKHR::timeout)));
    
    sVkAcquireProfilingLockInfoKHR.Set(Napi::String::New(env, "timeout"), obj);
  }
  sVkAcquireProfilingLockInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAcquireProfilingLockInfoKHR)));
  out.Set(Napi::String::New(env, "VkAcquireProfilingLockInfoKHR"), sVkAcquireProfilingLockInfoKHR);
  Napi::Object sVkPerformanceQuerySubmitInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceQuerySubmitInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceQuerySubmitInfoKHR::sType)));
    
    sVkPerformanceQuerySubmitInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceQuerySubmitInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceQuerySubmitInfoKHR::pNext)));
    
    sVkPerformanceQuerySubmitInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceQuerySubmitInfoKHR, counterPassIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceQuerySubmitInfoKHR::counterPassIndex)));
    
    sVkPerformanceQuerySubmitInfoKHR.Set(Napi::String::New(env, "counterPassIndex"), obj);
  }
  sVkPerformanceQuerySubmitInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceQuerySubmitInfoKHR)));
  out.Set(Napi::String::New(env, "VkPerformanceQuerySubmitInfoKHR"), sVkPerformanceQuerySubmitInfoKHR);
  Napi::Object sVkHeadlessSurfaceCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkHeadlessSurfaceCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkHeadlessSurfaceCreateInfoEXT::sType)));
    
    sVkHeadlessSurfaceCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkHeadlessSurfaceCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkHeadlessSurfaceCreateInfoEXT::pNext)));
    
    sVkHeadlessSurfaceCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkHeadlessSurfaceCreateInfoEXT, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkHeadlessSurfaceCreateInfoEXT::flags)));
    
    sVkHeadlessSurfaceCreateInfoEXT.Set(Napi::String::New(env, "flags"), obj);
  }
  sVkHeadlessSurfaceCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkHeadlessSurfaceCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkHeadlessSurfaceCreateInfoEXT"), sVkHeadlessSurfaceCreateInfoEXT);
  Napi::Object sVkPhysicalDeviceCoverageReductionModeFeaturesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCoverageReductionModeFeaturesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCoverageReductionModeFeaturesNV::sType)));
    
    sVkPhysicalDeviceCoverageReductionModeFeaturesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCoverageReductionModeFeaturesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCoverageReductionModeFeaturesNV::pNext)));
    
    sVkPhysicalDeviceCoverageReductionModeFeaturesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCoverageReductionModeFeaturesNV, coverageReductionMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCoverageReductionModeFeaturesNV::coverageReductionMode)));
    
    sVkPhysicalDeviceCoverageReductionModeFeaturesNV.Set(Napi::String::New(env, "coverageReductionMode"), obj);
  }
  sVkPhysicalDeviceCoverageReductionModeFeaturesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCoverageReductionModeFeaturesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceCoverageReductionModeFeaturesNV"), sVkPhysicalDeviceCoverageReductionModeFeaturesNV);
  Napi::Object sVkPipelineCoverageReductionStateCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageReductionStateCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageReductionStateCreateInfoNV::sType)));
    
    sVkPipelineCoverageReductionStateCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageReductionStateCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageReductionStateCreateInfoNV::pNext)));
    
    sVkPipelineCoverageReductionStateCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageReductionStateCreateInfoNV, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageReductionStateCreateInfoNV::flags)));
    
    sVkPipelineCoverageReductionStateCreateInfoNV.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCoverageReductionStateCreateInfoNV, coverageReductionMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageReductionStateCreateInfoNV::coverageReductionMode)));
    
    sVkPipelineCoverageReductionStateCreateInfoNV.Set(Napi::String::New(env, "coverageReductionMode"), obj);
  }
  sVkPipelineCoverageReductionStateCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCoverageReductionStateCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkPipelineCoverageReductionStateCreateInfoNV"), sVkPipelineCoverageReductionStateCreateInfoNV);
  Napi::Object sVkFramebufferMixedSamplesCombinationNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferMixedSamplesCombinationNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferMixedSamplesCombinationNV::sType)));
    
    sVkFramebufferMixedSamplesCombinationNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferMixedSamplesCombinationNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferMixedSamplesCombinationNV::pNext)));
    
    sVkFramebufferMixedSamplesCombinationNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferMixedSamplesCombinationNV, coverageReductionMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferMixedSamplesCombinationNV::coverageReductionMode)));
    
    sVkFramebufferMixedSamplesCombinationNV.Set(Napi::String::New(env, "coverageReductionMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferMixedSamplesCombinationNV, rasterizationSamples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferMixedSamplesCombinationNV::rasterizationSamples)));
    
    sVkFramebufferMixedSamplesCombinationNV.Set(Napi::String::New(env, "rasterizationSamples"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferMixedSamplesCombinationNV, depthStencilSamples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferMixedSamplesCombinationNV::depthStencilSamples)));
    
    sVkFramebufferMixedSamplesCombinationNV.Set(Napi::String::New(env, "depthStencilSamples"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFramebufferMixedSamplesCombinationNV, colorSamples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferMixedSamplesCombinationNV::colorSamples)));
    
    sVkFramebufferMixedSamplesCombinationNV.Set(Napi::String::New(env, "colorSamples"), obj);
  }
  sVkFramebufferMixedSamplesCombinationNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkFramebufferMixedSamplesCombinationNV)));
  out.Set(Napi::String::New(env, "VkFramebufferMixedSamplesCombinationNV"), sVkFramebufferMixedSamplesCombinationNV);
  Napi::Object sVkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL::sType)));
    
    sVkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL::pNext)));
    
    sVkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL, shaderIntegerFunctions2)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL::shaderIntegerFunctions2)));
    
    sVkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.Set(Napi::String::New(env, "shaderIntegerFunctions2"), obj);
  }
  sVkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL"), sVkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL);
  Napi::Object sVkPerformanceValueINTEL = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceValueINTEL, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceValueINTEL::type)));
    
    sVkPerformanceValueINTEL.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceValueINTEL, data)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceValueINTEL::data)));
    
    sVkPerformanceValueINTEL.Set(Napi::String::New(env, "data"), obj);
  }
  sVkPerformanceValueINTEL.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceValueINTEL)));
  out.Set(Napi::String::New(env, "VkPerformanceValueINTEL"), sVkPerformanceValueINTEL);
  Napi::Object sVkInitializePerformanceApiInfoINTEL = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInitializePerformanceApiInfoINTEL, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInitializePerformanceApiInfoINTEL::sType)));
    
    sVkInitializePerformanceApiInfoINTEL.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInitializePerformanceApiInfoINTEL, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInitializePerformanceApiInfoINTEL::pNext)));
    
    sVkInitializePerformanceApiInfoINTEL.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkInitializePerformanceApiInfoINTEL, pUserData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkInitializePerformanceApiInfoINTEL::pUserData)));
    
    sVkInitializePerformanceApiInfoINTEL.Set(Napi::String::New(env, "pUserData"), obj);
  }
  sVkInitializePerformanceApiInfoINTEL.Set(strByteLength, Napi::Number::New(env, sizeof(VkInitializePerformanceApiInfoINTEL)));
  out.Set(Napi::String::New(env, "VkInitializePerformanceApiInfoINTEL"), sVkInitializePerformanceApiInfoINTEL);
  Napi::Object sVkQueryPoolPerformanceQueryCreateInfoINTEL = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolPerformanceQueryCreateInfoINTEL, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolPerformanceQueryCreateInfoINTEL::sType)));
    
    sVkQueryPoolPerformanceQueryCreateInfoINTEL.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolPerformanceQueryCreateInfoINTEL, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolPerformanceQueryCreateInfoINTEL::pNext)));
    
    sVkQueryPoolPerformanceQueryCreateInfoINTEL.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolPerformanceQueryCreateInfoINTEL, performanceCountersSampling)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolPerformanceQueryCreateInfoINTEL::performanceCountersSampling)));
    
    sVkQueryPoolPerformanceQueryCreateInfoINTEL.Set(Napi::String::New(env, "performanceCountersSampling"), obj);
  }
  sVkQueryPoolPerformanceQueryCreateInfoINTEL.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolPerformanceQueryCreateInfoINTEL)));
  out.Set(Napi::String::New(env, "VkQueryPoolPerformanceQueryCreateInfoINTEL"), sVkQueryPoolPerformanceQueryCreateInfoINTEL);
  Napi::Object sVkQueryPoolCreateInfoINTEL = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolCreateInfoINTEL, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolCreateInfoINTEL::sType)));
    
    sVkQueryPoolCreateInfoINTEL.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolCreateInfoINTEL, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolCreateInfoINTEL::pNext)));
    
    sVkQueryPoolCreateInfoINTEL.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkQueryPoolCreateInfoINTEL, performanceCountersSampling)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolCreateInfoINTEL::performanceCountersSampling)));
    
    sVkQueryPoolCreateInfoINTEL.Set(Napi::String::New(env, "performanceCountersSampling"), obj);
  }
  sVkQueryPoolCreateInfoINTEL.Set(strByteLength, Napi::Number::New(env, sizeof(VkQueryPoolCreateInfoINTEL)));
  out.Set(Napi::String::New(env, "VkQueryPoolCreateInfoINTEL"), sVkQueryPoolCreateInfoINTEL);
  Napi::Object sVkPerformanceMarkerInfoINTEL = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceMarkerInfoINTEL, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceMarkerInfoINTEL::sType)));
    
    sVkPerformanceMarkerInfoINTEL.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceMarkerInfoINTEL, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceMarkerInfoINTEL::pNext)));
    
    sVkPerformanceMarkerInfoINTEL.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceMarkerInfoINTEL, marker)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceMarkerInfoINTEL::marker)));
    
    sVkPerformanceMarkerInfoINTEL.Set(Napi::String::New(env, "marker"), obj);
  }
  sVkPerformanceMarkerInfoINTEL.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceMarkerInfoINTEL)));
  out.Set(Napi::String::New(env, "VkPerformanceMarkerInfoINTEL"), sVkPerformanceMarkerInfoINTEL);
  Napi::Object sVkPerformanceStreamMarkerInfoINTEL = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceStreamMarkerInfoINTEL, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceStreamMarkerInfoINTEL::sType)));
    
    sVkPerformanceStreamMarkerInfoINTEL.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceStreamMarkerInfoINTEL, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceStreamMarkerInfoINTEL::pNext)));
    
    sVkPerformanceStreamMarkerInfoINTEL.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceStreamMarkerInfoINTEL, marker)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceStreamMarkerInfoINTEL::marker)));
    
    sVkPerformanceStreamMarkerInfoINTEL.Set(Napi::String::New(env, "marker"), obj);
  }
  sVkPerformanceStreamMarkerInfoINTEL.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceStreamMarkerInfoINTEL)));
  out.Set(Napi::String::New(env, "VkPerformanceStreamMarkerInfoINTEL"), sVkPerformanceStreamMarkerInfoINTEL);
  Napi::Object sVkPerformanceOverrideInfoINTEL = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceOverrideInfoINTEL, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceOverrideInfoINTEL::sType)));
    
    sVkPerformanceOverrideInfoINTEL.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceOverrideInfoINTEL, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceOverrideInfoINTEL::pNext)));
    
    sVkPerformanceOverrideInfoINTEL.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceOverrideInfoINTEL, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceOverrideInfoINTEL::type)));
    
    sVkPerformanceOverrideInfoINTEL.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceOverrideInfoINTEL, enable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceOverrideInfoINTEL::enable)));
    
    sVkPerformanceOverrideInfoINTEL.Set(Napi::String::New(env, "enable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceOverrideInfoINTEL, parameter)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceOverrideInfoINTEL::parameter)));
    
    sVkPerformanceOverrideInfoINTEL.Set(Napi::String::New(env, "parameter"), obj);
  }
  sVkPerformanceOverrideInfoINTEL.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceOverrideInfoINTEL)));
  out.Set(Napi::String::New(env, "VkPerformanceOverrideInfoINTEL"), sVkPerformanceOverrideInfoINTEL);
  Napi::Object sVkPerformanceConfigurationAcquireInfoINTEL = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceConfigurationAcquireInfoINTEL, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceConfigurationAcquireInfoINTEL::sType)));
    
    sVkPerformanceConfigurationAcquireInfoINTEL.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceConfigurationAcquireInfoINTEL, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceConfigurationAcquireInfoINTEL::pNext)));
    
    sVkPerformanceConfigurationAcquireInfoINTEL.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPerformanceConfigurationAcquireInfoINTEL, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceConfigurationAcquireInfoINTEL::type)));
    
    sVkPerformanceConfigurationAcquireInfoINTEL.Set(Napi::String::New(env, "type"), obj);
  }
  sVkPerformanceConfigurationAcquireInfoINTEL.Set(strByteLength, Napi::Number::New(env, sizeof(VkPerformanceConfigurationAcquireInfoINTEL)));
  out.Set(Napi::String::New(env, "VkPerformanceConfigurationAcquireInfoINTEL"), sVkPerformanceConfigurationAcquireInfoINTEL);
  Napi::Object sVkPhysicalDeviceShaderClockFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderClockFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderClockFeaturesKHR::sType)));
    
    sVkPhysicalDeviceShaderClockFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderClockFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderClockFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceShaderClockFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderClockFeaturesKHR, shaderSubgroupClock)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderClockFeaturesKHR::shaderSubgroupClock)));
    
    sVkPhysicalDeviceShaderClockFeaturesKHR.Set(Napi::String::New(env, "shaderSubgroupClock"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderClockFeaturesKHR, shaderDeviceClock)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderClockFeaturesKHR::shaderDeviceClock)));
    
    sVkPhysicalDeviceShaderClockFeaturesKHR.Set(Napi::String::New(env, "shaderDeviceClock"), obj);
  }
  sVkPhysicalDeviceShaderClockFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderClockFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderClockFeaturesKHR"), sVkPhysicalDeviceShaderClockFeaturesKHR);
  Napi::Object sVkPhysicalDeviceIndexTypeUint8FeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT::sType)));
    
    sVkPhysicalDeviceIndexTypeUint8FeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT::pNext)));
    
    sVkPhysicalDeviceIndexTypeUint8FeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT, indexTypeUint8)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT::indexTypeUint8)));
    
    sVkPhysicalDeviceIndexTypeUint8FeaturesEXT.Set(Napi::String::New(env, "indexTypeUint8"), obj);
  }
  sVkPhysicalDeviceIndexTypeUint8FeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceIndexTypeUint8FeaturesEXT"), sVkPhysicalDeviceIndexTypeUint8FeaturesEXT);
  Napi::Object sVkPhysicalDeviceShaderSMBuiltinsPropertiesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV::sType)));
    
    sVkPhysicalDeviceShaderSMBuiltinsPropertiesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV::pNext)));
    
    sVkPhysicalDeviceShaderSMBuiltinsPropertiesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV, shaderSMCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV::shaderSMCount)));
    
    sVkPhysicalDeviceShaderSMBuiltinsPropertiesNV.Set(Napi::String::New(env, "shaderSMCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV, shaderWarpsPerSM)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV::shaderWarpsPerSM)));
    
    sVkPhysicalDeviceShaderSMBuiltinsPropertiesNV.Set(Napi::String::New(env, "shaderWarpsPerSM"), obj);
  }
  sVkPhysicalDeviceShaderSMBuiltinsPropertiesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderSMBuiltinsPropertiesNV"), sVkPhysicalDeviceShaderSMBuiltinsPropertiesNV);
  Napi::Object sVkPhysicalDeviceShaderSMBuiltinsFeaturesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV::sType)));
    
    sVkPhysicalDeviceShaderSMBuiltinsFeaturesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV::pNext)));
    
    sVkPhysicalDeviceShaderSMBuiltinsFeaturesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV, shaderSMBuiltins)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV::shaderSMBuiltins)));
    
    sVkPhysicalDeviceShaderSMBuiltinsFeaturesNV.Set(Napi::String::New(env, "shaderSMBuiltins"), obj);
  }
  sVkPhysicalDeviceShaderSMBuiltinsFeaturesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderSMBuiltinsFeaturesNV"), sVkPhysicalDeviceShaderSMBuiltinsFeaturesNV);
  Napi::Object sVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::sType)));
    
    sVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, fragmentShaderSampleInterlock)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::fragmentShaderSampleInterlock)));
    
    sVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.Set(Napi::String::New(env, "fragmentShaderSampleInterlock"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, fragmentShaderPixelInterlock)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::fragmentShaderPixelInterlock)));
    
    sVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.Set(Napi::String::New(env, "fragmentShaderPixelInterlock"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, fragmentShaderShadingRateInterlock)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::fragmentShaderShadingRateInterlock)));
    
    sVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.Set(Napi::String::New(env, "fragmentShaderShadingRateInterlock"), obj);
  }
  sVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT"), sVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT);
  Napi::Object sVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures::sType)));
    
    sVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures::pNext)));
    
    sVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, separateDepthStencilLayouts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures::separateDepthStencilLayouts)));
    
    sVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.Set(Napi::String::New(env, "separateDepthStencilLayouts"), obj);
  }
  sVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures"), sVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures);
  Napi::Object sVkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR::sType)));
    
    sVkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR, separateDepthStencilLayouts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR::separateDepthStencilLayouts)));
    
    sVkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR.Set(Napi::String::New(env, "separateDepthStencilLayouts"), obj);
  }
  sVkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR"), sVkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR);
  Napi::Object sVkAttachmentReferenceStencilLayout = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReferenceStencilLayout, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReferenceStencilLayout::sType)));
    
    sVkAttachmentReferenceStencilLayout.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReferenceStencilLayout, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReferenceStencilLayout::pNext)));
    
    sVkAttachmentReferenceStencilLayout.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReferenceStencilLayout, stencilLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReferenceStencilLayout::stencilLayout)));
    
    sVkAttachmentReferenceStencilLayout.Set(Napi::String::New(env, "stencilLayout"), obj);
  }
  sVkAttachmentReferenceStencilLayout.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReferenceStencilLayout)));
  out.Set(Napi::String::New(env, "VkAttachmentReferenceStencilLayout"), sVkAttachmentReferenceStencilLayout);
  Napi::Object sVkAttachmentReferenceStencilLayoutKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReferenceStencilLayoutKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReferenceStencilLayoutKHR::sType)));
    
    sVkAttachmentReferenceStencilLayoutKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReferenceStencilLayoutKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReferenceStencilLayoutKHR::pNext)));
    
    sVkAttachmentReferenceStencilLayoutKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentReferenceStencilLayoutKHR, stencilLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReferenceStencilLayoutKHR::stencilLayout)));
    
    sVkAttachmentReferenceStencilLayoutKHR.Set(Napi::String::New(env, "stencilLayout"), obj);
  }
  sVkAttachmentReferenceStencilLayoutKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentReferenceStencilLayoutKHR)));
  out.Set(Napi::String::New(env, "VkAttachmentReferenceStencilLayoutKHR"), sVkAttachmentReferenceStencilLayoutKHR);
  Napi::Object sVkAttachmentDescriptionStencilLayout = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescriptionStencilLayout, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescriptionStencilLayout::sType)));
    
    sVkAttachmentDescriptionStencilLayout.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescriptionStencilLayout, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescriptionStencilLayout::pNext)));
    
    sVkAttachmentDescriptionStencilLayout.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescriptionStencilLayout, stencilInitialLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescriptionStencilLayout::stencilInitialLayout)));
    
    sVkAttachmentDescriptionStencilLayout.Set(Napi::String::New(env, "stencilInitialLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescriptionStencilLayout, stencilFinalLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescriptionStencilLayout::stencilFinalLayout)));
    
    sVkAttachmentDescriptionStencilLayout.Set(Napi::String::New(env, "stencilFinalLayout"), obj);
  }
  sVkAttachmentDescriptionStencilLayout.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescriptionStencilLayout)));
  out.Set(Napi::String::New(env, "VkAttachmentDescriptionStencilLayout"), sVkAttachmentDescriptionStencilLayout);
  Napi::Object sVkAttachmentDescriptionStencilLayoutKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescriptionStencilLayoutKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescriptionStencilLayoutKHR::sType)));
    
    sVkAttachmentDescriptionStencilLayoutKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescriptionStencilLayoutKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescriptionStencilLayoutKHR::pNext)));
    
    sVkAttachmentDescriptionStencilLayoutKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescriptionStencilLayoutKHR, stencilInitialLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescriptionStencilLayoutKHR::stencilInitialLayout)));
    
    sVkAttachmentDescriptionStencilLayoutKHR.Set(Napi::String::New(env, "stencilInitialLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAttachmentDescriptionStencilLayoutKHR, stencilFinalLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescriptionStencilLayoutKHR::stencilFinalLayout)));
    
    sVkAttachmentDescriptionStencilLayoutKHR.Set(Napi::String::New(env, "stencilFinalLayout"), obj);
  }
  sVkAttachmentDescriptionStencilLayoutKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAttachmentDescriptionStencilLayoutKHR)));
  out.Set(Napi::String::New(env, "VkAttachmentDescriptionStencilLayoutKHR"), sVkAttachmentDescriptionStencilLayoutKHR);
  Napi::Object sVkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR::sType)));
    
    sVkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR::pNext)));
    
    sVkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR, pipelineExecutableInfo)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR::pipelineExecutableInfo)));
    
    sVkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.Set(Napi::String::New(env, "pipelineExecutableInfo"), obj);
  }
  sVkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR"), sVkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR);
  Napi::Object sVkPipelineInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineInfoKHR::sType)));
    
    sVkPipelineInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineInfoKHR::pNext)));
    
    sVkPipelineInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineInfoKHR, pipeline)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineInfoKHR::pipeline)));
    
    sVkPipelineInfoKHR.Set(Napi::String::New(env, "pipeline"), obj);
  }
  sVkPipelineInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineInfoKHR)));
  out.Set(Napi::String::New(env, "VkPipelineInfoKHR"), sVkPipelineInfoKHR);
  Napi::Object sVkPipelineExecutablePropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutablePropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutablePropertiesKHR::sType)));
    
    sVkPipelineExecutablePropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutablePropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutablePropertiesKHR::pNext)));
    
    sVkPipelineExecutablePropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutablePropertiesKHR, stages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutablePropertiesKHR::stages)));
    
    sVkPipelineExecutablePropertiesKHR.Set(Napi::String::New(env, "stages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutablePropertiesKHR, name)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutablePropertiesKHR::name)));
    
    sVkPipelineExecutablePropertiesKHR.Set(Napi::String::New(env, "name"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutablePropertiesKHR, description)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutablePropertiesKHR::description)));
    
    sVkPipelineExecutablePropertiesKHR.Set(Napi::String::New(env, "description"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutablePropertiesKHR, subgroupSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutablePropertiesKHR::subgroupSize)));
    
    sVkPipelineExecutablePropertiesKHR.Set(Napi::String::New(env, "subgroupSize"), obj);
  }
  sVkPipelineExecutablePropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutablePropertiesKHR)));
  out.Set(Napi::String::New(env, "VkPipelineExecutablePropertiesKHR"), sVkPipelineExecutablePropertiesKHR);
  Napi::Object sVkPipelineExecutableInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableInfoKHR::sType)));
    
    sVkPipelineExecutableInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableInfoKHR::pNext)));
    
    sVkPipelineExecutableInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableInfoKHR, pipeline)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableInfoKHR::pipeline)));
    
    sVkPipelineExecutableInfoKHR.Set(Napi::String::New(env, "pipeline"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableInfoKHR, executableIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableInfoKHR::executableIndex)));
    
    sVkPipelineExecutableInfoKHR.Set(Napi::String::New(env, "executableIndex"), obj);
  }
  sVkPipelineExecutableInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableInfoKHR)));
  out.Set(Napi::String::New(env, "VkPipelineExecutableInfoKHR"), sVkPipelineExecutableInfoKHR);
  Napi::Object sVkPipelineExecutableStatisticKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableStatisticKHR::sType)));
    
    sVkPipelineExecutableStatisticKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableStatisticKHR::pNext)));
    
    sVkPipelineExecutableStatisticKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticKHR, name)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableStatisticKHR::name)));
    
    sVkPipelineExecutableStatisticKHR.Set(Napi::String::New(env, "name"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticKHR, description)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableStatisticKHR::description)));
    
    sVkPipelineExecutableStatisticKHR.Set(Napi::String::New(env, "description"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticKHR, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableStatisticKHR::format)));
    
    sVkPipelineExecutableStatisticKHR.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticKHR, value)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableStatisticKHR::value)));
    
    sVkPipelineExecutableStatisticKHR.Set(Napi::String::New(env, "value"), obj);
  }
  sVkPipelineExecutableStatisticKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableStatisticKHR)));
  out.Set(Napi::String::New(env, "VkPipelineExecutableStatisticKHR"), sVkPipelineExecutableStatisticKHR);
  Napi::Object sVkPipelineExecutableInternalRepresentationKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableInternalRepresentationKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableInternalRepresentationKHR::sType)));
    
    sVkPipelineExecutableInternalRepresentationKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableInternalRepresentationKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableInternalRepresentationKHR::pNext)));
    
    sVkPipelineExecutableInternalRepresentationKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableInternalRepresentationKHR, name)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableInternalRepresentationKHR::name)));
    
    sVkPipelineExecutableInternalRepresentationKHR.Set(Napi::String::New(env, "name"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableInternalRepresentationKHR, description)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableInternalRepresentationKHR::description)));
    
    sVkPipelineExecutableInternalRepresentationKHR.Set(Napi::String::New(env, "description"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableInternalRepresentationKHR, isText)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableInternalRepresentationKHR::isText)));
    
    sVkPipelineExecutableInternalRepresentationKHR.Set(Napi::String::New(env, "isText"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableInternalRepresentationKHR, dataSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableInternalRepresentationKHR::dataSize)));
    
    sVkPipelineExecutableInternalRepresentationKHR.Set(Napi::String::New(env, "dataSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineExecutableInternalRepresentationKHR, pData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableInternalRepresentationKHR::pData)));
    
    sVkPipelineExecutableInternalRepresentationKHR.Set(Napi::String::New(env, "pData"), obj);
  }
  sVkPipelineExecutableInternalRepresentationKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineExecutableInternalRepresentationKHR)));
  out.Set(Napi::String::New(env, "VkPipelineExecutableInternalRepresentationKHR"), sVkPipelineExecutableInternalRepresentationKHR);
  Napi::Object sVkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT::sType)));
    
    sVkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT, shaderDemoteToHelperInvocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT::shaderDemoteToHelperInvocation)));
    
    sVkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.Set(Napi::String::New(env, "shaderDemoteToHelperInvocation"), obj);
  }
  sVkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT"), sVkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT);
  Napi::Object sVkPhysicalDeviceTexelBufferAlignmentFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT::sType)));
    
    sVkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, texelBufferAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT::texelBufferAlignment)));
    
    sVkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.Set(Napi::String::New(env, "texelBufferAlignment"), obj);
  }
  sVkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT"), sVkPhysicalDeviceTexelBufferAlignmentFeaturesEXT);
  Napi::Object sVkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT::sType)));
    
    sVkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT, storageTexelBufferOffsetAlignmentBytes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT::storageTexelBufferOffsetAlignmentBytes)));
    
    sVkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.Set(Napi::String::New(env, "storageTexelBufferOffsetAlignmentBytes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT, storageTexelBufferOffsetSingleTexelAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT::storageTexelBufferOffsetSingleTexelAlignment)));
    
    sVkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.Set(Napi::String::New(env, "storageTexelBufferOffsetSingleTexelAlignment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT, uniformTexelBufferOffsetAlignmentBytes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT::uniformTexelBufferOffsetAlignmentBytes)));
    
    sVkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.Set(Napi::String::New(env, "uniformTexelBufferOffsetAlignmentBytes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT, uniformTexelBufferOffsetSingleTexelAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT::uniformTexelBufferOffsetSingleTexelAlignment)));
    
    sVkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.Set(Napi::String::New(env, "uniformTexelBufferOffsetSingleTexelAlignment"), obj);
  }
  sVkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT"), sVkPhysicalDeviceTexelBufferAlignmentPropertiesEXT);
  Napi::Object sVkPhysicalDeviceSubgroupSizeControlFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT::sType)));
    
    sVkPhysicalDeviceSubgroupSizeControlFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceSubgroupSizeControlFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT, subgroupSizeControl)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT::subgroupSizeControl)));
    
    sVkPhysicalDeviceSubgroupSizeControlFeaturesEXT.Set(Napi::String::New(env, "subgroupSizeControl"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT, computeFullSubgroups)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT::computeFullSubgroups)));
    
    sVkPhysicalDeviceSubgroupSizeControlFeaturesEXT.Set(Napi::String::New(env, "computeFullSubgroups"), obj);
  }
  sVkPhysicalDeviceSubgroupSizeControlFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceSubgroupSizeControlFeaturesEXT"), sVkPhysicalDeviceSubgroupSizeControlFeaturesEXT);
  Napi::Object sVkPhysicalDeviceSubgroupSizeControlPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT::sType)));
    
    sVkPhysicalDeviceSubgroupSizeControlPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceSubgroupSizeControlPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT, minSubgroupSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT::minSubgroupSize)));
    
    sVkPhysicalDeviceSubgroupSizeControlPropertiesEXT.Set(Napi::String::New(env, "minSubgroupSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT, maxSubgroupSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT::maxSubgroupSize)));
    
    sVkPhysicalDeviceSubgroupSizeControlPropertiesEXT.Set(Napi::String::New(env, "maxSubgroupSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT, maxComputeWorkgroupSubgroups)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT::maxComputeWorkgroupSubgroups)));
    
    sVkPhysicalDeviceSubgroupSizeControlPropertiesEXT.Set(Napi::String::New(env, "maxComputeWorkgroupSubgroups"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT, requiredSubgroupSizeStages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT::requiredSubgroupSizeStages)));
    
    sVkPhysicalDeviceSubgroupSizeControlPropertiesEXT.Set(Napi::String::New(env, "requiredSubgroupSizeStages"), obj);
  }
  sVkPhysicalDeviceSubgroupSizeControlPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceSubgroupSizeControlPropertiesEXT"), sVkPhysicalDeviceSubgroupSizeControlPropertiesEXT);
  Napi::Object sVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT::sType)));
    
    sVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT::pNext)));
    
    sVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT, requiredSubgroupSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT::requiredSubgroupSize)));
    
    sVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.Set(Napi::String::New(env, "requiredSubgroupSize"), obj);
  }
  sVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT"), sVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT);
  Napi::Object sVkMemoryOpaqueCaptureAddressAllocateInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryOpaqueCaptureAddressAllocateInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryOpaqueCaptureAddressAllocateInfo::sType)));
    
    sVkMemoryOpaqueCaptureAddressAllocateInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryOpaqueCaptureAddressAllocateInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryOpaqueCaptureAddressAllocateInfo::pNext)));
    
    sVkMemoryOpaqueCaptureAddressAllocateInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryOpaqueCaptureAddressAllocateInfo, opaqueCaptureAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryOpaqueCaptureAddressAllocateInfo::opaqueCaptureAddress)));
    
    sVkMemoryOpaqueCaptureAddressAllocateInfo.Set(Napi::String::New(env, "opaqueCaptureAddress"), obj);
  }
  sVkMemoryOpaqueCaptureAddressAllocateInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryOpaqueCaptureAddressAllocateInfo)));
  out.Set(Napi::String::New(env, "VkMemoryOpaqueCaptureAddressAllocateInfo"), sVkMemoryOpaqueCaptureAddressAllocateInfo);
  Napi::Object sVkMemoryOpaqueCaptureAddressAllocateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryOpaqueCaptureAddressAllocateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryOpaqueCaptureAddressAllocateInfoKHR::sType)));
    
    sVkMemoryOpaqueCaptureAddressAllocateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryOpaqueCaptureAddressAllocateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryOpaqueCaptureAddressAllocateInfoKHR::pNext)));
    
    sVkMemoryOpaqueCaptureAddressAllocateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkMemoryOpaqueCaptureAddressAllocateInfoKHR, opaqueCaptureAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryOpaqueCaptureAddressAllocateInfoKHR::opaqueCaptureAddress)));
    
    sVkMemoryOpaqueCaptureAddressAllocateInfoKHR.Set(Napi::String::New(env, "opaqueCaptureAddress"), obj);
  }
  sVkMemoryOpaqueCaptureAddressAllocateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkMemoryOpaqueCaptureAddressAllocateInfoKHR)));
  out.Set(Napi::String::New(env, "VkMemoryOpaqueCaptureAddressAllocateInfoKHR"), sVkMemoryOpaqueCaptureAddressAllocateInfoKHR);
  Napi::Object sVkDeviceMemoryOpaqueCaptureAddressInfo = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryOpaqueCaptureAddressInfo, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryOpaqueCaptureAddressInfo::sType)));
    
    sVkDeviceMemoryOpaqueCaptureAddressInfo.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryOpaqueCaptureAddressInfo, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryOpaqueCaptureAddressInfo::pNext)));
    
    sVkDeviceMemoryOpaqueCaptureAddressInfo.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryOpaqueCaptureAddressInfo, memory)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryOpaqueCaptureAddressInfo::memory)));
    
    sVkDeviceMemoryOpaqueCaptureAddressInfo.Set(Napi::String::New(env, "memory"), obj);
  }
  sVkDeviceMemoryOpaqueCaptureAddressInfo.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryOpaqueCaptureAddressInfo)));
  out.Set(Napi::String::New(env, "VkDeviceMemoryOpaqueCaptureAddressInfo"), sVkDeviceMemoryOpaqueCaptureAddressInfo);
  Napi::Object sVkDeviceMemoryOpaqueCaptureAddressInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryOpaqueCaptureAddressInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryOpaqueCaptureAddressInfoKHR::sType)));
    
    sVkDeviceMemoryOpaqueCaptureAddressInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryOpaqueCaptureAddressInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryOpaqueCaptureAddressInfoKHR::pNext)));
    
    sVkDeviceMemoryOpaqueCaptureAddressInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceMemoryOpaqueCaptureAddressInfoKHR, memory)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryOpaqueCaptureAddressInfoKHR::memory)));
    
    sVkDeviceMemoryOpaqueCaptureAddressInfoKHR.Set(Napi::String::New(env, "memory"), obj);
  }
  sVkDeviceMemoryOpaqueCaptureAddressInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceMemoryOpaqueCaptureAddressInfoKHR)));
  out.Set(Napi::String::New(env, "VkDeviceMemoryOpaqueCaptureAddressInfoKHR"), sVkDeviceMemoryOpaqueCaptureAddressInfoKHR);
  Napi::Object sVkPhysicalDeviceLineRasterizationFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT::sType)));
    
    sVkPhysicalDeviceLineRasterizationFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceLineRasterizationFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, rectangularLines)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT::rectangularLines)));
    
    sVkPhysicalDeviceLineRasterizationFeaturesEXT.Set(Napi::String::New(env, "rectangularLines"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, bresenhamLines)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT::bresenhamLines)));
    
    sVkPhysicalDeviceLineRasterizationFeaturesEXT.Set(Napi::String::New(env, "bresenhamLines"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, smoothLines)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT::smoothLines)));
    
    sVkPhysicalDeviceLineRasterizationFeaturesEXT.Set(Napi::String::New(env, "smoothLines"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, stippledRectangularLines)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT::stippledRectangularLines)));
    
    sVkPhysicalDeviceLineRasterizationFeaturesEXT.Set(Napi::String::New(env, "stippledRectangularLines"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, stippledBresenhamLines)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT::stippledBresenhamLines)));
    
    sVkPhysicalDeviceLineRasterizationFeaturesEXT.Set(Napi::String::New(env, "stippledBresenhamLines"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, stippledSmoothLines)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT::stippledSmoothLines)));
    
    sVkPhysicalDeviceLineRasterizationFeaturesEXT.Set(Napi::String::New(env, "stippledSmoothLines"), obj);
  }
  sVkPhysicalDeviceLineRasterizationFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceLineRasterizationFeaturesEXT"), sVkPhysicalDeviceLineRasterizationFeaturesEXT);
  Napi::Object sVkPhysicalDeviceLineRasterizationPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLineRasterizationPropertiesEXT::sType)));
    
    sVkPhysicalDeviceLineRasterizationPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLineRasterizationPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceLineRasterizationPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationPropertiesEXT, lineSubPixelPrecisionBits)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLineRasterizationPropertiesEXT::lineSubPixelPrecisionBits)));
    
    sVkPhysicalDeviceLineRasterizationPropertiesEXT.Set(Napi::String::New(env, "lineSubPixelPrecisionBits"), obj);
  }
  sVkPhysicalDeviceLineRasterizationPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceLineRasterizationPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceLineRasterizationPropertiesEXT"), sVkPhysicalDeviceLineRasterizationPropertiesEXT);
  Napi::Object sVkPipelineRasterizationLineStateCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationLineStateCreateInfoEXT::sType)));
    
    sVkPipelineRasterizationLineStateCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationLineStateCreateInfoEXT::pNext)));
    
    sVkPipelineRasterizationLineStateCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, lineRasterizationMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationLineStateCreateInfoEXT::lineRasterizationMode)));
    
    sVkPipelineRasterizationLineStateCreateInfoEXT.Set(Napi::String::New(env, "lineRasterizationMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, stippledLineEnable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationLineStateCreateInfoEXT::stippledLineEnable)));
    
    sVkPipelineRasterizationLineStateCreateInfoEXT.Set(Napi::String::New(env, "stippledLineEnable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, lineStippleFactor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationLineStateCreateInfoEXT::lineStippleFactor)));
    
    sVkPipelineRasterizationLineStateCreateInfoEXT.Set(Napi::String::New(env, "lineStippleFactor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, lineStipplePattern)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationLineStateCreateInfoEXT::lineStipplePattern)));
    
    sVkPipelineRasterizationLineStateCreateInfoEXT.Set(Napi::String::New(env, "lineStipplePattern"), obj);
  }
  sVkPipelineRasterizationLineStateCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineRasterizationLineStateCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkPipelineRasterizationLineStateCreateInfoEXT"), sVkPipelineRasterizationLineStateCreateInfoEXT);
  Napi::Object sVkPhysicalDevicePipelineCreationCacheControlFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT::sType)));
    
    sVkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT::pNext)));
    
    sVkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT, pipelineCreationCacheControl)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT::pipelineCreationCacheControl)));
    
    sVkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.Set(Napi::String::New(env, "pipelineCreationCacheControl"), obj);
  }
  sVkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT"), sVkPhysicalDevicePipelineCreationCacheControlFeaturesEXT);
  Napi::Object sVkPhysicalDeviceVulkan11Features = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Features::sType)));
    
    sVkPhysicalDeviceVulkan11Features.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Features::pNext)));
    
    sVkPhysicalDeviceVulkan11Features.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, storageBuffer16BitAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Features::storageBuffer16BitAccess)));
    
    sVkPhysicalDeviceVulkan11Features.Set(Napi::String::New(env, "storageBuffer16BitAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, uniformAndStorageBuffer16BitAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Features::uniformAndStorageBuffer16BitAccess)));
    
    sVkPhysicalDeviceVulkan11Features.Set(Napi::String::New(env, "uniformAndStorageBuffer16BitAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, storagePushConstant16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Features::storagePushConstant16)));
    
    sVkPhysicalDeviceVulkan11Features.Set(Napi::String::New(env, "storagePushConstant16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, storageInputOutput16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Features::storageInputOutput16)));
    
    sVkPhysicalDeviceVulkan11Features.Set(Napi::String::New(env, "storageInputOutput16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, multiview)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Features::multiview)));
    
    sVkPhysicalDeviceVulkan11Features.Set(Napi::String::New(env, "multiview"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, multiviewGeometryShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Features::multiviewGeometryShader)));
    
    sVkPhysicalDeviceVulkan11Features.Set(Napi::String::New(env, "multiviewGeometryShader"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, multiviewTessellationShader)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Features::multiviewTessellationShader)));
    
    sVkPhysicalDeviceVulkan11Features.Set(Napi::String::New(env, "multiviewTessellationShader"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, variablePointersStorageBuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Features::variablePointersStorageBuffer)));
    
    sVkPhysicalDeviceVulkan11Features.Set(Napi::String::New(env, "variablePointersStorageBuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, variablePointers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Features::variablePointers)));
    
    sVkPhysicalDeviceVulkan11Features.Set(Napi::String::New(env, "variablePointers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, protectedMemory)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Features::protectedMemory)));
    
    sVkPhysicalDeviceVulkan11Features.Set(Napi::String::New(env, "protectedMemory"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, samplerYcbcrConversion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Features::samplerYcbcrConversion)));
    
    sVkPhysicalDeviceVulkan11Features.Set(Napi::String::New(env, "samplerYcbcrConversion"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, shaderDrawParameters)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Features::shaderDrawParameters)));
    
    sVkPhysicalDeviceVulkan11Features.Set(Napi::String::New(env, "shaderDrawParameters"), obj);
  }
  sVkPhysicalDeviceVulkan11Features.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Features)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceVulkan11Features"), sVkPhysicalDeviceVulkan11Features);
  Napi::Object sVkPhysicalDeviceVulkan11Properties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::sType)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::pNext)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, deviceUUID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::deviceUUID)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "deviceUUID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, driverUUID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::driverUUID)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "driverUUID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, deviceLUID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::deviceLUID)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "deviceLUID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, deviceNodeMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::deviceNodeMask)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "deviceNodeMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, deviceLUIDValid)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::deviceLUIDValid)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "deviceLUIDValid"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, subgroupSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::subgroupSize)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "subgroupSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, subgroupSupportedStages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::subgroupSupportedStages)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "subgroupSupportedStages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, subgroupSupportedOperations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::subgroupSupportedOperations)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "subgroupSupportedOperations"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, subgroupQuadOperationsInAllStages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::subgroupQuadOperationsInAllStages)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "subgroupQuadOperationsInAllStages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, pointClippingBehavior)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::pointClippingBehavior)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "pointClippingBehavior"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, maxMultiviewViewCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::maxMultiviewViewCount)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "maxMultiviewViewCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, maxMultiviewInstanceIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::maxMultiviewInstanceIndex)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "maxMultiviewInstanceIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, protectedNoFault)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::protectedNoFault)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "protectedNoFault"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, maxPerSetDescriptors)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::maxPerSetDescriptors)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "maxPerSetDescriptors"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, maxMemoryAllocationSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties::maxMemoryAllocationSize)));
    
    sVkPhysicalDeviceVulkan11Properties.Set(Napi::String::New(env, "maxMemoryAllocationSize"), obj);
  }
  sVkPhysicalDeviceVulkan11Properties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan11Properties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceVulkan11Properties"), sVkPhysicalDeviceVulkan11Properties);
  Napi::Object sVkPhysicalDeviceVulkan12Features = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::sType)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::pNext)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, samplerMirrorClampToEdge)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::samplerMirrorClampToEdge)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "samplerMirrorClampToEdge"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, drawIndirectCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::drawIndirectCount)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "drawIndirectCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, storageBuffer8BitAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::storageBuffer8BitAccess)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "storageBuffer8BitAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, uniformAndStorageBuffer8BitAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::uniformAndStorageBuffer8BitAccess)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "uniformAndStorageBuffer8BitAccess"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, storagePushConstant8)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::storagePushConstant8)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "storagePushConstant8"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderBufferInt64Atomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderBufferInt64Atomics)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderBufferInt64Atomics"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderSharedInt64Atomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderSharedInt64Atomics)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderSharedInt64Atomics"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderFloat16)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderInt8)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderInt8)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderInt8"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::descriptorIndexing)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "descriptorIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderInputAttachmentArrayDynamicIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderInputAttachmentArrayDynamicIndexing)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderInputAttachmentArrayDynamicIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderUniformTexelBufferArrayDynamicIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderUniformTexelBufferArrayDynamicIndexing)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderUniformTexelBufferArrayDynamicIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderStorageTexelBufferArrayDynamicIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderStorageTexelBufferArrayDynamicIndexing)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderStorageTexelBufferArrayDynamicIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderUniformBufferArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderUniformBufferArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderUniformBufferArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderSampledImageArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderSampledImageArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderSampledImageArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderStorageBufferArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderStorageBufferArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderStorageBufferArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderStorageImageArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderStorageImageArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderStorageImageArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderInputAttachmentArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderInputAttachmentArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderInputAttachmentArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderUniformTexelBufferArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderUniformTexelBufferArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderUniformTexelBufferArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderStorageTexelBufferArrayNonUniformIndexing)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderStorageTexelBufferArrayNonUniformIndexing)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderStorageTexelBufferArrayNonUniformIndexing"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingUniformBufferUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::descriptorBindingUniformBufferUpdateAfterBind)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "descriptorBindingUniformBufferUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingSampledImageUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::descriptorBindingSampledImageUpdateAfterBind)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "descriptorBindingSampledImageUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingStorageImageUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::descriptorBindingStorageImageUpdateAfterBind)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "descriptorBindingStorageImageUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingStorageBufferUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::descriptorBindingStorageBufferUpdateAfterBind)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "descriptorBindingStorageBufferUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingUniformTexelBufferUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::descriptorBindingUniformTexelBufferUpdateAfterBind)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "descriptorBindingUniformTexelBufferUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingStorageTexelBufferUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::descriptorBindingStorageTexelBufferUpdateAfterBind)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "descriptorBindingStorageTexelBufferUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingUpdateUnusedWhilePending)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::descriptorBindingUpdateUnusedWhilePending)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "descriptorBindingUpdateUnusedWhilePending"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingPartiallyBound)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::descriptorBindingPartiallyBound)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "descriptorBindingPartiallyBound"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingVariableDescriptorCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::descriptorBindingVariableDescriptorCount)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "descriptorBindingVariableDescriptorCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, runtimeDescriptorArray)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::runtimeDescriptorArray)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "runtimeDescriptorArray"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, samplerFilterMinmax)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::samplerFilterMinmax)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "samplerFilterMinmax"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, scalarBlockLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::scalarBlockLayout)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "scalarBlockLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, imagelessFramebuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::imagelessFramebuffer)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "imagelessFramebuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, uniformBufferStandardLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::uniformBufferStandardLayout)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "uniformBufferStandardLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderSubgroupExtendedTypes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderSubgroupExtendedTypes)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderSubgroupExtendedTypes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, separateDepthStencilLayouts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::separateDepthStencilLayouts)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "separateDepthStencilLayouts"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, hostQueryReset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::hostQueryReset)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "hostQueryReset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, timelineSemaphore)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::timelineSemaphore)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "timelineSemaphore"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, bufferDeviceAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::bufferDeviceAddress)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "bufferDeviceAddress"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, bufferDeviceAddressCaptureReplay)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::bufferDeviceAddressCaptureReplay)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "bufferDeviceAddressCaptureReplay"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, bufferDeviceAddressMultiDevice)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::bufferDeviceAddressMultiDevice)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "bufferDeviceAddressMultiDevice"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, vulkanMemoryModel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::vulkanMemoryModel)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "vulkanMemoryModel"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, vulkanMemoryModelDeviceScope)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::vulkanMemoryModelDeviceScope)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "vulkanMemoryModelDeviceScope"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, vulkanMemoryModelAvailabilityVisibilityChains)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::vulkanMemoryModelAvailabilityVisibilityChains)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "vulkanMemoryModelAvailabilityVisibilityChains"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderOutputViewportIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderOutputViewportIndex)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderOutputViewportIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderOutputLayer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::shaderOutputLayer)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "shaderOutputLayer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, subgroupBroadcastDynamicId)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features::subgroupBroadcastDynamicId)));
    
    sVkPhysicalDeviceVulkan12Features.Set(Napi::String::New(env, "subgroupBroadcastDynamicId"), obj);
  }
  sVkPhysicalDeviceVulkan12Features.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Features)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceVulkan12Features"), sVkPhysicalDeviceVulkan12Features);
  Napi::Object sVkPhysicalDeviceVulkan12Properties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::sType)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::pNext)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, driverID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::driverID)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "driverID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, driverName)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::driverName)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "driverName"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, driverInfo)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::driverInfo)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "driverInfo"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, conformanceVersion)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::conformanceVersion)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "conformanceVersion"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, denormBehaviorIndependence)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::denormBehaviorIndependence)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "denormBehaviorIndependence"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, roundingModeIndependence)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::roundingModeIndependence)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "roundingModeIndependence"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderSignedZeroInfNanPreserveFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderSignedZeroInfNanPreserveFloat16)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderSignedZeroInfNanPreserveFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderSignedZeroInfNanPreserveFloat32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderSignedZeroInfNanPreserveFloat32)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderSignedZeroInfNanPreserveFloat32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderSignedZeroInfNanPreserveFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderSignedZeroInfNanPreserveFloat64)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderSignedZeroInfNanPreserveFloat64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormPreserveFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderDenormPreserveFloat16)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderDenormPreserveFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormPreserveFloat32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderDenormPreserveFloat32)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderDenormPreserveFloat32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormPreserveFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderDenormPreserveFloat64)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderDenormPreserveFloat64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormFlushToZeroFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderDenormFlushToZeroFloat16)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderDenormFlushToZeroFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormFlushToZeroFloat32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderDenormFlushToZeroFloat32)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderDenormFlushToZeroFloat32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormFlushToZeroFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderDenormFlushToZeroFloat64)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderDenormFlushToZeroFloat64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTEFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTEFloat16)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderRoundingModeRTEFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTEFloat32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTEFloat32)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderRoundingModeRTEFloat32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTEFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTEFloat64)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderRoundingModeRTEFloat64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTZFloat16)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTZFloat16)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderRoundingModeRTZFloat16"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTZFloat32)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTZFloat32)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderRoundingModeRTZFloat32"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTZFloat64)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTZFloat64)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderRoundingModeRTZFloat64"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxUpdateAfterBindDescriptorsInAllPools)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxUpdateAfterBindDescriptorsInAllPools)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxUpdateAfterBindDescriptorsInAllPools"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderUniformBufferArrayNonUniformIndexingNative)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderUniformBufferArrayNonUniformIndexingNative)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderUniformBufferArrayNonUniformIndexingNative"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderSampledImageArrayNonUniformIndexingNative)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderSampledImageArrayNonUniformIndexingNative)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderSampledImageArrayNonUniformIndexingNative"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderStorageBufferArrayNonUniformIndexingNative)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderStorageBufferArrayNonUniformIndexingNative)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderStorageBufferArrayNonUniformIndexingNative"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderStorageImageArrayNonUniformIndexingNative)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderStorageImageArrayNonUniformIndexingNative)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderStorageImageArrayNonUniformIndexingNative"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderInputAttachmentArrayNonUniformIndexingNative)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::shaderInputAttachmentArrayNonUniformIndexingNative)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "shaderInputAttachmentArrayNonUniformIndexingNative"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, robustBufferAccessUpdateAfterBind)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::robustBufferAccessUpdateAfterBind)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "robustBufferAccessUpdateAfterBind"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, quadDivergentImplicitLod)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::quadDivergentImplicitLod)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "quadDivergentImplicitLod"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindSamplers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindSamplers)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindSamplers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindUniformBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindUniformBuffers)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindUniformBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindStorageBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindStorageBuffers)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindStorageBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindSampledImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindSampledImages)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindSampledImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindStorageImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindStorageImages)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindStorageImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindInputAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindInputAttachments)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindInputAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageUpdateAfterBindResources)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxPerStageUpdateAfterBindResources)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxPerStageUpdateAfterBindResources"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindSamplers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindSamplers)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindSamplers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindUniformBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindUniformBuffers)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindUniformBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindStorageBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindStorageBuffers)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindStorageBuffers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindSampledImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindSampledImages)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindSampledImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindStorageImages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindStorageImages)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindStorageImages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindInputAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindInputAttachments)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindInputAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, supportedDepthResolveModes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::supportedDepthResolveModes)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "supportedDepthResolveModes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, supportedStencilResolveModes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::supportedStencilResolveModes)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "supportedStencilResolveModes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, independentResolveNone)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::independentResolveNone)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "independentResolveNone"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, independentResolve)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::independentResolve)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "independentResolve"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, filterMinmaxSingleComponentFormats)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::filterMinmaxSingleComponentFormats)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "filterMinmaxSingleComponentFormats"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, filterMinmaxImageComponentMapping)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::filterMinmaxImageComponentMapping)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "filterMinmaxImageComponentMapping"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxTimelineSemaphoreValueDifference)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::maxTimelineSemaphoreValueDifference)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "maxTimelineSemaphoreValueDifference"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, framebufferIntegerColorSampleCounts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties::framebufferIntegerColorSampleCounts)));
    
    sVkPhysicalDeviceVulkan12Properties.Set(Napi::String::New(env, "framebufferIntegerColorSampleCounts"), obj);
  }
  sVkPhysicalDeviceVulkan12Properties.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkan12Properties)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceVulkan12Properties"), sVkPhysicalDeviceVulkan12Properties);
  Napi::Object sVkPipelineCompilerControlCreateInfoAMD = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCompilerControlCreateInfoAMD, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCompilerControlCreateInfoAMD::sType)));
    
    sVkPipelineCompilerControlCreateInfoAMD.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCompilerControlCreateInfoAMD, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCompilerControlCreateInfoAMD::pNext)));
    
    sVkPipelineCompilerControlCreateInfoAMD.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineCompilerControlCreateInfoAMD, compilerControlFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCompilerControlCreateInfoAMD::compilerControlFlags)));
    
    sVkPipelineCompilerControlCreateInfoAMD.Set(Napi::String::New(env, "compilerControlFlags"), obj);
  }
  sVkPipelineCompilerControlCreateInfoAMD.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineCompilerControlCreateInfoAMD)));
  out.Set(Napi::String::New(env, "VkPipelineCompilerControlCreateInfoAMD"), sVkPipelineCompilerControlCreateInfoAMD);
  Napi::Object sVkPhysicalDeviceCoherentMemoryFeaturesAMD = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCoherentMemoryFeaturesAMD, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCoherentMemoryFeaturesAMD::sType)));
    
    sVkPhysicalDeviceCoherentMemoryFeaturesAMD.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCoherentMemoryFeaturesAMD, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCoherentMemoryFeaturesAMD::pNext)));
    
    sVkPhysicalDeviceCoherentMemoryFeaturesAMD.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCoherentMemoryFeaturesAMD, deviceCoherentMemory)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCoherentMemoryFeaturesAMD::deviceCoherentMemory)));
    
    sVkPhysicalDeviceCoherentMemoryFeaturesAMD.Set(Napi::String::New(env, "deviceCoherentMemory"), obj);
  }
  sVkPhysicalDeviceCoherentMemoryFeaturesAMD.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCoherentMemoryFeaturesAMD)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceCoherentMemoryFeaturesAMD"), sVkPhysicalDeviceCoherentMemoryFeaturesAMD);
  Napi::Object sVkPhysicalDeviceToolPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceToolPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceToolPropertiesEXT::sType)));
    
    sVkPhysicalDeviceToolPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceToolPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceToolPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceToolPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceToolPropertiesEXT, name)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceToolPropertiesEXT::name)));
    
    sVkPhysicalDeviceToolPropertiesEXT.Set(Napi::String::New(env, "name"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceToolPropertiesEXT, version)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceToolPropertiesEXT::version)));
    
    sVkPhysicalDeviceToolPropertiesEXT.Set(Napi::String::New(env, "version"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceToolPropertiesEXT, purposes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceToolPropertiesEXT::purposes)));
    
    sVkPhysicalDeviceToolPropertiesEXT.Set(Napi::String::New(env, "purposes"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceToolPropertiesEXT, description)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceToolPropertiesEXT::description)));
    
    sVkPhysicalDeviceToolPropertiesEXT.Set(Napi::String::New(env, "description"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceToolPropertiesEXT, layer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceToolPropertiesEXT::layer)));
    
    sVkPhysicalDeviceToolPropertiesEXT.Set(Napi::String::New(env, "layer"), obj);
  }
  sVkPhysicalDeviceToolPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceToolPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceToolPropertiesEXT"), sVkPhysicalDeviceToolPropertiesEXT);
  Napi::Object sVkSamplerCustomBorderColorCreateInfoEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCustomBorderColorCreateInfoEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCustomBorderColorCreateInfoEXT::sType)));
    
    sVkSamplerCustomBorderColorCreateInfoEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCustomBorderColorCreateInfoEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCustomBorderColorCreateInfoEXT::pNext)));
    
    sVkSamplerCustomBorderColorCreateInfoEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCustomBorderColorCreateInfoEXT, customBorderColor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCustomBorderColorCreateInfoEXT::customBorderColor)));
    
    sVkSamplerCustomBorderColorCreateInfoEXT.Set(Napi::String::New(env, "customBorderColor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkSamplerCustomBorderColorCreateInfoEXT, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCustomBorderColorCreateInfoEXT::format)));
    
    sVkSamplerCustomBorderColorCreateInfoEXT.Set(Napi::String::New(env, "format"), obj);
  }
  sVkSamplerCustomBorderColorCreateInfoEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkSamplerCustomBorderColorCreateInfoEXT)));
  out.Set(Napi::String::New(env, "VkSamplerCustomBorderColorCreateInfoEXT"), sVkSamplerCustomBorderColorCreateInfoEXT);
  Napi::Object sVkPhysicalDeviceCustomBorderColorPropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCustomBorderColorPropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCustomBorderColorPropertiesEXT::sType)));
    
    sVkPhysicalDeviceCustomBorderColorPropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCustomBorderColorPropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCustomBorderColorPropertiesEXT::pNext)));
    
    sVkPhysicalDeviceCustomBorderColorPropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCustomBorderColorPropertiesEXT, maxCustomBorderColorSamplers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCustomBorderColorPropertiesEXT::maxCustomBorderColorSamplers)));
    
    sVkPhysicalDeviceCustomBorderColorPropertiesEXT.Set(Napi::String::New(env, "maxCustomBorderColorSamplers"), obj);
  }
  sVkPhysicalDeviceCustomBorderColorPropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCustomBorderColorPropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceCustomBorderColorPropertiesEXT"), sVkPhysicalDeviceCustomBorderColorPropertiesEXT);
  Napi::Object sVkPhysicalDeviceCustomBorderColorFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCustomBorderColorFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCustomBorderColorFeaturesEXT::sType)));
    
    sVkPhysicalDeviceCustomBorderColorFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCustomBorderColorFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCustomBorderColorFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceCustomBorderColorFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCustomBorderColorFeaturesEXT, customBorderColors)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCustomBorderColorFeaturesEXT::customBorderColors)));
    
    sVkPhysicalDeviceCustomBorderColorFeaturesEXT.Set(Napi::String::New(env, "customBorderColors"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceCustomBorderColorFeaturesEXT, customBorderColorWithoutFormat)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCustomBorderColorFeaturesEXT::customBorderColorWithoutFormat)));
    
    sVkPhysicalDeviceCustomBorderColorFeaturesEXT.Set(Napi::String::New(env, "customBorderColorWithoutFormat"), obj);
  }
  sVkPhysicalDeviceCustomBorderColorFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceCustomBorderColorFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceCustomBorderColorFeaturesEXT"), sVkPhysicalDeviceCustomBorderColorFeaturesEXT);
  Napi::Object sVkAccelerationStructureGeometryTrianglesDataKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryTrianglesDataKHR::sType)));
    
    sVkAccelerationStructureGeometryTrianglesDataKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryTrianglesDataKHR::pNext)));
    
    sVkAccelerationStructureGeometryTrianglesDataKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, vertexFormat)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryTrianglesDataKHR::vertexFormat)));
    
    sVkAccelerationStructureGeometryTrianglesDataKHR.Set(Napi::String::New(env, "vertexFormat"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, vertexData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryTrianglesDataKHR::vertexData)));
    
    sVkAccelerationStructureGeometryTrianglesDataKHR.Set(Napi::String::New(env, "vertexData"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, vertexStride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryTrianglesDataKHR::vertexStride)));
    
    sVkAccelerationStructureGeometryTrianglesDataKHR.Set(Napi::String::New(env, "vertexStride"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, maxVertex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryTrianglesDataKHR::maxVertex)));
    
    sVkAccelerationStructureGeometryTrianglesDataKHR.Set(Napi::String::New(env, "maxVertex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, indexType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryTrianglesDataKHR::indexType)));
    
    sVkAccelerationStructureGeometryTrianglesDataKHR.Set(Napi::String::New(env, "indexType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, indexData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryTrianglesDataKHR::indexData)));
    
    sVkAccelerationStructureGeometryTrianglesDataKHR.Set(Napi::String::New(env, "indexData"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, transformData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryTrianglesDataKHR::transformData)));
    
    sVkAccelerationStructureGeometryTrianglesDataKHR.Set(Napi::String::New(env, "transformData"), obj);
  }
  sVkAccelerationStructureGeometryTrianglesDataKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryTrianglesDataKHR)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureGeometryTrianglesDataKHR"), sVkAccelerationStructureGeometryTrianglesDataKHR);
  Napi::Object sVkAccelerationStructureGeometryAabbsDataKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryAabbsDataKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryAabbsDataKHR::sType)));
    
    sVkAccelerationStructureGeometryAabbsDataKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryAabbsDataKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryAabbsDataKHR::pNext)));
    
    sVkAccelerationStructureGeometryAabbsDataKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryAabbsDataKHR, data)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryAabbsDataKHR::data)));
    
    sVkAccelerationStructureGeometryAabbsDataKHR.Set(Napi::String::New(env, "data"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryAabbsDataKHR, stride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryAabbsDataKHR::stride)));
    
    sVkAccelerationStructureGeometryAabbsDataKHR.Set(Napi::String::New(env, "stride"), obj);
  }
  sVkAccelerationStructureGeometryAabbsDataKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryAabbsDataKHR)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureGeometryAabbsDataKHR"), sVkAccelerationStructureGeometryAabbsDataKHR);
  Napi::Object sVkAccelerationStructureGeometryInstancesDataKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryInstancesDataKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryInstancesDataKHR::sType)));
    
    sVkAccelerationStructureGeometryInstancesDataKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryInstancesDataKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryInstancesDataKHR::pNext)));
    
    sVkAccelerationStructureGeometryInstancesDataKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryInstancesDataKHR, arrayOfPointers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryInstancesDataKHR::arrayOfPointers)));
    
    sVkAccelerationStructureGeometryInstancesDataKHR.Set(Napi::String::New(env, "arrayOfPointers"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryInstancesDataKHR, data)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryInstancesDataKHR::data)));
    
    sVkAccelerationStructureGeometryInstancesDataKHR.Set(Napi::String::New(env, "data"), obj);
  }
  sVkAccelerationStructureGeometryInstancesDataKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryInstancesDataKHR)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureGeometryInstancesDataKHR"), sVkAccelerationStructureGeometryInstancesDataKHR);
  Napi::Object sVkAccelerationStructureGeometryKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryKHR::sType)));
    
    sVkAccelerationStructureGeometryKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryKHR::pNext)));
    
    sVkAccelerationStructureGeometryKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryKHR, geometryType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryKHR::geometryType)));
    
    sVkAccelerationStructureGeometryKHR.Set(Napi::String::New(env, "geometryType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryKHR, geometry)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryKHR::geometry)));
    
    sVkAccelerationStructureGeometryKHR.Set(Napi::String::New(env, "geometry"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryKHR::flags)));
    
    sVkAccelerationStructureGeometryKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  sVkAccelerationStructureGeometryKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureGeometryKHR)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureGeometryKHR"), sVkAccelerationStructureGeometryKHR);
  Napi::Object sVkAccelerationStructureBuildGeometryInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildGeometryInfoKHR::sType)));
    
    sVkAccelerationStructureBuildGeometryInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildGeometryInfoKHR::pNext)));
    
    sVkAccelerationStructureBuildGeometryInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildGeometryInfoKHR::type)));
    
    sVkAccelerationStructureBuildGeometryInfoKHR.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildGeometryInfoKHR::flags)));
    
    sVkAccelerationStructureBuildGeometryInfoKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, mode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildGeometryInfoKHR::mode)));
    
    sVkAccelerationStructureBuildGeometryInfoKHR.Set(Napi::String::New(env, "mode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, srcAccelerationStructure)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildGeometryInfoKHR::srcAccelerationStructure)));
    
    sVkAccelerationStructureBuildGeometryInfoKHR.Set(Napi::String::New(env, "srcAccelerationStructure"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, dstAccelerationStructure)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildGeometryInfoKHR::dstAccelerationStructure)));
    
    sVkAccelerationStructureBuildGeometryInfoKHR.Set(Napi::String::New(env, "dstAccelerationStructure"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, geometryCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildGeometryInfoKHR::geometryCount)));
    
    sVkAccelerationStructureBuildGeometryInfoKHR.Set(Napi::String::New(env, "geometryCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, pGeometries)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildGeometryInfoKHR::pGeometries)));
    
    sVkAccelerationStructureBuildGeometryInfoKHR.Set(Napi::String::New(env, "pGeometries"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, ppGeometries)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildGeometryInfoKHR::ppGeometries)));
    
    sVkAccelerationStructureBuildGeometryInfoKHR.Set(Napi::String::New(env, "ppGeometries"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, scratchData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildGeometryInfoKHR::scratchData)));
    
    sVkAccelerationStructureBuildGeometryInfoKHR.Set(Napi::String::New(env, "scratchData"), obj);
  }
  sVkAccelerationStructureBuildGeometryInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildGeometryInfoKHR)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureBuildGeometryInfoKHR"), sVkAccelerationStructureBuildGeometryInfoKHR);
  Napi::Object sVkAccelerationStructureBuildRangeInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildRangeInfoKHR, primitiveCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildRangeInfoKHR::primitiveCount)));
    
    sVkAccelerationStructureBuildRangeInfoKHR.Set(Napi::String::New(env, "primitiveCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildRangeInfoKHR, primitiveOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildRangeInfoKHR::primitiveOffset)));
    
    sVkAccelerationStructureBuildRangeInfoKHR.Set(Napi::String::New(env, "primitiveOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildRangeInfoKHR, firstVertex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildRangeInfoKHR::firstVertex)));
    
    sVkAccelerationStructureBuildRangeInfoKHR.Set(Napi::String::New(env, "firstVertex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildRangeInfoKHR, transformOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildRangeInfoKHR::transformOffset)));
    
    sVkAccelerationStructureBuildRangeInfoKHR.Set(Napi::String::New(env, "transformOffset"), obj);
  }
  sVkAccelerationStructureBuildRangeInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildRangeInfoKHR)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureBuildRangeInfoKHR"), sVkAccelerationStructureBuildRangeInfoKHR);
  Napi::Object sVkAccelerationStructureCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureCreateInfoKHR::sType)));
    
    sVkAccelerationStructureCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureCreateInfoKHR::pNext)));
    
    sVkAccelerationStructureCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, createFlags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureCreateInfoKHR::createFlags)));
    
    sVkAccelerationStructureCreateInfoKHR.Set(Napi::String::New(env, "createFlags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureCreateInfoKHR::buffer)));
    
    sVkAccelerationStructureCreateInfoKHR.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureCreateInfoKHR::offset)));
    
    sVkAccelerationStructureCreateInfoKHR.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureCreateInfoKHR::size)));
    
    sVkAccelerationStructureCreateInfoKHR.Set(Napi::String::New(env, "size"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureCreateInfoKHR::type)));
    
    sVkAccelerationStructureCreateInfoKHR.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, deviceAddress)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureCreateInfoKHR::deviceAddress)));
    
    sVkAccelerationStructureCreateInfoKHR.Set(Napi::String::New(env, "deviceAddress"), obj);
  }
  sVkAccelerationStructureCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureCreateInfoKHR"), sVkAccelerationStructureCreateInfoKHR);
  Napi::Object sVkAabbPositionsKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAabbPositionsKHR, minX)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAabbPositionsKHR::minX)));
    
    sVkAabbPositionsKHR.Set(Napi::String::New(env, "minX"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAabbPositionsKHR, minY)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAabbPositionsKHR::minY)));
    
    sVkAabbPositionsKHR.Set(Napi::String::New(env, "minY"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAabbPositionsKHR, minZ)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAabbPositionsKHR::minZ)));
    
    sVkAabbPositionsKHR.Set(Napi::String::New(env, "minZ"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAabbPositionsKHR, maxX)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAabbPositionsKHR::maxX)));
    
    sVkAabbPositionsKHR.Set(Napi::String::New(env, "maxX"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAabbPositionsKHR, maxY)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAabbPositionsKHR::maxY)));
    
    sVkAabbPositionsKHR.Set(Napi::String::New(env, "maxY"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAabbPositionsKHR, maxZ)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAabbPositionsKHR::maxZ)));
    
    sVkAabbPositionsKHR.Set(Napi::String::New(env, "maxZ"), obj);
  }
  sVkAabbPositionsKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAabbPositionsKHR)));
  out.Set(Napi::String::New(env, "VkAabbPositionsKHR"), sVkAabbPositionsKHR);
  Napi::Object sVkAabbPositionsNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAabbPositionsNV, minX)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAabbPositionsNV::minX)));
    
    sVkAabbPositionsNV.Set(Napi::String::New(env, "minX"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAabbPositionsNV, minY)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAabbPositionsNV::minY)));
    
    sVkAabbPositionsNV.Set(Napi::String::New(env, "minY"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAabbPositionsNV, minZ)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAabbPositionsNV::minZ)));
    
    sVkAabbPositionsNV.Set(Napi::String::New(env, "minZ"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAabbPositionsNV, maxX)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAabbPositionsNV::maxX)));
    
    sVkAabbPositionsNV.Set(Napi::String::New(env, "maxX"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAabbPositionsNV, maxY)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAabbPositionsNV::maxY)));
    
    sVkAabbPositionsNV.Set(Napi::String::New(env, "maxY"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAabbPositionsNV, maxZ)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAabbPositionsNV::maxZ)));
    
    sVkAabbPositionsNV.Set(Napi::String::New(env, "maxZ"), obj);
  }
  sVkAabbPositionsNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkAabbPositionsNV)));
  out.Set(Napi::String::New(env, "VkAabbPositionsNV"), sVkAabbPositionsNV);
  Napi::Object sVkTransformMatrixKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTransformMatrixKHR, matrix)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTransformMatrixKHR::matrix)));
    
    sVkTransformMatrixKHR.Set(Napi::String::New(env, "matrix"), obj);
  }
  sVkTransformMatrixKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkTransformMatrixKHR)));
  out.Set(Napi::String::New(env, "VkTransformMatrixKHR"), sVkTransformMatrixKHR);
  Napi::Object sVkTransformMatrixNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkTransformMatrixNV, matrix)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkTransformMatrixNV::matrix)));
    
    sVkTransformMatrixNV.Set(Napi::String::New(env, "matrix"), obj);
  }
  sVkTransformMatrixNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkTransformMatrixNV)));
  out.Set(Napi::String::New(env, "VkTransformMatrixNV"), sVkTransformMatrixNV);
  Napi::Object sVkAccelerationStructureInstanceKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureInstanceKHR, transform)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureInstanceKHR::transform)));
    
    sVkAccelerationStructureInstanceKHR.Set(Napi::String::New(env, "transform"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, 666));
    obj.Set(strByteLength, Napi::Number::New(env, 666));
    
    sVkAccelerationStructureInstanceKHR.Set(Napi::String::New(env, "instanceCustomIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, 666));
    obj.Set(strByteLength, Napi::Number::New(env, 666));
    
    sVkAccelerationStructureInstanceKHR.Set(Napi::String::New(env, "mask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, 666));
    obj.Set(strByteLength, Napi::Number::New(env, 666));
    
    sVkAccelerationStructureInstanceKHR.Set(Napi::String::New(env, "instanceShaderBindingTableRecordOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, 666));
    obj.Set(strByteLength, Napi::Number::New(env, 666));
    
    sVkAccelerationStructureInstanceKHR.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureInstanceKHR, accelerationStructureReference)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureInstanceKHR::accelerationStructureReference)));
    
    sVkAccelerationStructureInstanceKHR.Set(Napi::String::New(env, "accelerationStructureReference"), obj);
  }
  sVkAccelerationStructureInstanceKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureInstanceKHR)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureInstanceKHR"), sVkAccelerationStructureInstanceKHR);
  Napi::Object sVkAccelerationStructureInstanceNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureInstanceNV, transform)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureInstanceNV::transform)));
    
    sVkAccelerationStructureInstanceNV.Set(Napi::String::New(env, "transform"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, 666));
    obj.Set(strByteLength, Napi::Number::New(env, 666));
    
    sVkAccelerationStructureInstanceNV.Set(Napi::String::New(env, "instanceCustomIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, 666));
    obj.Set(strByteLength, Napi::Number::New(env, 666));
    
    sVkAccelerationStructureInstanceNV.Set(Napi::String::New(env, "mask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, 666));
    obj.Set(strByteLength, Napi::Number::New(env, 666));
    
    sVkAccelerationStructureInstanceNV.Set(Napi::String::New(env, "instanceShaderBindingTableRecordOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, 666));
    obj.Set(strByteLength, Napi::Number::New(env, 666));
    
    sVkAccelerationStructureInstanceNV.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureInstanceNV, accelerationStructureReference)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureInstanceNV::accelerationStructureReference)));
    
    sVkAccelerationStructureInstanceNV.Set(Napi::String::New(env, "accelerationStructureReference"), obj);
  }
  sVkAccelerationStructureInstanceNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureInstanceNV)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureInstanceNV"), sVkAccelerationStructureInstanceNV);
  Napi::Object sVkAccelerationStructureDeviceAddressInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureDeviceAddressInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureDeviceAddressInfoKHR::sType)));
    
    sVkAccelerationStructureDeviceAddressInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureDeviceAddressInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureDeviceAddressInfoKHR::pNext)));
    
    sVkAccelerationStructureDeviceAddressInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureDeviceAddressInfoKHR, accelerationStructure)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureDeviceAddressInfoKHR::accelerationStructure)));
    
    sVkAccelerationStructureDeviceAddressInfoKHR.Set(Napi::String::New(env, "accelerationStructure"), obj);
  }
  sVkAccelerationStructureDeviceAddressInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureDeviceAddressInfoKHR)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureDeviceAddressInfoKHR"), sVkAccelerationStructureDeviceAddressInfoKHR);
  Napi::Object sVkAccelerationStructureVersionInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureVersionInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureVersionInfoKHR::sType)));
    
    sVkAccelerationStructureVersionInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureVersionInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureVersionInfoKHR::pNext)));
    
    sVkAccelerationStructureVersionInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureVersionInfoKHR, pVersionData)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureVersionInfoKHR::pVersionData)));
    
    sVkAccelerationStructureVersionInfoKHR.Set(Napi::String::New(env, "pVersionData"), obj);
  }
  sVkAccelerationStructureVersionInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureVersionInfoKHR)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureVersionInfoKHR"), sVkAccelerationStructureVersionInfoKHR);
  Napi::Object sVkCopyAccelerationStructureInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyAccelerationStructureInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyAccelerationStructureInfoKHR::sType)));
    
    sVkCopyAccelerationStructureInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyAccelerationStructureInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyAccelerationStructureInfoKHR::pNext)));
    
    sVkCopyAccelerationStructureInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyAccelerationStructureInfoKHR, src)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyAccelerationStructureInfoKHR::src)));
    
    sVkCopyAccelerationStructureInfoKHR.Set(Napi::String::New(env, "src"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyAccelerationStructureInfoKHR, dst)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyAccelerationStructureInfoKHR::dst)));
    
    sVkCopyAccelerationStructureInfoKHR.Set(Napi::String::New(env, "dst"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyAccelerationStructureInfoKHR, mode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyAccelerationStructureInfoKHR::mode)));
    
    sVkCopyAccelerationStructureInfoKHR.Set(Napi::String::New(env, "mode"), obj);
  }
  sVkCopyAccelerationStructureInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyAccelerationStructureInfoKHR)));
  out.Set(Napi::String::New(env, "VkCopyAccelerationStructureInfoKHR"), sVkCopyAccelerationStructureInfoKHR);
  Napi::Object sVkCopyAccelerationStructureToMemoryInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyAccelerationStructureToMemoryInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyAccelerationStructureToMemoryInfoKHR::sType)));
    
    sVkCopyAccelerationStructureToMemoryInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyAccelerationStructureToMemoryInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyAccelerationStructureToMemoryInfoKHR::pNext)));
    
    sVkCopyAccelerationStructureToMemoryInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyAccelerationStructureToMemoryInfoKHR, src)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyAccelerationStructureToMemoryInfoKHR::src)));
    
    sVkCopyAccelerationStructureToMemoryInfoKHR.Set(Napi::String::New(env, "src"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyAccelerationStructureToMemoryInfoKHR, dst)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyAccelerationStructureToMemoryInfoKHR::dst)));
    
    sVkCopyAccelerationStructureToMemoryInfoKHR.Set(Napi::String::New(env, "dst"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyAccelerationStructureToMemoryInfoKHR, mode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyAccelerationStructureToMemoryInfoKHR::mode)));
    
    sVkCopyAccelerationStructureToMemoryInfoKHR.Set(Napi::String::New(env, "mode"), obj);
  }
  sVkCopyAccelerationStructureToMemoryInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyAccelerationStructureToMemoryInfoKHR)));
  out.Set(Napi::String::New(env, "VkCopyAccelerationStructureToMemoryInfoKHR"), sVkCopyAccelerationStructureToMemoryInfoKHR);
  Napi::Object sVkCopyMemoryToAccelerationStructureInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyMemoryToAccelerationStructureInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyMemoryToAccelerationStructureInfoKHR::sType)));
    
    sVkCopyMemoryToAccelerationStructureInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyMemoryToAccelerationStructureInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyMemoryToAccelerationStructureInfoKHR::pNext)));
    
    sVkCopyMemoryToAccelerationStructureInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyMemoryToAccelerationStructureInfoKHR, src)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyMemoryToAccelerationStructureInfoKHR::src)));
    
    sVkCopyMemoryToAccelerationStructureInfoKHR.Set(Napi::String::New(env, "src"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyMemoryToAccelerationStructureInfoKHR, dst)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyMemoryToAccelerationStructureInfoKHR::dst)));
    
    sVkCopyMemoryToAccelerationStructureInfoKHR.Set(Napi::String::New(env, "dst"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyMemoryToAccelerationStructureInfoKHR, mode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyMemoryToAccelerationStructureInfoKHR::mode)));
    
    sVkCopyMemoryToAccelerationStructureInfoKHR.Set(Napi::String::New(env, "mode"), obj);
  }
  sVkCopyMemoryToAccelerationStructureInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyMemoryToAccelerationStructureInfoKHR)));
  out.Set(Napi::String::New(env, "VkCopyMemoryToAccelerationStructureInfoKHR"), sVkCopyMemoryToAccelerationStructureInfoKHR);
  Napi::Object sVkRayTracingPipelineInterfaceCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineInterfaceCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineInterfaceCreateInfoKHR::sType)));
    
    sVkRayTracingPipelineInterfaceCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineInterfaceCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineInterfaceCreateInfoKHR::pNext)));
    
    sVkRayTracingPipelineInterfaceCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineInterfaceCreateInfoKHR, maxPipelineRayPayloadSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineInterfaceCreateInfoKHR::maxPipelineRayPayloadSize)));
    
    sVkRayTracingPipelineInterfaceCreateInfoKHR.Set(Napi::String::New(env, "maxPipelineRayPayloadSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRayTracingPipelineInterfaceCreateInfoKHR, maxPipelineRayHitAttributeSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineInterfaceCreateInfoKHR::maxPipelineRayHitAttributeSize)));
    
    sVkRayTracingPipelineInterfaceCreateInfoKHR.Set(Napi::String::New(env, "maxPipelineRayHitAttributeSize"), obj);
  }
  sVkRayTracingPipelineInterfaceCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkRayTracingPipelineInterfaceCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkRayTracingPipelineInterfaceCreateInfoKHR"), sVkRayTracingPipelineInterfaceCreateInfoKHR);
  Napi::Object sVkPipelineLibraryCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineLibraryCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineLibraryCreateInfoKHR::sType)));
    
    sVkPipelineLibraryCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineLibraryCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineLibraryCreateInfoKHR::pNext)));
    
    sVkPipelineLibraryCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineLibraryCreateInfoKHR, libraryCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineLibraryCreateInfoKHR::libraryCount)));
    
    sVkPipelineLibraryCreateInfoKHR.Set(Napi::String::New(env, "libraryCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineLibraryCreateInfoKHR, pLibraries)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineLibraryCreateInfoKHR::pLibraries)));
    
    sVkPipelineLibraryCreateInfoKHR.Set(Napi::String::New(env, "pLibraries"), obj);
  }
  sVkPipelineLibraryCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineLibraryCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkPipelineLibraryCreateInfoKHR"), sVkPipelineLibraryCreateInfoKHR);
  Napi::Object sVkPhysicalDeviceExtendedDynamicStateFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT::sType)));
    
    sVkPhysicalDeviceExtendedDynamicStateFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceExtendedDynamicStateFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT, extendedDynamicState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT::extendedDynamicState)));
    
    sVkPhysicalDeviceExtendedDynamicStateFeaturesEXT.Set(Napi::String::New(env, "extendedDynamicState"), obj);
  }
  sVkPhysicalDeviceExtendedDynamicStateFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceExtendedDynamicStateFeaturesEXT"), sVkPhysicalDeviceExtendedDynamicStateFeaturesEXT);
  Napi::Object sVkRenderPassTransformBeginInfoQCOM = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassTransformBeginInfoQCOM, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassTransformBeginInfoQCOM::sType)));
    
    sVkRenderPassTransformBeginInfoQCOM.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassTransformBeginInfoQCOM, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassTransformBeginInfoQCOM::pNext)));
    
    sVkRenderPassTransformBeginInfoQCOM.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkRenderPassTransformBeginInfoQCOM, transform)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassTransformBeginInfoQCOM::transform)));
    
    sVkRenderPassTransformBeginInfoQCOM.Set(Napi::String::New(env, "transform"), obj);
  }
  sVkRenderPassTransformBeginInfoQCOM.Set(strByteLength, Napi::Number::New(env, sizeof(VkRenderPassTransformBeginInfoQCOM)));
  out.Set(Napi::String::New(env, "VkRenderPassTransformBeginInfoQCOM"), sVkRenderPassTransformBeginInfoQCOM);
  Napi::Object sVkCopyCommandTransformInfoQCOM = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyCommandTransformInfoQCOM, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyCommandTransformInfoQCOM::sType)));
    
    sVkCopyCommandTransformInfoQCOM.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyCommandTransformInfoQCOM, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyCommandTransformInfoQCOM::pNext)));
    
    sVkCopyCommandTransformInfoQCOM.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyCommandTransformInfoQCOM, transform)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyCommandTransformInfoQCOM::transform)));
    
    sVkCopyCommandTransformInfoQCOM.Set(Napi::String::New(env, "transform"), obj);
  }
  sVkCopyCommandTransformInfoQCOM.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyCommandTransformInfoQCOM)));
  out.Set(Napi::String::New(env, "VkCopyCommandTransformInfoQCOM"), sVkCopyCommandTransformInfoQCOM);
  Napi::Object sVkCommandBufferInheritanceRenderPassTransformInfoQCOM = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM::sType)));
    
    sVkCommandBufferInheritanceRenderPassTransformInfoQCOM.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM::pNext)));
    
    sVkCommandBufferInheritanceRenderPassTransformInfoQCOM.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM, transform)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM::transform)));
    
    sVkCommandBufferInheritanceRenderPassTransformInfoQCOM.Set(Napi::String::New(env, "transform"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM, renderArea)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM::renderArea)));
    
    sVkCommandBufferInheritanceRenderPassTransformInfoQCOM.Set(Napi::String::New(env, "renderArea"), obj);
  }
  sVkCommandBufferInheritanceRenderPassTransformInfoQCOM.Set(strByteLength, Napi::Number::New(env, sizeof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM)));
  out.Set(Napi::String::New(env, "VkCommandBufferInheritanceRenderPassTransformInfoQCOM"), sVkCommandBufferInheritanceRenderPassTransformInfoQCOM);
  Napi::Object sVkPhysicalDeviceDiagnosticsConfigFeaturesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV::sType)));
    
    sVkPhysicalDeviceDiagnosticsConfigFeaturesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV::pNext)));
    
    sVkPhysicalDeviceDiagnosticsConfigFeaturesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV, diagnosticsConfig)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV::diagnosticsConfig)));
    
    sVkPhysicalDeviceDiagnosticsConfigFeaturesNV.Set(Napi::String::New(env, "diagnosticsConfig"), obj);
  }
  sVkPhysicalDeviceDiagnosticsConfigFeaturesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceDiagnosticsConfigFeaturesNV"), sVkPhysicalDeviceDiagnosticsConfigFeaturesNV);
  Napi::Object sVkDeviceDiagnosticsConfigCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceDiagnosticsConfigCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceDiagnosticsConfigCreateInfoNV::sType)));
    
    sVkDeviceDiagnosticsConfigCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceDiagnosticsConfigCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceDiagnosticsConfigCreateInfoNV::pNext)));
    
    sVkDeviceDiagnosticsConfigCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkDeviceDiagnosticsConfigCreateInfoNV, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceDiagnosticsConfigCreateInfoNV::flags)));
    
    sVkDeviceDiagnosticsConfigCreateInfoNV.Set(Napi::String::New(env, "flags"), obj);
  }
  sVkDeviceDiagnosticsConfigCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkDeviceDiagnosticsConfigCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkDeviceDiagnosticsConfigCreateInfoNV"), sVkDeviceDiagnosticsConfigCreateInfoNV);
  Napi::Object sVkPhysicalDeviceRobustness2FeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2FeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRobustness2FeaturesEXT::sType)));
    
    sVkPhysicalDeviceRobustness2FeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2FeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRobustness2FeaturesEXT::pNext)));
    
    sVkPhysicalDeviceRobustness2FeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2FeaturesEXT, robustBufferAccess2)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRobustness2FeaturesEXT::robustBufferAccess2)));
    
    sVkPhysicalDeviceRobustness2FeaturesEXT.Set(Napi::String::New(env, "robustBufferAccess2"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2FeaturesEXT, robustImageAccess2)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRobustness2FeaturesEXT::robustImageAccess2)));
    
    sVkPhysicalDeviceRobustness2FeaturesEXT.Set(Napi::String::New(env, "robustImageAccess2"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2FeaturesEXT, nullDescriptor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRobustness2FeaturesEXT::nullDescriptor)));
    
    sVkPhysicalDeviceRobustness2FeaturesEXT.Set(Napi::String::New(env, "nullDescriptor"), obj);
  }
  sVkPhysicalDeviceRobustness2FeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRobustness2FeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceRobustness2FeaturesEXT"), sVkPhysicalDeviceRobustness2FeaturesEXT);
  Napi::Object sVkPhysicalDeviceRobustness2PropertiesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2PropertiesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRobustness2PropertiesEXT::sType)));
    
    sVkPhysicalDeviceRobustness2PropertiesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2PropertiesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRobustness2PropertiesEXT::pNext)));
    
    sVkPhysicalDeviceRobustness2PropertiesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2PropertiesEXT, robustStorageBufferAccessSizeAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRobustness2PropertiesEXT::robustStorageBufferAccessSizeAlignment)));
    
    sVkPhysicalDeviceRobustness2PropertiesEXT.Set(Napi::String::New(env, "robustStorageBufferAccessSizeAlignment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2PropertiesEXT, robustUniformBufferAccessSizeAlignment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRobustness2PropertiesEXT::robustUniformBufferAccessSizeAlignment)));
    
    sVkPhysicalDeviceRobustness2PropertiesEXT.Set(Napi::String::New(env, "robustUniformBufferAccessSizeAlignment"), obj);
  }
  sVkPhysicalDeviceRobustness2PropertiesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceRobustness2PropertiesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceRobustness2PropertiesEXT"), sVkPhysicalDeviceRobustness2PropertiesEXT);
  Napi::Object sVkPhysicalDeviceImageRobustnessFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageRobustnessFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageRobustnessFeaturesEXT::sType)));
    
    sVkPhysicalDeviceImageRobustnessFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageRobustnessFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageRobustnessFeaturesEXT::pNext)));
    
    sVkPhysicalDeviceImageRobustnessFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceImageRobustnessFeaturesEXT, robustImageAccess)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageRobustnessFeaturesEXT::robustImageAccess)));
    
    sVkPhysicalDeviceImageRobustnessFeaturesEXT.Set(Napi::String::New(env, "robustImageAccess"), obj);
  }
  sVkPhysicalDeviceImageRobustnessFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceImageRobustnessFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceImageRobustnessFeaturesEXT"), sVkPhysicalDeviceImageRobustnessFeaturesEXT);
  Napi::Object sVkPhysicalDevice4444FormatsFeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice4444FormatsFeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice4444FormatsFeaturesEXT::sType)));
    
    sVkPhysicalDevice4444FormatsFeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice4444FormatsFeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice4444FormatsFeaturesEXT::pNext)));
    
    sVkPhysicalDevice4444FormatsFeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice4444FormatsFeaturesEXT, formatA4R4G4B4)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice4444FormatsFeaturesEXT::formatA4R4G4B4)));
    
    sVkPhysicalDevice4444FormatsFeaturesEXT.Set(Napi::String::New(env, "formatA4R4G4B4"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDevice4444FormatsFeaturesEXT, formatA4B4G4R4)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice4444FormatsFeaturesEXT::formatA4B4G4R4)));
    
    sVkPhysicalDevice4444FormatsFeaturesEXT.Set(Napi::String::New(env, "formatA4B4G4R4"), obj);
  }
  sVkPhysicalDevice4444FormatsFeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDevice4444FormatsFeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDevice4444FormatsFeaturesEXT"), sVkPhysicalDevice4444FormatsFeaturesEXT);
  Napi::Object sVkBufferCopy2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCopy2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCopy2KHR::sType)));
    
    sVkBufferCopy2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCopy2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCopy2KHR::pNext)));
    
    sVkBufferCopy2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCopy2KHR, srcOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCopy2KHR::srcOffset)));
    
    sVkBufferCopy2KHR.Set(Napi::String::New(env, "srcOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCopy2KHR, dstOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCopy2KHR::dstOffset)));
    
    sVkBufferCopy2KHR.Set(Napi::String::New(env, "dstOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferCopy2KHR, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCopy2KHR::size)));
    
    sVkBufferCopy2KHR.Set(Napi::String::New(env, "size"), obj);
  }
  sVkBufferCopy2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferCopy2KHR)));
  out.Set(Napi::String::New(env, "VkBufferCopy2KHR"), sVkBufferCopy2KHR);
  Napi::Object sVkImageCopy2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCopy2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCopy2KHR::sType)));
    
    sVkImageCopy2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCopy2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCopy2KHR::pNext)));
    
    sVkImageCopy2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCopy2KHR, srcSubresource)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCopy2KHR::srcSubresource)));
    
    sVkImageCopy2KHR.Set(Napi::String::New(env, "srcSubresource"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCopy2KHR, srcOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCopy2KHR::srcOffset)));
    
    sVkImageCopy2KHR.Set(Napi::String::New(env, "srcOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCopy2KHR, dstSubresource)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCopy2KHR::dstSubresource)));
    
    sVkImageCopy2KHR.Set(Napi::String::New(env, "dstSubresource"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCopy2KHR, dstOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCopy2KHR::dstOffset)));
    
    sVkImageCopy2KHR.Set(Napi::String::New(env, "dstOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageCopy2KHR, extent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCopy2KHR::extent)));
    
    sVkImageCopy2KHR.Set(Napi::String::New(env, "extent"), obj);
  }
  sVkImageCopy2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageCopy2KHR)));
  out.Set(Napi::String::New(env, "VkImageCopy2KHR"), sVkImageCopy2KHR);
  Napi::Object sVkImageBlit2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageBlit2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageBlit2KHR::sType)));
    
    sVkImageBlit2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageBlit2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageBlit2KHR::pNext)));
    
    sVkImageBlit2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageBlit2KHR, srcSubresource)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageBlit2KHR::srcSubresource)));
    
    sVkImageBlit2KHR.Set(Napi::String::New(env, "srcSubresource"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageBlit2KHR, srcOffsets)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageBlit2KHR::srcOffsets)));
    
    sVkImageBlit2KHR.Set(Napi::String::New(env, "srcOffsets"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageBlit2KHR, dstSubresource)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageBlit2KHR::dstSubresource)));
    
    sVkImageBlit2KHR.Set(Napi::String::New(env, "dstSubresource"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageBlit2KHR, dstOffsets)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageBlit2KHR::dstOffsets)));
    
    sVkImageBlit2KHR.Set(Napi::String::New(env, "dstOffsets"), obj);
  }
  sVkImageBlit2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageBlit2KHR)));
  out.Set(Napi::String::New(env, "VkImageBlit2KHR"), sVkImageBlit2KHR);
  Napi::Object sVkBufferImageCopy2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferImageCopy2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy2KHR::sType)));
    
    sVkBufferImageCopy2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferImageCopy2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy2KHR::pNext)));
    
    sVkBufferImageCopy2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferImageCopy2KHR, bufferOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy2KHR::bufferOffset)));
    
    sVkBufferImageCopy2KHR.Set(Napi::String::New(env, "bufferOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferImageCopy2KHR, bufferRowLength)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy2KHR::bufferRowLength)));
    
    sVkBufferImageCopy2KHR.Set(Napi::String::New(env, "bufferRowLength"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferImageCopy2KHR, bufferImageHeight)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy2KHR::bufferImageHeight)));
    
    sVkBufferImageCopy2KHR.Set(Napi::String::New(env, "bufferImageHeight"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferImageCopy2KHR, imageSubresource)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy2KHR::imageSubresource)));
    
    sVkBufferImageCopy2KHR.Set(Napi::String::New(env, "imageSubresource"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferImageCopy2KHR, imageOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy2KHR::imageOffset)));
    
    sVkBufferImageCopy2KHR.Set(Napi::String::New(env, "imageOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBufferImageCopy2KHR, imageExtent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy2KHR::imageExtent)));
    
    sVkBufferImageCopy2KHR.Set(Napi::String::New(env, "imageExtent"), obj);
  }
  sVkBufferImageCopy2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkBufferImageCopy2KHR)));
  out.Set(Napi::String::New(env, "VkBufferImageCopy2KHR"), sVkBufferImageCopy2KHR);
  Napi::Object sVkImageResolve2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageResolve2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageResolve2KHR::sType)));
    
    sVkImageResolve2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageResolve2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageResolve2KHR::pNext)));
    
    sVkImageResolve2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageResolve2KHR, srcSubresource)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageResolve2KHR::srcSubresource)));
    
    sVkImageResolve2KHR.Set(Napi::String::New(env, "srcSubresource"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageResolve2KHR, srcOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageResolve2KHR::srcOffset)));
    
    sVkImageResolve2KHR.Set(Napi::String::New(env, "srcOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageResolve2KHR, dstSubresource)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageResolve2KHR::dstSubresource)));
    
    sVkImageResolve2KHR.Set(Napi::String::New(env, "dstSubresource"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageResolve2KHR, dstOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageResolve2KHR::dstOffset)));
    
    sVkImageResolve2KHR.Set(Napi::String::New(env, "dstOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkImageResolve2KHR, extent)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageResolve2KHR::extent)));
    
    sVkImageResolve2KHR.Set(Napi::String::New(env, "extent"), obj);
  }
  sVkImageResolve2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkImageResolve2KHR)));
  out.Set(Napi::String::New(env, "VkImageResolve2KHR"), sVkImageResolve2KHR);
  Napi::Object sVkCopyBufferInfo2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyBufferInfo2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyBufferInfo2KHR::sType)));
    
    sVkCopyBufferInfo2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyBufferInfo2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyBufferInfo2KHR::pNext)));
    
    sVkCopyBufferInfo2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyBufferInfo2KHR, srcBuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyBufferInfo2KHR::srcBuffer)));
    
    sVkCopyBufferInfo2KHR.Set(Napi::String::New(env, "srcBuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyBufferInfo2KHR, dstBuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyBufferInfo2KHR::dstBuffer)));
    
    sVkCopyBufferInfo2KHR.Set(Napi::String::New(env, "dstBuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyBufferInfo2KHR, regionCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyBufferInfo2KHR::regionCount)));
    
    sVkCopyBufferInfo2KHR.Set(Napi::String::New(env, "regionCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyBufferInfo2KHR, pRegions)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyBufferInfo2KHR::pRegions)));
    
    sVkCopyBufferInfo2KHR.Set(Napi::String::New(env, "pRegions"), obj);
  }
  sVkCopyBufferInfo2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyBufferInfo2KHR)));
  out.Set(Napi::String::New(env, "VkCopyBufferInfo2KHR"), sVkCopyBufferInfo2KHR);
  Napi::Object sVkCopyImageInfo2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyImageInfo2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageInfo2KHR::sType)));
    
    sVkCopyImageInfo2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyImageInfo2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageInfo2KHR::pNext)));
    
    sVkCopyImageInfo2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyImageInfo2KHR, srcImage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageInfo2KHR::srcImage)));
    
    sVkCopyImageInfo2KHR.Set(Napi::String::New(env, "srcImage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyImageInfo2KHR, srcImageLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageInfo2KHR::srcImageLayout)));
    
    sVkCopyImageInfo2KHR.Set(Napi::String::New(env, "srcImageLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyImageInfo2KHR, dstImage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageInfo2KHR::dstImage)));
    
    sVkCopyImageInfo2KHR.Set(Napi::String::New(env, "dstImage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyImageInfo2KHR, dstImageLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageInfo2KHR::dstImageLayout)));
    
    sVkCopyImageInfo2KHR.Set(Napi::String::New(env, "dstImageLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyImageInfo2KHR, regionCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageInfo2KHR::regionCount)));
    
    sVkCopyImageInfo2KHR.Set(Napi::String::New(env, "regionCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyImageInfo2KHR, pRegions)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageInfo2KHR::pRegions)));
    
    sVkCopyImageInfo2KHR.Set(Napi::String::New(env, "pRegions"), obj);
  }
  sVkCopyImageInfo2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageInfo2KHR)));
  out.Set(Napi::String::New(env, "VkCopyImageInfo2KHR"), sVkCopyImageInfo2KHR);
  Napi::Object sVkBlitImageInfo2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBlitImageInfo2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBlitImageInfo2KHR::sType)));
    
    sVkBlitImageInfo2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBlitImageInfo2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBlitImageInfo2KHR::pNext)));
    
    sVkBlitImageInfo2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBlitImageInfo2KHR, srcImage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBlitImageInfo2KHR::srcImage)));
    
    sVkBlitImageInfo2KHR.Set(Napi::String::New(env, "srcImage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBlitImageInfo2KHR, srcImageLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBlitImageInfo2KHR::srcImageLayout)));
    
    sVkBlitImageInfo2KHR.Set(Napi::String::New(env, "srcImageLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBlitImageInfo2KHR, dstImage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBlitImageInfo2KHR::dstImage)));
    
    sVkBlitImageInfo2KHR.Set(Napi::String::New(env, "dstImage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBlitImageInfo2KHR, dstImageLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBlitImageInfo2KHR::dstImageLayout)));
    
    sVkBlitImageInfo2KHR.Set(Napi::String::New(env, "dstImageLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBlitImageInfo2KHR, regionCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBlitImageInfo2KHR::regionCount)));
    
    sVkBlitImageInfo2KHR.Set(Napi::String::New(env, "regionCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBlitImageInfo2KHR, pRegions)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBlitImageInfo2KHR::pRegions)));
    
    sVkBlitImageInfo2KHR.Set(Napi::String::New(env, "pRegions"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkBlitImageInfo2KHR, filter)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkBlitImageInfo2KHR::filter)));
    
    sVkBlitImageInfo2KHR.Set(Napi::String::New(env, "filter"), obj);
  }
  sVkBlitImageInfo2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkBlitImageInfo2KHR)));
  out.Set(Napi::String::New(env, "VkBlitImageInfo2KHR"), sVkBlitImageInfo2KHR);
  Napi::Object sVkCopyBufferToImageInfo2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyBufferToImageInfo2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyBufferToImageInfo2KHR::sType)));
    
    sVkCopyBufferToImageInfo2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyBufferToImageInfo2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyBufferToImageInfo2KHR::pNext)));
    
    sVkCopyBufferToImageInfo2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyBufferToImageInfo2KHR, srcBuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyBufferToImageInfo2KHR::srcBuffer)));
    
    sVkCopyBufferToImageInfo2KHR.Set(Napi::String::New(env, "srcBuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyBufferToImageInfo2KHR, dstImage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyBufferToImageInfo2KHR::dstImage)));
    
    sVkCopyBufferToImageInfo2KHR.Set(Napi::String::New(env, "dstImage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyBufferToImageInfo2KHR, dstImageLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyBufferToImageInfo2KHR::dstImageLayout)));
    
    sVkCopyBufferToImageInfo2KHR.Set(Napi::String::New(env, "dstImageLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyBufferToImageInfo2KHR, regionCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyBufferToImageInfo2KHR::regionCount)));
    
    sVkCopyBufferToImageInfo2KHR.Set(Napi::String::New(env, "regionCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyBufferToImageInfo2KHR, pRegions)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyBufferToImageInfo2KHR::pRegions)));
    
    sVkCopyBufferToImageInfo2KHR.Set(Napi::String::New(env, "pRegions"), obj);
  }
  sVkCopyBufferToImageInfo2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyBufferToImageInfo2KHR)));
  out.Set(Napi::String::New(env, "VkCopyBufferToImageInfo2KHR"), sVkCopyBufferToImageInfo2KHR);
  Napi::Object sVkCopyImageToBufferInfo2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyImageToBufferInfo2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageToBufferInfo2KHR::sType)));
    
    sVkCopyImageToBufferInfo2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyImageToBufferInfo2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageToBufferInfo2KHR::pNext)));
    
    sVkCopyImageToBufferInfo2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyImageToBufferInfo2KHR, srcImage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageToBufferInfo2KHR::srcImage)));
    
    sVkCopyImageToBufferInfo2KHR.Set(Napi::String::New(env, "srcImage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyImageToBufferInfo2KHR, srcImageLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageToBufferInfo2KHR::srcImageLayout)));
    
    sVkCopyImageToBufferInfo2KHR.Set(Napi::String::New(env, "srcImageLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyImageToBufferInfo2KHR, dstBuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageToBufferInfo2KHR::dstBuffer)));
    
    sVkCopyImageToBufferInfo2KHR.Set(Napi::String::New(env, "dstBuffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyImageToBufferInfo2KHR, regionCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageToBufferInfo2KHR::regionCount)));
    
    sVkCopyImageToBufferInfo2KHR.Set(Napi::String::New(env, "regionCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkCopyImageToBufferInfo2KHR, pRegions)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageToBufferInfo2KHR::pRegions)));
    
    sVkCopyImageToBufferInfo2KHR.Set(Napi::String::New(env, "pRegions"), obj);
  }
  sVkCopyImageToBufferInfo2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkCopyImageToBufferInfo2KHR)));
  out.Set(Napi::String::New(env, "VkCopyImageToBufferInfo2KHR"), sVkCopyImageToBufferInfo2KHR);
  Napi::Object sVkResolveImageInfo2KHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkResolveImageInfo2KHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkResolveImageInfo2KHR::sType)));
    
    sVkResolveImageInfo2KHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkResolveImageInfo2KHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkResolveImageInfo2KHR::pNext)));
    
    sVkResolveImageInfo2KHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkResolveImageInfo2KHR, srcImage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkResolveImageInfo2KHR::srcImage)));
    
    sVkResolveImageInfo2KHR.Set(Napi::String::New(env, "srcImage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkResolveImageInfo2KHR, srcImageLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkResolveImageInfo2KHR::srcImageLayout)));
    
    sVkResolveImageInfo2KHR.Set(Napi::String::New(env, "srcImageLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkResolveImageInfo2KHR, dstImage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkResolveImageInfo2KHR::dstImage)));
    
    sVkResolveImageInfo2KHR.Set(Napi::String::New(env, "dstImage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkResolveImageInfo2KHR, dstImageLayout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkResolveImageInfo2KHR::dstImageLayout)));
    
    sVkResolveImageInfo2KHR.Set(Napi::String::New(env, "dstImageLayout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkResolveImageInfo2KHR, regionCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkResolveImageInfo2KHR::regionCount)));
    
    sVkResolveImageInfo2KHR.Set(Napi::String::New(env, "regionCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkResolveImageInfo2KHR, pRegions)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkResolveImageInfo2KHR::pRegions)));
    
    sVkResolveImageInfo2KHR.Set(Napi::String::New(env, "pRegions"), obj);
  }
  sVkResolveImageInfo2KHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkResolveImageInfo2KHR)));
  out.Set(Napi::String::New(env, "VkResolveImageInfo2KHR"), sVkResolveImageInfo2KHR);
  Napi::Object sVkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT::sType)));
    
    sVkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT::pNext)));
    
    sVkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, shaderImageInt64Atomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT::shaderImageInt64Atomics)));
    
    sVkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.Set(Napi::String::New(env, "shaderImageInt64Atomics"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, sparseImageInt64Atomics)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT::sparseImageInt64Atomics)));
    
    sVkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.Set(Napi::String::New(env, "sparseImageInt64Atomics"), obj);
  }
  sVkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT"), sVkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT);
  Napi::Object sVkFragmentShadingRateAttachmentInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFragmentShadingRateAttachmentInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFragmentShadingRateAttachmentInfoKHR::sType)));
    
    sVkFragmentShadingRateAttachmentInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFragmentShadingRateAttachmentInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFragmentShadingRateAttachmentInfoKHR::pNext)));
    
    sVkFragmentShadingRateAttachmentInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFragmentShadingRateAttachmentInfoKHR, pFragmentShadingRateAttachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFragmentShadingRateAttachmentInfoKHR::pFragmentShadingRateAttachment)));
    
    sVkFragmentShadingRateAttachmentInfoKHR.Set(Napi::String::New(env, "pFragmentShadingRateAttachment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkFragmentShadingRateAttachmentInfoKHR, shadingRateAttachmentTexelSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkFragmentShadingRateAttachmentInfoKHR::shadingRateAttachmentTexelSize)));
    
    sVkFragmentShadingRateAttachmentInfoKHR.Set(Napi::String::New(env, "shadingRateAttachmentTexelSize"), obj);
  }
  sVkFragmentShadingRateAttachmentInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkFragmentShadingRateAttachmentInfoKHR)));
  out.Set(Napi::String::New(env, "VkFragmentShadingRateAttachmentInfoKHR"), sVkFragmentShadingRateAttachmentInfoKHR);
  Napi::Object sVkPipelineFragmentShadingRateStateCreateInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateStateCreateInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineFragmentShadingRateStateCreateInfoKHR::sType)));
    
    sVkPipelineFragmentShadingRateStateCreateInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateStateCreateInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineFragmentShadingRateStateCreateInfoKHR::pNext)));
    
    sVkPipelineFragmentShadingRateStateCreateInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateStateCreateInfoKHR, fragmentSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineFragmentShadingRateStateCreateInfoKHR::fragmentSize)));
    
    sVkPipelineFragmentShadingRateStateCreateInfoKHR.Set(Napi::String::New(env, "fragmentSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateStateCreateInfoKHR, combinerOps)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineFragmentShadingRateStateCreateInfoKHR::combinerOps)));
    
    sVkPipelineFragmentShadingRateStateCreateInfoKHR.Set(Napi::String::New(env, "combinerOps"), obj);
  }
  sVkPipelineFragmentShadingRateStateCreateInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineFragmentShadingRateStateCreateInfoKHR)));
  out.Set(Napi::String::New(env, "VkPipelineFragmentShadingRateStateCreateInfoKHR"), sVkPipelineFragmentShadingRateStateCreateInfoKHR);
  Napi::Object sVkPhysicalDeviceFragmentShadingRateFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR::sType)));
    
    sVkPhysicalDeviceFragmentShadingRateFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceFragmentShadingRateFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, pipelineFragmentShadingRate)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR::pipelineFragmentShadingRate)));
    
    sVkPhysicalDeviceFragmentShadingRateFeaturesKHR.Set(Napi::String::New(env, "pipelineFragmentShadingRate"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, primitiveFragmentShadingRate)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR::primitiveFragmentShadingRate)));
    
    sVkPhysicalDeviceFragmentShadingRateFeaturesKHR.Set(Napi::String::New(env, "primitiveFragmentShadingRate"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, attachmentFragmentShadingRate)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR::attachmentFragmentShadingRate)));
    
    sVkPhysicalDeviceFragmentShadingRateFeaturesKHR.Set(Napi::String::New(env, "attachmentFragmentShadingRate"), obj);
  }
  sVkPhysicalDeviceFragmentShadingRateFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFragmentShadingRateFeaturesKHR"), sVkPhysicalDeviceFragmentShadingRateFeaturesKHR);
  Napi::Object sVkPhysicalDeviceFragmentShadingRatePropertiesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::sType)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::pNext)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, minFragmentShadingRateAttachmentTexelSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::minFragmentShadingRateAttachmentTexelSize)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "minFragmentShadingRateAttachmentTexelSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateAttachmentTexelSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentShadingRateAttachmentTexelSize)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "maxFragmentShadingRateAttachmentTexelSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateAttachmentTexelSizeAspectRatio)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentShadingRateAttachmentTexelSizeAspectRatio)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "maxFragmentShadingRateAttachmentTexelSizeAspectRatio"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, primitiveFragmentShadingRateWithMultipleViewports)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::primitiveFragmentShadingRateWithMultipleViewports)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "primitiveFragmentShadingRateWithMultipleViewports"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, layeredShadingRateAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::layeredShadingRateAttachments)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "layeredShadingRateAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateNonTrivialCombinerOps)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateNonTrivialCombinerOps)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "fragmentShadingRateNonTrivialCombinerOps"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentSize)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "maxFragmentSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentSizeAspectRatio)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentSizeAspectRatio)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "maxFragmentSizeAspectRatio"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateCoverageSamples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentShadingRateCoverageSamples)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "maxFragmentShadingRateCoverageSamples"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateRasterizationSamples)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentShadingRateRasterizationSamples)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "maxFragmentShadingRateRasterizationSamples"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithShaderDepthStencilWrites)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithShaderDepthStencilWrites)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "fragmentShadingRateWithShaderDepthStencilWrites"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithSampleMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithSampleMask)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "fragmentShadingRateWithSampleMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithShaderSampleMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithShaderSampleMask)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "fragmentShadingRateWithShaderSampleMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithConservativeRasterization)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithConservativeRasterization)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "fragmentShadingRateWithConservativeRasterization"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithFragmentShaderInterlock)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithFragmentShaderInterlock)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "fragmentShadingRateWithFragmentShaderInterlock"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithCustomSampleLocations)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithCustomSampleLocations)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "fragmentShadingRateWithCustomSampleLocations"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateStrictMultiplyCombiner)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateStrictMultiplyCombiner)));
    
    sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(Napi::String::New(env, "fragmentShadingRateStrictMultiplyCombiner"), obj);
  }
  sVkPhysicalDeviceFragmentShadingRatePropertiesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFragmentShadingRatePropertiesKHR"), sVkPhysicalDeviceFragmentShadingRatePropertiesKHR);
  Napi::Object sVkPhysicalDeviceFragmentShadingRateKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateKHR::sType)));
    
    sVkPhysicalDeviceFragmentShadingRateKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateKHR::pNext)));
    
    sVkPhysicalDeviceFragmentShadingRateKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateKHR, sampleCounts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateKHR::sampleCounts)));
    
    sVkPhysicalDeviceFragmentShadingRateKHR.Set(Napi::String::New(env, "sampleCounts"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateKHR, fragmentSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateKHR::fragmentSize)));
    
    sVkPhysicalDeviceFragmentShadingRateKHR.Set(Napi::String::New(env, "fragmentSize"), obj);
  }
  sVkPhysicalDeviceFragmentShadingRateKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFragmentShadingRateKHR"), sVkPhysicalDeviceFragmentShadingRateKHR);
  Napi::Object sVkPhysicalDeviceShaderTerminateInvocationFeaturesKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR::sType)));
    
    sVkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR::pNext)));
    
    sVkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR, shaderTerminateInvocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR::shaderTerminateInvocation)));
    
    sVkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.Set(Napi::String::New(env, "shaderTerminateInvocation"), obj);
  }
  sVkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR"), sVkPhysicalDeviceShaderTerminateInvocationFeaturesKHR);
  Napi::Object sVkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::sType)));
    
    sVkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::pNext)));
    
    sVkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV, fragmentShadingRateEnums)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::fragmentShadingRateEnums)));
    
    sVkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.Set(Napi::String::New(env, "fragmentShadingRateEnums"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV, supersampleFragmentShadingRates)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::supersampleFragmentShadingRates)));
    
    sVkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.Set(Napi::String::New(env, "supersampleFragmentShadingRates"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV, noInvocationFragmentShadingRates)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::noInvocationFragmentShadingRates)));
    
    sVkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.Set(Napi::String::New(env, "noInvocationFragmentShadingRates"), obj);
  }
  sVkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV"), sVkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV);
  Napi::Object sVkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV::sType)));
    
    sVkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV::pNext)));
    
    sVkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV, maxFragmentShadingRateInvocationCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV::maxFragmentShadingRateInvocationCount)));
    
    sVkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.Set(Napi::String::New(env, "maxFragmentShadingRateInvocationCount"), obj);
  }
  sVkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV)));
  out.Set(Napi::String::New(env, "VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV"), sVkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV);
  Napi::Object sVkPipelineFragmentShadingRateEnumStateCreateInfoNV = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV::sType)));
    
    sVkPipelineFragmentShadingRateEnumStateCreateInfoNV.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV::pNext)));
    
    sVkPipelineFragmentShadingRateEnumStateCreateInfoNV.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV, shadingRateType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV::shadingRateType)));
    
    sVkPipelineFragmentShadingRateEnumStateCreateInfoNV.Set(Napi::String::New(env, "shadingRateType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV, shadingRate)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV::shadingRate)));
    
    sVkPipelineFragmentShadingRateEnumStateCreateInfoNV.Set(Napi::String::New(env, "shadingRate"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV, combinerOps)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV::combinerOps)));
    
    sVkPipelineFragmentShadingRateEnumStateCreateInfoNV.Set(Napi::String::New(env, "combinerOps"), obj);
  }
  sVkPipelineFragmentShadingRateEnumStateCreateInfoNV.Set(strByteLength, Napi::Number::New(env, sizeof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV)));
  out.Set(Napi::String::New(env, "VkPipelineFragmentShadingRateEnumStateCreateInfoNV"), sVkPipelineFragmentShadingRateEnumStateCreateInfoNV);
  Napi::Object sVkAccelerationStructureBuildSizesInfoKHR = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildSizesInfoKHR, sType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildSizesInfoKHR::sType)));
    
    sVkAccelerationStructureBuildSizesInfoKHR.Set(Napi::String::New(env, "sType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildSizesInfoKHR, pNext)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildSizesInfoKHR::pNext)));
    
    sVkAccelerationStructureBuildSizesInfoKHR.Set(Napi::String::New(env, "pNext"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildSizesInfoKHR, accelerationStructureSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildSizesInfoKHR::accelerationStructureSize)));
    
    sVkAccelerationStructureBuildSizesInfoKHR.Set(Napi::String::New(env, "accelerationStructureSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildSizesInfoKHR, updateScratchSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildSizesInfoKHR::updateScratchSize)));
    
    sVkAccelerationStructureBuildSizesInfoKHR.Set(Napi::String::New(env, "updateScratchSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(VkAccelerationStructureBuildSizesInfoKHR, buildScratchSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildSizesInfoKHR::buildScratchSize)));
    
    sVkAccelerationStructureBuildSizesInfoKHR.Set(Napi::String::New(env, "buildScratchSize"), obj);
  }
  sVkAccelerationStructureBuildSizesInfoKHR.Set(strByteLength, Napi::Number::New(env, sizeof(VkAccelerationStructureBuildSizesInfoKHR)));
  out.Set(Napi::String::New(env, "VkAccelerationStructureBuildSizesInfoKHR"), sVkAccelerationStructureBuildSizesInfoKHR);
  

  return out;
}
