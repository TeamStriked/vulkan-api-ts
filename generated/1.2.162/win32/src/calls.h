/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY vulkan-api v0.9.3
 */
#ifndef __VK_CALLS_H__
#define __VK_CALLS_H__

#define NAPI_EXPERIMENTAL
#include <napi.h>

#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

#include "utils.h"

#include <map>
#include <string>
#include <memory>

inline VkStructureType GetStructureTypeFromObject(Napi::Object obj) {
  if (!obj.Has("sType")) Napi::TypeError::New(obj.Env(), "Failed to resolve structure type, 'sType' property is missing").ThrowAsJavaScriptException();
  VkStructureType sType = static_cast<VkStructureType>(obj.Get("sType").As<Napi::Number>().Int32Value());
  return sType;
};

VkDevice currentDevice = VK_NULL_HANDLE;
VkInstance currentInstance = VK_NULL_HANDLE;


static PFN_vkCmdBeginConditionalRenderingEXT $vkCmdBeginConditionalRenderingEXT = nullptr;
static PFN_vkCmdEndConditionalRenderingEXT $vkCmdEndConditionalRenderingEXT = nullptr;
static PFN_vkGetPhysicalDeviceDisplayPropertiesKHR $vkGetPhysicalDeviceDisplayPropertiesKHR = nullptr;
static PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR $vkGetPhysicalDeviceDisplayPlanePropertiesKHR = nullptr;
static PFN_vkGetDisplayPlaneSupportedDisplaysKHR $vkGetDisplayPlaneSupportedDisplaysKHR = nullptr;
static PFN_vkGetDisplayModePropertiesKHR $vkGetDisplayModePropertiesKHR = nullptr;
static PFN_vkCreateDisplayModeKHR $vkCreateDisplayModeKHR = nullptr;
static PFN_vkGetDisplayPlaneCapabilitiesKHR $vkGetDisplayPlaneCapabilitiesKHR = nullptr;
static PFN_vkCreateDisplayPlaneSurfaceKHR $vkCreateDisplayPlaneSurfaceKHR = nullptr;
static PFN_vkCreateSharedSwapchainsKHR $vkCreateSharedSwapchainsKHR = nullptr;
static PFN_vkDestroySurfaceKHR $vkDestroySurfaceKHR = nullptr;
static PFN_vkGetPhysicalDeviceSurfaceSupportKHR $vkGetPhysicalDeviceSurfaceSupportKHR = nullptr;
static PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR $vkGetPhysicalDeviceSurfaceCapabilitiesKHR = nullptr;
static PFN_vkGetPhysicalDeviceSurfaceFormatsKHR $vkGetPhysicalDeviceSurfaceFormatsKHR = nullptr;
static PFN_vkGetPhysicalDeviceSurfacePresentModesKHR $vkGetPhysicalDeviceSurfacePresentModesKHR = nullptr;
static PFN_vkCreateSwapchainKHR $vkCreateSwapchainKHR = nullptr;
static PFN_vkDestroySwapchainKHR $vkDestroySwapchainKHR = nullptr;
static PFN_vkGetSwapchainImagesKHR $vkGetSwapchainImagesKHR = nullptr;
static PFN_vkAcquireNextImageKHR $vkAcquireNextImageKHR = nullptr;
static PFN_vkQueuePresentKHR $vkQueuePresentKHR = nullptr;
static PFN_vkCreateWin32SurfaceKHR $vkCreateWin32SurfaceKHR = nullptr;
static PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR $vkGetPhysicalDeviceWin32PresentationSupportKHR = nullptr;
static PFN_vkCreateDebugReportCallbackEXT $vkCreateDebugReportCallbackEXT = nullptr;
static PFN_vkDestroyDebugReportCallbackEXT $vkDestroyDebugReportCallbackEXT = nullptr;
static PFN_vkDebugReportMessageEXT $vkDebugReportMessageEXT = nullptr;
static PFN_vkDebugMarkerSetObjectNameEXT $vkDebugMarkerSetObjectNameEXT = nullptr;
static PFN_vkDebugMarkerSetObjectTagEXT $vkDebugMarkerSetObjectTagEXT = nullptr;
static PFN_vkCmdDebugMarkerBeginEXT $vkCmdDebugMarkerBeginEXT = nullptr;
static PFN_vkCmdDebugMarkerEndEXT $vkCmdDebugMarkerEndEXT = nullptr;
static PFN_vkCmdDebugMarkerInsertEXT $vkCmdDebugMarkerInsertEXT = nullptr;
static PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV $vkGetPhysicalDeviceExternalImageFormatPropertiesNV = nullptr;
static PFN_vkGetMemoryWin32HandleNV $vkGetMemoryWin32HandleNV = nullptr;
static PFN_vkCmdExecuteGeneratedCommandsNV $vkCmdExecuteGeneratedCommandsNV = nullptr;
static PFN_vkCmdPreprocessGeneratedCommandsNV $vkCmdPreprocessGeneratedCommandsNV = nullptr;
static PFN_vkCmdBindPipelineShaderGroupNV $vkCmdBindPipelineShaderGroupNV = nullptr;
static PFN_vkGetGeneratedCommandsMemoryRequirementsNV $vkGetGeneratedCommandsMemoryRequirementsNV = nullptr;
static PFN_vkCreateIndirectCommandsLayoutNV $vkCreateIndirectCommandsLayoutNV = nullptr;
static PFN_vkDestroyIndirectCommandsLayoutNV $vkDestroyIndirectCommandsLayoutNV = nullptr;
static PFN_vkCmdPushDescriptorSetKHR $vkCmdPushDescriptorSetKHR = nullptr;
static PFN_vkGetMemoryWin32HandleKHR $vkGetMemoryWin32HandleKHR = nullptr;
static PFN_vkGetMemoryWin32HandlePropertiesKHR $vkGetMemoryWin32HandlePropertiesKHR = nullptr;
static PFN_vkGetMemoryFdKHR $vkGetMemoryFdKHR = nullptr;
static PFN_vkGetMemoryFdPropertiesKHR $vkGetMemoryFdPropertiesKHR = nullptr;
static PFN_vkGetSemaphoreWin32HandleKHR $vkGetSemaphoreWin32HandleKHR = nullptr;
static PFN_vkImportSemaphoreWin32HandleKHR $vkImportSemaphoreWin32HandleKHR = nullptr;
static PFN_vkGetSemaphoreFdKHR $vkGetSemaphoreFdKHR = nullptr;
static PFN_vkImportSemaphoreFdKHR $vkImportSemaphoreFdKHR = nullptr;
static PFN_vkGetFenceWin32HandleKHR $vkGetFenceWin32HandleKHR = nullptr;
static PFN_vkImportFenceWin32HandleKHR $vkImportFenceWin32HandleKHR = nullptr;
static PFN_vkGetFenceFdKHR $vkGetFenceFdKHR = nullptr;
static PFN_vkImportFenceFdKHR $vkImportFenceFdKHR = nullptr;
static PFN_vkReleaseDisplayEXT $vkReleaseDisplayEXT = nullptr;
static PFN_vkDisplayPowerControlEXT $vkDisplayPowerControlEXT = nullptr;
static PFN_vkRegisterDeviceEventEXT $vkRegisterDeviceEventEXT = nullptr;
static PFN_vkRegisterDisplayEventEXT $vkRegisterDisplayEventEXT = nullptr;
static PFN_vkGetSwapchainCounterEXT $vkGetSwapchainCounterEXT = nullptr;
static PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT $vkGetPhysicalDeviceSurfaceCapabilities2EXT = nullptr;
static PFN_vkGetDeviceGroupPresentCapabilitiesKHR $vkGetDeviceGroupPresentCapabilitiesKHR = nullptr;
static PFN_vkGetDeviceGroupSurfacePresentModesKHR $vkGetDeviceGroupSurfacePresentModesKHR = nullptr;
static PFN_vkAcquireNextImage2KHR $vkAcquireNextImage2KHR = nullptr;
static PFN_vkGetPhysicalDevicePresentRectanglesKHR $vkGetPhysicalDevicePresentRectanglesKHR = nullptr;
static PFN_vkCmdPushDescriptorSetWithTemplateKHR $vkCmdPushDescriptorSetWithTemplateKHR = nullptr;
static PFN_vkSetHdrMetadataEXT $vkSetHdrMetadataEXT = nullptr;
static PFN_vkGetSwapchainStatusKHR $vkGetSwapchainStatusKHR = nullptr;
static PFN_vkGetRefreshCycleDurationGOOGLE $vkGetRefreshCycleDurationGOOGLE = nullptr;
static PFN_vkGetPastPresentationTimingGOOGLE $vkGetPastPresentationTimingGOOGLE = nullptr;
static PFN_vkCmdSetViewportWScalingNV $vkCmdSetViewportWScalingNV = nullptr;
static PFN_vkCmdSetDiscardRectangleEXT $vkCmdSetDiscardRectangleEXT = nullptr;
static PFN_vkCmdSetSampleLocationsEXT $vkCmdSetSampleLocationsEXT = nullptr;
static PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT $vkGetPhysicalDeviceMultisamplePropertiesEXT = nullptr;
static PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR $vkGetPhysicalDeviceSurfaceCapabilities2KHR = nullptr;
static PFN_vkGetPhysicalDeviceSurfaceFormats2KHR $vkGetPhysicalDeviceSurfaceFormats2KHR = nullptr;
static PFN_vkGetPhysicalDeviceDisplayProperties2KHR $vkGetPhysicalDeviceDisplayProperties2KHR = nullptr;
static PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR $vkGetPhysicalDeviceDisplayPlaneProperties2KHR = nullptr;
static PFN_vkGetDisplayModeProperties2KHR $vkGetDisplayModeProperties2KHR = nullptr;
static PFN_vkGetDisplayPlaneCapabilities2KHR $vkGetDisplayPlaneCapabilities2KHR = nullptr;
static PFN_vkCreateValidationCacheEXT $vkCreateValidationCacheEXT = nullptr;
static PFN_vkDestroyValidationCacheEXT $vkDestroyValidationCacheEXT = nullptr;
static PFN_vkGetValidationCacheDataEXT $vkGetValidationCacheDataEXT = nullptr;
static PFN_vkMergeValidationCachesEXT $vkMergeValidationCachesEXT = nullptr;
static PFN_vkGetShaderInfoAMD $vkGetShaderInfoAMD = nullptr;
static PFN_vkSetLocalDimmingAMD $vkSetLocalDimmingAMD = nullptr;
static PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT $vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = nullptr;
static PFN_vkGetCalibratedTimestampsEXT $vkGetCalibratedTimestampsEXT = nullptr;
static PFN_vkSetDebugUtilsObjectNameEXT $vkSetDebugUtilsObjectNameEXT = nullptr;
static PFN_vkSetDebugUtilsObjectTagEXT $vkSetDebugUtilsObjectTagEXT = nullptr;
static PFN_vkQueueBeginDebugUtilsLabelEXT $vkQueueBeginDebugUtilsLabelEXT = nullptr;
static PFN_vkQueueEndDebugUtilsLabelEXT $vkQueueEndDebugUtilsLabelEXT = nullptr;
static PFN_vkQueueInsertDebugUtilsLabelEXT $vkQueueInsertDebugUtilsLabelEXT = nullptr;
static PFN_vkCmdBeginDebugUtilsLabelEXT $vkCmdBeginDebugUtilsLabelEXT = nullptr;
static PFN_vkCmdEndDebugUtilsLabelEXT $vkCmdEndDebugUtilsLabelEXT = nullptr;
static PFN_vkCmdInsertDebugUtilsLabelEXT $vkCmdInsertDebugUtilsLabelEXT = nullptr;
static PFN_vkCreateDebugUtilsMessengerEXT $vkCreateDebugUtilsMessengerEXT = nullptr;
static PFN_vkDestroyDebugUtilsMessengerEXT $vkDestroyDebugUtilsMessengerEXT = nullptr;
static PFN_vkSubmitDebugUtilsMessageEXT $vkSubmitDebugUtilsMessageEXT = nullptr;
static PFN_vkGetMemoryHostPointerPropertiesEXT $vkGetMemoryHostPointerPropertiesEXT = nullptr;
static PFN_vkCmdWriteBufferMarkerAMD $vkCmdWriteBufferMarkerAMD = nullptr;
static PFN_vkCmdSetCheckpointNV $vkCmdSetCheckpointNV = nullptr;
static PFN_vkGetQueueCheckpointDataNV $vkGetQueueCheckpointDataNV = nullptr;
static PFN_vkCmdBindTransformFeedbackBuffersEXT $vkCmdBindTransformFeedbackBuffersEXT = nullptr;
static PFN_vkCmdBeginTransformFeedbackEXT $vkCmdBeginTransformFeedbackEXT = nullptr;
static PFN_vkCmdEndTransformFeedbackEXT $vkCmdEndTransformFeedbackEXT = nullptr;
static PFN_vkCmdBeginQueryIndexedEXT $vkCmdBeginQueryIndexedEXT = nullptr;
static PFN_vkCmdEndQueryIndexedEXT $vkCmdEndQueryIndexedEXT = nullptr;
static PFN_vkCmdDrawIndirectByteCountEXT $vkCmdDrawIndirectByteCountEXT = nullptr;
static PFN_vkCmdSetExclusiveScissorNV $vkCmdSetExclusiveScissorNV = nullptr;
static PFN_vkCmdBindShadingRateImageNV $vkCmdBindShadingRateImageNV = nullptr;
static PFN_vkCmdSetViewportShadingRatePaletteNV $vkCmdSetViewportShadingRatePaletteNV = nullptr;
static PFN_vkCmdSetCoarseSampleOrderNV $vkCmdSetCoarseSampleOrderNV = nullptr;
static PFN_vkCmdDrawMeshTasksNV $vkCmdDrawMeshTasksNV = nullptr;
static PFN_vkCmdDrawMeshTasksIndirectNV $vkCmdDrawMeshTasksIndirectNV = nullptr;
static PFN_vkCmdDrawMeshTasksIndirectCountNV $vkCmdDrawMeshTasksIndirectCountNV = nullptr;
static PFN_vkCompileDeferredNV $vkCompileDeferredNV = nullptr;
static PFN_vkCreateAccelerationStructureNV $vkCreateAccelerationStructureNV = nullptr;
static PFN_vkDestroyAccelerationStructureKHR $vkDestroyAccelerationStructureKHR = nullptr;
static PFN_vkDestroyAccelerationStructureNV $vkDestroyAccelerationStructureNV = nullptr;
static PFN_vkGetAccelerationStructureMemoryRequirementsNV $vkGetAccelerationStructureMemoryRequirementsNV = nullptr;
static PFN_vkBindAccelerationStructureMemoryNV $vkBindAccelerationStructureMemoryNV = nullptr;
static PFN_vkCmdCopyAccelerationStructureNV $vkCmdCopyAccelerationStructureNV = nullptr;
static PFN_vkCmdCopyAccelerationStructureKHR $vkCmdCopyAccelerationStructureKHR = nullptr;
static PFN_vkCopyAccelerationStructureKHR $vkCopyAccelerationStructureKHR = nullptr;
static PFN_vkCmdCopyAccelerationStructureToMemoryKHR $vkCmdCopyAccelerationStructureToMemoryKHR = nullptr;
static PFN_vkCopyAccelerationStructureToMemoryKHR $vkCopyAccelerationStructureToMemoryKHR = nullptr;
static PFN_vkCmdCopyMemoryToAccelerationStructureKHR $vkCmdCopyMemoryToAccelerationStructureKHR = nullptr;
static PFN_vkCopyMemoryToAccelerationStructureKHR $vkCopyMemoryToAccelerationStructureKHR = nullptr;
static PFN_vkCmdWriteAccelerationStructuresPropertiesKHR $vkCmdWriteAccelerationStructuresPropertiesKHR = nullptr;
static PFN_vkCmdWriteAccelerationStructuresPropertiesNV $vkCmdWriteAccelerationStructuresPropertiesNV = nullptr;
static PFN_vkCmdBuildAccelerationStructureNV $vkCmdBuildAccelerationStructureNV = nullptr;
static PFN_vkWriteAccelerationStructuresPropertiesKHR $vkWriteAccelerationStructuresPropertiesKHR = nullptr;
static PFN_vkCmdTraceRaysKHR $vkCmdTraceRaysKHR = nullptr;
static PFN_vkCmdTraceRaysNV $vkCmdTraceRaysNV = nullptr;
static PFN_vkGetRayTracingShaderGroupHandlesKHR $vkGetRayTracingShaderGroupHandlesKHR = nullptr;
static PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR $vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = nullptr;
static PFN_vkGetAccelerationStructureHandleNV $vkGetAccelerationStructureHandleNV = nullptr;
static PFN_vkCreateRayTracingPipelinesNV $vkCreateRayTracingPipelinesNV = nullptr;
static PFN_vkCreateRayTracingPipelinesKHR $vkCreateRayTracingPipelinesKHR = nullptr;
static PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV $vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = nullptr;
static PFN_vkCmdTraceRaysIndirectKHR $vkCmdTraceRaysIndirectKHR = nullptr;
static PFN_vkGetDeviceAccelerationStructureCompatibilityKHR $vkGetDeviceAccelerationStructureCompatibilityKHR = nullptr;
static PFN_vkGetRayTracingShaderGroupStackSizeKHR $vkGetRayTracingShaderGroupStackSizeKHR = nullptr;
static PFN_vkCmdSetRayTracingPipelineStackSizeKHR $vkCmdSetRayTracingPipelineStackSizeKHR = nullptr;
static PFN_vkGetImageViewHandleNVX $vkGetImageViewHandleNVX = nullptr;
static PFN_vkGetImageViewAddressNVX $vkGetImageViewAddressNVX = nullptr;
static PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT $vkGetPhysicalDeviceSurfacePresentModes2EXT = nullptr;
static PFN_vkGetDeviceGroupSurfacePresentModes2EXT $vkGetDeviceGroupSurfacePresentModes2EXT = nullptr;
static PFN_vkAcquireFullScreenExclusiveModeEXT $vkAcquireFullScreenExclusiveModeEXT = nullptr;
static PFN_vkReleaseFullScreenExclusiveModeEXT $vkReleaseFullScreenExclusiveModeEXT = nullptr;
static PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR $vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = nullptr;
static PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR $vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = nullptr;
static PFN_vkAcquireProfilingLockKHR $vkAcquireProfilingLockKHR = nullptr;
static PFN_vkReleaseProfilingLockKHR $vkReleaseProfilingLockKHR = nullptr;
static PFN_vkGetImageDrmFormatModifierPropertiesEXT $vkGetImageDrmFormatModifierPropertiesEXT = nullptr;
static PFN_vkCreateHeadlessSurfaceEXT $vkCreateHeadlessSurfaceEXT = nullptr;
static PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV $vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = nullptr;
static PFN_vkInitializePerformanceApiINTEL $vkInitializePerformanceApiINTEL = nullptr;
static PFN_vkUninitializePerformanceApiINTEL $vkUninitializePerformanceApiINTEL = nullptr;
static PFN_vkCmdSetPerformanceMarkerINTEL $vkCmdSetPerformanceMarkerINTEL = nullptr;
static PFN_vkCmdSetPerformanceStreamMarkerINTEL $vkCmdSetPerformanceStreamMarkerINTEL = nullptr;
static PFN_vkCmdSetPerformanceOverrideINTEL $vkCmdSetPerformanceOverrideINTEL = nullptr;
static PFN_vkAcquirePerformanceConfigurationINTEL $vkAcquirePerformanceConfigurationINTEL = nullptr;
static PFN_vkReleasePerformanceConfigurationINTEL $vkReleasePerformanceConfigurationINTEL = nullptr;
static PFN_vkQueueSetPerformanceConfigurationINTEL $vkQueueSetPerformanceConfigurationINTEL = nullptr;
static PFN_vkGetPerformanceParameterINTEL $vkGetPerformanceParameterINTEL = nullptr;
static PFN_vkGetPipelineExecutablePropertiesKHR $vkGetPipelineExecutablePropertiesKHR = nullptr;
static PFN_vkGetPipelineExecutableStatisticsKHR $vkGetPipelineExecutableStatisticsKHR = nullptr;
static PFN_vkGetPipelineExecutableInternalRepresentationsKHR $vkGetPipelineExecutableInternalRepresentationsKHR = nullptr;
static PFN_vkCmdSetLineStippleEXT $vkCmdSetLineStippleEXT = nullptr;
static PFN_vkGetPhysicalDeviceToolPropertiesEXT $vkGetPhysicalDeviceToolPropertiesEXT = nullptr;
static PFN_vkCreateAccelerationStructureKHR $vkCreateAccelerationStructureKHR = nullptr;
static PFN_vkCmdBuildAccelerationStructuresKHR $vkCmdBuildAccelerationStructuresKHR = nullptr;
static PFN_vkCmdBuildAccelerationStructuresIndirectKHR $vkCmdBuildAccelerationStructuresIndirectKHR = nullptr;
static PFN_vkBuildAccelerationStructuresKHR $vkBuildAccelerationStructuresKHR = nullptr;
static PFN_vkGetAccelerationStructureDeviceAddressKHR $vkGetAccelerationStructureDeviceAddressKHR = nullptr;
static PFN_vkCreateDeferredOperationKHR $vkCreateDeferredOperationKHR = nullptr;
static PFN_vkDestroyDeferredOperationKHR $vkDestroyDeferredOperationKHR = nullptr;
static PFN_vkGetDeferredOperationMaxConcurrencyKHR $vkGetDeferredOperationMaxConcurrencyKHR = nullptr;
static PFN_vkGetDeferredOperationResultKHR $vkGetDeferredOperationResultKHR = nullptr;
static PFN_vkDeferredOperationJoinKHR $vkDeferredOperationJoinKHR = nullptr;
static PFN_vkCmdSetCullModeEXT $vkCmdSetCullModeEXT = nullptr;
static PFN_vkCmdSetFrontFaceEXT $vkCmdSetFrontFaceEXT = nullptr;
static PFN_vkCmdSetPrimitiveTopologyEXT $vkCmdSetPrimitiveTopologyEXT = nullptr;
static PFN_vkCmdSetViewportWithCountEXT $vkCmdSetViewportWithCountEXT = nullptr;
static PFN_vkCmdSetScissorWithCountEXT $vkCmdSetScissorWithCountEXT = nullptr;
static PFN_vkCmdBindVertexBuffers2EXT $vkCmdBindVertexBuffers2EXT = nullptr;
static PFN_vkCmdSetDepthTestEnableEXT $vkCmdSetDepthTestEnableEXT = nullptr;
static PFN_vkCmdSetDepthWriteEnableEXT $vkCmdSetDepthWriteEnableEXT = nullptr;
static PFN_vkCmdSetDepthCompareOpEXT $vkCmdSetDepthCompareOpEXT = nullptr;
static PFN_vkCmdSetDepthBoundsTestEnableEXT $vkCmdSetDepthBoundsTestEnableEXT = nullptr;
static PFN_vkCmdSetStencilTestEnableEXT $vkCmdSetStencilTestEnableEXT = nullptr;
static PFN_vkCmdSetStencilOpEXT $vkCmdSetStencilOpEXT = nullptr;
static PFN_vkCreatePrivateDataSlotEXT $vkCreatePrivateDataSlotEXT = nullptr;
static PFN_vkDestroyPrivateDataSlotEXT $vkDestroyPrivateDataSlotEXT = nullptr;
static PFN_vkSetPrivateDataEXT $vkSetPrivateDataEXT = nullptr;
static PFN_vkGetPrivateDataEXT $vkGetPrivateDataEXT = nullptr;
static PFN_vkCmdCopyBuffer2KHR $vkCmdCopyBuffer2KHR = nullptr;
static PFN_vkCmdCopyImage2KHR $vkCmdCopyImage2KHR = nullptr;
static PFN_vkCmdBlitImage2KHR $vkCmdBlitImage2KHR = nullptr;
static PFN_vkCmdCopyBufferToImage2KHR $vkCmdCopyBufferToImage2KHR = nullptr;
static PFN_vkCmdCopyImageToBuffer2KHR $vkCmdCopyImageToBuffer2KHR = nullptr;
static PFN_vkCmdResolveImage2KHR $vkCmdResolveImage2KHR = nullptr;
static PFN_vkCmdSetFragmentShadingRateKHR $vkCmdSetFragmentShadingRateKHR = nullptr;
static PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR $vkGetPhysicalDeviceFragmentShadingRatesKHR = nullptr;
static PFN_vkCmdSetFragmentShadingRateEnumNV $vkCmdSetFragmentShadingRateEnumNV = nullptr;
static PFN_vkGetAccelerationStructureBuildSizesKHR $vkGetAccelerationStructureBuildSizesKHR = nullptr;

void vkUseDevice(VkDevice pDevice) {
  currentDevice = pDevice;
  $vkCmdBeginConditionalRenderingEXT = (PFN_vkCmdBeginConditionalRenderingEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdBeginConditionalRenderingEXT");
  $vkCmdEndConditionalRenderingEXT = (PFN_vkCmdEndConditionalRenderingEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdEndConditionalRenderingEXT");
  $vkCreateSharedSwapchainsKHR = (PFN_vkCreateSharedSwapchainsKHR) vkGetDeviceProcAddr(currentDevice, "vkCreateSharedSwapchainsKHR");
  $vkCreateSwapchainKHR = (PFN_vkCreateSwapchainKHR) vkGetDeviceProcAddr(currentDevice, "vkCreateSwapchainKHR");
  $vkDestroySwapchainKHR = (PFN_vkDestroySwapchainKHR) vkGetDeviceProcAddr(currentDevice, "vkDestroySwapchainKHR");
  $vkGetSwapchainImagesKHR = (PFN_vkGetSwapchainImagesKHR) vkGetDeviceProcAddr(currentDevice, "vkGetSwapchainImagesKHR");
  $vkAcquireNextImageKHR = (PFN_vkAcquireNextImageKHR) vkGetDeviceProcAddr(currentDevice, "vkAcquireNextImageKHR");
  $vkQueuePresentKHR = (PFN_vkQueuePresentKHR) vkGetDeviceProcAddr(currentDevice, "vkQueuePresentKHR");
  $vkDebugMarkerSetObjectNameEXT = (PFN_vkDebugMarkerSetObjectNameEXT) vkGetDeviceProcAddr(currentDevice, "vkDebugMarkerSetObjectNameEXT");
  $vkDebugMarkerSetObjectTagEXT = (PFN_vkDebugMarkerSetObjectTagEXT) vkGetDeviceProcAddr(currentDevice, "vkDebugMarkerSetObjectTagEXT");
  $vkCmdDebugMarkerBeginEXT = (PFN_vkCmdDebugMarkerBeginEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdDebugMarkerBeginEXT");
  $vkCmdDebugMarkerEndEXT = (PFN_vkCmdDebugMarkerEndEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdDebugMarkerEndEXT");
  $vkCmdDebugMarkerInsertEXT = (PFN_vkCmdDebugMarkerInsertEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdDebugMarkerInsertEXT");
  $vkGetMemoryWin32HandleNV = (PFN_vkGetMemoryWin32HandleNV) vkGetDeviceProcAddr(currentDevice, "vkGetMemoryWin32HandleNV");
  $vkCmdExecuteGeneratedCommandsNV = (PFN_vkCmdExecuteGeneratedCommandsNV) vkGetDeviceProcAddr(currentDevice, "vkCmdExecuteGeneratedCommandsNV");
  $vkCmdPreprocessGeneratedCommandsNV = (PFN_vkCmdPreprocessGeneratedCommandsNV) vkGetDeviceProcAddr(currentDevice, "vkCmdPreprocessGeneratedCommandsNV");
  $vkCmdBindPipelineShaderGroupNV = (PFN_vkCmdBindPipelineShaderGroupNV) vkGetDeviceProcAddr(currentDevice, "vkCmdBindPipelineShaderGroupNV");
  $vkGetGeneratedCommandsMemoryRequirementsNV = (PFN_vkGetGeneratedCommandsMemoryRequirementsNV) vkGetDeviceProcAddr(currentDevice, "vkGetGeneratedCommandsMemoryRequirementsNV");
  $vkCreateIndirectCommandsLayoutNV = (PFN_vkCreateIndirectCommandsLayoutNV) vkGetDeviceProcAddr(currentDevice, "vkCreateIndirectCommandsLayoutNV");
  $vkDestroyIndirectCommandsLayoutNV = (PFN_vkDestroyIndirectCommandsLayoutNV) vkGetDeviceProcAddr(currentDevice, "vkDestroyIndirectCommandsLayoutNV");
  $vkCmdPushDescriptorSetKHR = (PFN_vkCmdPushDescriptorSetKHR) vkGetDeviceProcAddr(currentDevice, "vkCmdPushDescriptorSetKHR");
  $vkGetMemoryWin32HandleKHR = (PFN_vkGetMemoryWin32HandleKHR) vkGetDeviceProcAddr(currentDevice, "vkGetMemoryWin32HandleKHR");
  $vkGetMemoryWin32HandlePropertiesKHR = (PFN_vkGetMemoryWin32HandlePropertiesKHR) vkGetDeviceProcAddr(currentDevice, "vkGetMemoryWin32HandlePropertiesKHR");
  $vkGetMemoryFdKHR = (PFN_vkGetMemoryFdKHR) vkGetDeviceProcAddr(currentDevice, "vkGetMemoryFdKHR");
  $vkGetMemoryFdPropertiesKHR = (PFN_vkGetMemoryFdPropertiesKHR) vkGetDeviceProcAddr(currentDevice, "vkGetMemoryFdPropertiesKHR");
  $vkGetSemaphoreWin32HandleKHR = (PFN_vkGetSemaphoreWin32HandleKHR) vkGetDeviceProcAddr(currentDevice, "vkGetSemaphoreWin32HandleKHR");
  $vkImportSemaphoreWin32HandleKHR = (PFN_vkImportSemaphoreWin32HandleKHR) vkGetDeviceProcAddr(currentDevice, "vkImportSemaphoreWin32HandleKHR");
  $vkGetSemaphoreFdKHR = (PFN_vkGetSemaphoreFdKHR) vkGetDeviceProcAddr(currentDevice, "vkGetSemaphoreFdKHR");
  $vkImportSemaphoreFdKHR = (PFN_vkImportSemaphoreFdKHR) vkGetDeviceProcAddr(currentDevice, "vkImportSemaphoreFdKHR");
  $vkGetFenceWin32HandleKHR = (PFN_vkGetFenceWin32HandleKHR) vkGetDeviceProcAddr(currentDevice, "vkGetFenceWin32HandleKHR");
  $vkImportFenceWin32HandleKHR = (PFN_vkImportFenceWin32HandleKHR) vkGetDeviceProcAddr(currentDevice, "vkImportFenceWin32HandleKHR");
  $vkGetFenceFdKHR = (PFN_vkGetFenceFdKHR) vkGetDeviceProcAddr(currentDevice, "vkGetFenceFdKHR");
  $vkImportFenceFdKHR = (PFN_vkImportFenceFdKHR) vkGetDeviceProcAddr(currentDevice, "vkImportFenceFdKHR");
  $vkDisplayPowerControlEXT = (PFN_vkDisplayPowerControlEXT) vkGetDeviceProcAddr(currentDevice, "vkDisplayPowerControlEXT");
  $vkRegisterDeviceEventEXT = (PFN_vkRegisterDeviceEventEXT) vkGetDeviceProcAddr(currentDevice, "vkRegisterDeviceEventEXT");
  $vkRegisterDisplayEventEXT = (PFN_vkRegisterDisplayEventEXT) vkGetDeviceProcAddr(currentDevice, "vkRegisterDisplayEventEXT");
  $vkGetSwapchainCounterEXT = (PFN_vkGetSwapchainCounterEXT) vkGetDeviceProcAddr(currentDevice, "vkGetSwapchainCounterEXT");
  $vkGetDeviceGroupPresentCapabilitiesKHR = (PFN_vkGetDeviceGroupPresentCapabilitiesKHR) vkGetDeviceProcAddr(currentDevice, "vkGetDeviceGroupPresentCapabilitiesKHR");
  $vkGetDeviceGroupSurfacePresentModesKHR = (PFN_vkGetDeviceGroupSurfacePresentModesKHR) vkGetDeviceProcAddr(currentDevice, "vkGetDeviceGroupSurfacePresentModesKHR");
  $vkAcquireNextImage2KHR = (PFN_vkAcquireNextImage2KHR) vkGetDeviceProcAddr(currentDevice, "vkAcquireNextImage2KHR");
  $vkGetPhysicalDevicePresentRectanglesKHR = (PFN_vkGetPhysicalDevicePresentRectanglesKHR) vkGetDeviceProcAddr(currentDevice, "vkGetPhysicalDevicePresentRectanglesKHR");
  $vkCmdPushDescriptorSetWithTemplateKHR = (PFN_vkCmdPushDescriptorSetWithTemplateKHR) vkGetDeviceProcAddr(currentDevice, "vkCmdPushDescriptorSetWithTemplateKHR");
  $vkSetHdrMetadataEXT = (PFN_vkSetHdrMetadataEXT) vkGetDeviceProcAddr(currentDevice, "vkSetHdrMetadataEXT");
  $vkGetSwapchainStatusKHR = (PFN_vkGetSwapchainStatusKHR) vkGetDeviceProcAddr(currentDevice, "vkGetSwapchainStatusKHR");
  $vkGetRefreshCycleDurationGOOGLE = (PFN_vkGetRefreshCycleDurationGOOGLE) vkGetDeviceProcAddr(currentDevice, "vkGetRefreshCycleDurationGOOGLE");
  $vkGetPastPresentationTimingGOOGLE = (PFN_vkGetPastPresentationTimingGOOGLE) vkGetDeviceProcAddr(currentDevice, "vkGetPastPresentationTimingGOOGLE");
  $vkCmdSetViewportWScalingNV = (PFN_vkCmdSetViewportWScalingNV) vkGetDeviceProcAddr(currentDevice, "vkCmdSetViewportWScalingNV");
  $vkCmdSetDiscardRectangleEXT = (PFN_vkCmdSetDiscardRectangleEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdSetDiscardRectangleEXT");
  $vkCmdSetSampleLocationsEXT = (PFN_vkCmdSetSampleLocationsEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdSetSampleLocationsEXT");
  $vkGetPhysicalDeviceMultisamplePropertiesEXT = (PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT) vkGetDeviceProcAddr(currentDevice, "vkGetPhysicalDeviceMultisamplePropertiesEXT");
  $vkCreateValidationCacheEXT = (PFN_vkCreateValidationCacheEXT) vkGetDeviceProcAddr(currentDevice, "vkCreateValidationCacheEXT");
  $vkDestroyValidationCacheEXT = (PFN_vkDestroyValidationCacheEXT) vkGetDeviceProcAddr(currentDevice, "vkDestroyValidationCacheEXT");
  $vkGetValidationCacheDataEXT = (PFN_vkGetValidationCacheDataEXT) vkGetDeviceProcAddr(currentDevice, "vkGetValidationCacheDataEXT");
  $vkMergeValidationCachesEXT = (PFN_vkMergeValidationCachesEXT) vkGetDeviceProcAddr(currentDevice, "vkMergeValidationCachesEXT");
  $vkGetShaderInfoAMD = (PFN_vkGetShaderInfoAMD) vkGetDeviceProcAddr(currentDevice, "vkGetShaderInfoAMD");
  $vkSetLocalDimmingAMD = (PFN_vkSetLocalDimmingAMD) vkGetDeviceProcAddr(currentDevice, "vkSetLocalDimmingAMD");
  $vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = (PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT) vkGetDeviceProcAddr(currentDevice, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
  $vkGetCalibratedTimestampsEXT = (PFN_vkGetCalibratedTimestampsEXT) vkGetDeviceProcAddr(currentDevice, "vkGetCalibratedTimestampsEXT");
  $vkGetMemoryHostPointerPropertiesEXT = (PFN_vkGetMemoryHostPointerPropertiesEXT) vkGetDeviceProcAddr(currentDevice, "vkGetMemoryHostPointerPropertiesEXT");
  $vkCmdWriteBufferMarkerAMD = (PFN_vkCmdWriteBufferMarkerAMD) vkGetDeviceProcAddr(currentDevice, "vkCmdWriteBufferMarkerAMD");
  $vkCmdSetCheckpointNV = (PFN_vkCmdSetCheckpointNV) vkGetDeviceProcAddr(currentDevice, "vkCmdSetCheckpointNV");
  $vkGetQueueCheckpointDataNV = (PFN_vkGetQueueCheckpointDataNV) vkGetDeviceProcAddr(currentDevice, "vkGetQueueCheckpointDataNV");
  $vkCmdBindTransformFeedbackBuffersEXT = (PFN_vkCmdBindTransformFeedbackBuffersEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdBindTransformFeedbackBuffersEXT");
  $vkCmdBeginTransformFeedbackEXT = (PFN_vkCmdBeginTransformFeedbackEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdBeginTransformFeedbackEXT");
  $vkCmdEndTransformFeedbackEXT = (PFN_vkCmdEndTransformFeedbackEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdEndTransformFeedbackEXT");
  $vkCmdBeginQueryIndexedEXT = (PFN_vkCmdBeginQueryIndexedEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdBeginQueryIndexedEXT");
  $vkCmdEndQueryIndexedEXT = (PFN_vkCmdEndQueryIndexedEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdEndQueryIndexedEXT");
  $vkCmdDrawIndirectByteCountEXT = (PFN_vkCmdDrawIndirectByteCountEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdDrawIndirectByteCountEXT");
  $vkCmdSetExclusiveScissorNV = (PFN_vkCmdSetExclusiveScissorNV) vkGetDeviceProcAddr(currentDevice, "vkCmdSetExclusiveScissorNV");
  $vkCmdBindShadingRateImageNV = (PFN_vkCmdBindShadingRateImageNV) vkGetDeviceProcAddr(currentDevice, "vkCmdBindShadingRateImageNV");
  $vkCmdSetViewportShadingRatePaletteNV = (PFN_vkCmdSetViewportShadingRatePaletteNV) vkGetDeviceProcAddr(currentDevice, "vkCmdSetViewportShadingRatePaletteNV");
  $vkCmdSetCoarseSampleOrderNV = (PFN_vkCmdSetCoarseSampleOrderNV) vkGetDeviceProcAddr(currentDevice, "vkCmdSetCoarseSampleOrderNV");
  $vkCmdDrawMeshTasksNV = (PFN_vkCmdDrawMeshTasksNV) vkGetDeviceProcAddr(currentDevice, "vkCmdDrawMeshTasksNV");
  $vkCmdDrawMeshTasksIndirectNV = (PFN_vkCmdDrawMeshTasksIndirectNV) vkGetDeviceProcAddr(currentDevice, "vkCmdDrawMeshTasksIndirectNV");
  $vkCmdDrawMeshTasksIndirectCountNV = (PFN_vkCmdDrawMeshTasksIndirectCountNV) vkGetDeviceProcAddr(currentDevice, "vkCmdDrawMeshTasksIndirectCountNV");
  $vkCompileDeferredNV = (PFN_vkCompileDeferredNV) vkGetDeviceProcAddr(currentDevice, "vkCompileDeferredNV");
  $vkCreateAccelerationStructureNV = (PFN_vkCreateAccelerationStructureNV) vkGetDeviceProcAddr(currentDevice, "vkCreateAccelerationStructureNV");
  $vkDestroyAccelerationStructureKHR = (PFN_vkDestroyAccelerationStructureKHR) vkGetDeviceProcAddr(currentDevice, "vkDestroyAccelerationStructureKHR");
  $vkDestroyAccelerationStructureNV = (PFN_vkDestroyAccelerationStructureNV) vkGetDeviceProcAddr(currentDevice, "vkDestroyAccelerationStructureNV");
  $vkGetAccelerationStructureMemoryRequirementsNV = (PFN_vkGetAccelerationStructureMemoryRequirementsNV) vkGetDeviceProcAddr(currentDevice, "vkGetAccelerationStructureMemoryRequirementsNV");
  $vkBindAccelerationStructureMemoryNV = (PFN_vkBindAccelerationStructureMemoryNV) vkGetDeviceProcAddr(currentDevice, "vkBindAccelerationStructureMemoryNV");
  $vkCmdCopyAccelerationStructureNV = (PFN_vkCmdCopyAccelerationStructureNV) vkGetDeviceProcAddr(currentDevice, "vkCmdCopyAccelerationStructureNV");
  $vkCmdCopyAccelerationStructureKHR = (PFN_vkCmdCopyAccelerationStructureKHR) vkGetDeviceProcAddr(currentDevice, "vkCmdCopyAccelerationStructureKHR");
  $vkCopyAccelerationStructureKHR = (PFN_vkCopyAccelerationStructureKHR) vkGetDeviceProcAddr(currentDevice, "vkCopyAccelerationStructureKHR");
  $vkCmdCopyAccelerationStructureToMemoryKHR = (PFN_vkCmdCopyAccelerationStructureToMemoryKHR) vkGetDeviceProcAddr(currentDevice, "vkCmdCopyAccelerationStructureToMemoryKHR");
  $vkCopyAccelerationStructureToMemoryKHR = (PFN_vkCopyAccelerationStructureToMemoryKHR) vkGetDeviceProcAddr(currentDevice, "vkCopyAccelerationStructureToMemoryKHR");
  $vkCmdCopyMemoryToAccelerationStructureKHR = (PFN_vkCmdCopyMemoryToAccelerationStructureKHR) vkGetDeviceProcAddr(currentDevice, "vkCmdCopyMemoryToAccelerationStructureKHR");
  $vkCopyMemoryToAccelerationStructureKHR = (PFN_vkCopyMemoryToAccelerationStructureKHR) vkGetDeviceProcAddr(currentDevice, "vkCopyMemoryToAccelerationStructureKHR");
  $vkCmdWriteAccelerationStructuresPropertiesKHR = (PFN_vkCmdWriteAccelerationStructuresPropertiesKHR) vkGetDeviceProcAddr(currentDevice, "vkCmdWriteAccelerationStructuresPropertiesKHR");
  $vkCmdWriteAccelerationStructuresPropertiesNV = (PFN_vkCmdWriteAccelerationStructuresPropertiesNV) vkGetDeviceProcAddr(currentDevice, "vkCmdWriteAccelerationStructuresPropertiesNV");
  $vkCmdBuildAccelerationStructureNV = (PFN_vkCmdBuildAccelerationStructureNV) vkGetDeviceProcAddr(currentDevice, "vkCmdBuildAccelerationStructureNV");
  $vkWriteAccelerationStructuresPropertiesKHR = (PFN_vkWriteAccelerationStructuresPropertiesKHR) vkGetDeviceProcAddr(currentDevice, "vkWriteAccelerationStructuresPropertiesKHR");
  $vkCmdTraceRaysKHR = (PFN_vkCmdTraceRaysKHR) vkGetDeviceProcAddr(currentDevice, "vkCmdTraceRaysKHR");
  $vkCmdTraceRaysNV = (PFN_vkCmdTraceRaysNV) vkGetDeviceProcAddr(currentDevice, "vkCmdTraceRaysNV");
  $vkGetRayTracingShaderGroupHandlesKHR = (PFN_vkGetRayTracingShaderGroupHandlesKHR) vkGetDeviceProcAddr(currentDevice, "vkGetRayTracingShaderGroupHandlesKHR");
  $vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = (PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR) vkGetDeviceProcAddr(currentDevice, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
  $vkGetAccelerationStructureHandleNV = (PFN_vkGetAccelerationStructureHandleNV) vkGetDeviceProcAddr(currentDevice, "vkGetAccelerationStructureHandleNV");
  $vkCreateRayTracingPipelinesNV = (PFN_vkCreateRayTracingPipelinesNV) vkGetDeviceProcAddr(currentDevice, "vkCreateRayTracingPipelinesNV");
  $vkCreateRayTracingPipelinesKHR = (PFN_vkCreateRayTracingPipelinesKHR) vkGetDeviceProcAddr(currentDevice, "vkCreateRayTracingPipelinesKHR");
  $vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = (PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV) vkGetDeviceProcAddr(currentDevice, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
  $vkCmdTraceRaysIndirectKHR = (PFN_vkCmdTraceRaysIndirectKHR) vkGetDeviceProcAddr(currentDevice, "vkCmdTraceRaysIndirectKHR");
  $vkGetDeviceAccelerationStructureCompatibilityKHR = (PFN_vkGetDeviceAccelerationStructureCompatibilityKHR) vkGetDeviceProcAddr(currentDevice, "vkGetDeviceAccelerationStructureCompatibilityKHR");
  $vkGetRayTracingShaderGroupStackSizeKHR = (PFN_vkGetRayTracingShaderGroupStackSizeKHR) vkGetDeviceProcAddr(currentDevice, "vkGetRayTracingShaderGroupStackSizeKHR");
  $vkCmdSetRayTracingPipelineStackSizeKHR = (PFN_vkCmdSetRayTracingPipelineStackSizeKHR) vkGetDeviceProcAddr(currentDevice, "vkCmdSetRayTracingPipelineStackSizeKHR");
  $vkGetImageViewHandleNVX = (PFN_vkGetImageViewHandleNVX) vkGetDeviceProcAddr(currentDevice, "vkGetImageViewHandleNVX");
  $vkGetImageViewAddressNVX = (PFN_vkGetImageViewAddressNVX) vkGetDeviceProcAddr(currentDevice, "vkGetImageViewAddressNVX");
  $vkGetPhysicalDeviceSurfacePresentModes2EXT = (PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT) vkGetDeviceProcAddr(currentDevice, "vkGetPhysicalDeviceSurfacePresentModes2EXT");
  $vkGetDeviceGroupSurfacePresentModes2EXT = (PFN_vkGetDeviceGroupSurfacePresentModes2EXT) vkGetDeviceProcAddr(currentDevice, "vkGetDeviceGroupSurfacePresentModes2EXT");
  $vkAcquireFullScreenExclusiveModeEXT = (PFN_vkAcquireFullScreenExclusiveModeEXT) vkGetDeviceProcAddr(currentDevice, "vkAcquireFullScreenExclusiveModeEXT");
  $vkReleaseFullScreenExclusiveModeEXT = (PFN_vkReleaseFullScreenExclusiveModeEXT) vkGetDeviceProcAddr(currentDevice, "vkReleaseFullScreenExclusiveModeEXT");
  $vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = (PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR) vkGetDeviceProcAddr(currentDevice, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
  $vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = (PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR) vkGetDeviceProcAddr(currentDevice, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
  $vkAcquireProfilingLockKHR = (PFN_vkAcquireProfilingLockKHR) vkGetDeviceProcAddr(currentDevice, "vkAcquireProfilingLockKHR");
  $vkReleaseProfilingLockKHR = (PFN_vkReleaseProfilingLockKHR) vkGetDeviceProcAddr(currentDevice, "vkReleaseProfilingLockKHR");
  $vkGetImageDrmFormatModifierPropertiesEXT = (PFN_vkGetImageDrmFormatModifierPropertiesEXT) vkGetDeviceProcAddr(currentDevice, "vkGetImageDrmFormatModifierPropertiesEXT");
  $vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = (PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV) vkGetDeviceProcAddr(currentDevice, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
  $vkInitializePerformanceApiINTEL = (PFN_vkInitializePerformanceApiINTEL) vkGetDeviceProcAddr(currentDevice, "vkInitializePerformanceApiINTEL");
  $vkUninitializePerformanceApiINTEL = (PFN_vkUninitializePerformanceApiINTEL) vkGetDeviceProcAddr(currentDevice, "vkUninitializePerformanceApiINTEL");
  $vkCmdSetPerformanceMarkerINTEL = (PFN_vkCmdSetPerformanceMarkerINTEL) vkGetDeviceProcAddr(currentDevice, "vkCmdSetPerformanceMarkerINTEL");
  $vkCmdSetPerformanceStreamMarkerINTEL = (PFN_vkCmdSetPerformanceStreamMarkerINTEL) vkGetDeviceProcAddr(currentDevice, "vkCmdSetPerformanceStreamMarkerINTEL");
  $vkCmdSetPerformanceOverrideINTEL = (PFN_vkCmdSetPerformanceOverrideINTEL) vkGetDeviceProcAddr(currentDevice, "vkCmdSetPerformanceOverrideINTEL");
  $vkAcquirePerformanceConfigurationINTEL = (PFN_vkAcquirePerformanceConfigurationINTEL) vkGetDeviceProcAddr(currentDevice, "vkAcquirePerformanceConfigurationINTEL");
  $vkReleasePerformanceConfigurationINTEL = (PFN_vkReleasePerformanceConfigurationINTEL) vkGetDeviceProcAddr(currentDevice, "vkReleasePerformanceConfigurationINTEL");
  $vkQueueSetPerformanceConfigurationINTEL = (PFN_vkQueueSetPerformanceConfigurationINTEL) vkGetDeviceProcAddr(currentDevice, "vkQueueSetPerformanceConfigurationINTEL");
  $vkGetPerformanceParameterINTEL = (PFN_vkGetPerformanceParameterINTEL) vkGetDeviceProcAddr(currentDevice, "vkGetPerformanceParameterINTEL");
  $vkGetPipelineExecutablePropertiesKHR = (PFN_vkGetPipelineExecutablePropertiesKHR) vkGetDeviceProcAddr(currentDevice, "vkGetPipelineExecutablePropertiesKHR");
  $vkGetPipelineExecutableStatisticsKHR = (PFN_vkGetPipelineExecutableStatisticsKHR) vkGetDeviceProcAddr(currentDevice, "vkGetPipelineExecutableStatisticsKHR");
  $vkGetPipelineExecutableInternalRepresentationsKHR = (PFN_vkGetPipelineExecutableInternalRepresentationsKHR) vkGetDeviceProcAddr(currentDevice, "vkGetPipelineExecutableInternalRepresentationsKHR");
  $vkCmdSetLineStippleEXT = (PFN_vkCmdSetLineStippleEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdSetLineStippleEXT");
  $vkGetPhysicalDeviceToolPropertiesEXT = (PFN_vkGetPhysicalDeviceToolPropertiesEXT) vkGetDeviceProcAddr(currentDevice, "vkGetPhysicalDeviceToolPropertiesEXT");
  $vkCreateAccelerationStructureKHR = (PFN_vkCreateAccelerationStructureKHR) vkGetDeviceProcAddr(currentDevice, "vkCreateAccelerationStructureKHR");
  $vkCmdBuildAccelerationStructuresKHR = (PFN_vkCmdBuildAccelerationStructuresKHR) vkGetDeviceProcAddr(currentDevice, "vkCmdBuildAccelerationStructuresKHR");
  $vkCmdBuildAccelerationStructuresIndirectKHR = (PFN_vkCmdBuildAccelerationStructuresIndirectKHR) vkGetDeviceProcAddr(currentDevice, "vkCmdBuildAccelerationStructuresIndirectKHR");
  $vkBuildAccelerationStructuresKHR = (PFN_vkBuildAccelerationStructuresKHR) vkGetDeviceProcAddr(currentDevice, "vkBuildAccelerationStructuresKHR");
  $vkGetAccelerationStructureDeviceAddressKHR = (PFN_vkGetAccelerationStructureDeviceAddressKHR) vkGetDeviceProcAddr(currentDevice, "vkGetAccelerationStructureDeviceAddressKHR");
  $vkCreateDeferredOperationKHR = (PFN_vkCreateDeferredOperationKHR) vkGetDeviceProcAddr(currentDevice, "vkCreateDeferredOperationKHR");
  $vkDestroyDeferredOperationKHR = (PFN_vkDestroyDeferredOperationKHR) vkGetDeviceProcAddr(currentDevice, "vkDestroyDeferredOperationKHR");
  $vkGetDeferredOperationMaxConcurrencyKHR = (PFN_vkGetDeferredOperationMaxConcurrencyKHR) vkGetDeviceProcAddr(currentDevice, "vkGetDeferredOperationMaxConcurrencyKHR");
  $vkGetDeferredOperationResultKHR = (PFN_vkGetDeferredOperationResultKHR) vkGetDeviceProcAddr(currentDevice, "vkGetDeferredOperationResultKHR");
  $vkDeferredOperationJoinKHR = (PFN_vkDeferredOperationJoinKHR) vkGetDeviceProcAddr(currentDevice, "vkDeferredOperationJoinKHR");
  $vkCmdSetCullModeEXT = (PFN_vkCmdSetCullModeEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdSetCullModeEXT");
  $vkCmdSetFrontFaceEXT = (PFN_vkCmdSetFrontFaceEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdSetFrontFaceEXT");
  $vkCmdSetPrimitiveTopologyEXT = (PFN_vkCmdSetPrimitiveTopologyEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdSetPrimitiveTopologyEXT");
  $vkCmdSetViewportWithCountEXT = (PFN_vkCmdSetViewportWithCountEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdSetViewportWithCountEXT");
  $vkCmdSetScissorWithCountEXT = (PFN_vkCmdSetScissorWithCountEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdSetScissorWithCountEXT");
  $vkCmdBindVertexBuffers2EXT = (PFN_vkCmdBindVertexBuffers2EXT) vkGetDeviceProcAddr(currentDevice, "vkCmdBindVertexBuffers2EXT");
  $vkCmdSetDepthTestEnableEXT = (PFN_vkCmdSetDepthTestEnableEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdSetDepthTestEnableEXT");
  $vkCmdSetDepthWriteEnableEXT = (PFN_vkCmdSetDepthWriteEnableEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdSetDepthWriteEnableEXT");
  $vkCmdSetDepthCompareOpEXT = (PFN_vkCmdSetDepthCompareOpEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdSetDepthCompareOpEXT");
  $vkCmdSetDepthBoundsTestEnableEXT = (PFN_vkCmdSetDepthBoundsTestEnableEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdSetDepthBoundsTestEnableEXT");
  $vkCmdSetStencilTestEnableEXT = (PFN_vkCmdSetStencilTestEnableEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdSetStencilTestEnableEXT");
  $vkCmdSetStencilOpEXT = (PFN_vkCmdSetStencilOpEXT) vkGetDeviceProcAddr(currentDevice, "vkCmdSetStencilOpEXT");
  $vkCreatePrivateDataSlotEXT = (PFN_vkCreatePrivateDataSlotEXT) vkGetDeviceProcAddr(currentDevice, "vkCreatePrivateDataSlotEXT");
  $vkDestroyPrivateDataSlotEXT = (PFN_vkDestroyPrivateDataSlotEXT) vkGetDeviceProcAddr(currentDevice, "vkDestroyPrivateDataSlotEXT");
  $vkSetPrivateDataEXT = (PFN_vkSetPrivateDataEXT) vkGetDeviceProcAddr(currentDevice, "vkSetPrivateDataEXT");
  $vkGetPrivateDataEXT = (PFN_vkGetPrivateDataEXT) vkGetDeviceProcAddr(currentDevice, "vkGetPrivateDataEXT");
  $vkCmdCopyBuffer2KHR = (PFN_vkCmdCopyBuffer2KHR) vkGetDeviceProcAddr(currentDevice, "vkCmdCopyBuffer2KHR");
  $vkCmdCopyImage2KHR = (PFN_vkCmdCopyImage2KHR) vkGetDeviceProcAddr(currentDevice, "vkCmdCopyImage2KHR");
  $vkCmdBlitImage2KHR = (PFN_vkCmdBlitImage2KHR) vkGetDeviceProcAddr(currentDevice, "vkCmdBlitImage2KHR");
  $vkCmdCopyBufferToImage2KHR = (PFN_vkCmdCopyBufferToImage2KHR) vkGetDeviceProcAddr(currentDevice, "vkCmdCopyBufferToImage2KHR");
  $vkCmdCopyImageToBuffer2KHR = (PFN_vkCmdCopyImageToBuffer2KHR) vkGetDeviceProcAddr(currentDevice, "vkCmdCopyImageToBuffer2KHR");
  $vkCmdResolveImage2KHR = (PFN_vkCmdResolveImage2KHR) vkGetDeviceProcAddr(currentDevice, "vkCmdResolveImage2KHR");
  $vkCmdSetFragmentShadingRateKHR = (PFN_vkCmdSetFragmentShadingRateKHR) vkGetDeviceProcAddr(currentDevice, "vkCmdSetFragmentShadingRateKHR");
  $vkGetPhysicalDeviceFragmentShadingRatesKHR = (PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR) vkGetDeviceProcAddr(currentDevice, "vkGetPhysicalDeviceFragmentShadingRatesKHR");
  $vkCmdSetFragmentShadingRateEnumNV = (PFN_vkCmdSetFragmentShadingRateEnumNV) vkGetDeviceProcAddr(currentDevice, "vkCmdSetFragmentShadingRateEnumNV");
  $vkGetAccelerationStructureBuildSizesKHR = (PFN_vkGetAccelerationStructureBuildSizesKHR) vkGetDeviceProcAddr(currentDevice, "vkGetAccelerationStructureBuildSizesKHR");
};

void vkUseInstance(VkInstance pInstance) {
  currentInstance = pInstance;
  $vkGetPhysicalDeviceDisplayPropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPropertiesKHR) vkGetInstanceProcAddr(currentInstance, "vkGetPhysicalDeviceDisplayPropertiesKHR");
  $vkGetPhysicalDeviceDisplayPlanePropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR) vkGetInstanceProcAddr(currentInstance, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
  $vkGetDisplayPlaneSupportedDisplaysKHR = (PFN_vkGetDisplayPlaneSupportedDisplaysKHR) vkGetInstanceProcAddr(currentInstance, "vkGetDisplayPlaneSupportedDisplaysKHR");
  $vkGetDisplayModePropertiesKHR = (PFN_vkGetDisplayModePropertiesKHR) vkGetInstanceProcAddr(currentInstance, "vkGetDisplayModePropertiesKHR");
  $vkCreateDisplayModeKHR = (PFN_vkCreateDisplayModeKHR) vkGetInstanceProcAddr(currentInstance, "vkCreateDisplayModeKHR");
  $vkGetDisplayPlaneCapabilitiesKHR = (PFN_vkGetDisplayPlaneCapabilitiesKHR) vkGetInstanceProcAddr(currentInstance, "vkGetDisplayPlaneCapabilitiesKHR");
  $vkCreateDisplayPlaneSurfaceKHR = (PFN_vkCreateDisplayPlaneSurfaceKHR) vkGetInstanceProcAddr(currentInstance, "vkCreateDisplayPlaneSurfaceKHR");
  $vkDestroySurfaceKHR = (PFN_vkDestroySurfaceKHR) vkGetInstanceProcAddr(currentInstance, "vkDestroySurfaceKHR");
  $vkGetPhysicalDeviceSurfaceSupportKHR = (PFN_vkGetPhysicalDeviceSurfaceSupportKHR) vkGetInstanceProcAddr(currentInstance, "vkGetPhysicalDeviceSurfaceSupportKHR");
  $vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR) vkGetInstanceProcAddr(currentInstance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
  $vkGetPhysicalDeviceSurfaceFormatsKHR = (PFN_vkGetPhysicalDeviceSurfaceFormatsKHR) vkGetInstanceProcAddr(currentInstance, "vkGetPhysicalDeviceSurfaceFormatsKHR");
  $vkGetPhysicalDeviceSurfacePresentModesKHR = (PFN_vkGetPhysicalDeviceSurfacePresentModesKHR) vkGetInstanceProcAddr(currentInstance, "vkGetPhysicalDeviceSurfacePresentModesKHR");
  $vkCreateWin32SurfaceKHR = (PFN_vkCreateWin32SurfaceKHR) vkGetInstanceProcAddr(currentInstance, "vkCreateWin32SurfaceKHR");
  $vkGetPhysicalDeviceWin32PresentationSupportKHR = (PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR) vkGetInstanceProcAddr(currentInstance, "vkGetPhysicalDeviceWin32PresentationSupportKHR");
  $vkCreateDebugReportCallbackEXT = (PFN_vkCreateDebugReportCallbackEXT) vkGetInstanceProcAddr(currentInstance, "vkCreateDebugReportCallbackEXT");
  $vkDestroyDebugReportCallbackEXT = (PFN_vkDestroyDebugReportCallbackEXT) vkGetInstanceProcAddr(currentInstance, "vkDestroyDebugReportCallbackEXT");
  $vkDebugReportMessageEXT = (PFN_vkDebugReportMessageEXT) vkGetInstanceProcAddr(currentInstance, "vkDebugReportMessageEXT");
  $vkGetPhysicalDeviceExternalImageFormatPropertiesNV = (PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV) vkGetInstanceProcAddr(currentInstance, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
  $vkReleaseDisplayEXT = (PFN_vkReleaseDisplayEXT) vkGetInstanceProcAddr(currentInstance, "vkReleaseDisplayEXT");
  $vkGetPhysicalDeviceSurfaceCapabilities2EXT = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT) vkGetInstanceProcAddr(currentInstance, "vkGetPhysicalDeviceSurfaceCapabilities2EXT");
  $vkGetPhysicalDeviceSurfaceCapabilities2KHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR) vkGetInstanceProcAddr(currentInstance, "vkGetPhysicalDeviceSurfaceCapabilities2KHR");
  $vkGetPhysicalDeviceSurfaceFormats2KHR = (PFN_vkGetPhysicalDeviceSurfaceFormats2KHR) vkGetInstanceProcAddr(currentInstance, "vkGetPhysicalDeviceSurfaceFormats2KHR");
  $vkGetPhysicalDeviceDisplayProperties2KHR = (PFN_vkGetPhysicalDeviceDisplayProperties2KHR) vkGetInstanceProcAddr(currentInstance, "vkGetPhysicalDeviceDisplayProperties2KHR");
  $vkGetPhysicalDeviceDisplayPlaneProperties2KHR = (PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR) vkGetInstanceProcAddr(currentInstance, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
  $vkGetDisplayModeProperties2KHR = (PFN_vkGetDisplayModeProperties2KHR) vkGetInstanceProcAddr(currentInstance, "vkGetDisplayModeProperties2KHR");
  $vkGetDisplayPlaneCapabilities2KHR = (PFN_vkGetDisplayPlaneCapabilities2KHR) vkGetInstanceProcAddr(currentInstance, "vkGetDisplayPlaneCapabilities2KHR");
  $vkSetDebugUtilsObjectNameEXT = (PFN_vkSetDebugUtilsObjectNameEXT) vkGetInstanceProcAddr(currentInstance, "vkSetDebugUtilsObjectNameEXT");
  $vkSetDebugUtilsObjectTagEXT = (PFN_vkSetDebugUtilsObjectTagEXT) vkGetInstanceProcAddr(currentInstance, "vkSetDebugUtilsObjectTagEXT");
  $vkQueueBeginDebugUtilsLabelEXT = (PFN_vkQueueBeginDebugUtilsLabelEXT) vkGetInstanceProcAddr(currentInstance, "vkQueueBeginDebugUtilsLabelEXT");
  $vkQueueEndDebugUtilsLabelEXT = (PFN_vkQueueEndDebugUtilsLabelEXT) vkGetInstanceProcAddr(currentInstance, "vkQueueEndDebugUtilsLabelEXT");
  $vkQueueInsertDebugUtilsLabelEXT = (PFN_vkQueueInsertDebugUtilsLabelEXT) vkGetInstanceProcAddr(currentInstance, "vkQueueInsertDebugUtilsLabelEXT");
  $vkCmdBeginDebugUtilsLabelEXT = (PFN_vkCmdBeginDebugUtilsLabelEXT) vkGetInstanceProcAddr(currentInstance, "vkCmdBeginDebugUtilsLabelEXT");
  $vkCmdEndDebugUtilsLabelEXT = (PFN_vkCmdEndDebugUtilsLabelEXT) vkGetInstanceProcAddr(currentInstance, "vkCmdEndDebugUtilsLabelEXT");
  $vkCmdInsertDebugUtilsLabelEXT = (PFN_vkCmdInsertDebugUtilsLabelEXT) vkGetInstanceProcAddr(currentInstance, "vkCmdInsertDebugUtilsLabelEXT");
  $vkCreateDebugUtilsMessengerEXT = (PFN_vkCreateDebugUtilsMessengerEXT) vkGetInstanceProcAddr(currentInstance, "vkCreateDebugUtilsMessengerEXT");
  $vkDestroyDebugUtilsMessengerEXT = (PFN_vkDestroyDebugUtilsMessengerEXT) vkGetInstanceProcAddr(currentInstance, "vkDestroyDebugUtilsMessengerEXT");
  $vkSubmitDebugUtilsMessageEXT = (PFN_vkSubmitDebugUtilsMessageEXT) vkGetInstanceProcAddr(currentInstance, "vkSubmitDebugUtilsMessageEXT");
  $vkCreateHeadlessSurfaceEXT = (PFN_vkCreateHeadlessSurfaceEXT) vkGetInstanceProcAddr(currentInstance, "vkCreateHeadlessSurfaceEXT");
};

Napi::Value _vkUseDevice(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    vkUseDevice(*instance);
  } else if (info[0].IsNull()) {
    currentDevice = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'pDevice'").ThrowAsJavaScriptException();
  }
  return env.Undefined();
};

Napi::Value _vkUseInstance(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    vkUseInstance(*instance);
  } else if (info[0].IsNull()) {
    currentInstance = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 1 'pInstance'").ThrowAsJavaScriptException();
  }
  return env.Undefined();
};

Napi::Value _vkCreateInstance(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkInstanceCreateInfo *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO) {
      NapiObjectTypeError(info[0], "argument 1", "VkInstanceCreateInfo");
      return env.Undefined();
    }
    obj0 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkInstanceCreateInfo* instance = reinterpret_cast<VkInstanceCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstanceCreateInfo' or 'null' for argument 1 'pCreateInfo' in 'vkCreateInstance'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj2;
  VkInstance *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkInstance") {
      NapiObjectTypeError(info[2], "argument 3", "VkInstance");
      return env.Undefined();
    }
    obj2 = obj;
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 3 'pInstance' in 'vkCreateInstance'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateInstance(
    $p0,
    nullptr,
    $p2
  );
  
  if (out == VK_SUCCESS) vkUseInstance(*$p2);
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyInstance(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkInstance *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkInstance") {
      NapiObjectTypeError(info[0], "argument 1", "VkInstance");
      return env.Undefined();
    }
    obj0 = obj;
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 1 'instance' in 'vkDestroyInstance'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyInstance(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkEnumeratePhysicalDevices(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkInstance *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkInstance") {
      NapiObjectTypeError(info[0], "argument 1", "VkInstance");
      return env.Undefined();
    }
    obj0 = obj;
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 1 'instance' in 'vkEnumeratePhysicalDevices'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pPhysicalDeviceCount' in 'vkEnumeratePhysicalDevices'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pPhysicalDeviceCount' in 'vkEnumeratePhysicalDevices'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkPhysicalDevice>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[1].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[2].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pPhysicalDevices' in 'vkEnumeratePhysicalDevices'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkPhysicalDevice> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
        NapiObjectTypeError(info[0], "argument 3", "VkPhysicalDevice");
        return env.Undefined();
      }
      VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkPhysicalDevice>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pPhysicalDevices' in 'vkEnumeratePhysicalDevices'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkEnumeratePhysicalDevices(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    &$p1,
    $p2 ? (VkPhysicalDevice *) $p2.get()->data() : nullptr
  );
    if (info[1].IsObject()) obj1.Set("$", $p1);
  if (info[2].IsArray()) {
    VkPhysicalDevice* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();

      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetDeviceProcAddr(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetDeviceProcAddr'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  char* $p1 = nullptr;
  if (info[1].IsString()) {
    $p1 = copyV8String(info[1]);
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'String' or 'null' for argument 2 'pName' in 'vkGetDeviceProcAddr'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  PFN_vkVoidFunction out = vkGetDeviceProcAddr(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  if ($p1) delete[] $p1;
  
  
  return Napi::Number::New(env, 0);
  
};

Napi::Value _vkGetInstanceProcAddr(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkInstance *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkInstance") {
      NapiObjectTypeError(info[0], "argument 1", "VkInstance");
      return env.Undefined();
    }
    obj0 = obj;
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 1 'instance' in 'vkGetInstanceProcAddr'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  char* $p1 = nullptr;
  if (info[1].IsString()) {
    $p1 = copyV8String(info[1]);
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'String' or 'null' for argument 2 'pName' in 'vkGetInstanceProcAddr'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  PFN_vkVoidFunction out = vkGetInstanceProcAddr(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  if ($p1) delete[] $p1;
  
  
  return Napi::Number::New(env, 0);
  
};

Napi::Value _vkGetPhysicalDeviceProperties(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPhysicalDeviceProperties *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDeviceProperties") {
      NapiObjectTypeError(info[1], "argument 2", "VkPhysicalDeviceProperties");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPhysicalDeviceProperties* instance = reinterpret_cast<VkPhysicalDeviceProperties*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDeviceProperties' or 'null' for argument 2 'pProperties' in 'vkGetPhysicalDeviceProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetPhysicalDeviceProperties(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  if (info[1].IsObject()) {
     Napi::Object obj = info[1].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p1));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceQueueFamilyProperties(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceQueueFamilyProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pQueueFamilyPropertyCount' in 'vkGetPhysicalDeviceQueueFamilyProperties'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pQueueFamilyPropertyCount' in 'vkGetPhysicalDeviceQueueFamilyProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkQueueFamilyProperties>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[1].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[2].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pQueueFamilyProperties' in 'vkGetPhysicalDeviceQueueFamilyProperties'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkQueueFamilyProperties> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueueFamilyProperties") {
        NapiObjectTypeError(info[2], "argument 3", "VkQueueFamilyProperties");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkQueueFamilyProperties* instance = reinterpret_cast<VkQueueFamilyProperties*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkQueueFamilyProperties>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pQueueFamilyProperties' in 'vkGetPhysicalDeviceQueueFamilyProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkGetPhysicalDeviceQueueFamilyProperties(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    &$p1,
    $p2 ? (VkQueueFamilyProperties *) $p2.get()->data() : nullptr
  );
    if (info[1].IsObject()) obj1.Set("$", $p1);
  if (info[2].IsArray()) {
    VkQueueFamilyProperties* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceMemoryProperties(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceMemoryProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPhysicalDeviceMemoryProperties *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDeviceMemoryProperties") {
      NapiObjectTypeError(info[1], "argument 2", "VkPhysicalDeviceMemoryProperties");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPhysicalDeviceMemoryProperties* instance = reinterpret_cast<VkPhysicalDeviceMemoryProperties*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDeviceMemoryProperties' or 'null' for argument 2 'pMemoryProperties' in 'vkGetPhysicalDeviceMemoryProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetPhysicalDeviceMemoryProperties(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  if (info[1].IsObject()) {
     Napi::Object obj = info[1].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p1));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceFeatures(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceFeatures'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPhysicalDeviceFeatures *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDeviceFeatures") {
      NapiObjectTypeError(info[1], "argument 2", "VkPhysicalDeviceFeatures");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPhysicalDeviceFeatures* instance = reinterpret_cast<VkPhysicalDeviceFeatures*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDeviceFeatures' or 'null' for argument 2 'pFeatures' in 'vkGetPhysicalDeviceFeatures'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetPhysicalDeviceFeatures(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  if (info[1].IsObject()) {
     Napi::Object obj = info[1].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p1));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceFormatProperties(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'format' in 'vkGetPhysicalDeviceFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkFormat $p1 = static_cast<VkFormat>(info[1].As<Napi::Number>().Int64Value());

  Napi::Object obj2;
  VkFormatProperties *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkFormatProperties") {
      NapiObjectTypeError(info[2], "argument 3", "VkFormatProperties");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkFormatProperties* instance = reinterpret_cast<VkFormatProperties*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFormatProperties' or 'null' for argument 3 'pFormatProperties' in 'vkGetPhysicalDeviceFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetPhysicalDeviceFormatProperties(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceImageFormatProperties(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceImageFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'format' in 'vkGetPhysicalDeviceImageFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkFormat $p1 = static_cast<VkFormat>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'type' in 'vkGetPhysicalDeviceImageFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageType $p2 = static_cast<VkImageType>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'tiling' in 'vkGetPhysicalDeviceImageFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageTiling $p3 = static_cast<VkImageTiling>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'usage' in 'vkGetPhysicalDeviceImageFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p4 = static_cast<int32_t>(info[4].As<Napi::Number>().Int64Value());

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'flags' in 'vkGetPhysicalDeviceImageFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p5 = static_cast<int32_t>(info[5].As<Napi::Number>().Int64Value());

  Napi::Object obj6;
  VkImageFormatProperties *$p6 = nullptr;
  if (info[6].IsObject()) {
    Napi::Object obj = info[6].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImageFormatProperties") {
      NapiObjectTypeError(info[6], "argument 7", "VkImageFormatProperties");
      return env.Undefined();
    }
    obj6 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkImageFormatProperties* instance = reinterpret_cast<VkImageFormatProperties*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p6 = instance;
  } else if (info[6].IsNull()) {
    $p6 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImageFormatProperties' or 'null' for argument 7 'pImageFormatProperties' in 'vkGetPhysicalDeviceImageFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkGetPhysicalDeviceImageFormatProperties(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3,
    static_cast<VkImageUsageFlags>($p4),
    static_cast<VkImageCreateFlags>($p5),
    $p6
  );
  if (info[6].IsObject()) {
     Napi::Object obj = info[6].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p6));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateDevice(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkCreateDevice'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeviceCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkDeviceCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDeviceCreateInfo* instance = reinterpret_cast<VkDeviceCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeviceCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateDevice'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkDevice *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[3], "argument 4", "VkDevice");
      return env.Undefined();
    }
    obj3 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 4 'pDevice' in 'vkCreateDevice'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateDevice(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  vkUseDevice(*$p3);
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyDevice(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyDevice'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyDevice(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkEnumerateInstanceVersion(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  uint32_t $p0 = 0;
  if (info[0].IsObject()) {
    obj0 = info[0].As<Napi::Object>();
    if (!obj0.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 1 'pApiVersion' in 'vkEnumerateInstanceVersion'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj0.Get("$");
    
    $p0 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[0].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 1 'pApiVersion' in 'vkEnumerateInstanceVersion'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkEnumerateInstanceVersion(
    &$p0
  );
    if (info[0].IsObject()) obj0.Set("$", $p0);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkEnumerateInstanceLayerProperties(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  uint32_t $p0 = 0;
  if (info[0].IsObject()) {
    obj0 = info[0].As<Napi::Object>();
    if (!obj0.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 1 'pPropertyCount' in 'vkEnumerateInstanceLayerProperties'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj0.Get("$");
    
    $p0 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[0].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 1 'pPropertyCount' in 'vkEnumerateInstanceLayerProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkLayerProperties>> $p1 = nullptr;

  if (info[1].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[0].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[1].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 2 'pProperties' in 'vkEnumerateInstanceLayerProperties'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[1].As<Napi::Array>();
    std::vector<VkLayerProperties> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkLayerProperties") {
        NapiObjectTypeError(info[1], "argument 2", "VkLayerProperties");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkLayerProperties* instance = reinterpret_cast<VkLayerProperties*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p1 = std::make_shared<std::vector<VkLayerProperties>>(data);
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 2 'pProperties' in 'vkEnumerateInstanceLayerProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkEnumerateInstanceLayerProperties(
    &$p0,
    $p1 ? (VkLayerProperties *) $p1.get()->data() : nullptr
  );
    if (info[0].IsObject()) obj0.Set("$", $p0);
  if (info[1].IsArray()) {
    VkLayerProperties* $pdata = $p1.get()->data();
    Napi::Array array = info[1].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkEnumerateInstanceExtensionProperties(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  char* $p0 = nullptr;
  if (info[0].IsString()) {
    $p0 = copyV8String(info[0]);
  } else if (!info[0].IsNull()) {
    Napi::TypeError::New(env, "Expected 'String' or 'null' for argument 1 'pLayerName' in 'vkEnumerateInstanceExtensionProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pPropertyCount' in 'vkEnumerateInstanceExtensionProperties'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pPropertyCount' in 'vkEnumerateInstanceExtensionProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkExtensionProperties>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[1].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[2].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pProperties' in 'vkEnumerateInstanceExtensionProperties'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkExtensionProperties> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkExtensionProperties") {
        NapiObjectTypeError(info[2], "argument 3", "VkExtensionProperties");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkExtensionProperties* instance = reinterpret_cast<VkExtensionProperties*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkExtensionProperties>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pProperties' in 'vkEnumerateInstanceExtensionProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkEnumerateInstanceExtensionProperties(
    $p0,
    &$p1,
    $p2 ? (VkExtensionProperties *) $p2.get()->data() : nullptr
  );
  if ($p0) delete[] $p0;
    if (info[1].IsObject()) obj1.Set("$", $p1);
  if (info[2].IsArray()) {
    VkExtensionProperties* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkEnumerateDeviceLayerProperties(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkEnumerateDeviceLayerProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pPropertyCount' in 'vkEnumerateDeviceLayerProperties'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pPropertyCount' in 'vkEnumerateDeviceLayerProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkLayerProperties>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[1].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[2].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pProperties' in 'vkEnumerateDeviceLayerProperties'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkLayerProperties> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkLayerProperties") {
        NapiObjectTypeError(info[2], "argument 3", "VkLayerProperties");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkLayerProperties* instance = reinterpret_cast<VkLayerProperties*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkLayerProperties>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pProperties' in 'vkEnumerateDeviceLayerProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkEnumerateDeviceLayerProperties(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    &$p1,
    $p2 ? (VkLayerProperties *) $p2.get()->data() : nullptr
  );
    if (info[1].IsObject()) obj1.Set("$", $p1);
  if (info[2].IsArray()) {
    VkLayerProperties* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkEnumerateDeviceExtensionProperties(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkEnumerateDeviceExtensionProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  char* $p1 = nullptr;
  if (info[1].IsString()) {
    $p1 = copyV8String(info[1]);
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'String' or 'null' for argument 2 'pLayerName' in 'vkEnumerateDeviceExtensionProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pPropertyCount' in 'vkEnumerateDeviceExtensionProperties'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pPropertyCount' in 'vkEnumerateDeviceExtensionProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkExtensionProperties>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pProperties' in 'vkEnumerateDeviceExtensionProperties'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkExtensionProperties> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkExtensionProperties") {
        NapiObjectTypeError(info[3], "argument 4", "VkExtensionProperties");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkExtensionProperties* instance = reinterpret_cast<VkExtensionProperties*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkExtensionProperties>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pProperties' in 'vkEnumerateDeviceExtensionProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkEnumerateDeviceExtensionProperties(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    &$p2,
    $p3 ? (VkExtensionProperties *) $p3.get()->data() : nullptr
  );
  if ($p1) delete[] $p1;
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkExtensionProperties* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetDeviceQueue(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetDeviceQueue'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'queueFamilyIndex' in 'vkGetDeviceQueue'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'queueIndex' in 'vkGetDeviceQueue'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  Napi::Object obj3;
  VkQueue *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueue") {
      NapiObjectTypeError(info[3], "argument 4", "VkQueue");
      return env.Undefined();
    }
    obj3 = obj;
    VkQueue* instance = reinterpret_cast<VkQueue*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueue' or 'null' for argument 4 'pQueue' in 'vkGetDeviceQueue'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetDeviceQueue(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkQueueSubmit(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkQueue *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueue") {
      NapiObjectTypeError(info[0], "argument 1", "VkQueue");
      return env.Undefined();
    }
    obj0 = obj;
    VkQueue* instance = reinterpret_cast<VkQueue*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueue' or 'null' for argument 1 'queue' in 'vkQueueSubmit'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'submitCount' in 'vkQueueSubmit'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkSubmitInfo>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pSubmits' in 'vkQueueSubmit'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkSubmitInfo> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSubmitInfo") {
        NapiObjectTypeError(info[2], "argument 3", "VkSubmitInfo");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkSubmitInfo* instance = reinterpret_cast<VkSubmitInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkSubmitInfo>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pSubmits' in 'vkQueueSubmit'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkFence *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkFence") {
      NapiObjectTypeError(info[3], "argument 4", "VkFence");
      return env.Undefined();
    }
    obj3 = obj;
    VkFence* instance = reinterpret_cast<VkFence*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFence' or 'null' for argument 4 'fence' in 'vkQueueSubmit'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkQueueSubmit(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkSubmitInfo *) $p2.get()->data() : nullptr,
    info[3].IsNull() ? VK_NULL_HANDLE : *$p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkQueueWaitIdle(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkQueue *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueue") {
      NapiObjectTypeError(info[0], "argument 1", "VkQueue");
      return env.Undefined();
    }
    obj0 = obj;
    VkQueue* instance = reinterpret_cast<VkQueue*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueue' or 'null' for argument 1 'queue' in 'vkQueueWaitIdle'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkQueueWaitIdle(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDeviceWaitIdle(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDeviceWaitIdle'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkDeviceWaitIdle(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkAllocateMemory(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkAllocateMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkMemoryAllocateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkMemoryAllocateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkMemoryAllocateInfo* instance = reinterpret_cast<VkMemoryAllocateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkMemoryAllocateInfo' or 'null' for argument 2 'pAllocateInfo' in 'vkAllocateMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkDeviceMemory *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeviceMemory") {
      NapiObjectTypeError(info[3], "argument 4", "VkDeviceMemory");
      return env.Undefined();
    }
    obj3 = obj;
    VkDeviceMemory* instance = reinterpret_cast<VkDeviceMemory*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeviceMemory' or 'null' for argument 4 'pMemory' in 'vkAllocateMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkAllocateMemory(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkFreeMemory(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkFreeMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeviceMemory *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeviceMemory") {
      NapiObjectTypeError(info[1], "argument 2", "VkDeviceMemory");
      return env.Undefined();
    }
    obj1 = obj;
    VkDeviceMemory* instance = reinterpret_cast<VkDeviceMemory*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeviceMemory' or 'null' for argument 2 'memory' in 'vkFreeMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkFreeMemory(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkMapMemory(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkMapMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeviceMemory *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeviceMemory") {
      NapiObjectTypeError(info[1], "argument 2", "VkDeviceMemory");
      return env.Undefined();
    }
    obj1 = obj;
    VkDeviceMemory* instance = reinterpret_cast<VkDeviceMemory*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeviceMemory' or 'null' for argument 2 'memory' in 'vkMapMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'offset' in 'vkMapMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }

  bool lossless3;
  if (!info[3].IsBigInt() && !info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 4 'size' in 'vkMapMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p3 = 0;
  if (info[3].IsBigInt()) {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::BigInt>().Int64Value(&lossless3));
  } else {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::Number>().Int64Value());
  }

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'flags' in 'vkMapMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p4 = static_cast<int32_t>(info[4].As<Napi::Number>().Int64Value());

  Napi::Object obj5 = info[5].As<Napi::Object>();
  void *$p5 = nullptr;
  int32_t out = vkMapMemory(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3,
    static_cast<VkMemoryMapFlags>($p4),
    &$p5
  );
  Napi::BigInt ptr5 = Napi::BigInt::New(env, (int64_t)$p5);
  if (info[5].IsObject()) obj5.Set("$", ptr5);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkUnmapMemory(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkUnmapMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeviceMemory *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeviceMemory") {
      NapiObjectTypeError(info[1], "argument 2", "VkDeviceMemory");
      return env.Undefined();
    }
    obj1 = obj;
    VkDeviceMemory* instance = reinterpret_cast<VkDeviceMemory*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeviceMemory' or 'null' for argument 2 'memory' in 'vkUnmapMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkUnmapMemory(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkFlushMappedMemoryRanges(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkFlushMappedMemoryRanges'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'memoryRangeCount' in 'vkFlushMappedMemoryRanges'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkMappedMemoryRange>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pMemoryRanges' in 'vkFlushMappedMemoryRanges'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkMappedMemoryRange> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkMappedMemoryRange") {
        NapiObjectTypeError(info[2], "argument 3", "VkMappedMemoryRange");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkMappedMemoryRange* instance = reinterpret_cast<VkMappedMemoryRange*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkMappedMemoryRange>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pMemoryRanges' in 'vkFlushMappedMemoryRanges'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkFlushMappedMemoryRanges(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkMappedMemoryRange *) $p2.get()->data() : nullptr
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkInvalidateMappedMemoryRanges(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkInvalidateMappedMemoryRanges'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'memoryRangeCount' in 'vkInvalidateMappedMemoryRanges'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkMappedMemoryRange>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pMemoryRanges' in 'vkInvalidateMappedMemoryRanges'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkMappedMemoryRange> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkMappedMemoryRange") {
        NapiObjectTypeError(info[2], "argument 3", "VkMappedMemoryRange");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkMappedMemoryRange* instance = reinterpret_cast<VkMappedMemoryRange*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkMappedMemoryRange>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pMemoryRanges' in 'vkInvalidateMappedMemoryRanges'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkInvalidateMappedMemoryRanges(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkMappedMemoryRange *) $p2.get()->data() : nullptr
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetDeviceMemoryCommitment(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetDeviceMemoryCommitment'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeviceMemory *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeviceMemory") {
      NapiObjectTypeError(info[1], "argument 2", "VkDeviceMemory");
      return env.Undefined();
    }
    obj1 = obj;
    VkDeviceMemory* instance = reinterpret_cast<VkDeviceMemory*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeviceMemory' or 'null' for argument 2 'memory' in 'vkGetDeviceMemoryCommitment'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint64_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pCommittedMemoryInBytes' in 'vkGetDeviceMemoryCommitment'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint64_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pCommittedMemoryInBytes' in 'vkGetDeviceMemoryCommitment'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetDeviceMemoryCommitment(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    &$p2
  );
    Napi::BigInt pnum2 = Napi::BigInt::New(env, (uint64_t)$p2);
    if (info[2].IsObject()) obj2.Set("$", pnum2);
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetBufferMemoryRequirements(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetBufferMemoryRequirements'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'buffer' in 'vkGetBufferMemoryRequirements'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkMemoryRequirements *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkMemoryRequirements") {
      NapiObjectTypeError(info[2], "argument 3", "VkMemoryRequirements");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkMemoryRequirements* instance = reinterpret_cast<VkMemoryRequirements*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkMemoryRequirements' or 'null' for argument 3 'pMemoryRequirements' in 'vkGetBufferMemoryRequirements'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetBufferMemoryRequirements(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkBindBufferMemory(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkBindBufferMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'buffer' in 'vkBindBufferMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkDeviceMemory *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeviceMemory") {
      NapiObjectTypeError(info[2], "argument 3", "VkDeviceMemory");
      return env.Undefined();
    }
    obj2 = obj;
    VkDeviceMemory* instance = reinterpret_cast<VkDeviceMemory*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeviceMemory' or 'null' for argument 3 'memory' in 'vkBindBufferMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless3;
  if (!info[3].IsBigInt() && !info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 4 'memoryOffset' in 'vkBindBufferMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p3 = 0;
  if (info[3].IsBigInt()) {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::BigInt>().Int64Value(&lossless3));
  } else {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::Number>().Int64Value());
  }
  int32_t out = vkBindBufferMemory(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetImageMemoryRequirements(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetImageMemoryRequirements'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImage *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[1], "argument 2", "VkImage");
      return env.Undefined();
    }
    obj1 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 2 'image' in 'vkGetImageMemoryRequirements'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkMemoryRequirements *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkMemoryRequirements") {
      NapiObjectTypeError(info[2], "argument 3", "VkMemoryRequirements");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkMemoryRequirements* instance = reinterpret_cast<VkMemoryRequirements*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkMemoryRequirements' or 'null' for argument 3 'pMemoryRequirements' in 'vkGetImageMemoryRequirements'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetImageMemoryRequirements(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkBindImageMemory(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkBindImageMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImage *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[1], "argument 2", "VkImage");
      return env.Undefined();
    }
    obj1 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 2 'image' in 'vkBindImageMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkDeviceMemory *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeviceMemory") {
      NapiObjectTypeError(info[2], "argument 3", "VkDeviceMemory");
      return env.Undefined();
    }
    obj2 = obj;
    VkDeviceMemory* instance = reinterpret_cast<VkDeviceMemory*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeviceMemory' or 'null' for argument 3 'memory' in 'vkBindImageMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless3;
  if (!info[3].IsBigInt() && !info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 4 'memoryOffset' in 'vkBindImageMemory'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p3 = 0;
  if (info[3].IsBigInt()) {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::BigInt>().Int64Value(&lossless3));
  } else {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::Number>().Int64Value());
  }
  int32_t out = vkBindImageMemory(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetImageSparseMemoryRequirements(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetImageSparseMemoryRequirements'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImage *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[1], "argument 2", "VkImage");
      return env.Undefined();
    }
    obj1 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 2 'image' in 'vkGetImageSparseMemoryRequirements'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pSparseMemoryRequirementCount' in 'vkGetImageSparseMemoryRequirements'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pSparseMemoryRequirementCount' in 'vkGetImageSparseMemoryRequirements'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkSparseImageMemoryRequirements>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pSparseMemoryRequirements' in 'vkGetImageSparseMemoryRequirements'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkSparseImageMemoryRequirements> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSparseImageMemoryRequirements") {
        NapiObjectTypeError(info[3], "argument 4", "VkSparseImageMemoryRequirements");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkSparseImageMemoryRequirements* instance = reinterpret_cast<VkSparseImageMemoryRequirements*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkSparseImageMemoryRequirements>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pSparseMemoryRequirements' in 'vkGetImageSparseMemoryRequirements'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkGetImageSparseMemoryRequirements(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    &$p2,
    $p3 ? (VkSparseImageMemoryRequirements *) $p3.get()->data() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkSparseImageMemoryRequirements* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceSparseImageFormatProperties(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceSparseImageFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'format' in 'vkGetPhysicalDeviceSparseImageFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkFormat $p1 = static_cast<VkFormat>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'type' in 'vkGetPhysicalDeviceSparseImageFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageType $p2 = static_cast<VkImageType>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'samples' in 'vkGetPhysicalDeviceSparseImageFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p3 = static_cast<int32_t>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'usage' in 'vkGetPhysicalDeviceSparseImageFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p4 = static_cast<int32_t>(info[4].As<Napi::Number>().Int64Value());

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'tiling' in 'vkGetPhysicalDeviceSparseImageFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageTiling $p5 = static_cast<VkImageTiling>(info[5].As<Napi::Number>().Int64Value());

  Napi::Object obj6;
  uint32_t $p6 = 0;
  if (info[6].IsObject()) {
    obj6 = info[6].As<Napi::Object>();
    if (!obj6.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 7 'pPropertyCount' in 'vkGetPhysicalDeviceSparseImageFormatProperties'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj6.Get("$");
    
    $p6 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[6].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 7 'pPropertyCount' in 'vkGetPhysicalDeviceSparseImageFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkSparseImageFormatProperties>> $p7 = nullptr;

  if (info[7].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[6].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[7].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 8 'pProperties' in 'vkGetPhysicalDeviceSparseImageFormatProperties'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[7].As<Napi::Array>();
    std::vector<VkSparseImageFormatProperties> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSparseImageFormatProperties") {
        NapiObjectTypeError(info[7], "argument 8", "VkSparseImageFormatProperties");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkSparseImageFormatProperties* instance = reinterpret_cast<VkSparseImageFormatProperties*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p7 = std::make_shared<std::vector<VkSparseImageFormatProperties>>(data);
  } else if (!info[7].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 8 'pProperties' in 'vkGetPhysicalDeviceSparseImageFormatProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkGetPhysicalDeviceSparseImageFormatProperties(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    static_cast<VkSampleCountFlagBits>($p3),
    static_cast<VkImageUsageFlags>($p4),
    $p5,
    &$p6,
    $p7 ? (VkSparseImageFormatProperties *) $p7.get()->data() : nullptr
  );
    if (info[6].IsObject()) obj6.Set("$", $p6);
  if (info[7].IsArray()) {
    VkSparseImageFormatProperties* $pdata = $p7.get()->data();
    Napi::Array array = info[7].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkQueueBindSparse(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkQueue *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueue") {
      NapiObjectTypeError(info[0], "argument 1", "VkQueue");
      return env.Undefined();
    }
    obj0 = obj;
    VkQueue* instance = reinterpret_cast<VkQueue*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueue' or 'null' for argument 1 'queue' in 'vkQueueBindSparse'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'bindInfoCount' in 'vkQueueBindSparse'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkBindSparseInfo>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pBindInfo' in 'vkQueueBindSparse'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkBindSparseInfo> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBindSparseInfo") {
        NapiObjectTypeError(info[2], "argument 3", "VkBindSparseInfo");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkBindSparseInfo* instance = reinterpret_cast<VkBindSparseInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkBindSparseInfo>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pBindInfo' in 'vkQueueBindSparse'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkFence *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkFence") {
      NapiObjectTypeError(info[3], "argument 4", "VkFence");
      return env.Undefined();
    }
    obj3 = obj;
    VkFence* instance = reinterpret_cast<VkFence*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFence' or 'null' for argument 4 'fence' in 'vkQueueBindSparse'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkQueueBindSparse(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkBindSparseInfo *) $p2.get()->data() : nullptr,
    info[3].IsNull() ? VK_NULL_HANDLE : *$p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateFence(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateFence'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkFenceCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_FENCE_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkFenceCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkFenceCreateInfo* instance = reinterpret_cast<VkFenceCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFenceCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateFence'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkFence *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkFence") {
      NapiObjectTypeError(info[3], "argument 4", "VkFence");
      return env.Undefined();
    }
    obj3 = obj;
    VkFence* instance = reinterpret_cast<VkFence*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFence' or 'null' for argument 4 'pFence' in 'vkCreateFence'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateFence(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyFence(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyFence'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkFence *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkFence") {
      NapiObjectTypeError(info[1], "argument 2", "VkFence");
      return env.Undefined();
    }
    obj1 = obj;
    VkFence* instance = reinterpret_cast<VkFence*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFence' or 'null' for argument 2 'fence' in 'vkDestroyFence'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyFence(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkResetFences(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkResetFences'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'fenceCount' in 'vkResetFences'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkFence>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pFences' in 'vkResetFences'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkFence> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkFence") {
        NapiObjectTypeError(info[0], "argument 3", "VkFence");
        return env.Undefined();
      }
      VkFence* instance = reinterpret_cast<VkFence*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkFence>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pFences' in 'vkResetFences'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkResetFences(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkFence *) $p2.get()->data() : nullptr
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetFenceStatus(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetFenceStatus'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkFence *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkFence") {
      NapiObjectTypeError(info[1], "argument 2", "VkFence");
      return env.Undefined();
    }
    obj1 = obj;
    VkFence* instance = reinterpret_cast<VkFence*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFence' or 'null' for argument 2 'fence' in 'vkGetFenceStatus'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkGetFenceStatus(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkWaitForFences(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkWaitForFences'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'fenceCount' in 'vkWaitForFences'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkFence>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pFences' in 'vkWaitForFences'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkFence> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkFence") {
        NapiObjectTypeError(info[0], "argument 3", "VkFence");
        return env.Undefined();
      }
      VkFence* instance = reinterpret_cast<VkFence*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkFence>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pFences' in 'vkWaitForFences'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  if (!info[3].IsBoolean() && !info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Boolean' or 'Number' for argument 4 'waitAll' in 'vkWaitForFences'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].IsBoolean() ? info[3].As<Napi::Boolean>().Value() : info[3].As<Napi::Number>().Int32Value());

  bool lossless4;
  if (!info[4].IsBigInt() && !info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 5 'timeout' in 'vkWaitForFences'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p4 = 0;
  if (info[4].IsBigInt()) {
    $p4 = static_cast<uint64_t>(info[4].As<Napi::BigInt>().Int64Value(&lossless4));
  } else {
    $p4 = static_cast<uint64_t>(info[4].As<Napi::Number>().Int64Value());
  }
  int32_t out = vkWaitForFences(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkFence *) $p2.get()->data() : nullptr,
    $p3,
    $p4
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateSemaphore(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateSemaphore'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSemaphoreCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkSemaphoreCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSemaphoreCreateInfo* instance = reinterpret_cast<VkSemaphoreCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSemaphoreCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateSemaphore'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkSemaphore *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSemaphore") {
      NapiObjectTypeError(info[3], "argument 4", "VkSemaphore");
      return env.Undefined();
    }
    obj3 = obj;
    VkSemaphore* instance = reinterpret_cast<VkSemaphore*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSemaphore' or 'null' for argument 4 'pSemaphore' in 'vkCreateSemaphore'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateSemaphore(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroySemaphore(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroySemaphore'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSemaphore *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSemaphore") {
      NapiObjectTypeError(info[1], "argument 2", "VkSemaphore");
      return env.Undefined();
    }
    obj1 = obj;
    VkSemaphore* instance = reinterpret_cast<VkSemaphore*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSemaphore' or 'null' for argument 2 'semaphore' in 'vkDestroySemaphore'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroySemaphore(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateEvent(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateEvent'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkEventCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_EVENT_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkEventCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkEventCreateInfo* instance = reinterpret_cast<VkEventCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkEventCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateEvent'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkEvent *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkEvent") {
      NapiObjectTypeError(info[3], "argument 4", "VkEvent");
      return env.Undefined();
    }
    obj3 = obj;
    VkEvent* instance = reinterpret_cast<VkEvent*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkEvent' or 'null' for argument 4 'pEvent' in 'vkCreateEvent'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateEvent(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyEvent(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyEvent'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkEvent *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkEvent") {
      NapiObjectTypeError(info[1], "argument 2", "VkEvent");
      return env.Undefined();
    }
    obj1 = obj;
    VkEvent* instance = reinterpret_cast<VkEvent*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkEvent' or 'null' for argument 2 'event' in 'vkDestroyEvent'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyEvent(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetEventStatus(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetEventStatus'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkEvent *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkEvent") {
      NapiObjectTypeError(info[1], "argument 2", "VkEvent");
      return env.Undefined();
    }
    obj1 = obj;
    VkEvent* instance = reinterpret_cast<VkEvent*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkEvent' or 'null' for argument 2 'event' in 'vkGetEventStatus'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkGetEventStatus(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkSetEvent(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkSetEvent'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkEvent *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkEvent") {
      NapiObjectTypeError(info[1], "argument 2", "VkEvent");
      return env.Undefined();
    }
    obj1 = obj;
    VkEvent* instance = reinterpret_cast<VkEvent*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkEvent' or 'null' for argument 2 'event' in 'vkSetEvent'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkSetEvent(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkResetEvent(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkResetEvent'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkEvent *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkEvent") {
      NapiObjectTypeError(info[1], "argument 2", "VkEvent");
      return env.Undefined();
    }
    obj1 = obj;
    VkEvent* instance = reinterpret_cast<VkEvent*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkEvent' or 'null' for argument 2 'event' in 'vkResetEvent'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkResetEvent(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateQueryPool(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateQueryPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkQueryPoolCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkQueryPoolCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkQueryPoolCreateInfo* instance = reinterpret_cast<VkQueryPoolCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueryPoolCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateQueryPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkQueryPool *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueryPool") {
      NapiObjectTypeError(info[3], "argument 4", "VkQueryPool");
      return env.Undefined();
    }
    obj3 = obj;
    VkQueryPool* instance = reinterpret_cast<VkQueryPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueryPool' or 'null' for argument 4 'pQueryPool' in 'vkCreateQueryPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateQueryPool(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyQueryPool(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyQueryPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkQueryPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueryPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkQueryPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkQueryPool* instance = reinterpret_cast<VkQueryPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueryPool' or 'null' for argument 2 'queryPool' in 'vkDestroyQueryPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyQueryPool(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetQueryPoolResults(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkQueryPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueryPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkQueryPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkQueryPool* instance = reinterpret_cast<VkQueryPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueryPool' or 'null' for argument 2 'queryPool' in 'vkGetQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'firstQuery' in 'vkGetQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'queryCount' in 'vkGetQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  bool lossless4;
  if (!info[4].IsBigInt() && !info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 5 'dataSize' in 'vkGetQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  size_t $p4 = 0;
  if (info[4].IsBigInt()) {
    $p4 = static_cast<size_t>(info[4].As<Napi::BigInt>().Int64Value(&lossless4));
  } else {
    $p4 = static_cast<size_t>(info[4].As<Napi::Number>().Int64Value());
  }

  void* $p5 = nullptr;
  if (info[5].IsArrayBuffer()) {
    Napi::ArrayBuffer buf = info[5].As<Napi::ArrayBuffer>();
    $p5 = buf.Data();
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Expected 'ArrayBuffer' or 'null' for argument 6 'pData' in 'vkGetQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless6;
  if (!info[6].IsBigInt() && !info[6].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 7 'stride' in 'vkGetQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p6 = 0;
  if (info[6].IsBigInt()) {
    $p6 = static_cast<uint64_t>(info[6].As<Napi::BigInt>().Int64Value(&lossless6));
  } else {
    $p6 = static_cast<uint64_t>(info[6].As<Napi::Number>().Int64Value());
  }

  if (!info[7].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 8 'flags' in 'vkGetQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p7 = static_cast<int32_t>(info[7].As<Napi::Number>().Int64Value());
  int32_t out = vkGetQueryPoolResults(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3,
    $p4,
    info[5].IsNull() ? nullptr : $p5,
    $p6,
    static_cast<VkQueryResultFlags>($p7)
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkResetQueryPool(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkResetQueryPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkQueryPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueryPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkQueryPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkQueryPool* instance = reinterpret_cast<VkQueryPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueryPool' or 'null' for argument 2 'queryPool' in 'vkResetQueryPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'firstQuery' in 'vkResetQueryPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'queryCount' in 'vkResetQueryPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());
vkResetQueryPool(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateBuffer(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBufferCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkBufferCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkBufferCreateInfo* instance = reinterpret_cast<VkBufferCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBufferCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkBuffer *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[3], "argument 4", "VkBuffer");
      return env.Undefined();
    }
    obj3 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 4 'pBuffer' in 'vkCreateBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateBuffer(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyBuffer(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'buffer' in 'vkDestroyBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyBuffer(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateBufferView(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateBufferView'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBufferViewCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkBufferViewCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkBufferViewCreateInfo* instance = reinterpret_cast<VkBufferViewCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBufferViewCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateBufferView'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkBufferView *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBufferView") {
      NapiObjectTypeError(info[3], "argument 4", "VkBufferView");
      return env.Undefined();
    }
    obj3 = obj;
    VkBufferView* instance = reinterpret_cast<VkBufferView*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBufferView' or 'null' for argument 4 'pView' in 'vkCreateBufferView'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateBufferView(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyBufferView(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyBufferView'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBufferView *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBufferView") {
      NapiObjectTypeError(info[1], "argument 2", "VkBufferView");
      return env.Undefined();
    }
    obj1 = obj;
    VkBufferView* instance = reinterpret_cast<VkBufferView*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBufferView' or 'null' for argument 2 'bufferView' in 'vkDestroyBufferView'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyBufferView(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateImage(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImageCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkImageCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkImageCreateInfo* instance = reinterpret_cast<VkImageCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImageCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkImage *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[3], "argument 4", "VkImage");
      return env.Undefined();
    }
    obj3 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 4 'pImage' in 'vkCreateImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateImage(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyImage(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImage *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[1], "argument 2", "VkImage");
      return env.Undefined();
    }
    obj1 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 2 'image' in 'vkDestroyImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyImage(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetImageSubresourceLayout(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetImageSubresourceLayout'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImage *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[1], "argument 2", "VkImage");
      return env.Undefined();
    }
    obj1 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 2 'image' in 'vkGetImageSubresourceLayout'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkImageSubresource *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImageSubresource") {
      NapiObjectTypeError(info[2], "argument 3", "VkImageSubresource");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkImageSubresource* instance = reinterpret_cast<VkImageSubresource*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImageSubresource' or 'null' for argument 3 'pSubresource' in 'vkGetImageSubresourceLayout'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj3;
  VkSubresourceLayout *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSubresourceLayout") {
      NapiObjectTypeError(info[3], "argument 4", "VkSubresourceLayout");
      return env.Undefined();
    }
    obj3 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSubresourceLayout* instance = reinterpret_cast<VkSubresourceLayout*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSubresourceLayout' or 'null' for argument 4 'pLayout' in 'vkGetImageSubresourceLayout'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetImageSubresourceLayout(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3
  );
  if (info[3].IsObject()) {
     Napi::Object obj = info[3].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p3));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateImageView(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateImageView'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImageViewCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkImageViewCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkImageViewCreateInfo* instance = reinterpret_cast<VkImageViewCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImageViewCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateImageView'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkImageView *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImageView") {
      NapiObjectTypeError(info[3], "argument 4", "VkImageView");
      return env.Undefined();
    }
    obj3 = obj;
    VkImageView* instance = reinterpret_cast<VkImageView*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImageView' or 'null' for argument 4 'pView' in 'vkCreateImageView'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateImageView(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyImageView(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyImageView'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImageView *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImageView") {
      NapiObjectTypeError(info[1], "argument 2", "VkImageView");
      return env.Undefined();
    }
    obj1 = obj;
    VkImageView* instance = reinterpret_cast<VkImageView*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImageView' or 'null' for argument 2 'imageView' in 'vkDestroyImageView'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyImageView(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateShaderModule(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateShaderModule'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkShaderModuleCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkShaderModuleCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkShaderModuleCreateInfo* instance = reinterpret_cast<VkShaderModuleCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkShaderModuleCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateShaderModule'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkShaderModule *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkShaderModule") {
      NapiObjectTypeError(info[3], "argument 4", "VkShaderModule");
      return env.Undefined();
    }
    obj3 = obj;
    VkShaderModule* instance = reinterpret_cast<VkShaderModule*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkShaderModule' or 'null' for argument 4 'pShaderModule' in 'vkCreateShaderModule'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateShaderModule(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyShaderModule(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyShaderModule'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkShaderModule *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkShaderModule") {
      NapiObjectTypeError(info[1], "argument 2", "VkShaderModule");
      return env.Undefined();
    }
    obj1 = obj;
    VkShaderModule* instance = reinterpret_cast<VkShaderModule*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkShaderModule' or 'null' for argument 2 'shaderModule' in 'vkDestroyShaderModule'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyShaderModule(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreatePipelineCache(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreatePipelineCache'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipelineCacheCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkPipelineCacheCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPipelineCacheCreateInfo* instance = reinterpret_cast<VkPipelineCacheCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineCacheCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreatePipelineCache'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkPipelineCache *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineCache") {
      NapiObjectTypeError(info[3], "argument 4", "VkPipelineCache");
      return env.Undefined();
    }
    obj3 = obj;
    VkPipelineCache* instance = reinterpret_cast<VkPipelineCache*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineCache' or 'null' for argument 4 'pPipelineCache' in 'vkCreatePipelineCache'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreatePipelineCache(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyPipelineCache(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyPipelineCache'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipelineCache *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineCache") {
      NapiObjectTypeError(info[1], "argument 2", "VkPipelineCache");
      return env.Undefined();
    }
    obj1 = obj;
    VkPipelineCache* instance = reinterpret_cast<VkPipelineCache*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineCache' or 'null' for argument 2 'pipelineCache' in 'vkDestroyPipelineCache'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyPipelineCache(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPipelineCacheData(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetPipelineCacheData'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipelineCache *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineCache") {
      NapiObjectTypeError(info[1], "argument 2", "VkPipelineCache");
      return env.Undefined();
    }
    obj1 = obj;
    VkPipelineCache* instance = reinterpret_cast<VkPipelineCache*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineCache' or 'null' for argument 2 'pipelineCache' in 'vkGetPipelineCacheData'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  size_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pDataSize' in 'vkGetPipelineCacheData'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<size_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pDataSize' in 'vkGetPipelineCacheData'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  void* $p3 = nullptr;
  if (info[3].IsArrayBuffer()) {
    Napi::ArrayBuffer buf = info[3].As<Napi::ArrayBuffer>();
    $p3 = buf.Data();
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Expected 'ArrayBuffer' or 'null' for argument 4 'pData' in 'vkGetPipelineCacheData'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkGetPipelineCacheData(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    &$p2,
    info[3].IsNull() ? nullptr : $p3
  );
    Napi::BigInt pnum2 = Napi::BigInt::New(env, (uint64_t)$p2);
    if (info[2].IsObject()) obj2.Set("$", pnum2);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkMergePipelineCaches(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkMergePipelineCaches'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipelineCache *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineCache") {
      NapiObjectTypeError(info[1], "argument 2", "VkPipelineCache");
      return env.Undefined();
    }
    obj1 = obj;
    VkPipelineCache* instance = reinterpret_cast<VkPipelineCache*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineCache' or 'null' for argument 2 'dstCache' in 'vkMergePipelineCaches'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'srcCacheCount' in 'vkMergePipelineCaches'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkPipelineCache>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pSrcCaches' in 'vkMergePipelineCaches'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkPipelineCache> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineCache") {
        NapiObjectTypeError(info[0], "argument 4", "VkPipelineCache");
        return env.Undefined();
      }
      VkPipelineCache* instance = reinterpret_cast<VkPipelineCache*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkPipelineCache>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pSrcCaches' in 'vkMergePipelineCaches'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkMergePipelineCaches(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3 ? (const VkPipelineCache *) $p3.get()->data() : nullptr
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateGraphicsPipelines(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateGraphicsPipelines'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipelineCache *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineCache") {
      NapiObjectTypeError(info[1], "argument 2", "VkPipelineCache");
      return env.Undefined();
    }
    obj1 = obj;
    VkPipelineCache* instance = reinterpret_cast<VkPipelineCache*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineCache' or 'null' for argument 2 'pipelineCache' in 'vkCreateGraphicsPipelines'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'createInfoCount' in 'vkCreateGraphicsPipelines'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkGraphicsPipelineCreateInfo>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pCreateInfos' in 'vkCreateGraphicsPipelines'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkGraphicsPipelineCreateInfo> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkGraphicsPipelineCreateInfo") {
        NapiObjectTypeError(info[3], "argument 4", "VkGraphicsPipelineCreateInfo");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkGraphicsPipelineCreateInfo* instance = reinterpret_cast<VkGraphicsPipelineCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkGraphicsPipelineCreateInfo>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pCreateInfos' in 'vkCreateGraphicsPipelines'").ThrowAsJavaScriptException();
    return env.Undefined();
  }



  std::shared_ptr<std::vector<VkPipeline>> $p5 = nullptr;

  if (info[5].IsArray()) {

    // validate length
    if (info[5].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 6 'pPipelines' in 'vkCreateGraphicsPipelines'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[5].As<Napi::Array>();
    std::vector<VkPipeline> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipeline") {
        NapiObjectTypeError(info[0], "argument 6", "VkPipeline");
        return env.Undefined();
      }
      VkPipeline* instance = reinterpret_cast<VkPipeline*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p5 = std::make_shared<std::vector<VkPipeline>>(data);
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 6 'pPipelines' in 'vkCreateGraphicsPipelines'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkCreateGraphicsPipelines(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3 ? (const VkGraphicsPipelineCreateInfo *) $p3.get()->data() : nullptr,
    nullptr,
    $p5 ? (VkPipeline *) $p5.get()->data() : nullptr
  );
  if (info[5].IsArray()) {
    VkPipeline* $pdata = $p5.get()->data();
    Napi::Array array = info[5].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();

      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateComputePipelines(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateComputePipelines'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipelineCache *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineCache") {
      NapiObjectTypeError(info[1], "argument 2", "VkPipelineCache");
      return env.Undefined();
    }
    obj1 = obj;
    VkPipelineCache* instance = reinterpret_cast<VkPipelineCache*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineCache' or 'null' for argument 2 'pipelineCache' in 'vkCreateComputePipelines'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'createInfoCount' in 'vkCreateComputePipelines'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkComputePipelineCreateInfo>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pCreateInfos' in 'vkCreateComputePipelines'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkComputePipelineCreateInfo> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkComputePipelineCreateInfo") {
        NapiObjectTypeError(info[3], "argument 4", "VkComputePipelineCreateInfo");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkComputePipelineCreateInfo* instance = reinterpret_cast<VkComputePipelineCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkComputePipelineCreateInfo>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pCreateInfos' in 'vkCreateComputePipelines'").ThrowAsJavaScriptException();
    return env.Undefined();
  }



  std::shared_ptr<std::vector<VkPipeline>> $p5 = nullptr;

  if (info[5].IsArray()) {

    // validate length
    if (info[5].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 6 'pPipelines' in 'vkCreateComputePipelines'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[5].As<Napi::Array>();
    std::vector<VkPipeline> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipeline") {
        NapiObjectTypeError(info[0], "argument 6", "VkPipeline");
        return env.Undefined();
      }
      VkPipeline* instance = reinterpret_cast<VkPipeline*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p5 = std::make_shared<std::vector<VkPipeline>>(data);
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 6 'pPipelines' in 'vkCreateComputePipelines'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkCreateComputePipelines(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3 ? (const VkComputePipelineCreateInfo *) $p3.get()->data() : nullptr,
    nullptr,
    $p5 ? (VkPipeline *) $p5.get()->data() : nullptr
  );
  if (info[5].IsArray()) {
    VkPipeline* $pdata = $p5.get()->data();
    Napi::Array array = info[5].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();

      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyPipeline(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyPipeline'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipeline *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipeline") {
      NapiObjectTypeError(info[1], "argument 2", "VkPipeline");
      return env.Undefined();
    }
    obj1 = obj;
    VkPipeline* instance = reinterpret_cast<VkPipeline*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipeline' or 'null' for argument 2 'pipeline' in 'vkDestroyPipeline'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyPipeline(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreatePipelineLayout(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreatePipelineLayout'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipelineLayoutCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkPipelineLayoutCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPipelineLayoutCreateInfo* instance = reinterpret_cast<VkPipelineLayoutCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineLayoutCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreatePipelineLayout'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkPipelineLayout *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineLayout") {
      NapiObjectTypeError(info[3], "argument 4", "VkPipelineLayout");
      return env.Undefined();
    }
    obj3 = obj;
    VkPipelineLayout* instance = reinterpret_cast<VkPipelineLayout*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineLayout' or 'null' for argument 4 'pPipelineLayout' in 'vkCreatePipelineLayout'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreatePipelineLayout(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyPipelineLayout(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyPipelineLayout'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipelineLayout *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineLayout") {
      NapiObjectTypeError(info[1], "argument 2", "VkPipelineLayout");
      return env.Undefined();
    }
    obj1 = obj;
    VkPipelineLayout* instance = reinterpret_cast<VkPipelineLayout*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineLayout' or 'null' for argument 2 'pipelineLayout' in 'vkDestroyPipelineLayout'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyPipelineLayout(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateSampler(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateSampler'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSamplerCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkSamplerCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSamplerCreateInfo* instance = reinterpret_cast<VkSamplerCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSamplerCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateSampler'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkSampler *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSampler") {
      NapiObjectTypeError(info[3], "argument 4", "VkSampler");
      return env.Undefined();
    }
    obj3 = obj;
    VkSampler* instance = reinterpret_cast<VkSampler*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSampler' or 'null' for argument 4 'pSampler' in 'vkCreateSampler'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateSampler(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroySampler(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroySampler'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSampler *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSampler") {
      NapiObjectTypeError(info[1], "argument 2", "VkSampler");
      return env.Undefined();
    }
    obj1 = obj;
    VkSampler* instance = reinterpret_cast<VkSampler*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSampler' or 'null' for argument 2 'sampler' in 'vkDestroySampler'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroySampler(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateDescriptorSetLayout(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateDescriptorSetLayout'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDescriptorSetLayoutCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkDescriptorSetLayoutCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDescriptorSetLayoutCreateInfo* instance = reinterpret_cast<VkDescriptorSetLayoutCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorSetLayoutCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateDescriptorSetLayout'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkDescriptorSetLayout *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDescriptorSetLayout") {
      NapiObjectTypeError(info[3], "argument 4", "VkDescriptorSetLayout");
      return env.Undefined();
    }
    obj3 = obj;
    VkDescriptorSetLayout* instance = reinterpret_cast<VkDescriptorSetLayout*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorSetLayout' or 'null' for argument 4 'pSetLayout' in 'vkCreateDescriptorSetLayout'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateDescriptorSetLayout(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyDescriptorSetLayout(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyDescriptorSetLayout'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDescriptorSetLayout *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDescriptorSetLayout") {
      NapiObjectTypeError(info[1], "argument 2", "VkDescriptorSetLayout");
      return env.Undefined();
    }
    obj1 = obj;
    VkDescriptorSetLayout* instance = reinterpret_cast<VkDescriptorSetLayout*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorSetLayout' or 'null' for argument 2 'descriptorSetLayout' in 'vkDestroyDescriptorSetLayout'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyDescriptorSetLayout(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateDescriptorPool(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateDescriptorPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDescriptorPoolCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkDescriptorPoolCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDescriptorPoolCreateInfo* instance = reinterpret_cast<VkDescriptorPoolCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorPoolCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateDescriptorPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkDescriptorPool *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDescriptorPool") {
      NapiObjectTypeError(info[3], "argument 4", "VkDescriptorPool");
      return env.Undefined();
    }
    obj3 = obj;
    VkDescriptorPool* instance = reinterpret_cast<VkDescriptorPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorPool' or 'null' for argument 4 'pDescriptorPool' in 'vkCreateDescriptorPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateDescriptorPool(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyDescriptorPool(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyDescriptorPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDescriptorPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDescriptorPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkDescriptorPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkDescriptorPool* instance = reinterpret_cast<VkDescriptorPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorPool' or 'null' for argument 2 'descriptorPool' in 'vkDestroyDescriptorPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyDescriptorPool(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkResetDescriptorPool(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkResetDescriptorPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDescriptorPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDescriptorPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkDescriptorPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkDescriptorPool* instance = reinterpret_cast<VkDescriptorPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorPool' or 'null' for argument 2 'descriptorPool' in 'vkResetDescriptorPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'flags' in 'vkResetDescriptorPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p2 = static_cast<int32_t>(info[2].As<Napi::Number>().Int64Value());
  int32_t out = vkResetDescriptorPool(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    static_cast<VkDescriptorPoolResetFlags>($p2)
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkAllocateDescriptorSets(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkAllocateDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDescriptorSetAllocateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkDescriptorSetAllocateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDescriptorSetAllocateInfo* instance = reinterpret_cast<VkDescriptorSetAllocateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorSetAllocateInfo' or 'null' for argument 2 'pAllocateInfo' in 'vkAllocateDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkDescriptorSet>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if ($p1 != nullptr && info[2].As<Napi::Array>().Length() != $p1->descriptorSetCount) {
      Napi::RangeError::New(env, "666 Invalid array length for argument 2 'pAllocateInfo->descriptorSetCount' in 'vkAllocateDescriptorSets'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkDescriptorSet> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDescriptorSet") {
        NapiObjectTypeError(info[0], "argument 3", "VkDescriptorSet");
        return env.Undefined();
      }
      VkDescriptorSet* instance = reinterpret_cast<VkDescriptorSet*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkDescriptorSet>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pDescriptorSets' in 'vkAllocateDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkAllocateDescriptorSets(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (VkDescriptorSet *) $p2.get()->data() : nullptr
  );
  if (info[2].IsArray()) {
    VkDescriptorSet* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();

      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkFreeDescriptorSets(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkFreeDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDescriptorPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDescriptorPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkDescriptorPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkDescriptorPool* instance = reinterpret_cast<VkDescriptorPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorPool' or 'null' for argument 2 'descriptorPool' in 'vkFreeDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'descriptorSetCount' in 'vkFreeDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkDescriptorSet>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pDescriptorSets' in 'vkFreeDescriptorSets'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkDescriptorSet> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDescriptorSet") {
        NapiObjectTypeError(info[0], "argument 4", "VkDescriptorSet");
        return env.Undefined();
      }
      VkDescriptorSet* instance = reinterpret_cast<VkDescriptorSet*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkDescriptorSet>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pDescriptorSets' in 'vkFreeDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkFreeDescriptorSets(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3 ? (const VkDescriptorSet *) $p3.get()->data() : nullptr
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkUpdateDescriptorSets(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkUpdateDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'descriptorWriteCount' in 'vkUpdateDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkWriteDescriptorSet>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pDescriptorWrites' in 'vkUpdateDescriptorSets'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkWriteDescriptorSet> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkWriteDescriptorSet") {
        NapiObjectTypeError(info[2], "argument 3", "VkWriteDescriptorSet");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkWriteDescriptorSet* instance = reinterpret_cast<VkWriteDescriptorSet*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkWriteDescriptorSet>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pDescriptorWrites' in 'vkUpdateDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'descriptorCopyCount' in 'vkUpdateDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkCopyDescriptorSet>> $p4 = nullptr;

  if (info[4].IsArray()) {

    // validate length
    if (info[4].As<Napi::Array>().Length() != info[3].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 5 'pDescriptorCopies' in 'vkUpdateDescriptorSets'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[4].As<Napi::Array>();
    std::vector<VkCopyDescriptorSet> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCopyDescriptorSet") {
        NapiObjectTypeError(info[4], "argument 5", "VkCopyDescriptorSet");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkCopyDescriptorSet* instance = reinterpret_cast<VkCopyDescriptorSet*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p4 = std::make_shared<std::vector<VkCopyDescriptorSet>>(data);
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 5 'pDescriptorCopies' in 'vkUpdateDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkUpdateDescriptorSets(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkWriteDescriptorSet *) $p2.get()->data() : nullptr,
    $p3,
    $p4 ? (const VkCopyDescriptorSet *) $p4.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateFramebuffer(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateFramebuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkFramebufferCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkFramebufferCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkFramebufferCreateInfo* instance = reinterpret_cast<VkFramebufferCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFramebufferCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateFramebuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkFramebuffer *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkFramebuffer") {
      NapiObjectTypeError(info[3], "argument 4", "VkFramebuffer");
      return env.Undefined();
    }
    obj3 = obj;
    VkFramebuffer* instance = reinterpret_cast<VkFramebuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFramebuffer' or 'null' for argument 4 'pFramebuffer' in 'vkCreateFramebuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateFramebuffer(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyFramebuffer(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyFramebuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkFramebuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkFramebuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkFramebuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkFramebuffer* instance = reinterpret_cast<VkFramebuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFramebuffer' or 'null' for argument 2 'framebuffer' in 'vkDestroyFramebuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyFramebuffer(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateRenderPass(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateRenderPass'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkRenderPassCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkRenderPassCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkRenderPassCreateInfo* instance = reinterpret_cast<VkRenderPassCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkRenderPassCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateRenderPass'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkRenderPass *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkRenderPass") {
      NapiObjectTypeError(info[3], "argument 4", "VkRenderPass");
      return env.Undefined();
    }
    obj3 = obj;
    VkRenderPass* instance = reinterpret_cast<VkRenderPass*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkRenderPass' or 'null' for argument 4 'pRenderPass' in 'vkCreateRenderPass'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateRenderPass(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyRenderPass(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyRenderPass'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkRenderPass *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkRenderPass") {
      NapiObjectTypeError(info[1], "argument 2", "VkRenderPass");
      return env.Undefined();
    }
    obj1 = obj;
    VkRenderPass* instance = reinterpret_cast<VkRenderPass*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkRenderPass' or 'null' for argument 2 'renderPass' in 'vkDestroyRenderPass'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyRenderPass(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetRenderAreaGranularity(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetRenderAreaGranularity'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkRenderPass *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkRenderPass") {
      NapiObjectTypeError(info[1], "argument 2", "VkRenderPass");
      return env.Undefined();
    }
    obj1 = obj;
    VkRenderPass* instance = reinterpret_cast<VkRenderPass*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkRenderPass' or 'null' for argument 2 'renderPass' in 'vkGetRenderAreaGranularity'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkExtent2D *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkExtent2D") {
      NapiObjectTypeError(info[2], "argument 3", "VkExtent2D");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkExtent2D* instance = reinterpret_cast<VkExtent2D*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkExtent2D' or 'null' for argument 3 'pGranularity' in 'vkGetRenderAreaGranularity'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetRenderAreaGranularity(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateCommandPool(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateCommandPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkCommandPoolCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkCommandPoolCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkCommandPoolCreateInfo* instance = reinterpret_cast<VkCommandPoolCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandPoolCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateCommandPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkCommandPool *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandPool") {
      NapiObjectTypeError(info[3], "argument 4", "VkCommandPool");
      return env.Undefined();
    }
    obj3 = obj;
    VkCommandPool* instance = reinterpret_cast<VkCommandPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandPool' or 'null' for argument 4 'pCommandPool' in 'vkCreateCommandPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateCommandPool(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyCommandPool(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyCommandPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkCommandPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkCommandPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkCommandPool* instance = reinterpret_cast<VkCommandPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandPool' or 'null' for argument 2 'commandPool' in 'vkDestroyCommandPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyCommandPool(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkResetCommandPool(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkResetCommandPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkCommandPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkCommandPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkCommandPool* instance = reinterpret_cast<VkCommandPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandPool' or 'null' for argument 2 'commandPool' in 'vkResetCommandPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'flags' in 'vkResetCommandPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p2 = static_cast<int32_t>(info[2].As<Napi::Number>().Int64Value());
  int32_t out = vkResetCommandPool(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    static_cast<VkCommandPoolResetFlags>($p2)
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkAllocateCommandBuffers(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkAllocateCommandBuffers'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkCommandBufferAllocateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkCommandBufferAllocateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkCommandBufferAllocateInfo* instance = reinterpret_cast<VkCommandBufferAllocateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBufferAllocateInfo' or 'null' for argument 2 'pAllocateInfo' in 'vkAllocateCommandBuffers'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkCommandBuffer>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if ($p1 != nullptr && info[2].As<Napi::Array>().Length() != $p1->commandBufferCount) {
      Napi::RangeError::New(env, "666 Invalid array length for argument 2 'pAllocateInfo->commandBufferCount' in 'vkAllocateCommandBuffers'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkCommandBuffer> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
        NapiObjectTypeError(info[0], "argument 3", "VkCommandBuffer");
        return env.Undefined();
      }
      VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkCommandBuffer>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pCommandBuffers' in 'vkAllocateCommandBuffers'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkAllocateCommandBuffers(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (VkCommandBuffer *) $p2.get()->data() : nullptr
  );
  if (info[2].IsArray()) {
    VkCommandBuffer* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();

      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkFreeCommandBuffers(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkFreeCommandBuffers'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkCommandPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkCommandPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkCommandPool* instance = reinterpret_cast<VkCommandPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandPool' or 'null' for argument 2 'commandPool' in 'vkFreeCommandBuffers'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'commandBufferCount' in 'vkFreeCommandBuffers'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkCommandBuffer>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pCommandBuffers' in 'vkFreeCommandBuffers'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkCommandBuffer> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
        NapiObjectTypeError(info[0], "argument 4", "VkCommandBuffer");
        return env.Undefined();
      }
      VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkCommandBuffer>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pCommandBuffers' in 'vkFreeCommandBuffers'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkFreeCommandBuffers(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3 ? (const VkCommandBuffer *) $p3.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkBeginCommandBuffer(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkBeginCommandBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkCommandBufferBeginInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkCommandBufferBeginInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkCommandBufferBeginInfo* instance = reinterpret_cast<VkCommandBufferBeginInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBufferBeginInfo' or 'null' for argument 2 'pBeginInfo' in 'vkBeginCommandBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkBeginCommandBuffer(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkEndCommandBuffer(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkEndCommandBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkEndCommandBuffer(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkResetCommandBuffer(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkResetCommandBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'flags' in 'vkResetCommandBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p1 = static_cast<int32_t>(info[1].As<Napi::Number>().Int64Value());
  int32_t out = vkResetCommandBuffer(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    static_cast<VkCommandBufferResetFlags>($p1)
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdBindPipeline(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBindPipeline'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'pipelineBindPoint' in 'vkCmdBindPipeline'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkPipelineBindPoint $p1 = static_cast<VkPipelineBindPoint>(info[1].As<Napi::Number>().Int64Value());

  Napi::Object obj2;
  VkPipeline *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipeline") {
      NapiObjectTypeError(info[2], "argument 3", "VkPipeline");
      return env.Undefined();
    }
    obj2 = obj;
    VkPipeline* instance = reinterpret_cast<VkPipeline*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipeline' or 'null' for argument 3 'pipeline' in 'vkCmdBindPipeline'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkCmdBindPipeline(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetViewport(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetViewport'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'firstViewport' in 'vkCmdSetViewport'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'viewportCount' in 'vkCmdSetViewport'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkViewport>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pViewports' in 'vkCmdSetViewport'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkViewport> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkViewport") {
        NapiObjectTypeError(info[3], "argument 4", "VkViewport");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkViewport* instance = reinterpret_cast<VkViewport*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkViewport>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pViewports' in 'vkCmdSetViewport'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkCmdSetViewport(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3 ? (const VkViewport *) $p3.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetScissor(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetScissor'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'firstScissor' in 'vkCmdSetScissor'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'scissorCount' in 'vkCmdSetScissor'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkRect2D>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pScissors' in 'vkCmdSetScissor'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkRect2D> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkRect2D") {
        NapiObjectTypeError(info[3], "argument 4", "VkRect2D");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkRect2D* instance = reinterpret_cast<VkRect2D*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkRect2D>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pScissors' in 'vkCmdSetScissor'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkCmdSetScissor(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3 ? (const VkRect2D *) $p3.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetLineWidth(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetLineWidth'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'lineWidth' in 'vkCmdSetLineWidth'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  float $p1 = static_cast<float>(info[1].As<Napi::Number>().Int64Value());
vkCmdSetLineWidth(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetDepthBias(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetDepthBias'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'depthBiasConstantFactor' in 'vkCmdSetDepthBias'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  float $p1 = static_cast<float>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'depthBiasClamp' in 'vkCmdSetDepthBias'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  float $p2 = static_cast<float>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'depthBiasSlopeFactor' in 'vkCmdSetDepthBias'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  float $p3 = static_cast<float>(info[3].As<Napi::Number>().Int64Value());
vkCmdSetDepthBias(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetBlendConstants(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetBlendConstants'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

    std::shared_ptr<std::vector<float>> $p1 = nullptr;
    if (info[1].IsArray()) {
      // validate length
      if (info[1].As<Napi::Array>().Length() != 4) {
        Napi::RangeError::New(env, "Invalid array length for argument 2 'blendConstants' in 'vkCmdSetBlendConstants'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
      std::vector<float> data = createFloatToArrayOfV8Numbers(info[1]);
      $p1 = std::make_shared<std::vector<float>>(data);
    } else if (!info[1].IsNull()) {
      Napi::TypeError::New(env, "Invalid type for argument 2 'blendConstants' in 'vkCmdSetBlendConstants'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
vkCmdSetBlendConstants(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1 ? $p1.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetDepthBounds(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetDepthBounds'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'minDepthBounds' in 'vkCmdSetDepthBounds'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  float $p1 = static_cast<float>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'maxDepthBounds' in 'vkCmdSetDepthBounds'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  float $p2 = static_cast<float>(info[2].As<Napi::Number>().Int64Value());
vkCmdSetDepthBounds(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetStencilCompareMask(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetStencilCompareMask'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'faceMask' in 'vkCmdSetStencilCompareMask'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p1 = static_cast<int32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'compareMask' in 'vkCmdSetStencilCompareMask'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());
vkCmdSetStencilCompareMask(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    static_cast<VkStencilFaceFlags>($p1),
    $p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetStencilWriteMask(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetStencilWriteMask'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'faceMask' in 'vkCmdSetStencilWriteMask'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p1 = static_cast<int32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'writeMask' in 'vkCmdSetStencilWriteMask'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());
vkCmdSetStencilWriteMask(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    static_cast<VkStencilFaceFlags>($p1),
    $p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetStencilReference(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetStencilReference'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'faceMask' in 'vkCmdSetStencilReference'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p1 = static_cast<int32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'reference' in 'vkCmdSetStencilReference'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());
vkCmdSetStencilReference(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    static_cast<VkStencilFaceFlags>($p1),
    $p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBindDescriptorSets(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBindDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'pipelineBindPoint' in 'vkCmdBindDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkPipelineBindPoint $p1 = static_cast<VkPipelineBindPoint>(info[1].As<Napi::Number>().Int64Value());

  Napi::Object obj2;
  VkPipelineLayout *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineLayout") {
      NapiObjectTypeError(info[2], "argument 3", "VkPipelineLayout");
      return env.Undefined();
    }
    obj2 = obj;
    VkPipelineLayout* instance = reinterpret_cast<VkPipelineLayout*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineLayout' or 'null' for argument 3 'layout' in 'vkCmdBindDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'firstSet' in 'vkCmdBindDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'descriptorSetCount' in 'vkCmdBindDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkDescriptorSet>> $p5 = nullptr;

  if (info[5].IsArray()) {

    // validate length
    if (info[5].As<Napi::Array>().Length() != info[4].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 6 'pDescriptorSets' in 'vkCmdBindDescriptorSets'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[5].As<Napi::Array>();
    std::vector<VkDescriptorSet> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDescriptorSet") {
        NapiObjectTypeError(info[0], "argument 6", "VkDescriptorSet");
        return env.Undefined();
      }
      VkDescriptorSet* instance = reinterpret_cast<VkDescriptorSet*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p5 = std::make_shared<std::vector<VkDescriptorSet>>(data);
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 6 'pDescriptorSets' in 'vkCmdBindDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  if (!info[6].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 7 'dynamicOffsetCount' in 'vkCmdBindDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p6 = static_cast<uint32_t>(info[6].As<Napi::Number>().Int64Value());

  std::shared_ptr<uint32_t*> $p7 = nullptr;

  if (info[7].IsTypedArray()) {

    if (info[7].As<Napi::TypedArray>().TypedArrayType() != napi_uint32_array) {
      Napi::TypeError::New(env, "Invalid type for argument 8 'pDynamicOffsets' in 'vkCmdBindDescriptorSets'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
      if (info[7].As<Napi::TypedArray>().ElementLength() != $p6) {
        Napi::RangeError::New(env, "Invalid array length for argument 8 'pDynamicOffsets' in 'vkCmdBindDescriptorSets'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    uint32_t* data = getTypedArrayData<uint32_t>(info[7]);
    $p7 = std::make_shared<uint32_t*>(data);
  } else if (!info[7].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 8 'pDynamicOffsets' in 'vkCmdBindDescriptorSets'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkCmdBindDescriptorSets(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2,
    $p3,
    $p4,
    $p5 ? (const VkDescriptorSet *) $p5.get()->data() : nullptr,
    $p6,
    $p7 ? *$p7.get() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBindIndexBuffer(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBindIndexBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'buffer' in 'vkCmdBindIndexBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'offset' in 'vkCmdBindIndexBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'indexType' in 'vkCmdBindIndexBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkIndexType $p3 = static_cast<VkIndexType>(info[3].As<Napi::Number>().Int64Value());
vkCmdBindIndexBuffer(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBindVertexBuffers(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBindVertexBuffers'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'firstBinding' in 'vkCmdBindVertexBuffers'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'bindingCount' in 'vkCmdBindVertexBuffers'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkBuffer>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pBuffers' in 'vkCmdBindVertexBuffers'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkBuffer> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
        NapiObjectTypeError(info[0], "argument 4", "VkBuffer");
        return env.Undefined();
      }
      VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkBuffer>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pBuffers' in 'vkCmdBindVertexBuffers'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<uint64_t*> $p4 = nullptr;

  if (info[4].IsTypedArray()) {

    if (info[4].As<Napi::TypedArray>().TypedArrayType() != napi_biguint64_array) {
      Napi::TypeError::New(env, "Invalid type for argument 5 'pOffsets' in 'vkCmdBindVertexBuffers'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
      if (info[4].As<Napi::TypedArray>().ElementLength() != $p2) {
        Napi::RangeError::New(env, "Invalid array length for argument 5 'pOffsets' in 'vkCmdBindVertexBuffers'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    VkDeviceSize* data = getTypedArrayData<VkDeviceSize>(info[4]);
    $p4 = std::make_shared<VkDeviceSize*>(data);
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 5 'pOffsets' in 'vkCmdBindVertexBuffers'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkCmdBindVertexBuffers(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3 ? (const VkBuffer *) $p3.get()->data() : nullptr,
    $p4 ? *$p4.get() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdDraw(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDraw'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'vertexCount' in 'vkCmdDraw'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'instanceCount' in 'vkCmdDraw'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'firstVertex' in 'vkCmdDraw'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'firstInstance' in 'vkCmdDraw'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());
vkCmdDraw(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3,
    $p4
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdDrawIndexed(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDrawIndexed'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'indexCount' in 'vkCmdDrawIndexed'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'instanceCount' in 'vkCmdDrawIndexed'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'firstIndex' in 'vkCmdDrawIndexed'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'vertexOffset' in 'vkCmdDrawIndexed'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p4 = static_cast<int32_t>(info[4].As<Napi::Number>().Int64Value());

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'firstInstance' in 'vkCmdDrawIndexed'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p5 = static_cast<uint32_t>(info[5].As<Napi::Number>().Int64Value());
vkCmdDrawIndexed(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3,
    $p4,
    $p5
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdDrawIndirect(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDrawIndirect'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'buffer' in 'vkCmdDrawIndirect'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'offset' in 'vkCmdDrawIndirect'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'drawCount' in 'vkCmdDrawIndirect'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'stride' in 'vkCmdDrawIndirect'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());
vkCmdDrawIndirect(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3,
    $p4
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdDrawIndexedIndirect(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDrawIndexedIndirect'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'buffer' in 'vkCmdDrawIndexedIndirect'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'offset' in 'vkCmdDrawIndexedIndirect'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'drawCount' in 'vkCmdDrawIndexedIndirect'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'stride' in 'vkCmdDrawIndexedIndirect'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());
vkCmdDrawIndexedIndirect(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3,
    $p4
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdDispatch(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDispatch'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'groupCountX' in 'vkCmdDispatch'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'groupCountY' in 'vkCmdDispatch'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'groupCountZ' in 'vkCmdDispatch'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());
vkCmdDispatch(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdDispatchIndirect(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDispatchIndirect'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'buffer' in 'vkCmdDispatchIndirect'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'offset' in 'vkCmdDispatchIndirect'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }
vkCmdDispatchIndirect(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdCopyBuffer(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdCopyBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'srcBuffer' in 'vkCmdCopyBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkBuffer *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[2], "argument 3", "VkBuffer");
      return env.Undefined();
    }
    obj2 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 3 'dstBuffer' in 'vkCmdCopyBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'regionCount' in 'vkCmdCopyBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkBufferCopy>> $p4 = nullptr;

  if (info[4].IsArray()) {

    // validate length
    if (info[4].As<Napi::Array>().Length() != info[3].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 5 'pRegions' in 'vkCmdCopyBuffer'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[4].As<Napi::Array>();
    std::vector<VkBufferCopy> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBufferCopy") {
        NapiObjectTypeError(info[4], "argument 5", "VkBufferCopy");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkBufferCopy* instance = reinterpret_cast<VkBufferCopy*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p4 = std::make_shared<std::vector<VkBufferCopy>>(data);
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 5 'pRegions' in 'vkCmdCopyBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkCmdCopyBuffer(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2,
    $p3,
    $p4 ? (const VkBufferCopy *) $p4.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdCopyImage(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdCopyImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImage *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[1], "argument 2", "VkImage");
      return env.Undefined();
    }
    obj1 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 2 'srcImage' in 'vkCmdCopyImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'srcImageLayout' in 'vkCmdCopyImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageLayout $p2 = static_cast<VkImageLayout>(info[2].As<Napi::Number>().Int64Value());

  Napi::Object obj3;
  VkImage *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[3], "argument 4", "VkImage");
      return env.Undefined();
    }
    obj3 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 4 'dstImage' in 'vkCmdCopyImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'dstImageLayout' in 'vkCmdCopyImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageLayout $p4 = static_cast<VkImageLayout>(info[4].As<Napi::Number>().Int64Value());

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'regionCount' in 'vkCmdCopyImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p5 = static_cast<uint32_t>(info[5].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkImageCopy>> $p6 = nullptr;

  if (info[6].IsArray()) {

    // validate length
    if (info[6].As<Napi::Array>().Length() != info[5].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 7 'pRegions' in 'vkCmdCopyImage'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[6].As<Napi::Array>();
    std::vector<VkImageCopy> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImageCopy") {
        NapiObjectTypeError(info[6], "argument 7", "VkImageCopy");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkImageCopy* instance = reinterpret_cast<VkImageCopy*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p6 = std::make_shared<std::vector<VkImageCopy>>(data);
  } else if (!info[6].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 7 'pRegions' in 'vkCmdCopyImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkCmdCopyImage(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    info[3].IsNull() ? VK_NULL_HANDLE : *$p3,
    $p4,
    $p5,
    $p6 ? (const VkImageCopy *) $p6.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBlitImage(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBlitImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImage *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[1], "argument 2", "VkImage");
      return env.Undefined();
    }
    obj1 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 2 'srcImage' in 'vkCmdBlitImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'srcImageLayout' in 'vkCmdBlitImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageLayout $p2 = static_cast<VkImageLayout>(info[2].As<Napi::Number>().Int64Value());

  Napi::Object obj3;
  VkImage *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[3], "argument 4", "VkImage");
      return env.Undefined();
    }
    obj3 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 4 'dstImage' in 'vkCmdBlitImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'dstImageLayout' in 'vkCmdBlitImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageLayout $p4 = static_cast<VkImageLayout>(info[4].As<Napi::Number>().Int64Value());

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'regionCount' in 'vkCmdBlitImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p5 = static_cast<uint32_t>(info[5].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkImageBlit>> $p6 = nullptr;

  if (info[6].IsArray()) {

    // validate length
    if (info[6].As<Napi::Array>().Length() != info[5].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 7 'pRegions' in 'vkCmdBlitImage'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[6].As<Napi::Array>();
    std::vector<VkImageBlit> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImageBlit") {
        NapiObjectTypeError(info[6], "argument 7", "VkImageBlit");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkImageBlit* instance = reinterpret_cast<VkImageBlit*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p6 = std::make_shared<std::vector<VkImageBlit>>(data);
  } else if (!info[6].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 7 'pRegions' in 'vkCmdBlitImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  if (!info[7].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 8 'filter' in 'vkCmdBlitImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkFilter $p7 = static_cast<VkFilter>(info[7].As<Napi::Number>().Int64Value());
vkCmdBlitImage(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    info[3].IsNull() ? VK_NULL_HANDLE : *$p3,
    $p4,
    $p5,
    $p6 ? (const VkImageBlit *) $p6.get()->data() : nullptr,
    $p7
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdCopyBufferToImage(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdCopyBufferToImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'srcBuffer' in 'vkCmdCopyBufferToImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkImage *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[2], "argument 3", "VkImage");
      return env.Undefined();
    }
    obj2 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 3 'dstImage' in 'vkCmdCopyBufferToImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'dstImageLayout' in 'vkCmdCopyBufferToImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageLayout $p3 = static_cast<VkImageLayout>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'regionCount' in 'vkCmdCopyBufferToImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkBufferImageCopy>> $p5 = nullptr;

  if (info[5].IsArray()) {

    // validate length
    if (info[5].As<Napi::Array>().Length() != info[4].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 6 'pRegions' in 'vkCmdCopyBufferToImage'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[5].As<Napi::Array>();
    std::vector<VkBufferImageCopy> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBufferImageCopy") {
        NapiObjectTypeError(info[5], "argument 6", "VkBufferImageCopy");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkBufferImageCopy* instance = reinterpret_cast<VkBufferImageCopy*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p5 = std::make_shared<std::vector<VkBufferImageCopy>>(data);
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 6 'pRegions' in 'vkCmdCopyBufferToImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkCmdCopyBufferToImage(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2,
    $p3,
    $p4,
    $p5 ? (const VkBufferImageCopy *) $p5.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdCopyImageToBuffer(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdCopyImageToBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImage *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[1], "argument 2", "VkImage");
      return env.Undefined();
    }
    obj1 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 2 'srcImage' in 'vkCmdCopyImageToBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'srcImageLayout' in 'vkCmdCopyImageToBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageLayout $p2 = static_cast<VkImageLayout>(info[2].As<Napi::Number>().Int64Value());

  Napi::Object obj3;
  VkBuffer *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[3], "argument 4", "VkBuffer");
      return env.Undefined();
    }
    obj3 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 4 'dstBuffer' in 'vkCmdCopyImageToBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'regionCount' in 'vkCmdCopyImageToBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkBufferImageCopy>> $p5 = nullptr;

  if (info[5].IsArray()) {

    // validate length
    if (info[5].As<Napi::Array>().Length() != info[4].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 6 'pRegions' in 'vkCmdCopyImageToBuffer'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[5].As<Napi::Array>();
    std::vector<VkBufferImageCopy> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBufferImageCopy") {
        NapiObjectTypeError(info[5], "argument 6", "VkBufferImageCopy");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkBufferImageCopy* instance = reinterpret_cast<VkBufferImageCopy*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p5 = std::make_shared<std::vector<VkBufferImageCopy>>(data);
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 6 'pRegions' in 'vkCmdCopyImageToBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkCmdCopyImageToBuffer(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    info[3].IsNull() ? VK_NULL_HANDLE : *$p3,
    $p4,
    $p5 ? (const VkBufferImageCopy *) $p5.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdUpdateBuffer(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdUpdateBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'dstBuffer' in 'vkCmdUpdateBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'dstOffset' in 'vkCmdUpdateBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }

  bool lossless3;
  if (!info[3].IsBigInt() && !info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 4 'dataSize' in 'vkCmdUpdateBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p3 = 0;
  if (info[3].IsBigInt()) {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::BigInt>().Int64Value(&lossless3));
  } else {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::Number>().Int64Value());
  }

  void* $p4 = nullptr;
  if (info[4].IsArrayBuffer()) {
    Napi::ArrayBuffer buf = info[4].As<Napi::ArrayBuffer>();
    $p4 = buf.Data();
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Expected 'ArrayBuffer' or 'null' for argument 5 'pData' in 'vkCmdUpdateBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkCmdUpdateBuffer(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3,
    info[4].IsNull() ? nullptr : $p4
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdFillBuffer(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdFillBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'dstBuffer' in 'vkCmdFillBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'dstOffset' in 'vkCmdFillBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }

  bool lossless3;
  if (!info[3].IsBigInt() && !info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 4 'size' in 'vkCmdFillBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p3 = 0;
  if (info[3].IsBigInt()) {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::BigInt>().Int64Value(&lossless3));
  } else {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::Number>().Int64Value());
  }

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'data' in 'vkCmdFillBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());
vkCmdFillBuffer(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3,
    $p4
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdClearColorImage(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdClearColorImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImage *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[1], "argument 2", "VkImage");
      return env.Undefined();
    }
    obj1 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 2 'image' in 'vkCmdClearColorImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'imageLayout' in 'vkCmdClearColorImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageLayout $p2 = static_cast<VkImageLayout>(info[2].As<Napi::Number>().Int64Value());

  Napi::Object obj3;
  VkClearColorValue *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkClearColorValue") {
      NapiObjectTypeError(info[3], "argument 4", "VkClearColorValue");
      return env.Undefined();
    }
    obj3 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkClearColorValue* instance = reinterpret_cast<VkClearColorValue*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkClearColorValue' or 'null' for argument 4 'pColor' in 'vkCmdClearColorImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'rangeCount' in 'vkCmdClearColorImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkImageSubresourceRange>> $p5 = nullptr;

  if (info[5].IsArray()) {

    // validate length
    if (info[5].As<Napi::Array>().Length() != info[4].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 6 'pRanges' in 'vkCmdClearColorImage'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[5].As<Napi::Array>();
    std::vector<VkImageSubresourceRange> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImageSubresourceRange") {
        NapiObjectTypeError(info[5], "argument 6", "VkImageSubresourceRange");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkImageSubresourceRange* instance = reinterpret_cast<VkImageSubresourceRange*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p5 = std::make_shared<std::vector<VkImageSubresourceRange>>(data);
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 6 'pRanges' in 'vkCmdClearColorImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkCmdClearColorImage(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3,
    $p4,
    $p5 ? (const VkImageSubresourceRange *) $p5.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdClearDepthStencilImage(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdClearDepthStencilImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImage *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[1], "argument 2", "VkImage");
      return env.Undefined();
    }
    obj1 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 2 'image' in 'vkCmdClearDepthStencilImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'imageLayout' in 'vkCmdClearDepthStencilImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageLayout $p2 = static_cast<VkImageLayout>(info[2].As<Napi::Number>().Int64Value());

  Napi::Object obj3;
  VkClearDepthStencilValue *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkClearDepthStencilValue") {
      NapiObjectTypeError(info[3], "argument 4", "VkClearDepthStencilValue");
      return env.Undefined();
    }
    obj3 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkClearDepthStencilValue* instance = reinterpret_cast<VkClearDepthStencilValue*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkClearDepthStencilValue' or 'null' for argument 4 'pDepthStencil' in 'vkCmdClearDepthStencilImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'rangeCount' in 'vkCmdClearDepthStencilImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkImageSubresourceRange>> $p5 = nullptr;

  if (info[5].IsArray()) {

    // validate length
    if (info[5].As<Napi::Array>().Length() != info[4].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 6 'pRanges' in 'vkCmdClearDepthStencilImage'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[5].As<Napi::Array>();
    std::vector<VkImageSubresourceRange> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImageSubresourceRange") {
        NapiObjectTypeError(info[5], "argument 6", "VkImageSubresourceRange");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkImageSubresourceRange* instance = reinterpret_cast<VkImageSubresourceRange*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p5 = std::make_shared<std::vector<VkImageSubresourceRange>>(data);
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 6 'pRanges' in 'vkCmdClearDepthStencilImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkCmdClearDepthStencilImage(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3,
    $p4,
    $p5 ? (const VkImageSubresourceRange *) $p5.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdClearAttachments(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdClearAttachments'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'attachmentCount' in 'vkCmdClearAttachments'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkClearAttachment>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pAttachments' in 'vkCmdClearAttachments'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkClearAttachment> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkClearAttachment") {
        NapiObjectTypeError(info[2], "argument 3", "VkClearAttachment");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkClearAttachment* instance = reinterpret_cast<VkClearAttachment*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkClearAttachment>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pAttachments' in 'vkCmdClearAttachments'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'rectCount' in 'vkCmdClearAttachments'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkClearRect>> $p4 = nullptr;

  if (info[4].IsArray()) {

    // validate length
    if (info[4].As<Napi::Array>().Length() != info[3].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 5 'pRects' in 'vkCmdClearAttachments'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[4].As<Napi::Array>();
    std::vector<VkClearRect> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkClearRect") {
        NapiObjectTypeError(info[4], "argument 5", "VkClearRect");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkClearRect* instance = reinterpret_cast<VkClearRect*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p4 = std::make_shared<std::vector<VkClearRect>>(data);
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 5 'pRects' in 'vkCmdClearAttachments'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkCmdClearAttachments(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkClearAttachment *) $p2.get()->data() : nullptr,
    $p3,
    $p4 ? (const VkClearRect *) $p4.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdResolveImage(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdResolveImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImage *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[1], "argument 2", "VkImage");
      return env.Undefined();
    }
    obj1 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 2 'srcImage' in 'vkCmdResolveImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'srcImageLayout' in 'vkCmdResolveImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageLayout $p2 = static_cast<VkImageLayout>(info[2].As<Napi::Number>().Int64Value());

  Napi::Object obj3;
  VkImage *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[3], "argument 4", "VkImage");
      return env.Undefined();
    }
    obj3 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 4 'dstImage' in 'vkCmdResolveImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'dstImageLayout' in 'vkCmdResolveImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageLayout $p4 = static_cast<VkImageLayout>(info[4].As<Napi::Number>().Int64Value());

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'regionCount' in 'vkCmdResolveImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p5 = static_cast<uint32_t>(info[5].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkImageResolve>> $p6 = nullptr;

  if (info[6].IsArray()) {

    // validate length
    if (info[6].As<Napi::Array>().Length() != info[5].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 7 'pRegions' in 'vkCmdResolveImage'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[6].As<Napi::Array>();
    std::vector<VkImageResolve> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImageResolve") {
        NapiObjectTypeError(info[6], "argument 7", "VkImageResolve");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkImageResolve* instance = reinterpret_cast<VkImageResolve*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p6 = std::make_shared<std::vector<VkImageResolve>>(data);
  } else if (!info[6].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 7 'pRegions' in 'vkCmdResolveImage'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkCmdResolveImage(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    info[3].IsNull() ? VK_NULL_HANDLE : *$p3,
    $p4,
    $p5,
    $p6 ? (const VkImageResolve *) $p6.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetEvent(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetEvent'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkEvent *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkEvent") {
      NapiObjectTypeError(info[1], "argument 2", "VkEvent");
      return env.Undefined();
    }
    obj1 = obj;
    VkEvent* instance = reinterpret_cast<VkEvent*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkEvent' or 'null' for argument 2 'event' in 'vkCmdSetEvent'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'stageMask' in 'vkCmdSetEvent'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p2 = static_cast<int32_t>(info[2].As<Napi::Number>().Int64Value());
vkCmdSetEvent(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    static_cast<VkPipelineStageFlags>($p2)
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdResetEvent(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdResetEvent'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkEvent *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkEvent") {
      NapiObjectTypeError(info[1], "argument 2", "VkEvent");
      return env.Undefined();
    }
    obj1 = obj;
    VkEvent* instance = reinterpret_cast<VkEvent*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkEvent' or 'null' for argument 2 'event' in 'vkCmdResetEvent'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'stageMask' in 'vkCmdResetEvent'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p2 = static_cast<int32_t>(info[2].As<Napi::Number>().Int64Value());
vkCmdResetEvent(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    static_cast<VkPipelineStageFlags>($p2)
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdWaitEvents(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdWaitEvents'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'eventCount' in 'vkCmdWaitEvents'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkEvent>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pEvents' in 'vkCmdWaitEvents'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkEvent> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkEvent") {
        NapiObjectTypeError(info[0], "argument 3", "VkEvent");
        return env.Undefined();
      }
      VkEvent* instance = reinterpret_cast<VkEvent*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkEvent>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pEvents' in 'vkCmdWaitEvents'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'srcStageMask' in 'vkCmdWaitEvents'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p3 = static_cast<int32_t>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'dstStageMask' in 'vkCmdWaitEvents'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p4 = static_cast<int32_t>(info[4].As<Napi::Number>().Int64Value());

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'memoryBarrierCount' in 'vkCmdWaitEvents'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p5 = static_cast<uint32_t>(info[5].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkMemoryBarrier>> $p6 = nullptr;

  if (info[6].IsArray()) {

    // validate length
    if (info[6].As<Napi::Array>().Length() != info[5].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 7 'pMemoryBarriers' in 'vkCmdWaitEvents'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[6].As<Napi::Array>();
    std::vector<VkMemoryBarrier> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkMemoryBarrier") {
        NapiObjectTypeError(info[6], "argument 7", "VkMemoryBarrier");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkMemoryBarrier* instance = reinterpret_cast<VkMemoryBarrier*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p6 = std::make_shared<std::vector<VkMemoryBarrier>>(data);
  } else if (!info[6].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 7 'pMemoryBarriers' in 'vkCmdWaitEvents'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  if (!info[7].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 8 'bufferMemoryBarrierCount' in 'vkCmdWaitEvents'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p7 = static_cast<uint32_t>(info[7].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkBufferMemoryBarrier>> $p8 = nullptr;

  if (info[8].IsArray()) {

    // validate length
    if (info[8].As<Napi::Array>().Length() != info[7].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 9 'pBufferMemoryBarriers' in 'vkCmdWaitEvents'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[8].As<Napi::Array>();
    std::vector<VkBufferMemoryBarrier> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBufferMemoryBarrier") {
        NapiObjectTypeError(info[8], "argument 9", "VkBufferMemoryBarrier");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkBufferMemoryBarrier* instance = reinterpret_cast<VkBufferMemoryBarrier*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p8 = std::make_shared<std::vector<VkBufferMemoryBarrier>>(data);
  } else if (!info[8].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 9 'pBufferMemoryBarriers' in 'vkCmdWaitEvents'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  if (!info[9].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 10 'imageMemoryBarrierCount' in 'vkCmdWaitEvents'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p9 = static_cast<uint32_t>(info[9].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkImageMemoryBarrier>> $p10 = nullptr;

  if (info[10].IsArray()) {

    // validate length
    if (info[10].As<Napi::Array>().Length() != info[9].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 11 'pImageMemoryBarriers' in 'vkCmdWaitEvents'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[10].As<Napi::Array>();
    std::vector<VkImageMemoryBarrier> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImageMemoryBarrier") {
        NapiObjectTypeError(info[10], "argument 11", "VkImageMemoryBarrier");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkImageMemoryBarrier* instance = reinterpret_cast<VkImageMemoryBarrier*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p10 = std::make_shared<std::vector<VkImageMemoryBarrier>>(data);
  } else if (!info[10].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 11 'pImageMemoryBarriers' in 'vkCmdWaitEvents'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkCmdWaitEvents(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkEvent *) $p2.get()->data() : nullptr,
    static_cast<VkPipelineStageFlags>($p3),
    static_cast<VkPipelineStageFlags>($p4),
    $p5,
    $p6 ? (const VkMemoryBarrier *) $p6.get()->data() : nullptr,
    $p7,
    $p8 ? (const VkBufferMemoryBarrier *) $p8.get()->data() : nullptr,
    $p9,
    $p10 ? (const VkImageMemoryBarrier *) $p10.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdPipelineBarrier(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdPipelineBarrier'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'srcStageMask' in 'vkCmdPipelineBarrier'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p1 = static_cast<int32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'dstStageMask' in 'vkCmdPipelineBarrier'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p2 = static_cast<int32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'dependencyFlags' in 'vkCmdPipelineBarrier'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p3 = static_cast<int32_t>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'memoryBarrierCount' in 'vkCmdPipelineBarrier'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkMemoryBarrier>> $p5 = nullptr;

  if (info[5].IsArray()) {

    // validate length
    if (info[5].As<Napi::Array>().Length() != info[4].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 6 'pMemoryBarriers' in 'vkCmdPipelineBarrier'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[5].As<Napi::Array>();
    std::vector<VkMemoryBarrier> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkMemoryBarrier") {
        NapiObjectTypeError(info[5], "argument 6", "VkMemoryBarrier");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkMemoryBarrier* instance = reinterpret_cast<VkMemoryBarrier*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p5 = std::make_shared<std::vector<VkMemoryBarrier>>(data);
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 6 'pMemoryBarriers' in 'vkCmdPipelineBarrier'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  if (!info[6].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 7 'bufferMemoryBarrierCount' in 'vkCmdPipelineBarrier'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p6 = static_cast<uint32_t>(info[6].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkBufferMemoryBarrier>> $p7 = nullptr;

  if (info[7].IsArray()) {

    // validate length
    if (info[7].As<Napi::Array>().Length() != info[6].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 8 'pBufferMemoryBarriers' in 'vkCmdPipelineBarrier'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[7].As<Napi::Array>();
    std::vector<VkBufferMemoryBarrier> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBufferMemoryBarrier") {
        NapiObjectTypeError(info[7], "argument 8", "VkBufferMemoryBarrier");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkBufferMemoryBarrier* instance = reinterpret_cast<VkBufferMemoryBarrier*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p7 = std::make_shared<std::vector<VkBufferMemoryBarrier>>(data);
  } else if (!info[7].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 8 'pBufferMemoryBarriers' in 'vkCmdPipelineBarrier'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  if (!info[8].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 9 'imageMemoryBarrierCount' in 'vkCmdPipelineBarrier'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p8 = static_cast<uint32_t>(info[8].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkImageMemoryBarrier>> $p9 = nullptr;

  if (info[9].IsArray()) {

    // validate length
    if (info[9].As<Napi::Array>().Length() != info[8].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 10 'pImageMemoryBarriers' in 'vkCmdPipelineBarrier'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[9].As<Napi::Array>();
    std::vector<VkImageMemoryBarrier> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImageMemoryBarrier") {
        NapiObjectTypeError(info[9], "argument 10", "VkImageMemoryBarrier");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkImageMemoryBarrier* instance = reinterpret_cast<VkImageMemoryBarrier*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p9 = std::make_shared<std::vector<VkImageMemoryBarrier>>(data);
  } else if (!info[9].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 10 'pImageMemoryBarriers' in 'vkCmdPipelineBarrier'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkCmdPipelineBarrier(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    static_cast<VkPipelineStageFlags>($p1),
    static_cast<VkPipelineStageFlags>($p2),
    static_cast<VkDependencyFlags>($p3),
    $p4,
    $p5 ? (const VkMemoryBarrier *) $p5.get()->data() : nullptr,
    $p6,
    $p7 ? (const VkBufferMemoryBarrier *) $p7.get()->data() : nullptr,
    $p8,
    $p9 ? (const VkImageMemoryBarrier *) $p9.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBeginQuery(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBeginQuery'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkQueryPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueryPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkQueryPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkQueryPool* instance = reinterpret_cast<VkQueryPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueryPool' or 'null' for argument 2 'queryPool' in 'vkCmdBeginQuery'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'query' in 'vkCmdBeginQuery'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'flags' in 'vkCmdBeginQuery'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p3 = static_cast<int32_t>(info[3].As<Napi::Number>().Int64Value());
vkCmdBeginQuery(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    static_cast<VkQueryControlFlags>($p3)
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdEndQuery(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdEndQuery'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkQueryPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueryPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkQueryPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkQueryPool* instance = reinterpret_cast<VkQueryPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueryPool' or 'null' for argument 2 'queryPool' in 'vkCmdEndQuery'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'query' in 'vkCmdEndQuery'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());
vkCmdEndQuery(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBeginConditionalRenderingEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBeginConditionalRenderingEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkConditionalRenderingBeginInfoEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkConditionalRenderingBeginInfoEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkConditionalRenderingBeginInfoEXT* instance = reinterpret_cast<VkConditionalRenderingBeginInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkConditionalRenderingBeginInfoEXT' or 'null' for argument 2 'pConditionalRenderingBegin' in 'vkCmdBeginConditionalRenderingEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdBeginConditionalRenderingEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdEndConditionalRenderingEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdEndConditionalRenderingEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdEndConditionalRenderingEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdResetQueryPool(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdResetQueryPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkQueryPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueryPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkQueryPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkQueryPool* instance = reinterpret_cast<VkQueryPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueryPool' or 'null' for argument 2 'queryPool' in 'vkCmdResetQueryPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'firstQuery' in 'vkCmdResetQueryPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'queryCount' in 'vkCmdResetQueryPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());
vkCmdResetQueryPool(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdWriteTimestamp(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdWriteTimestamp'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'pipelineStage' in 'vkCmdWriteTimestamp'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p1 = static_cast<int32_t>(info[1].As<Napi::Number>().Int64Value());

  Napi::Object obj2;
  VkQueryPool *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueryPool") {
      NapiObjectTypeError(info[2], "argument 3", "VkQueryPool");
      return env.Undefined();
    }
    obj2 = obj;
    VkQueryPool* instance = reinterpret_cast<VkQueryPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueryPool' or 'null' for argument 3 'queryPool' in 'vkCmdWriteTimestamp'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'query' in 'vkCmdWriteTimestamp'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());
vkCmdWriteTimestamp(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    static_cast<VkPipelineStageFlagBits>($p1),
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2,
    $p3
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdCopyQueryPoolResults(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdCopyQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkQueryPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueryPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkQueryPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkQueryPool* instance = reinterpret_cast<VkQueryPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueryPool' or 'null' for argument 2 'queryPool' in 'vkCmdCopyQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'firstQuery' in 'vkCmdCopyQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'queryCount' in 'vkCmdCopyQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  Napi::Object obj4;
  VkBuffer *$p4 = nullptr;
  if (info[4].IsObject()) {
    Napi::Object obj = info[4].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[4], "argument 5", "VkBuffer");
      return env.Undefined();
    }
    obj4 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p4 = instance;
  } else if (info[4].IsNull()) {
    $p4 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 5 'dstBuffer' in 'vkCmdCopyQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless5;
  if (!info[5].IsBigInt() && !info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 6 'dstOffset' in 'vkCmdCopyQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p5 = 0;
  if (info[5].IsBigInt()) {
    $p5 = static_cast<uint64_t>(info[5].As<Napi::BigInt>().Int64Value(&lossless5));
  } else {
    $p5 = static_cast<uint64_t>(info[5].As<Napi::Number>().Int64Value());
  }

  bool lossless6;
  if (!info[6].IsBigInt() && !info[6].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 7 'stride' in 'vkCmdCopyQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p6 = 0;
  if (info[6].IsBigInt()) {
    $p6 = static_cast<uint64_t>(info[6].As<Napi::BigInt>().Int64Value(&lossless6));
  } else {
    $p6 = static_cast<uint64_t>(info[6].As<Napi::Number>().Int64Value());
  }

  if (!info[7].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 8 'flags' in 'vkCmdCopyQueryPoolResults'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p7 = static_cast<int32_t>(info[7].As<Napi::Number>().Int64Value());
vkCmdCopyQueryPoolResults(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3,
    info[4].IsNull() ? VK_NULL_HANDLE : *$p4,
    $p5,
    $p6,
    static_cast<VkQueryResultFlags>($p7)
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdPushConstants(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdPushConstants'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipelineLayout *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineLayout") {
      NapiObjectTypeError(info[1], "argument 2", "VkPipelineLayout");
      return env.Undefined();
    }
    obj1 = obj;
    VkPipelineLayout* instance = reinterpret_cast<VkPipelineLayout*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineLayout' or 'null' for argument 2 'layout' in 'vkCmdPushConstants'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'stageFlags' in 'vkCmdPushConstants'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p2 = static_cast<int32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'offset' in 'vkCmdPushConstants'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'size' in 'vkCmdPushConstants'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());

  void* $p5 = nullptr;
  if (info[5].IsArrayBuffer()) {
    Napi::ArrayBuffer buf = info[5].As<Napi::ArrayBuffer>();
    $p5 = buf.Data();
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Expected 'ArrayBuffer' or 'null' for argument 6 'pValues' in 'vkCmdPushConstants'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkCmdPushConstants(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    static_cast<VkShaderStageFlags>($p2),
    $p3,
    $p4,
    info[5].IsNull() ? nullptr : $p5
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBeginRenderPass(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBeginRenderPass'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkRenderPassBeginInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkRenderPassBeginInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkRenderPassBeginInfo* instance = reinterpret_cast<VkRenderPassBeginInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkRenderPassBeginInfo' or 'null' for argument 2 'pRenderPassBegin' in 'vkCmdBeginRenderPass'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'contents' in 'vkCmdBeginRenderPass'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkSubpassContents $p2 = static_cast<VkSubpassContents>(info[2].As<Napi::Number>().Int64Value());
vkCmdBeginRenderPass(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdNextSubpass(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdNextSubpass'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'contents' in 'vkCmdNextSubpass'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkSubpassContents $p1 = static_cast<VkSubpassContents>(info[1].As<Napi::Number>().Int64Value());
vkCmdNextSubpass(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdEndRenderPass(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdEndRenderPass'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkCmdEndRenderPass(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdExecuteCommands(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdExecuteCommands'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'commandBufferCount' in 'vkCmdExecuteCommands'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkCommandBuffer>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pCommandBuffers' in 'vkCmdExecuteCommands'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkCommandBuffer> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
        NapiObjectTypeError(info[0], "argument 3", "VkCommandBuffer");
        return env.Undefined();
      }
      VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkCommandBuffer>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pCommandBuffers' in 'vkCmdExecuteCommands'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkCmdExecuteCommands(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkCommandBuffer *) $p2.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceDisplayPropertiesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceDisplayPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pPropertyCount' in 'vkGetPhysicalDeviceDisplayPropertiesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pPropertyCount' in 'vkGetPhysicalDeviceDisplayPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkDisplayPropertiesKHR>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[1].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[2].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pProperties' in 'vkGetPhysicalDeviceDisplayPropertiesKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkDisplayPropertiesKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayPropertiesKHR") {
        NapiObjectTypeError(info[2], "argument 3", "VkDisplayPropertiesKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkDisplayPropertiesKHR* instance = reinterpret_cast<VkDisplayPropertiesKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkDisplayPropertiesKHR>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pProperties' in 'vkGetPhysicalDeviceDisplayPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPhysicalDeviceDisplayPropertiesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    &$p1,
    $p2 ? (VkDisplayPropertiesKHR *) $p2.get()->data() : nullptr
  );
    if (info[1].IsObject()) obj1.Set("$", $p1);
  if (info[2].IsArray()) {
    VkDisplayPropertiesKHR* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceDisplayPlanePropertiesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceDisplayPlanePropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pPropertyCount' in 'vkGetPhysicalDeviceDisplayPlanePropertiesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pPropertyCount' in 'vkGetPhysicalDeviceDisplayPlanePropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkDisplayPlanePropertiesKHR>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[1].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[2].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pProperties' in 'vkGetPhysicalDeviceDisplayPlanePropertiesKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkDisplayPlanePropertiesKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayPlanePropertiesKHR") {
        NapiObjectTypeError(info[2], "argument 3", "VkDisplayPlanePropertiesKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkDisplayPlanePropertiesKHR* instance = reinterpret_cast<VkDisplayPlanePropertiesKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkDisplayPlanePropertiesKHR>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pProperties' in 'vkGetPhysicalDeviceDisplayPlanePropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    &$p1,
    $p2 ? (VkDisplayPlanePropertiesKHR *) $p2.get()->data() : nullptr
  );
    if (info[1].IsObject()) obj1.Set("$", $p1);
  if (info[2].IsArray()) {
    VkDisplayPlanePropertiesKHR* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetDisplayPlaneSupportedDisplaysKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetDisplayPlaneSupportedDisplaysKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'planeIndex' in 'vkGetDisplayPlaneSupportedDisplaysKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pDisplayCount' in 'vkGetDisplayPlaneSupportedDisplaysKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pDisplayCount' in 'vkGetDisplayPlaneSupportedDisplaysKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkDisplayKHR>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pDisplays' in 'vkGetDisplayPlaneSupportedDisplaysKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkDisplayKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayKHR") {
        NapiObjectTypeError(info[0], "argument 4", "VkDisplayKHR");
        return env.Undefined();
      }
      VkDisplayKHR* instance = reinterpret_cast<VkDisplayKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkDisplayKHR>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pDisplays' in 'vkGetDisplayPlaneSupportedDisplaysKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetDisplayPlaneSupportedDisplaysKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    &$p2,
    $p3 ? (VkDisplayKHR *) $p3.get()->data() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkDisplayKHR* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();

      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetDisplayModePropertiesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetDisplayModePropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDisplayKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDisplayKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDisplayKHR* instance = reinterpret_cast<VkDisplayKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDisplayKHR' or 'null' for argument 2 'display' in 'vkGetDisplayModePropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pPropertyCount' in 'vkGetDisplayModePropertiesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pPropertyCount' in 'vkGetDisplayModePropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkDisplayModePropertiesKHR>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pProperties' in 'vkGetDisplayModePropertiesKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkDisplayModePropertiesKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayModePropertiesKHR") {
        NapiObjectTypeError(info[3], "argument 4", "VkDisplayModePropertiesKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkDisplayModePropertiesKHR* instance = reinterpret_cast<VkDisplayModePropertiesKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkDisplayModePropertiesKHR>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pProperties' in 'vkGetDisplayModePropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetDisplayModePropertiesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    &$p2,
    $p3 ? (VkDisplayModePropertiesKHR *) $p3.get()->data() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkDisplayModePropertiesKHR* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateDisplayModeKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkCreateDisplayModeKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDisplayKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDisplayKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDisplayKHR* instance = reinterpret_cast<VkDisplayKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDisplayKHR' or 'null' for argument 2 'display' in 'vkCreateDisplayModeKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkDisplayModeCreateInfoKHR *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR) {
      NapiObjectTypeError(info[2], "argument 3", "VkDisplayModeCreateInfoKHR");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDisplayModeCreateInfoKHR* instance = reinterpret_cast<VkDisplayModeCreateInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDisplayModeCreateInfoKHR' or 'null' for argument 3 'pCreateInfo' in 'vkCreateDisplayModeKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj4;
  VkDisplayModeKHR *$p4 = nullptr;
  if (info[4].IsObject()) {
    Napi::Object obj = info[4].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayModeKHR") {
      NapiObjectTypeError(info[4], "argument 5", "VkDisplayModeKHR");
      return env.Undefined();
    }
    obj4 = obj;
    VkDisplayModeKHR* instance = reinterpret_cast<VkDisplayModeKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p4 = instance;
  } else if (info[4].IsNull()) {
    $p4 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDisplayModeKHR' or 'null' for argument 5 'pMode' in 'vkCreateDisplayModeKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCreateDisplayModeKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    nullptr,
    $p4
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetDisplayPlaneCapabilitiesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetDisplayPlaneCapabilitiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDisplayModeKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayModeKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDisplayModeKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDisplayModeKHR* instance = reinterpret_cast<VkDisplayModeKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDisplayModeKHR' or 'null' for argument 2 'mode' in 'vkGetDisplayPlaneCapabilitiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'planeIndex' in 'vkGetDisplayPlaneCapabilitiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  Napi::Object obj3;
  VkDisplayPlaneCapabilitiesKHR *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayPlaneCapabilitiesKHR") {
      NapiObjectTypeError(info[3], "argument 4", "VkDisplayPlaneCapabilitiesKHR");
      return env.Undefined();
    }
    obj3 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDisplayPlaneCapabilitiesKHR* instance = reinterpret_cast<VkDisplayPlaneCapabilitiesKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDisplayPlaneCapabilitiesKHR' or 'null' for argument 4 'pCapabilities' in 'vkGetDisplayPlaneCapabilitiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetDisplayPlaneCapabilitiesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3
  );
  if (info[3].IsObject()) {
     Napi::Object obj = info[3].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p3));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateDisplayPlaneSurfaceKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkInstance *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkInstance") {
      NapiObjectTypeError(info[0], "argument 1", "VkInstance");
      return env.Undefined();
    }
    obj0 = obj;
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 1 'instance' in 'vkCreateDisplayPlaneSurfaceKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDisplaySurfaceCreateInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkDisplaySurfaceCreateInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDisplaySurfaceCreateInfoKHR* instance = reinterpret_cast<VkDisplaySurfaceCreateInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDisplaySurfaceCreateInfoKHR' or 'null' for argument 2 'pCreateInfo' in 'vkCreateDisplayPlaneSurfaceKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkSurfaceKHR *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSurfaceKHR") {
      NapiObjectTypeError(info[3], "argument 4", "VkSurfaceKHR");
      return env.Undefined();
    }
    obj3 = obj;
    VkSurfaceKHR* instance = reinterpret_cast<VkSurfaceKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSurfaceKHR' or 'null' for argument 4 'pSurface' in 'vkCreateDisplayPlaneSurfaceKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCreateDisplayPlaneSurfaceKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateSharedSwapchainsKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateSharedSwapchainsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'swapchainCount' in 'vkCreateSharedSwapchainsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkSwapchainCreateInfoKHR>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pCreateInfos' in 'vkCreateSharedSwapchainsKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkSwapchainCreateInfoKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSwapchainCreateInfoKHR") {
        NapiObjectTypeError(info[2], "argument 3", "VkSwapchainCreateInfoKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkSwapchainCreateInfoKHR* instance = reinterpret_cast<VkSwapchainCreateInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkSwapchainCreateInfoKHR>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pCreateInfos' in 'vkCreateSharedSwapchainsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }



  std::shared_ptr<std::vector<VkSwapchainKHR>> $p4 = nullptr;

  if (info[4].IsArray()) {

    // validate length
    if (info[4].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 5 'pSwapchains' in 'vkCreateSharedSwapchainsKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[4].As<Napi::Array>();
    std::vector<VkSwapchainKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSwapchainKHR") {
        NapiObjectTypeError(info[0], "argument 5", "VkSwapchainKHR");
        return env.Undefined();
      }
      VkSwapchainKHR* instance = reinterpret_cast<VkSwapchainKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p4 = std::make_shared<std::vector<VkSwapchainKHR>>(data);
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 5 'pSwapchains' in 'vkCreateSharedSwapchainsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkCreateSharedSwapchainsKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkSwapchainCreateInfoKHR *) $p2.get()->data() : nullptr,
    nullptr,
    $p4 ? (VkSwapchainKHR *) $p4.get()->data() : nullptr
  );
  if (info[4].IsArray()) {
    VkSwapchainKHR* $pdata = $p4.get()->data();
    Napi::Array array = info[4].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();

      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroySurfaceKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkInstance *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkInstance") {
      NapiObjectTypeError(info[0], "argument 1", "VkInstance");
      return env.Undefined();
    }
    obj0 = obj;
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 1 'instance' in 'vkDestroySurfaceKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSurfaceKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSurfaceKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSurfaceKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSurfaceKHR* instance = reinterpret_cast<VkSurfaceKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSurfaceKHR' or 'null' for argument 2 'surface' in 'vkDestroySurfaceKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkDestroySurfaceKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceSurfaceSupportKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceSurfaceSupportKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'queueFamilyIndex' in 'vkGetPhysicalDeviceSurfaceSupportKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  Napi::Object obj2;
  VkSurfaceKHR *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSurfaceKHR") {
      NapiObjectTypeError(info[2], "argument 3", "VkSurfaceKHR");
      return env.Undefined();
    }
    obj2 = obj;
    VkSurfaceKHR* instance = reinterpret_cast<VkSurfaceKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSurfaceKHR' or 'null' for argument 3 'surface' in 'vkGetPhysicalDeviceSurfaceSupportKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

    Napi::Object obj3;
    uint32_t $p3 = 0;
    if (info[3].IsObject()) {
      obj3 = info[3].As<Napi::Object>();
      if (!obj3.Has("$")) {
        Napi::Error::New(env, "Missing Object property '$' for argument 4 'pSupported' in 'vkGetPhysicalDeviceSurfaceSupportKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
      if (!(obj3.Get("$").IsBoolean())) {
        Napi::TypeError::New(env, "Expected 'Boolean' for Object property '$' 4 'pSupported' in 'vkGetPhysicalDeviceSurfaceSupportKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
      Napi::Value val = obj3.Get("$");
      $p3 = static_cast<uint32_t>(val.As<Napi::Boolean>().Value());
    } else if (!info[3].IsNull()) {
      Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 4 'pSupported' in 'vkGetPhysicalDeviceSurfaceSupportKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
  int32_t out = $vkGetPhysicalDeviceSurfaceSupportKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2,
    &$p3
  );
    if (info[3].IsObject()) obj3.Set("$", $p3);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceSurfaceCapabilitiesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceSurfaceCapabilitiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSurfaceKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSurfaceKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSurfaceKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSurfaceKHR* instance = reinterpret_cast<VkSurfaceKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSurfaceKHR' or 'null' for argument 2 'surface' in 'vkGetPhysicalDeviceSurfaceCapabilitiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkSurfaceCapabilitiesKHR *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSurfaceCapabilitiesKHR") {
      NapiObjectTypeError(info[2], "argument 3", "VkSurfaceCapabilitiesKHR");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSurfaceCapabilitiesKHR* instance = reinterpret_cast<VkSurfaceCapabilitiesKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSurfaceCapabilitiesKHR' or 'null' for argument 3 'pSurfaceCapabilities' in 'vkGetPhysicalDeviceSurfaceCapabilitiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceSurfaceFormatsKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceSurfaceFormatsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSurfaceKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSurfaceKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSurfaceKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSurfaceKHR* instance = reinterpret_cast<VkSurfaceKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSurfaceKHR' or 'null' for argument 2 'surface' in 'vkGetPhysicalDeviceSurfaceFormatsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pSurfaceFormatCount' in 'vkGetPhysicalDeviceSurfaceFormatsKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pSurfaceFormatCount' in 'vkGetPhysicalDeviceSurfaceFormatsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkSurfaceFormatKHR>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pSurfaceFormats' in 'vkGetPhysicalDeviceSurfaceFormatsKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkSurfaceFormatKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSurfaceFormatKHR") {
        NapiObjectTypeError(info[3], "argument 4", "VkSurfaceFormatKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkSurfaceFormatKHR* instance = reinterpret_cast<VkSurfaceFormatKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkSurfaceFormatKHR>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pSurfaceFormats' in 'vkGetPhysicalDeviceSurfaceFormatsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPhysicalDeviceSurfaceFormatsKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    &$p2,
    $p3 ? (VkSurfaceFormatKHR *) $p3.get()->data() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkSurfaceFormatKHR* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceSurfacePresentModesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceSurfacePresentModesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSurfaceKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSurfaceKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSurfaceKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSurfaceKHR* instance = reinterpret_cast<VkSurfaceKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSurfaceKHR' or 'null' for argument 2 'surface' in 'vkGetPhysicalDeviceSurfacePresentModesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pPresentModeCount' in 'vkGetPhysicalDeviceSurfacePresentModesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pPresentModeCount' in 'vkGetPhysicalDeviceSurfacePresentModesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<int32_t*> $p3 = nullptr;

  if (info[3].IsTypedArray()) {

    if (info[3].As<Napi::TypedArray>().TypedArrayType() != napi_int32_array) {
      Napi::TypeError::New(env, "Invalid type for argument 4 'pPresentModes' in 'vkGetPhysicalDeviceSurfacePresentModesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
      if (info[3].As<Napi::TypedArray>().ElementLength() != $p2) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pPresentModes' in 'vkGetPhysicalDeviceSurfacePresentModesKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    int32_t* data = getTypedArrayData<int32_t>(info[3]);
    $p3 = std::make_shared<int32_t*>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pPresentModes' in 'vkGetPhysicalDeviceSurfacePresentModesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPhysicalDeviceSurfacePresentModesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    &$p2,
    $p3 ? (VkPresentModeKHR *) *$p3.get() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateSwapchainKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateSwapchainKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSwapchainCreateInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkSwapchainCreateInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSwapchainCreateInfoKHR* instance = reinterpret_cast<VkSwapchainCreateInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSwapchainCreateInfoKHR' or 'null' for argument 2 'pCreateInfo' in 'vkCreateSwapchainKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkSwapchainKHR *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSwapchainKHR") {
      NapiObjectTypeError(info[3], "argument 4", "VkSwapchainKHR");
      return env.Undefined();
    }
    obj3 = obj;
    VkSwapchainKHR* instance = reinterpret_cast<VkSwapchainKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSwapchainKHR' or 'null' for argument 4 'pSwapchain' in 'vkCreateSwapchainKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCreateSwapchainKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroySwapchainKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroySwapchainKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSwapchainKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSwapchainKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSwapchainKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSwapchainKHR* instance = reinterpret_cast<VkSwapchainKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSwapchainKHR' or 'null' for argument 2 'swapchain' in 'vkDestroySwapchainKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkDestroySwapchainKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetSwapchainImagesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetSwapchainImagesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSwapchainKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSwapchainKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSwapchainKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSwapchainKHR* instance = reinterpret_cast<VkSwapchainKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSwapchainKHR' or 'null' for argument 2 'swapchain' in 'vkGetSwapchainImagesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pSwapchainImageCount' in 'vkGetSwapchainImagesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pSwapchainImageCount' in 'vkGetSwapchainImagesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkImage>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pSwapchainImages' in 'vkGetSwapchainImagesKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkImage> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
        NapiObjectTypeError(info[0], "argument 4", "VkImage");
        return env.Undefined();
      }
      VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkImage>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pSwapchainImages' in 'vkGetSwapchainImagesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetSwapchainImagesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    &$p2,
    $p3 ? (VkImage *) $p3.get()->data() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkImage* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();

      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkAcquireNextImageKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkAcquireNextImageKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSwapchainKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSwapchainKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSwapchainKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSwapchainKHR* instance = reinterpret_cast<VkSwapchainKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSwapchainKHR' or 'null' for argument 2 'swapchain' in 'vkAcquireNextImageKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'timeout' in 'vkAcquireNextImageKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }

  Napi::Object obj3;
  VkSemaphore *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSemaphore") {
      NapiObjectTypeError(info[3], "argument 4", "VkSemaphore");
      return env.Undefined();
    }
    obj3 = obj;
    VkSemaphore* instance = reinterpret_cast<VkSemaphore*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSemaphore' or 'null' for argument 4 'semaphore' in 'vkAcquireNextImageKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj4;
  VkFence *$p4 = nullptr;
  if (info[4].IsObject()) {
    Napi::Object obj = info[4].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkFence") {
      NapiObjectTypeError(info[4], "argument 5", "VkFence");
      return env.Undefined();
    }
    obj4 = obj;
    VkFence* instance = reinterpret_cast<VkFence*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p4 = instance;
  } else if (info[4].IsNull()) {
    $p4 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFence' or 'null' for argument 5 'fence' in 'vkAcquireNextImageKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj5;
  uint32_t $p5 = 0;
  if (info[5].IsObject()) {
    obj5 = info[5].As<Napi::Object>();
    if (!obj5.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 6 'pImageIndex' in 'vkAcquireNextImageKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj5.Get("$");
    
    $p5 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 6 'pImageIndex' in 'vkAcquireNextImageKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkAcquireNextImageKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    info[3].IsNull() ? VK_NULL_HANDLE : *$p3,
    info[4].IsNull() ? VK_NULL_HANDLE : *$p4,
    &$p5
  );
    if (info[5].IsObject()) obj5.Set("$", $p5);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkQueuePresentKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkQueue *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueue") {
      NapiObjectTypeError(info[0], "argument 1", "VkQueue");
      return env.Undefined();
    }
    obj0 = obj;
    VkQueue* instance = reinterpret_cast<VkQueue*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueue' or 'null' for argument 1 'queue' in 'vkQueuePresentKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPresentInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PRESENT_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkPresentInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPresentInfoKHR* instance = reinterpret_cast<VkPresentInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPresentInfoKHR' or 'null' for argument 2 'pPresentInfo' in 'vkQueuePresentKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkQueuePresentKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateWin32SurfaceKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkInstance *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkInstance") {
      NapiObjectTypeError(info[0], "argument 1", "VkInstance");
      return env.Undefined();
    }
    obj0 = obj;
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 1 'instance' in 'vkCreateWin32SurfaceKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkWin32SurfaceCreateInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkWin32SurfaceCreateInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkWin32SurfaceCreateInfoKHR* instance = reinterpret_cast<VkWin32SurfaceCreateInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkWin32SurfaceCreateInfoKHR' or 'null' for argument 2 'pCreateInfo' in 'vkCreateWin32SurfaceKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkSurfaceKHR *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSurfaceKHR") {
      NapiObjectTypeError(info[3], "argument 4", "VkSurfaceKHR");
      return env.Undefined();
    }
    obj3 = obj;
    VkSurfaceKHR* instance = reinterpret_cast<VkSurfaceKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSurfaceKHR' or 'null' for argument 4 'pSurface' in 'vkCreateWin32SurfaceKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCreateWin32SurfaceKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceWin32PresentationSupportKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceWin32PresentationSupportKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'queueFamilyIndex' in 'vkGetPhysicalDeviceWin32PresentationSupportKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());
  uint32_t out = $vkGetPhysicalDeviceWin32PresentationSupportKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateDebugReportCallbackEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkInstance *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkInstance") {
      NapiObjectTypeError(info[0], "argument 1", "VkInstance");
      return env.Undefined();
    }
    obj0 = obj;
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 1 'instance' in 'vkCreateDebugReportCallbackEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDebugReportCallbackCreateInfoEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkDebugReportCallbackCreateInfoEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDebugReportCallbackCreateInfoEXT* instance = reinterpret_cast<VkDebugReportCallbackCreateInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugReportCallbackCreateInfoEXT' or 'null' for argument 2 'pCreateInfo' in 'vkCreateDebugReportCallbackEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkDebugReportCallbackEXT *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDebugReportCallbackEXT") {
      NapiObjectTypeError(info[3], "argument 4", "VkDebugReportCallbackEXT");
      return env.Undefined();
    }
    obj3 = obj;
    VkDebugReportCallbackEXT* instance = reinterpret_cast<VkDebugReportCallbackEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugReportCallbackEXT' or 'null' for argument 4 'pCallback' in 'vkCreateDebugReportCallbackEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCreateDebugReportCallbackEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyDebugReportCallbackEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkInstance *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkInstance") {
      NapiObjectTypeError(info[0], "argument 1", "VkInstance");
      return env.Undefined();
    }
    obj0 = obj;
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 1 'instance' in 'vkDestroyDebugReportCallbackEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDebugReportCallbackEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDebugReportCallbackEXT") {
      NapiObjectTypeError(info[1], "argument 2", "VkDebugReportCallbackEXT");
      return env.Undefined();
    }
    obj1 = obj;
    VkDebugReportCallbackEXT* instance = reinterpret_cast<VkDebugReportCallbackEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugReportCallbackEXT' or 'null' for argument 2 'callback' in 'vkDestroyDebugReportCallbackEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkDestroyDebugReportCallbackEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkDebugReportMessageEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkInstance *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkInstance") {
      NapiObjectTypeError(info[0], "argument 1", "VkInstance");
      return env.Undefined();
    }
    obj0 = obj;
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 1 'instance' in 'vkDebugReportMessageEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'flags' in 'vkDebugReportMessageEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p1 = static_cast<int32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'objectType' in 'vkDebugReportMessageEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkDebugReportObjectTypeEXT $p2 = static_cast<VkDebugReportObjectTypeEXT>(info[2].As<Napi::Number>().Int64Value());

  bool lossless3;
  if (!info[3].IsBigInt() && !info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 4 'object' in 'vkDebugReportMessageEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p3 = 0;
  if (info[3].IsBigInt()) {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::BigInt>().Int64Value(&lossless3));
  } else {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::Number>().Int64Value());
  }

  bool lossless4;
  if (!info[4].IsBigInt() && !info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 5 'location' in 'vkDebugReportMessageEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  size_t $p4 = 0;
  if (info[4].IsBigInt()) {
    $p4 = static_cast<size_t>(info[4].As<Napi::BigInt>().Int64Value(&lossless4));
  } else {
    $p4 = static_cast<size_t>(info[4].As<Napi::Number>().Int64Value());
  }

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'messageCode' in 'vkDebugReportMessageEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p5 = static_cast<int32_t>(info[5].As<Napi::Number>().Int64Value());

  char* $p6 = nullptr;
  if (info[6].IsString()) {
    $p6 = copyV8String(info[6]);
  } else if (!info[6].IsNull()) {
    Napi::TypeError::New(env, "Expected 'String' or 'null' for argument 7 'pLayerPrefix' in 'vkDebugReportMessageEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  char* $p7 = nullptr;
  if (info[7].IsString()) {
    $p7 = copyV8String(info[7]);
  } else if (!info[7].IsNull()) {
    Napi::TypeError::New(env, "Expected 'String' or 'null' for argument 8 'pMessage' in 'vkDebugReportMessageEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkDebugReportMessageEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    static_cast<VkDebugReportFlagsEXT>($p1),
    $p2,
    $p3,
    $p4,
    $p5,
    $p6,
    $p7
  );
  if ($p6) delete[] $p6;
  if ($p7) delete[] $p7;
  
  
  return env.Undefined();
  
};

Napi::Value _vkDebugMarkerSetObjectNameEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDebugMarkerSetObjectNameEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDebugMarkerObjectNameInfoEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkDebugMarkerObjectNameInfoEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDebugMarkerObjectNameInfoEXT* instance = reinterpret_cast<VkDebugMarkerObjectNameInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugMarkerObjectNameInfoEXT' or 'null' for argument 2 'pNameInfo' in 'vkDebugMarkerSetObjectNameEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkDebugMarkerSetObjectNameEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDebugMarkerSetObjectTagEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDebugMarkerSetObjectTagEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDebugMarkerObjectTagInfoEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkDebugMarkerObjectTagInfoEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDebugMarkerObjectTagInfoEXT* instance = reinterpret_cast<VkDebugMarkerObjectTagInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugMarkerObjectTagInfoEXT' or 'null' for argument 2 'pTagInfo' in 'vkDebugMarkerSetObjectTagEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkDebugMarkerSetObjectTagEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdDebugMarkerBeginEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDebugMarkerBeginEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDebugMarkerMarkerInfoEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkDebugMarkerMarkerInfoEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDebugMarkerMarkerInfoEXT* instance = reinterpret_cast<VkDebugMarkerMarkerInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugMarkerMarkerInfoEXT' or 'null' for argument 2 'pMarkerInfo' in 'vkCmdDebugMarkerBeginEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdDebugMarkerBeginEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdDebugMarkerEndEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDebugMarkerEndEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdDebugMarkerEndEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdDebugMarkerInsertEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDebugMarkerInsertEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDebugMarkerMarkerInfoEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkDebugMarkerMarkerInfoEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDebugMarkerMarkerInfoEXT* instance = reinterpret_cast<VkDebugMarkerMarkerInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugMarkerMarkerInfoEXT' or 'null' for argument 2 'pMarkerInfo' in 'vkCmdDebugMarkerInsertEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdDebugMarkerInsertEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceExternalImageFormatPropertiesNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceExternalImageFormatPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'format' in 'vkGetPhysicalDeviceExternalImageFormatPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkFormat $p1 = static_cast<VkFormat>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'type' in 'vkGetPhysicalDeviceExternalImageFormatPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageType $p2 = static_cast<VkImageType>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'tiling' in 'vkGetPhysicalDeviceExternalImageFormatPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageTiling $p3 = static_cast<VkImageTiling>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'usage' in 'vkGetPhysicalDeviceExternalImageFormatPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p4 = static_cast<int32_t>(info[4].As<Napi::Number>().Int64Value());

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'flags' in 'vkGetPhysicalDeviceExternalImageFormatPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p5 = static_cast<int32_t>(info[5].As<Napi::Number>().Int64Value());

  if (!info[6].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 7 'externalHandleType' in 'vkGetPhysicalDeviceExternalImageFormatPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p6 = static_cast<int32_t>(info[6].As<Napi::Number>().Int64Value());

  Napi::Object obj7;
  VkExternalImageFormatPropertiesNV *$p7 = nullptr;
  if (info[7].IsObject()) {
    Napi::Object obj = info[7].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkExternalImageFormatPropertiesNV") {
      NapiObjectTypeError(info[7], "argument 8", "VkExternalImageFormatPropertiesNV");
      return env.Undefined();
    }
    obj7 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkExternalImageFormatPropertiesNV* instance = reinterpret_cast<VkExternalImageFormatPropertiesNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p7 = instance;
  } else if (info[7].IsNull()) {
    $p7 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkExternalImageFormatPropertiesNV' or 'null' for argument 8 'pExternalImageFormatProperties' in 'vkGetPhysicalDeviceExternalImageFormatPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3,
    static_cast<VkImageUsageFlags>($p4),
    static_cast<VkImageCreateFlags>($p5),
    static_cast<VkExternalMemoryHandleTypeFlagsNV>($p6),
    $p7
  );
  if (info[7].IsObject()) {
     Napi::Object obj = info[7].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p7));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetMemoryWin32HandleNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetMemoryWin32HandleNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeviceMemory *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeviceMemory") {
      NapiObjectTypeError(info[1], "argument 2", "VkDeviceMemory");
      return env.Undefined();
    }
    obj1 = obj;
    VkDeviceMemory* instance = reinterpret_cast<VkDeviceMemory*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeviceMemory' or 'null' for argument 2 'memory' in 'vkGetMemoryWin32HandleNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'handleType' in 'vkGetMemoryWin32HandleNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p2 = static_cast<int32_t>(info[2].As<Napi::Number>().Int64Value());

  Napi::Object obj3;
  HANDLE* $p3 = nullptr;
  if (info[3].IsObject()) {
    obj3 = info[3].As<Napi::Object>();
    if (!obj3.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 4 'pHandle' in 'vkGetMemoryWin32HandleNV'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    if (!(obj3.Get("$").IsBigInt())) {
      Napi::TypeError::New(env, "Expected 'BigInt' for Object property '$' 4 'pHandle' in 'vkGetMemoryWin32HandleNV'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj3.Get("$");
    bool lossless = false;
    $p3 = reinterpret_cast<HANDLE*>(val.As<Napi::BigInt>().Int64Value(&lossless));
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 4 'pHandle' in 'vkGetMemoryWin32HandleNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetMemoryWin32HandleNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    static_cast<VkExternalMemoryHandleTypeFlagsNV>($p2),
    info[3].IsNull() ? nullptr : $p3
  );
  Napi::BigInt ptr3 = Napi::BigInt::New(env, (int64_t)$p3);
  if (info[3].IsObject()) obj3.Set("$", ptr3);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdExecuteGeneratedCommandsNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdExecuteGeneratedCommandsNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsBoolean() && !info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Boolean' or 'Number' for argument 2 'isPreprocessed' in 'vkCmdExecuteGeneratedCommandsNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].IsBoolean() ? info[1].As<Napi::Boolean>().Value() : info[1].As<Napi::Number>().Int32Value());

  Napi::Object obj2;
  VkGeneratedCommandsInfoNV *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV) {
      NapiObjectTypeError(info[2], "argument 3", "VkGeneratedCommandsInfoNV");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkGeneratedCommandsInfoNV* instance = reinterpret_cast<VkGeneratedCommandsInfoNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkGeneratedCommandsInfoNV' or 'null' for argument 3 'pGeneratedCommandsInfo' in 'vkCmdExecuteGeneratedCommandsNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdExecuteGeneratedCommandsNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdPreprocessGeneratedCommandsNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdPreprocessGeneratedCommandsNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkGeneratedCommandsInfoNV *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV) {
      NapiObjectTypeError(info[1], "argument 2", "VkGeneratedCommandsInfoNV");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkGeneratedCommandsInfoNV* instance = reinterpret_cast<VkGeneratedCommandsInfoNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkGeneratedCommandsInfoNV' or 'null' for argument 2 'pGeneratedCommandsInfo' in 'vkCmdPreprocessGeneratedCommandsNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdPreprocessGeneratedCommandsNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBindPipelineShaderGroupNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBindPipelineShaderGroupNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'pipelineBindPoint' in 'vkCmdBindPipelineShaderGroupNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkPipelineBindPoint $p1 = static_cast<VkPipelineBindPoint>(info[1].As<Napi::Number>().Int64Value());

  Napi::Object obj2;
  VkPipeline *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipeline") {
      NapiObjectTypeError(info[2], "argument 3", "VkPipeline");
      return env.Undefined();
    }
    obj2 = obj;
    VkPipeline* instance = reinterpret_cast<VkPipeline*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipeline' or 'null' for argument 3 'pipeline' in 'vkCmdBindPipelineShaderGroupNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'groupIndex' in 'vkCmdBindPipelineShaderGroupNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());
$vkCmdBindPipelineShaderGroupNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2,
    $p3
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetGeneratedCommandsMemoryRequirementsNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetGeneratedCommandsMemoryRequirementsNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkGeneratedCommandsMemoryRequirementsInfoNV *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV) {
      NapiObjectTypeError(info[1], "argument 2", "VkGeneratedCommandsMemoryRequirementsInfoNV");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkGeneratedCommandsMemoryRequirementsInfoNV* instance = reinterpret_cast<VkGeneratedCommandsMemoryRequirementsInfoNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkGeneratedCommandsMemoryRequirementsInfoNV' or 'null' for argument 2 'pInfo' in 'vkGetGeneratedCommandsMemoryRequirementsNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkMemoryRequirements2 *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2) {
      NapiObjectTypeError(info[2], "argument 3", "VkMemoryRequirements2");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkMemoryRequirements2* instance = reinterpret_cast<VkMemoryRequirements2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkMemoryRequirements2' or 'null' for argument 3 'pMemoryRequirements' in 'vkGetGeneratedCommandsMemoryRequirementsNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkGetGeneratedCommandsMemoryRequirementsNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateIndirectCommandsLayoutNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateIndirectCommandsLayoutNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkIndirectCommandsLayoutCreateInfoNV *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV) {
      NapiObjectTypeError(info[1], "argument 2", "VkIndirectCommandsLayoutCreateInfoNV");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkIndirectCommandsLayoutCreateInfoNV* instance = reinterpret_cast<VkIndirectCommandsLayoutCreateInfoNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkIndirectCommandsLayoutCreateInfoNV' or 'null' for argument 2 'pCreateInfo' in 'vkCreateIndirectCommandsLayoutNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkIndirectCommandsLayoutNV *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkIndirectCommandsLayoutNV") {
      NapiObjectTypeError(info[3], "argument 4", "VkIndirectCommandsLayoutNV");
      return env.Undefined();
    }
    obj3 = obj;
    VkIndirectCommandsLayoutNV* instance = reinterpret_cast<VkIndirectCommandsLayoutNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkIndirectCommandsLayoutNV' or 'null' for argument 4 'pIndirectCommandsLayout' in 'vkCreateIndirectCommandsLayoutNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCreateIndirectCommandsLayoutNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyIndirectCommandsLayoutNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyIndirectCommandsLayoutNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkIndirectCommandsLayoutNV *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkIndirectCommandsLayoutNV") {
      NapiObjectTypeError(info[1], "argument 2", "VkIndirectCommandsLayoutNV");
      return env.Undefined();
    }
    obj1 = obj;
    VkIndirectCommandsLayoutNV* instance = reinterpret_cast<VkIndirectCommandsLayoutNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkIndirectCommandsLayoutNV' or 'null' for argument 2 'indirectCommandsLayout' in 'vkDestroyIndirectCommandsLayoutNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkDestroyIndirectCommandsLayoutNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceFeatures2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceFeatures2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPhysicalDeviceFeatures2 *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2) {
      NapiObjectTypeError(info[1], "argument 2", "VkPhysicalDeviceFeatures2");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPhysicalDeviceFeatures2* instance = reinterpret_cast<VkPhysicalDeviceFeatures2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDeviceFeatures2' or 'null' for argument 2 'pFeatures' in 'vkGetPhysicalDeviceFeatures2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetPhysicalDeviceFeatures2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  if (info[1].IsObject()) {
     Napi::Object obj = info[1].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p1));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceProperties2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPhysicalDeviceProperties2 *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2) {
      NapiObjectTypeError(info[1], "argument 2", "VkPhysicalDeviceProperties2");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPhysicalDeviceProperties2* instance = reinterpret_cast<VkPhysicalDeviceProperties2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDeviceProperties2' or 'null' for argument 2 'pProperties' in 'vkGetPhysicalDeviceProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetPhysicalDeviceProperties2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  if (info[1].IsObject()) {
     Napi::Object obj = info[1].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p1));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceFormatProperties2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceFormatProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'format' in 'vkGetPhysicalDeviceFormatProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkFormat $p1 = static_cast<VkFormat>(info[1].As<Napi::Number>().Int64Value());

  Napi::Object obj2;
  VkFormatProperties2 *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2) {
      NapiObjectTypeError(info[2], "argument 3", "VkFormatProperties2");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkFormatProperties2* instance = reinterpret_cast<VkFormatProperties2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFormatProperties2' or 'null' for argument 3 'pFormatProperties' in 'vkGetPhysicalDeviceFormatProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetPhysicalDeviceFormatProperties2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceImageFormatProperties2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceImageFormatProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPhysicalDeviceImageFormatInfo2 *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2) {
      NapiObjectTypeError(info[1], "argument 2", "VkPhysicalDeviceImageFormatInfo2");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPhysicalDeviceImageFormatInfo2* instance = reinterpret_cast<VkPhysicalDeviceImageFormatInfo2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDeviceImageFormatInfo2' or 'null' for argument 2 'pImageFormatInfo' in 'vkGetPhysicalDeviceImageFormatProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkImageFormatProperties2 *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2) {
      NapiObjectTypeError(info[2], "argument 3", "VkImageFormatProperties2");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkImageFormatProperties2* instance = reinterpret_cast<VkImageFormatProperties2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImageFormatProperties2' or 'null' for argument 3 'pImageFormatProperties' in 'vkGetPhysicalDeviceImageFormatProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkGetPhysicalDeviceImageFormatProperties2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceQueueFamilyProperties2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceQueueFamilyProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pQueueFamilyPropertyCount' in 'vkGetPhysicalDeviceQueueFamilyProperties2'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pQueueFamilyPropertyCount' in 'vkGetPhysicalDeviceQueueFamilyProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkQueueFamilyProperties2>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[1].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[2].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pQueueFamilyProperties' in 'vkGetPhysicalDeviceQueueFamilyProperties2'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkQueueFamilyProperties2> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueueFamilyProperties2") {
        NapiObjectTypeError(info[2], "argument 3", "VkQueueFamilyProperties2");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkQueueFamilyProperties2* instance = reinterpret_cast<VkQueueFamilyProperties2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkQueueFamilyProperties2>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pQueueFamilyProperties' in 'vkGetPhysicalDeviceQueueFamilyProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkGetPhysicalDeviceQueueFamilyProperties2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    &$p1,
    $p2 ? (VkQueueFamilyProperties2 *) $p2.get()->data() : nullptr
  );
    if (info[1].IsObject()) obj1.Set("$", $p1);
  if (info[2].IsArray()) {
    VkQueueFamilyProperties2* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceMemoryProperties2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceMemoryProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPhysicalDeviceMemoryProperties2 *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2) {
      NapiObjectTypeError(info[1], "argument 2", "VkPhysicalDeviceMemoryProperties2");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPhysicalDeviceMemoryProperties2* instance = reinterpret_cast<VkPhysicalDeviceMemoryProperties2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDeviceMemoryProperties2' or 'null' for argument 2 'pMemoryProperties' in 'vkGetPhysicalDeviceMemoryProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetPhysicalDeviceMemoryProperties2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  if (info[1].IsObject()) {
     Napi::Object obj = info[1].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p1));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceSparseImageFormatProperties2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceSparseImageFormatProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPhysicalDeviceSparseImageFormatInfo2 *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2) {
      NapiObjectTypeError(info[1], "argument 2", "VkPhysicalDeviceSparseImageFormatInfo2");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPhysicalDeviceSparseImageFormatInfo2* instance = reinterpret_cast<VkPhysicalDeviceSparseImageFormatInfo2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDeviceSparseImageFormatInfo2' or 'null' for argument 2 'pFormatInfo' in 'vkGetPhysicalDeviceSparseImageFormatProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pPropertyCount' in 'vkGetPhysicalDeviceSparseImageFormatProperties2'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pPropertyCount' in 'vkGetPhysicalDeviceSparseImageFormatProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkSparseImageFormatProperties2>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pProperties' in 'vkGetPhysicalDeviceSparseImageFormatProperties2'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkSparseImageFormatProperties2> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSparseImageFormatProperties2") {
        NapiObjectTypeError(info[3], "argument 4", "VkSparseImageFormatProperties2");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkSparseImageFormatProperties2* instance = reinterpret_cast<VkSparseImageFormatProperties2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkSparseImageFormatProperties2>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pProperties' in 'vkGetPhysicalDeviceSparseImageFormatProperties2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkGetPhysicalDeviceSparseImageFormatProperties2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    &$p2,
    $p3 ? (VkSparseImageFormatProperties2 *) $p3.get()->data() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkSparseImageFormatProperties2* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdPushDescriptorSetKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdPushDescriptorSetKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'pipelineBindPoint' in 'vkCmdPushDescriptorSetKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkPipelineBindPoint $p1 = static_cast<VkPipelineBindPoint>(info[1].As<Napi::Number>().Int64Value());

  Napi::Object obj2;
  VkPipelineLayout *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineLayout") {
      NapiObjectTypeError(info[2], "argument 3", "VkPipelineLayout");
      return env.Undefined();
    }
    obj2 = obj;
    VkPipelineLayout* instance = reinterpret_cast<VkPipelineLayout*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineLayout' or 'null' for argument 3 'layout' in 'vkCmdPushDescriptorSetKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'set' in 'vkCmdPushDescriptorSetKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'descriptorWriteCount' in 'vkCmdPushDescriptorSetKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkWriteDescriptorSet>> $p5 = nullptr;

  if (info[5].IsArray()) {

    // validate length
    if (info[5].As<Napi::Array>().Length() != info[4].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 6 'pDescriptorWrites' in 'vkCmdPushDescriptorSetKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[5].As<Napi::Array>();
    std::vector<VkWriteDescriptorSet> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkWriteDescriptorSet") {
        NapiObjectTypeError(info[5], "argument 6", "VkWriteDescriptorSet");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkWriteDescriptorSet* instance = reinterpret_cast<VkWriteDescriptorSet*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p5 = std::make_shared<std::vector<VkWriteDescriptorSet>>(data);
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 6 'pDescriptorWrites' in 'vkCmdPushDescriptorSetKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkCmdPushDescriptorSetKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2,
    $p3,
    $p4,
    $p5 ? (const VkWriteDescriptorSet *) $p5.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkTrimCommandPool(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkTrimCommandPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkCommandPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkCommandPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkCommandPool* instance = reinterpret_cast<VkCommandPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandPool' or 'null' for argument 2 'commandPool' in 'vkTrimCommandPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'flags' in 'vkTrimCommandPool'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p2 = static_cast<int32_t>(info[2].As<Napi::Number>().Int64Value());
vkTrimCommandPool(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    static_cast<VkCommandPoolTrimFlags>($p2)
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceExternalBufferProperties(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceExternalBufferProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPhysicalDeviceExternalBufferInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkPhysicalDeviceExternalBufferInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPhysicalDeviceExternalBufferInfo* instance = reinterpret_cast<VkPhysicalDeviceExternalBufferInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDeviceExternalBufferInfo' or 'null' for argument 2 'pExternalBufferInfo' in 'vkGetPhysicalDeviceExternalBufferProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkExternalBufferProperties *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES) {
      NapiObjectTypeError(info[2], "argument 3", "VkExternalBufferProperties");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkExternalBufferProperties* instance = reinterpret_cast<VkExternalBufferProperties*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkExternalBufferProperties' or 'null' for argument 3 'pExternalBufferProperties' in 'vkGetPhysicalDeviceExternalBufferProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetPhysicalDeviceExternalBufferProperties(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetMemoryWin32HandleKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetMemoryWin32HandleKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkMemoryGetWin32HandleInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkMemoryGetWin32HandleInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkMemoryGetWin32HandleInfoKHR* instance = reinterpret_cast<VkMemoryGetWin32HandleInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkMemoryGetWin32HandleInfoKHR' or 'null' for argument 2 'pGetWin32HandleInfo' in 'vkGetMemoryWin32HandleKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  HANDLE* $p2 = nullptr;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pHandle' in 'vkGetMemoryWin32HandleKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    if (!(obj2.Get("$").IsBigInt())) {
      Napi::TypeError::New(env, "Expected 'BigInt' for Object property '$' 3 'pHandle' in 'vkGetMemoryWin32HandleKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    bool lossless = false;
    $p2 = reinterpret_cast<HANDLE*>(val.As<Napi::BigInt>().Int64Value(&lossless));
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pHandle' in 'vkGetMemoryWin32HandleKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetMemoryWin32HandleKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    info[2].IsNull() ? nullptr : $p2
  );
  Napi::BigInt ptr2 = Napi::BigInt::New(env, (int64_t)$p2);
  if (info[2].IsObject()) obj2.Set("$", ptr2);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetMemoryWin32HandlePropertiesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetMemoryWin32HandlePropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'handleType' in 'vkGetMemoryWin32HandlePropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p1 = static_cast<int32_t>(info[1].As<Napi::Number>().Int64Value());

  bool lossless2 = false;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'handle' in 'vkGetMemoryWin32HandlePropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  HANDLE $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = reinterpret_cast<HANDLE>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = reinterpret_cast<HANDLE>(info[2].As<Napi::Number>().Int64Value());
  }

  Napi::Object obj3;
  VkMemoryWin32HandlePropertiesKHR *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR) {
      NapiObjectTypeError(info[3], "argument 4", "VkMemoryWin32HandlePropertiesKHR");
      return env.Undefined();
    }
    obj3 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkMemoryWin32HandlePropertiesKHR* instance = reinterpret_cast<VkMemoryWin32HandlePropertiesKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkMemoryWin32HandlePropertiesKHR' or 'null' for argument 4 'pMemoryWin32HandleProperties' in 'vkGetMemoryWin32HandlePropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetMemoryWin32HandlePropertiesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    static_cast<VkExternalMemoryHandleTypeFlagBits>($p1),
    $p2,
    $p3
  );
  if (info[3].IsObject()) {
     Napi::Object obj = info[3].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p3));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetMemoryFdKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetMemoryFdKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkMemoryGetFdInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkMemoryGetFdInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkMemoryGetFdInfoKHR* instance = reinterpret_cast<VkMemoryGetFdInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkMemoryGetFdInfoKHR' or 'null' for argument 2 'pGetFdInfo' in 'vkGetMemoryFdKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  int $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pFd' in 'vkGetMemoryFdKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<int>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pFd' in 'vkGetMemoryFdKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetMemoryFdKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    &$p2
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetMemoryFdPropertiesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetMemoryFdPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'handleType' in 'vkGetMemoryFdPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p1 = static_cast<int32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'fd' in 'vkGetMemoryFdPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int $p2 = static_cast<int>(info[2].As<Napi::Number>().Int64Value());

  Napi::Object obj3;
  VkMemoryFdPropertiesKHR *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR) {
      NapiObjectTypeError(info[3], "argument 4", "VkMemoryFdPropertiesKHR");
      return env.Undefined();
    }
    obj3 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkMemoryFdPropertiesKHR* instance = reinterpret_cast<VkMemoryFdPropertiesKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkMemoryFdPropertiesKHR' or 'null' for argument 4 'pMemoryFdProperties' in 'vkGetMemoryFdPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetMemoryFdPropertiesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    static_cast<VkExternalMemoryHandleTypeFlagBits>($p1),
    $p2,
    $p3
  );
  if (info[3].IsObject()) {
     Napi::Object obj = info[3].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p3));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceExternalSemaphoreProperties(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceExternalSemaphoreProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPhysicalDeviceExternalSemaphoreInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkPhysicalDeviceExternalSemaphoreInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPhysicalDeviceExternalSemaphoreInfo* instance = reinterpret_cast<VkPhysicalDeviceExternalSemaphoreInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDeviceExternalSemaphoreInfo' or 'null' for argument 2 'pExternalSemaphoreInfo' in 'vkGetPhysicalDeviceExternalSemaphoreProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkExternalSemaphoreProperties *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES) {
      NapiObjectTypeError(info[2], "argument 3", "VkExternalSemaphoreProperties");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkExternalSemaphoreProperties* instance = reinterpret_cast<VkExternalSemaphoreProperties*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkExternalSemaphoreProperties' or 'null' for argument 3 'pExternalSemaphoreProperties' in 'vkGetPhysicalDeviceExternalSemaphoreProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetPhysicalDeviceExternalSemaphoreProperties(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetSemaphoreWin32HandleKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetSemaphoreWin32HandleKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSemaphoreGetWin32HandleInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkSemaphoreGetWin32HandleInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSemaphoreGetWin32HandleInfoKHR* instance = reinterpret_cast<VkSemaphoreGetWin32HandleInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSemaphoreGetWin32HandleInfoKHR' or 'null' for argument 2 'pGetWin32HandleInfo' in 'vkGetSemaphoreWin32HandleKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  HANDLE* $p2 = nullptr;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pHandle' in 'vkGetSemaphoreWin32HandleKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    if (!(obj2.Get("$").IsBigInt())) {
      Napi::TypeError::New(env, "Expected 'BigInt' for Object property '$' 3 'pHandle' in 'vkGetSemaphoreWin32HandleKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    bool lossless = false;
    $p2 = reinterpret_cast<HANDLE*>(val.As<Napi::BigInt>().Int64Value(&lossless));
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pHandle' in 'vkGetSemaphoreWin32HandleKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetSemaphoreWin32HandleKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    info[2].IsNull() ? nullptr : $p2
  );
  Napi::BigInt ptr2 = Napi::BigInt::New(env, (int64_t)$p2);
  if (info[2].IsObject()) obj2.Set("$", ptr2);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkImportSemaphoreWin32HandleKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkImportSemaphoreWin32HandleKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImportSemaphoreWin32HandleInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkImportSemaphoreWin32HandleInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkImportSemaphoreWin32HandleInfoKHR* instance = reinterpret_cast<VkImportSemaphoreWin32HandleInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImportSemaphoreWin32HandleInfoKHR' or 'null' for argument 2 'pImportSemaphoreWin32HandleInfo' in 'vkImportSemaphoreWin32HandleKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkImportSemaphoreWin32HandleKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetSemaphoreFdKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetSemaphoreFdKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSemaphoreGetFdInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkSemaphoreGetFdInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSemaphoreGetFdInfoKHR* instance = reinterpret_cast<VkSemaphoreGetFdInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSemaphoreGetFdInfoKHR' or 'null' for argument 2 'pGetFdInfo' in 'vkGetSemaphoreFdKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  int $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pFd' in 'vkGetSemaphoreFdKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<int>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pFd' in 'vkGetSemaphoreFdKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetSemaphoreFdKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    &$p2
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkImportSemaphoreFdKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkImportSemaphoreFdKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImportSemaphoreFdInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkImportSemaphoreFdInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkImportSemaphoreFdInfoKHR* instance = reinterpret_cast<VkImportSemaphoreFdInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImportSemaphoreFdInfoKHR' or 'null' for argument 2 'pImportSemaphoreFdInfo' in 'vkImportSemaphoreFdKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkImportSemaphoreFdKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceExternalFenceProperties(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceExternalFenceProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPhysicalDeviceExternalFenceInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkPhysicalDeviceExternalFenceInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPhysicalDeviceExternalFenceInfo* instance = reinterpret_cast<VkPhysicalDeviceExternalFenceInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDeviceExternalFenceInfo' or 'null' for argument 2 'pExternalFenceInfo' in 'vkGetPhysicalDeviceExternalFenceProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkExternalFenceProperties *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES) {
      NapiObjectTypeError(info[2], "argument 3", "VkExternalFenceProperties");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkExternalFenceProperties* instance = reinterpret_cast<VkExternalFenceProperties*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkExternalFenceProperties' or 'null' for argument 3 'pExternalFenceProperties' in 'vkGetPhysicalDeviceExternalFenceProperties'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetPhysicalDeviceExternalFenceProperties(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetFenceWin32HandleKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetFenceWin32HandleKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkFenceGetWin32HandleInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkFenceGetWin32HandleInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkFenceGetWin32HandleInfoKHR* instance = reinterpret_cast<VkFenceGetWin32HandleInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFenceGetWin32HandleInfoKHR' or 'null' for argument 2 'pGetWin32HandleInfo' in 'vkGetFenceWin32HandleKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  HANDLE* $p2 = nullptr;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pHandle' in 'vkGetFenceWin32HandleKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    if (!(obj2.Get("$").IsBigInt())) {
      Napi::TypeError::New(env, "Expected 'BigInt' for Object property '$' 3 'pHandle' in 'vkGetFenceWin32HandleKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    bool lossless = false;
    $p2 = reinterpret_cast<HANDLE*>(val.As<Napi::BigInt>().Int64Value(&lossless));
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pHandle' in 'vkGetFenceWin32HandleKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetFenceWin32HandleKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    info[2].IsNull() ? nullptr : $p2
  );
  Napi::BigInt ptr2 = Napi::BigInt::New(env, (int64_t)$p2);
  if (info[2].IsObject()) obj2.Set("$", ptr2);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkImportFenceWin32HandleKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkImportFenceWin32HandleKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImportFenceWin32HandleInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkImportFenceWin32HandleInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkImportFenceWin32HandleInfoKHR* instance = reinterpret_cast<VkImportFenceWin32HandleInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImportFenceWin32HandleInfoKHR' or 'null' for argument 2 'pImportFenceWin32HandleInfo' in 'vkImportFenceWin32HandleKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkImportFenceWin32HandleKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetFenceFdKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetFenceFdKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkFenceGetFdInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkFenceGetFdInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkFenceGetFdInfoKHR* instance = reinterpret_cast<VkFenceGetFdInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFenceGetFdInfoKHR' or 'null' for argument 2 'pGetFdInfo' in 'vkGetFenceFdKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  int $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pFd' in 'vkGetFenceFdKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<int>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pFd' in 'vkGetFenceFdKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetFenceFdKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    &$p2
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkImportFenceFdKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkImportFenceFdKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImportFenceFdInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkImportFenceFdInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkImportFenceFdInfoKHR* instance = reinterpret_cast<VkImportFenceFdInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImportFenceFdInfoKHR' or 'null' for argument 2 'pImportFenceFdInfo' in 'vkImportFenceFdKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkImportFenceFdKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkReleaseDisplayEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkReleaseDisplayEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDisplayKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDisplayKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDisplayKHR* instance = reinterpret_cast<VkDisplayKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDisplayKHR' or 'null' for argument 2 'display' in 'vkReleaseDisplayEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkReleaseDisplayEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDisplayPowerControlEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDisplayPowerControlEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDisplayKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDisplayKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDisplayKHR* instance = reinterpret_cast<VkDisplayKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDisplayKHR' or 'null' for argument 2 'display' in 'vkDisplayPowerControlEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkDisplayPowerInfoEXT *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT) {
      NapiObjectTypeError(info[2], "argument 3", "VkDisplayPowerInfoEXT");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDisplayPowerInfoEXT* instance = reinterpret_cast<VkDisplayPowerInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDisplayPowerInfoEXT' or 'null' for argument 3 'pDisplayPowerInfo' in 'vkDisplayPowerControlEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkDisplayPowerControlEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkRegisterDeviceEventEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkRegisterDeviceEventEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeviceEventInfoEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkDeviceEventInfoEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDeviceEventInfoEXT* instance = reinterpret_cast<VkDeviceEventInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeviceEventInfoEXT' or 'null' for argument 2 'pDeviceEventInfo' in 'vkRegisterDeviceEventEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkFence *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkFence") {
      NapiObjectTypeError(info[3], "argument 4", "VkFence");
      return env.Undefined();
    }
    obj3 = obj;
    VkFence* instance = reinterpret_cast<VkFence*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFence' or 'null' for argument 4 'pFence' in 'vkRegisterDeviceEventEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkRegisterDeviceEventEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkRegisterDisplayEventEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkRegisterDisplayEventEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDisplayKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDisplayKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDisplayKHR* instance = reinterpret_cast<VkDisplayKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDisplayKHR' or 'null' for argument 2 'display' in 'vkRegisterDisplayEventEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkDisplayEventInfoEXT *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT) {
      NapiObjectTypeError(info[2], "argument 3", "VkDisplayEventInfoEXT");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDisplayEventInfoEXT* instance = reinterpret_cast<VkDisplayEventInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDisplayEventInfoEXT' or 'null' for argument 3 'pDisplayEventInfo' in 'vkRegisterDisplayEventEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj4;
  VkFence *$p4 = nullptr;
  if (info[4].IsObject()) {
    Napi::Object obj = info[4].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkFence") {
      NapiObjectTypeError(info[4], "argument 5", "VkFence");
      return env.Undefined();
    }
    obj4 = obj;
    VkFence* instance = reinterpret_cast<VkFence*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p4 = instance;
  } else if (info[4].IsNull()) {
    $p4 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkFence' or 'null' for argument 5 'pFence' in 'vkRegisterDisplayEventEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkRegisterDisplayEventEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    nullptr,
    $p4
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetSwapchainCounterEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetSwapchainCounterEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSwapchainKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSwapchainKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSwapchainKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSwapchainKHR* instance = reinterpret_cast<VkSwapchainKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSwapchainKHR' or 'null' for argument 2 'swapchain' in 'vkGetSwapchainCounterEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'counter' in 'vkGetSwapchainCounterEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p2 = static_cast<int32_t>(info[2].As<Napi::Number>().Int64Value());

  Napi::Object obj3;
  uint64_t $p3 = 0;
  if (info[3].IsObject()) {
    obj3 = info[3].As<Napi::Object>();
    if (!obj3.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 4 'pCounterValue' in 'vkGetSwapchainCounterEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj3.Get("$");
    
    $p3 = static_cast<uint64_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 4 'pCounterValue' in 'vkGetSwapchainCounterEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetSwapchainCounterEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    static_cast<VkSurfaceCounterFlagBitsEXT>($p2),
    &$p3
  );
    Napi::BigInt pnum3 = Napi::BigInt::New(env, (uint64_t)$p3);
    if (info[3].IsObject()) obj3.Set("$", pnum3);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceSurfaceCapabilities2EXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceSurfaceCapabilities2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSurfaceKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSurfaceKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSurfaceKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSurfaceKHR* instance = reinterpret_cast<VkSurfaceKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSurfaceKHR' or 'null' for argument 2 'surface' in 'vkGetPhysicalDeviceSurfaceCapabilities2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkSurfaceCapabilities2EXT *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT) {
      NapiObjectTypeError(info[2], "argument 3", "VkSurfaceCapabilities2EXT");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSurfaceCapabilities2EXT* instance = reinterpret_cast<VkSurfaceCapabilities2EXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSurfaceCapabilities2EXT' or 'null' for argument 3 'pSurfaceCapabilities' in 'vkGetPhysicalDeviceSurfaceCapabilities2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetPhysicalDeviceSurfaceCapabilities2EXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkEnumeratePhysicalDeviceGroups(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkInstance *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkInstance") {
      NapiObjectTypeError(info[0], "argument 1", "VkInstance");
      return env.Undefined();
    }
    obj0 = obj;
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 1 'instance' in 'vkEnumeratePhysicalDeviceGroups'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pPhysicalDeviceGroupCount' in 'vkEnumeratePhysicalDeviceGroups'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pPhysicalDeviceGroupCount' in 'vkEnumeratePhysicalDeviceGroups'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkPhysicalDeviceGroupProperties>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[1].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[2].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pPhysicalDeviceGroupProperties' in 'vkEnumeratePhysicalDeviceGroups'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkPhysicalDeviceGroupProperties> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDeviceGroupProperties") {
        NapiObjectTypeError(info[2], "argument 3", "VkPhysicalDeviceGroupProperties");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkPhysicalDeviceGroupProperties* instance = reinterpret_cast<VkPhysicalDeviceGroupProperties*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkPhysicalDeviceGroupProperties>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pPhysicalDeviceGroupProperties' in 'vkEnumeratePhysicalDeviceGroups'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkEnumeratePhysicalDeviceGroups(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    &$p1,
    $p2 ? (VkPhysicalDeviceGroupProperties *) $p2.get()->data() : nullptr
  );
    if (info[1].IsObject()) obj1.Set("$", $p1);
  if (info[2].IsArray()) {
    VkPhysicalDeviceGroupProperties* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetDeviceGroupPeerMemoryFeatures(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetDeviceGroupPeerMemoryFeatures'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'heapIndex' in 'vkGetDeviceGroupPeerMemoryFeatures'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'localDeviceIndex' in 'vkGetDeviceGroupPeerMemoryFeatures'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'remoteDeviceIndex' in 'vkGetDeviceGroupPeerMemoryFeatures'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  Napi::Object obj4;
  int32_t $p4 = 0;
  if (info[4].IsObject()) {
    obj4 = info[4].As<Napi::Object>();
    if (!obj4.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 5 'pPeerMemoryFeatures' in 'vkGetDeviceGroupPeerMemoryFeatures'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj4.Get("$");
    
    $p4 = static_cast<int32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 5 'pPeerMemoryFeatures' in 'vkGetDeviceGroupPeerMemoryFeatures'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetDeviceGroupPeerMemoryFeatures(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3,
    reinterpret_cast<VkPeerMemoryFeatureFlags *>(&$p4)
  );
    if (info[4].IsObject()) obj4.Set("$", $p4);
  
  
  return env.Undefined();
  
};

Napi::Value _vkBindBufferMemory2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkBindBufferMemory2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'bindInfoCount' in 'vkBindBufferMemory2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkBindBufferMemoryInfo>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pBindInfos' in 'vkBindBufferMemory2'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkBindBufferMemoryInfo> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBindBufferMemoryInfo") {
        NapiObjectTypeError(info[2], "argument 3", "VkBindBufferMemoryInfo");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkBindBufferMemoryInfo* instance = reinterpret_cast<VkBindBufferMemoryInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkBindBufferMemoryInfo>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pBindInfos' in 'vkBindBufferMemory2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkBindBufferMemory2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkBindBufferMemoryInfo *) $p2.get()->data() : nullptr
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkBindImageMemory2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkBindImageMemory2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'bindInfoCount' in 'vkBindImageMemory2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkBindImageMemoryInfo>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pBindInfos' in 'vkBindImageMemory2'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkBindImageMemoryInfo> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBindImageMemoryInfo") {
        NapiObjectTypeError(info[2], "argument 3", "VkBindImageMemoryInfo");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkBindImageMemoryInfo* instance = reinterpret_cast<VkBindImageMemoryInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkBindImageMemoryInfo>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pBindInfos' in 'vkBindImageMemory2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = vkBindImageMemory2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkBindImageMemoryInfo *) $p2.get()->data() : nullptr
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdSetDeviceMask(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetDeviceMask'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'deviceMask' in 'vkCmdSetDeviceMask'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());
vkCmdSetDeviceMask(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetDeviceGroupPresentCapabilitiesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetDeviceGroupPresentCapabilitiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeviceGroupPresentCapabilitiesKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkDeviceGroupPresentCapabilitiesKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDeviceGroupPresentCapabilitiesKHR* instance = reinterpret_cast<VkDeviceGroupPresentCapabilitiesKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeviceGroupPresentCapabilitiesKHR' or 'null' for argument 2 'pDeviceGroupPresentCapabilities' in 'vkGetDeviceGroupPresentCapabilitiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetDeviceGroupPresentCapabilitiesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  if (info[1].IsObject()) {
     Napi::Object obj = info[1].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p1));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetDeviceGroupSurfacePresentModesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetDeviceGroupSurfacePresentModesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSurfaceKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSurfaceKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSurfaceKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSurfaceKHR* instance = reinterpret_cast<VkSurfaceKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSurfaceKHR' or 'null' for argument 2 'surface' in 'vkGetDeviceGroupSurfacePresentModesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  int32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pModes' in 'vkGetDeviceGroupSurfacePresentModesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<int32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pModes' in 'vkGetDeviceGroupSurfacePresentModesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetDeviceGroupSurfacePresentModesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    reinterpret_cast<VkDeviceGroupPresentModeFlagsKHR *>(&$p2)
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkAcquireNextImage2KHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkAcquireNextImage2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkAcquireNextImageInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkAcquireNextImageInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkAcquireNextImageInfoKHR* instance = reinterpret_cast<VkAcquireNextImageInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAcquireNextImageInfoKHR' or 'null' for argument 2 'pAcquireInfo' in 'vkAcquireNextImage2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pImageIndex' in 'vkAcquireNextImage2KHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pImageIndex' in 'vkAcquireNextImage2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkAcquireNextImage2KHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    &$p2
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdDispatchBase(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDispatchBase'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'baseGroupX' in 'vkCmdDispatchBase'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'baseGroupY' in 'vkCmdDispatchBase'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'baseGroupZ' in 'vkCmdDispatchBase'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'groupCountX' in 'vkCmdDispatchBase'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'groupCountY' in 'vkCmdDispatchBase'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p5 = static_cast<uint32_t>(info[5].As<Napi::Number>().Int64Value());

  if (!info[6].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 7 'groupCountZ' in 'vkCmdDispatchBase'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p6 = static_cast<uint32_t>(info[6].As<Napi::Number>().Int64Value());
vkCmdDispatchBase(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3,
    $p4,
    $p5,
    $p6
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDevicePresentRectanglesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDevicePresentRectanglesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSurfaceKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSurfaceKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSurfaceKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSurfaceKHR* instance = reinterpret_cast<VkSurfaceKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSurfaceKHR' or 'null' for argument 2 'surface' in 'vkGetPhysicalDevicePresentRectanglesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pRectCount' in 'vkGetPhysicalDevicePresentRectanglesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pRectCount' in 'vkGetPhysicalDevicePresentRectanglesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkRect2D>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pRects' in 'vkGetPhysicalDevicePresentRectanglesKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkRect2D> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkRect2D") {
        NapiObjectTypeError(info[3], "argument 4", "VkRect2D");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkRect2D* instance = reinterpret_cast<VkRect2D*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkRect2D>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pRects' in 'vkGetPhysicalDevicePresentRectanglesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPhysicalDevicePresentRectanglesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    &$p2,
    $p3 ? (VkRect2D *) $p3.get()->data() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkRect2D* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateDescriptorUpdateTemplate(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateDescriptorUpdateTemplate'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDescriptorUpdateTemplateCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkDescriptorUpdateTemplateCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDescriptorUpdateTemplateCreateInfo* instance = reinterpret_cast<VkDescriptorUpdateTemplateCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorUpdateTemplateCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateDescriptorUpdateTemplate'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkDescriptorUpdateTemplate *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDescriptorUpdateTemplate") {
      NapiObjectTypeError(info[3], "argument 4", "VkDescriptorUpdateTemplate");
      return env.Undefined();
    }
    obj3 = obj;
    VkDescriptorUpdateTemplate* instance = reinterpret_cast<VkDescriptorUpdateTemplate*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorUpdateTemplate' or 'null' for argument 4 'pDescriptorUpdateTemplate' in 'vkCreateDescriptorUpdateTemplate'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateDescriptorUpdateTemplate(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyDescriptorUpdateTemplate(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyDescriptorUpdateTemplate'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDescriptorUpdateTemplate *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDescriptorUpdateTemplate") {
      NapiObjectTypeError(info[1], "argument 2", "VkDescriptorUpdateTemplate");
      return env.Undefined();
    }
    obj1 = obj;
    VkDescriptorUpdateTemplate* instance = reinterpret_cast<VkDescriptorUpdateTemplate*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorUpdateTemplate' or 'null' for argument 2 'descriptorUpdateTemplate' in 'vkDestroyDescriptorUpdateTemplate'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroyDescriptorUpdateTemplate(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkUpdateDescriptorSetWithTemplate(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkUpdateDescriptorSetWithTemplate'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDescriptorSet *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDescriptorSet") {
      NapiObjectTypeError(info[1], "argument 2", "VkDescriptorSet");
      return env.Undefined();
    }
    obj1 = obj;
    VkDescriptorSet* instance = reinterpret_cast<VkDescriptorSet*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorSet' or 'null' for argument 2 'descriptorSet' in 'vkUpdateDescriptorSetWithTemplate'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkDescriptorUpdateTemplate *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDescriptorUpdateTemplate") {
      NapiObjectTypeError(info[2], "argument 3", "VkDescriptorUpdateTemplate");
      return env.Undefined();
    }
    obj2 = obj;
    VkDescriptorUpdateTemplate* instance = reinterpret_cast<VkDescriptorUpdateTemplate*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorUpdateTemplate' or 'null' for argument 3 'descriptorUpdateTemplate' in 'vkUpdateDescriptorSetWithTemplate'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  void* $p3 = nullptr;
  if (info[3].IsArrayBuffer()) {
    Napi::ArrayBuffer buf = info[3].As<Napi::ArrayBuffer>();
    $p3 = buf.Data();
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Expected 'ArrayBuffer' or 'null' for argument 4 'pData' in 'vkUpdateDescriptorSetWithTemplate'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkUpdateDescriptorSetWithTemplate(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2,
    info[3].IsNull() ? nullptr : $p3
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdPushDescriptorSetWithTemplateKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdPushDescriptorSetWithTemplateKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDescriptorUpdateTemplate *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDescriptorUpdateTemplate") {
      NapiObjectTypeError(info[1], "argument 2", "VkDescriptorUpdateTemplate");
      return env.Undefined();
    }
    obj1 = obj;
    VkDescriptorUpdateTemplate* instance = reinterpret_cast<VkDescriptorUpdateTemplate*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorUpdateTemplate' or 'null' for argument 2 'descriptorUpdateTemplate' in 'vkCmdPushDescriptorSetWithTemplateKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkPipelineLayout *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineLayout") {
      NapiObjectTypeError(info[2], "argument 3", "VkPipelineLayout");
      return env.Undefined();
    }
    obj2 = obj;
    VkPipelineLayout* instance = reinterpret_cast<VkPipelineLayout*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineLayout' or 'null' for argument 3 'layout' in 'vkCmdPushDescriptorSetWithTemplateKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'set' in 'vkCmdPushDescriptorSetWithTemplateKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  void* $p4 = nullptr;
  if (info[4].IsArrayBuffer()) {
    Napi::ArrayBuffer buf = info[4].As<Napi::ArrayBuffer>();
    $p4 = buf.Data();
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Expected 'ArrayBuffer' or 'null' for argument 5 'pData' in 'vkCmdPushDescriptorSetWithTemplateKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdPushDescriptorSetWithTemplateKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2,
    $p3,
    info[4].IsNull() ? nullptr : $p4
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkSetHdrMetadataEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkSetHdrMetadataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'swapchainCount' in 'vkSetHdrMetadataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkSwapchainKHR>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pSwapchains' in 'vkSetHdrMetadataEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkSwapchainKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSwapchainKHR") {
        NapiObjectTypeError(info[0], "argument 3", "VkSwapchainKHR");
        return env.Undefined();
      }
      VkSwapchainKHR* instance = reinterpret_cast<VkSwapchainKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkSwapchainKHR>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pSwapchains' in 'vkSetHdrMetadataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<std::vector<VkHdrMetadataEXT>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pMetadata' in 'vkSetHdrMetadataEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkHdrMetadataEXT> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkHdrMetadataEXT") {
        NapiObjectTypeError(info[3], "argument 4", "VkHdrMetadataEXT");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkHdrMetadataEXT* instance = reinterpret_cast<VkHdrMetadataEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkHdrMetadataEXT>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pMetadata' in 'vkSetHdrMetadataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkSetHdrMetadataEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkSwapchainKHR *) $p2.get()->data() : nullptr,
    $p3 ? (const VkHdrMetadataEXT *) $p3.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetSwapchainStatusKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetSwapchainStatusKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSwapchainKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSwapchainKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSwapchainKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSwapchainKHR* instance = reinterpret_cast<VkSwapchainKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSwapchainKHR' or 'null' for argument 2 'swapchain' in 'vkGetSwapchainStatusKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetSwapchainStatusKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetRefreshCycleDurationGOOGLE(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetRefreshCycleDurationGOOGLE'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSwapchainKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSwapchainKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSwapchainKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSwapchainKHR* instance = reinterpret_cast<VkSwapchainKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSwapchainKHR' or 'null' for argument 2 'swapchain' in 'vkGetRefreshCycleDurationGOOGLE'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkRefreshCycleDurationGOOGLE *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkRefreshCycleDurationGOOGLE") {
      NapiObjectTypeError(info[2], "argument 3", "VkRefreshCycleDurationGOOGLE");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkRefreshCycleDurationGOOGLE* instance = reinterpret_cast<VkRefreshCycleDurationGOOGLE*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkRefreshCycleDurationGOOGLE' or 'null' for argument 3 'pDisplayTimingProperties' in 'vkGetRefreshCycleDurationGOOGLE'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetRefreshCycleDurationGOOGLE(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPastPresentationTimingGOOGLE(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetPastPresentationTimingGOOGLE'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSwapchainKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSwapchainKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSwapchainKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSwapchainKHR* instance = reinterpret_cast<VkSwapchainKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSwapchainKHR' or 'null' for argument 2 'swapchain' in 'vkGetPastPresentationTimingGOOGLE'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pPresentationTimingCount' in 'vkGetPastPresentationTimingGOOGLE'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pPresentationTimingCount' in 'vkGetPastPresentationTimingGOOGLE'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkPastPresentationTimingGOOGLE>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pPresentationTimings' in 'vkGetPastPresentationTimingGOOGLE'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkPastPresentationTimingGOOGLE> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPastPresentationTimingGOOGLE") {
        NapiObjectTypeError(info[3], "argument 4", "VkPastPresentationTimingGOOGLE");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkPastPresentationTimingGOOGLE* instance = reinterpret_cast<VkPastPresentationTimingGOOGLE*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkPastPresentationTimingGOOGLE>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pPresentationTimings' in 'vkGetPastPresentationTimingGOOGLE'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPastPresentationTimingGOOGLE(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    &$p2,
    $p3 ? (VkPastPresentationTimingGOOGLE *) $p3.get()->data() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkPastPresentationTimingGOOGLE* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdSetViewportWScalingNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetViewportWScalingNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'firstViewport' in 'vkCmdSetViewportWScalingNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'viewportCount' in 'vkCmdSetViewportWScalingNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkViewportWScalingNV>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pViewportWScalings' in 'vkCmdSetViewportWScalingNV'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkViewportWScalingNV> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkViewportWScalingNV") {
        NapiObjectTypeError(info[3], "argument 4", "VkViewportWScalingNV");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkViewportWScalingNV* instance = reinterpret_cast<VkViewportWScalingNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkViewportWScalingNV>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pViewportWScalings' in 'vkCmdSetViewportWScalingNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkCmdSetViewportWScalingNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3 ? (const VkViewportWScalingNV *) $p3.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetDiscardRectangleEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetDiscardRectangleEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'firstDiscardRectangle' in 'vkCmdSetDiscardRectangleEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'discardRectangleCount' in 'vkCmdSetDiscardRectangleEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkRect2D>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pDiscardRectangles' in 'vkCmdSetDiscardRectangleEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkRect2D> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkRect2D") {
        NapiObjectTypeError(info[3], "argument 4", "VkRect2D");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkRect2D* instance = reinterpret_cast<VkRect2D*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkRect2D>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pDiscardRectangles' in 'vkCmdSetDiscardRectangleEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkCmdSetDiscardRectangleEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3 ? (const VkRect2D *) $p3.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetSampleLocationsEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetSampleLocationsEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSampleLocationsInfoEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkSampleLocationsInfoEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSampleLocationsInfoEXT* instance = reinterpret_cast<VkSampleLocationsInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSampleLocationsInfoEXT' or 'null' for argument 2 'pSampleLocationsInfo' in 'vkCmdSetSampleLocationsEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdSetSampleLocationsEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceMultisamplePropertiesEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceMultisamplePropertiesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'samples' in 'vkGetPhysicalDeviceMultisamplePropertiesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p1 = static_cast<int32_t>(info[1].As<Napi::Number>().Int64Value());

  Napi::Object obj2;
  VkMultisamplePropertiesEXT *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT) {
      NapiObjectTypeError(info[2], "argument 3", "VkMultisamplePropertiesEXT");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkMultisamplePropertiesEXT* instance = reinterpret_cast<VkMultisamplePropertiesEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkMultisamplePropertiesEXT' or 'null' for argument 3 'pMultisampleProperties' in 'vkGetPhysicalDeviceMultisamplePropertiesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkGetPhysicalDeviceMultisamplePropertiesEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    static_cast<VkSampleCountFlagBits>($p1),
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceSurfaceCapabilities2KHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceSurfaceCapabilities2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPhysicalDeviceSurfaceInfo2KHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkPhysicalDeviceSurfaceInfo2KHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPhysicalDeviceSurfaceInfo2KHR* instance = reinterpret_cast<VkPhysicalDeviceSurfaceInfo2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDeviceSurfaceInfo2KHR' or 'null' for argument 2 'pSurfaceInfo' in 'vkGetPhysicalDeviceSurfaceCapabilities2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkSurfaceCapabilities2KHR *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR) {
      NapiObjectTypeError(info[2], "argument 3", "VkSurfaceCapabilities2KHR");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSurfaceCapabilities2KHR* instance = reinterpret_cast<VkSurfaceCapabilities2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSurfaceCapabilities2KHR' or 'null' for argument 3 'pSurfaceCapabilities' in 'vkGetPhysicalDeviceSurfaceCapabilities2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetPhysicalDeviceSurfaceCapabilities2KHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceSurfaceFormats2KHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceSurfaceFormats2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPhysicalDeviceSurfaceInfo2KHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkPhysicalDeviceSurfaceInfo2KHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPhysicalDeviceSurfaceInfo2KHR* instance = reinterpret_cast<VkPhysicalDeviceSurfaceInfo2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDeviceSurfaceInfo2KHR' or 'null' for argument 2 'pSurfaceInfo' in 'vkGetPhysicalDeviceSurfaceFormats2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pSurfaceFormatCount' in 'vkGetPhysicalDeviceSurfaceFormats2KHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pSurfaceFormatCount' in 'vkGetPhysicalDeviceSurfaceFormats2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkSurfaceFormat2KHR>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pSurfaceFormats' in 'vkGetPhysicalDeviceSurfaceFormats2KHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkSurfaceFormat2KHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSurfaceFormat2KHR") {
        NapiObjectTypeError(info[3], "argument 4", "VkSurfaceFormat2KHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkSurfaceFormat2KHR* instance = reinterpret_cast<VkSurfaceFormat2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkSurfaceFormat2KHR>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pSurfaceFormats' in 'vkGetPhysicalDeviceSurfaceFormats2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPhysicalDeviceSurfaceFormats2KHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    &$p2,
    $p3 ? (VkSurfaceFormat2KHR *) $p3.get()->data() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkSurfaceFormat2KHR* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceDisplayProperties2KHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceDisplayProperties2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pPropertyCount' in 'vkGetPhysicalDeviceDisplayProperties2KHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pPropertyCount' in 'vkGetPhysicalDeviceDisplayProperties2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkDisplayProperties2KHR>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[1].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[2].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pProperties' in 'vkGetPhysicalDeviceDisplayProperties2KHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkDisplayProperties2KHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayProperties2KHR") {
        NapiObjectTypeError(info[2], "argument 3", "VkDisplayProperties2KHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkDisplayProperties2KHR* instance = reinterpret_cast<VkDisplayProperties2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkDisplayProperties2KHR>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pProperties' in 'vkGetPhysicalDeviceDisplayProperties2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPhysicalDeviceDisplayProperties2KHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    &$p1,
    $p2 ? (VkDisplayProperties2KHR *) $p2.get()->data() : nullptr
  );
    if (info[1].IsObject()) obj1.Set("$", $p1);
  if (info[2].IsArray()) {
    VkDisplayProperties2KHR* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceDisplayPlaneProperties2KHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceDisplayPlaneProperties2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pPropertyCount' in 'vkGetPhysicalDeviceDisplayPlaneProperties2KHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pPropertyCount' in 'vkGetPhysicalDeviceDisplayPlaneProperties2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkDisplayPlaneProperties2KHR>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[1].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[2].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pProperties' in 'vkGetPhysicalDeviceDisplayPlaneProperties2KHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkDisplayPlaneProperties2KHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayPlaneProperties2KHR") {
        NapiObjectTypeError(info[2], "argument 3", "VkDisplayPlaneProperties2KHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkDisplayPlaneProperties2KHR* instance = reinterpret_cast<VkDisplayPlaneProperties2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkDisplayPlaneProperties2KHR>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pProperties' in 'vkGetPhysicalDeviceDisplayPlaneProperties2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    &$p1,
    $p2 ? (VkDisplayPlaneProperties2KHR *) $p2.get()->data() : nullptr
  );
    if (info[1].IsObject()) obj1.Set("$", $p1);
  if (info[2].IsArray()) {
    VkDisplayPlaneProperties2KHR* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetDisplayModeProperties2KHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetDisplayModeProperties2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDisplayKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDisplayKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDisplayKHR* instance = reinterpret_cast<VkDisplayKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDisplayKHR' or 'null' for argument 2 'display' in 'vkGetDisplayModeProperties2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pPropertyCount' in 'vkGetDisplayModeProperties2KHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pPropertyCount' in 'vkGetDisplayModeProperties2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkDisplayModeProperties2KHR>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pProperties' in 'vkGetDisplayModeProperties2KHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkDisplayModeProperties2KHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDisplayModeProperties2KHR") {
        NapiObjectTypeError(info[3], "argument 4", "VkDisplayModeProperties2KHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkDisplayModeProperties2KHR* instance = reinterpret_cast<VkDisplayModeProperties2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkDisplayModeProperties2KHR>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pProperties' in 'vkGetDisplayModeProperties2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetDisplayModeProperties2KHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    &$p2,
    $p3 ? (VkDisplayModeProperties2KHR *) $p3.get()->data() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkDisplayModeProperties2KHR* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetDisplayPlaneCapabilities2KHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetDisplayPlaneCapabilities2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDisplayPlaneInfo2KHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkDisplayPlaneInfo2KHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDisplayPlaneInfo2KHR* instance = reinterpret_cast<VkDisplayPlaneInfo2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDisplayPlaneInfo2KHR' or 'null' for argument 2 'pDisplayPlaneInfo' in 'vkGetDisplayPlaneCapabilities2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkDisplayPlaneCapabilities2KHR *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR) {
      NapiObjectTypeError(info[2], "argument 3", "VkDisplayPlaneCapabilities2KHR");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDisplayPlaneCapabilities2KHR* instance = reinterpret_cast<VkDisplayPlaneCapabilities2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDisplayPlaneCapabilities2KHR' or 'null' for argument 3 'pCapabilities' in 'vkGetDisplayPlaneCapabilities2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetDisplayPlaneCapabilities2KHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetBufferMemoryRequirements2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetBufferMemoryRequirements2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBufferMemoryRequirementsInfo2 *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2) {
      NapiObjectTypeError(info[1], "argument 2", "VkBufferMemoryRequirementsInfo2");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkBufferMemoryRequirementsInfo2* instance = reinterpret_cast<VkBufferMemoryRequirementsInfo2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBufferMemoryRequirementsInfo2' or 'null' for argument 2 'pInfo' in 'vkGetBufferMemoryRequirements2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkMemoryRequirements2 *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2) {
      NapiObjectTypeError(info[2], "argument 3", "VkMemoryRequirements2");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkMemoryRequirements2* instance = reinterpret_cast<VkMemoryRequirements2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkMemoryRequirements2' or 'null' for argument 3 'pMemoryRequirements' in 'vkGetBufferMemoryRequirements2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetBufferMemoryRequirements2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetImageMemoryRequirements2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetImageMemoryRequirements2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImageMemoryRequirementsInfo2 *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2) {
      NapiObjectTypeError(info[1], "argument 2", "VkImageMemoryRequirementsInfo2");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkImageMemoryRequirementsInfo2* instance = reinterpret_cast<VkImageMemoryRequirementsInfo2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImageMemoryRequirementsInfo2' or 'null' for argument 2 'pInfo' in 'vkGetImageMemoryRequirements2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkMemoryRequirements2 *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2) {
      NapiObjectTypeError(info[2], "argument 3", "VkMemoryRequirements2");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkMemoryRequirements2* instance = reinterpret_cast<VkMemoryRequirements2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkMemoryRequirements2' or 'null' for argument 3 'pMemoryRequirements' in 'vkGetImageMemoryRequirements2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetImageMemoryRequirements2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetImageSparseMemoryRequirements2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetImageSparseMemoryRequirements2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImageSparseMemoryRequirementsInfo2 *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2) {
      NapiObjectTypeError(info[1], "argument 2", "VkImageSparseMemoryRequirementsInfo2");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkImageSparseMemoryRequirementsInfo2* instance = reinterpret_cast<VkImageSparseMemoryRequirementsInfo2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImageSparseMemoryRequirementsInfo2' or 'null' for argument 2 'pInfo' in 'vkGetImageSparseMemoryRequirements2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pSparseMemoryRequirementCount' in 'vkGetImageSparseMemoryRequirements2'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pSparseMemoryRequirementCount' in 'vkGetImageSparseMemoryRequirements2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkSparseImageMemoryRequirements2>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pSparseMemoryRequirements' in 'vkGetImageSparseMemoryRequirements2'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkSparseImageMemoryRequirements2> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSparseImageMemoryRequirements2") {
        NapiObjectTypeError(info[3], "argument 4", "VkSparseImageMemoryRequirements2");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkSparseImageMemoryRequirements2* instance = reinterpret_cast<VkSparseImageMemoryRequirements2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkSparseImageMemoryRequirements2>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pSparseMemoryRequirements' in 'vkGetImageSparseMemoryRequirements2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkGetImageSparseMemoryRequirements2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    &$p2,
    $p3 ? (VkSparseImageMemoryRequirements2 *) $p3.get()->data() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkSparseImageMemoryRequirements2* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateSamplerYcbcrConversion(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateSamplerYcbcrConversion'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSamplerYcbcrConversionCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkSamplerYcbcrConversionCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSamplerYcbcrConversionCreateInfo* instance = reinterpret_cast<VkSamplerYcbcrConversionCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSamplerYcbcrConversionCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkCreateSamplerYcbcrConversion'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkSamplerYcbcrConversion *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSamplerYcbcrConversion") {
      NapiObjectTypeError(info[3], "argument 4", "VkSamplerYcbcrConversion");
      return env.Undefined();
    }
    obj3 = obj;
    VkSamplerYcbcrConversion* instance = reinterpret_cast<VkSamplerYcbcrConversion*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSamplerYcbcrConversion' or 'null' for argument 4 'pYcbcrConversion' in 'vkCreateSamplerYcbcrConversion'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateSamplerYcbcrConversion(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroySamplerYcbcrConversion(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroySamplerYcbcrConversion'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSamplerYcbcrConversion *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSamplerYcbcrConversion") {
      NapiObjectTypeError(info[1], "argument 2", "VkSamplerYcbcrConversion");
      return env.Undefined();
    }
    obj1 = obj;
    VkSamplerYcbcrConversion* instance = reinterpret_cast<VkSamplerYcbcrConversion*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSamplerYcbcrConversion' or 'null' for argument 2 'ycbcrConversion' in 'vkDestroySamplerYcbcrConversion'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

vkDestroySamplerYcbcrConversion(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetDeviceQueue2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetDeviceQueue2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeviceQueueInfo2 *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2) {
      NapiObjectTypeError(info[1], "argument 2", "VkDeviceQueueInfo2");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDeviceQueueInfo2* instance = reinterpret_cast<VkDeviceQueueInfo2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeviceQueueInfo2' or 'null' for argument 2 'pQueueInfo' in 'vkGetDeviceQueue2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkQueue *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueue") {
      NapiObjectTypeError(info[2], "argument 3", "VkQueue");
      return env.Undefined();
    }
    obj2 = obj;
    VkQueue* instance = reinterpret_cast<VkQueue*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueue' or 'null' for argument 3 'pQueue' in 'vkGetDeviceQueue2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetDeviceQueue2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateValidationCacheEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateValidationCacheEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkValidationCacheCreateInfoEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkValidationCacheCreateInfoEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkValidationCacheCreateInfoEXT* instance = reinterpret_cast<VkValidationCacheCreateInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkValidationCacheCreateInfoEXT' or 'null' for argument 2 'pCreateInfo' in 'vkCreateValidationCacheEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkValidationCacheEXT *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkValidationCacheEXT") {
      NapiObjectTypeError(info[3], "argument 4", "VkValidationCacheEXT");
      return env.Undefined();
    }
    obj3 = obj;
    VkValidationCacheEXT* instance = reinterpret_cast<VkValidationCacheEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkValidationCacheEXT' or 'null' for argument 4 'pValidationCache' in 'vkCreateValidationCacheEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCreateValidationCacheEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyValidationCacheEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyValidationCacheEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkValidationCacheEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkValidationCacheEXT") {
      NapiObjectTypeError(info[1], "argument 2", "VkValidationCacheEXT");
      return env.Undefined();
    }
    obj1 = obj;
    VkValidationCacheEXT* instance = reinterpret_cast<VkValidationCacheEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkValidationCacheEXT' or 'null' for argument 2 'validationCache' in 'vkDestroyValidationCacheEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkDestroyValidationCacheEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetValidationCacheDataEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetValidationCacheDataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkValidationCacheEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkValidationCacheEXT") {
      NapiObjectTypeError(info[1], "argument 2", "VkValidationCacheEXT");
      return env.Undefined();
    }
    obj1 = obj;
    VkValidationCacheEXT* instance = reinterpret_cast<VkValidationCacheEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkValidationCacheEXT' or 'null' for argument 2 'validationCache' in 'vkGetValidationCacheDataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  size_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pDataSize' in 'vkGetValidationCacheDataEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<size_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pDataSize' in 'vkGetValidationCacheDataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  void* $p3 = nullptr;
  if (info[3].IsArrayBuffer()) {
    Napi::ArrayBuffer buf = info[3].As<Napi::ArrayBuffer>();
    $p3 = buf.Data();
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Expected 'ArrayBuffer' or 'null' for argument 4 'pData' in 'vkGetValidationCacheDataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetValidationCacheDataEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    &$p2,
    info[3].IsNull() ? nullptr : $p3
  );
    Napi::BigInt pnum2 = Napi::BigInt::New(env, (uint64_t)$p2);
    if (info[2].IsObject()) obj2.Set("$", pnum2);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkMergeValidationCachesEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkMergeValidationCachesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkValidationCacheEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkValidationCacheEXT") {
      NapiObjectTypeError(info[1], "argument 2", "VkValidationCacheEXT");
      return env.Undefined();
    }
    obj1 = obj;
    VkValidationCacheEXT* instance = reinterpret_cast<VkValidationCacheEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkValidationCacheEXT' or 'null' for argument 2 'dstCache' in 'vkMergeValidationCachesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'srcCacheCount' in 'vkMergeValidationCachesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkValidationCacheEXT>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pSrcCaches' in 'vkMergeValidationCachesEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkValidationCacheEXT> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkValidationCacheEXT") {
        NapiObjectTypeError(info[0], "argument 4", "VkValidationCacheEXT");
        return env.Undefined();
      }
      VkValidationCacheEXT* instance = reinterpret_cast<VkValidationCacheEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkValidationCacheEXT>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pSrcCaches' in 'vkMergeValidationCachesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkMergeValidationCachesEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3 ? (const VkValidationCacheEXT *) $p3.get()->data() : nullptr
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetDescriptorSetLayoutSupport(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetDescriptorSetLayoutSupport'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDescriptorSetLayoutCreateInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkDescriptorSetLayoutCreateInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDescriptorSetLayoutCreateInfo* instance = reinterpret_cast<VkDescriptorSetLayoutCreateInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorSetLayoutCreateInfo' or 'null' for argument 2 'pCreateInfo' in 'vkGetDescriptorSetLayoutSupport'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkDescriptorSetLayoutSupport *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT) {
      NapiObjectTypeError(info[2], "argument 3", "VkDescriptorSetLayoutSupport");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDescriptorSetLayoutSupport* instance = reinterpret_cast<VkDescriptorSetLayoutSupport*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDescriptorSetLayoutSupport' or 'null' for argument 3 'pSupport' in 'vkGetDescriptorSetLayoutSupport'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkGetDescriptorSetLayoutSupport(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetShaderInfoAMD(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetShaderInfoAMD'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipeline *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipeline") {
      NapiObjectTypeError(info[1], "argument 2", "VkPipeline");
      return env.Undefined();
    }
    obj1 = obj;
    VkPipeline* instance = reinterpret_cast<VkPipeline*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipeline' or 'null' for argument 2 'pipeline' in 'vkGetShaderInfoAMD'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'shaderStage' in 'vkGetShaderInfoAMD'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p2 = static_cast<int32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'infoType' in 'vkGetShaderInfoAMD'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkShaderInfoTypeAMD $p3 = static_cast<VkShaderInfoTypeAMD>(info[3].As<Napi::Number>().Int64Value());

  Napi::Object obj4;
  size_t $p4 = 0;
  if (info[4].IsObject()) {
    obj4 = info[4].As<Napi::Object>();
    if (!obj4.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 5 'pInfoSize' in 'vkGetShaderInfoAMD'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj4.Get("$");
    
    $p4 = static_cast<size_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 5 'pInfoSize' in 'vkGetShaderInfoAMD'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  void* $p5 = nullptr;
  if (info[5].IsArrayBuffer()) {
    Napi::ArrayBuffer buf = info[5].As<Napi::ArrayBuffer>();
    $p5 = buf.Data();
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Expected 'ArrayBuffer' or 'null' for argument 6 'pInfo' in 'vkGetShaderInfoAMD'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetShaderInfoAMD(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    static_cast<VkShaderStageFlagBits>($p2),
    $p3,
    &$p4,
    info[5].IsNull() ? nullptr : $p5
  );
    Napi::BigInt pnum4 = Napi::BigInt::New(env, (uint64_t)$p4);
    if (info[4].IsObject()) obj4.Set("$", pnum4);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkSetLocalDimmingAMD(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkSetLocalDimmingAMD'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSwapchainKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSwapchainKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSwapchainKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSwapchainKHR* instance = reinterpret_cast<VkSwapchainKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSwapchainKHR' or 'null' for argument 2 'swapChain' in 'vkSetLocalDimmingAMD'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsBoolean() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Boolean' or 'Number' for argument 3 'localDimmingEnable' in 'vkSetLocalDimmingAMD'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].IsBoolean() ? info[2].As<Napi::Boolean>().Value() : info[2].As<Napi::Number>().Int32Value());
$vkSetLocalDimmingAMD(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceCalibrateableTimeDomainsEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pTimeDomainCount' in 'vkGetPhysicalDeviceCalibrateableTimeDomainsEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pTimeDomainCount' in 'vkGetPhysicalDeviceCalibrateableTimeDomainsEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<int32_t*> $p2 = nullptr;

  if (info[2].IsTypedArray()) {

    if (info[2].As<Napi::TypedArray>().TypedArrayType() != napi_int32_array) {
      Napi::TypeError::New(env, "Invalid type for argument 3 'pTimeDomains' in 'vkGetPhysicalDeviceCalibrateableTimeDomainsEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
      if (info[2].As<Napi::TypedArray>().ElementLength() != $p1) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pTimeDomains' in 'vkGetPhysicalDeviceCalibrateableTimeDomainsEXT'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    int32_t* data = getTypedArrayData<int32_t>(info[2]);
    $p2 = std::make_shared<int32_t*>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pTimeDomains' in 'vkGetPhysicalDeviceCalibrateableTimeDomainsEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    &$p1,
    $p2 ? (VkTimeDomainEXT *) *$p2.get() : nullptr
  );
    if (info[1].IsObject()) obj1.Set("$", $p1);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetCalibratedTimestampsEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetCalibratedTimestampsEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'timestampCount' in 'vkGetCalibratedTimestampsEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkCalibratedTimestampInfoEXT>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pTimestampInfos' in 'vkGetCalibratedTimestampsEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkCalibratedTimestampInfoEXT> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCalibratedTimestampInfoEXT") {
        NapiObjectTypeError(info[2], "argument 3", "VkCalibratedTimestampInfoEXT");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkCalibratedTimestampInfoEXT* instance = reinterpret_cast<VkCalibratedTimestampInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkCalibratedTimestampInfoEXT>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pTimestampInfos' in 'vkGetCalibratedTimestampsEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<uint64_t*> $p3 = nullptr;

  if (info[3].IsTypedArray()) {

    if (info[3].As<Napi::TypedArray>().TypedArrayType() != napi_biguint64_array) {
      Napi::TypeError::New(env, "Invalid type for argument 4 'pTimestamps' in 'vkGetCalibratedTimestampsEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
      if (info[3].As<Napi::TypedArray>().ElementLength() != $p1) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pTimestamps' in 'vkGetCalibratedTimestampsEXT'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    uint64_t* data = getTypedArrayData<uint64_t>(info[3]);
    $p3 = std::make_shared<uint64_t*>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pTimestamps' in 'vkGetCalibratedTimestampsEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj4;
  uint64_t $p4 = 0;
  if (info[4].IsObject()) {
    obj4 = info[4].As<Napi::Object>();
    if (!obj4.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 5 'pMaxDeviation' in 'vkGetCalibratedTimestampsEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj4.Get("$");
    
    $p4 = static_cast<uint64_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 5 'pMaxDeviation' in 'vkGetCalibratedTimestampsEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetCalibratedTimestampsEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkCalibratedTimestampInfoEXT *) $p2.get()->data() : nullptr,
    $p3 ? *$p3.get() : nullptr,
    &$p4
  );
    Napi::BigInt pnum4 = Napi::BigInt::New(env, (uint64_t)$p4);
    if (info[4].IsObject()) obj4.Set("$", pnum4);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkSetDebugUtilsObjectNameEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkSetDebugUtilsObjectNameEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDebugUtilsObjectNameInfoEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkDebugUtilsObjectNameInfoEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDebugUtilsObjectNameInfoEXT* instance = reinterpret_cast<VkDebugUtilsObjectNameInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugUtilsObjectNameInfoEXT' or 'null' for argument 2 'pNameInfo' in 'vkSetDebugUtilsObjectNameEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkSetDebugUtilsObjectNameEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkSetDebugUtilsObjectTagEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkSetDebugUtilsObjectTagEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDebugUtilsObjectTagInfoEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkDebugUtilsObjectTagInfoEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDebugUtilsObjectTagInfoEXT* instance = reinterpret_cast<VkDebugUtilsObjectTagInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugUtilsObjectTagInfoEXT' or 'null' for argument 2 'pTagInfo' in 'vkSetDebugUtilsObjectTagEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkSetDebugUtilsObjectTagEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkQueueBeginDebugUtilsLabelEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkQueue *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueue") {
      NapiObjectTypeError(info[0], "argument 1", "VkQueue");
      return env.Undefined();
    }
    obj0 = obj;
    VkQueue* instance = reinterpret_cast<VkQueue*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueue' or 'null' for argument 1 'queue' in 'vkQueueBeginDebugUtilsLabelEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDebugUtilsLabelEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkDebugUtilsLabelEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDebugUtilsLabelEXT* instance = reinterpret_cast<VkDebugUtilsLabelEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugUtilsLabelEXT' or 'null' for argument 2 'pLabelInfo' in 'vkQueueBeginDebugUtilsLabelEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkQueueBeginDebugUtilsLabelEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkQueueEndDebugUtilsLabelEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkQueue *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueue") {
      NapiObjectTypeError(info[0], "argument 1", "VkQueue");
      return env.Undefined();
    }
    obj0 = obj;
    VkQueue* instance = reinterpret_cast<VkQueue*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueue' or 'null' for argument 1 'queue' in 'vkQueueEndDebugUtilsLabelEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkQueueEndDebugUtilsLabelEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkQueueInsertDebugUtilsLabelEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkQueue *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueue") {
      NapiObjectTypeError(info[0], "argument 1", "VkQueue");
      return env.Undefined();
    }
    obj0 = obj;
    VkQueue* instance = reinterpret_cast<VkQueue*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueue' or 'null' for argument 1 'queue' in 'vkQueueInsertDebugUtilsLabelEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDebugUtilsLabelEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkDebugUtilsLabelEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDebugUtilsLabelEXT* instance = reinterpret_cast<VkDebugUtilsLabelEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugUtilsLabelEXT' or 'null' for argument 2 'pLabelInfo' in 'vkQueueInsertDebugUtilsLabelEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkQueueInsertDebugUtilsLabelEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBeginDebugUtilsLabelEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBeginDebugUtilsLabelEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDebugUtilsLabelEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkDebugUtilsLabelEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDebugUtilsLabelEXT* instance = reinterpret_cast<VkDebugUtilsLabelEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugUtilsLabelEXT' or 'null' for argument 2 'pLabelInfo' in 'vkCmdBeginDebugUtilsLabelEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdBeginDebugUtilsLabelEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdEndDebugUtilsLabelEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdEndDebugUtilsLabelEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdEndDebugUtilsLabelEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdInsertDebugUtilsLabelEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdInsertDebugUtilsLabelEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDebugUtilsLabelEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkDebugUtilsLabelEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDebugUtilsLabelEXT* instance = reinterpret_cast<VkDebugUtilsLabelEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugUtilsLabelEXT' or 'null' for argument 2 'pLabelInfo' in 'vkCmdInsertDebugUtilsLabelEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdInsertDebugUtilsLabelEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateDebugUtilsMessengerEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkInstance *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkInstance") {
      NapiObjectTypeError(info[0], "argument 1", "VkInstance");
      return env.Undefined();
    }
    obj0 = obj;
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 1 'instance' in 'vkCreateDebugUtilsMessengerEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDebugUtilsMessengerCreateInfoEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkDebugUtilsMessengerCreateInfoEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDebugUtilsMessengerCreateInfoEXT* instance = reinterpret_cast<VkDebugUtilsMessengerCreateInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugUtilsMessengerCreateInfoEXT' or 'null' for argument 2 'pCreateInfo' in 'vkCreateDebugUtilsMessengerEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkDebugUtilsMessengerEXT *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDebugUtilsMessengerEXT") {
      NapiObjectTypeError(info[3], "argument 4", "VkDebugUtilsMessengerEXT");
      return env.Undefined();
    }
    obj3 = obj;
    VkDebugUtilsMessengerEXT* instance = reinterpret_cast<VkDebugUtilsMessengerEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugUtilsMessengerEXT' or 'null' for argument 4 'pMessenger' in 'vkCreateDebugUtilsMessengerEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCreateDebugUtilsMessengerEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyDebugUtilsMessengerEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkInstance *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkInstance") {
      NapiObjectTypeError(info[0], "argument 1", "VkInstance");
      return env.Undefined();
    }
    obj0 = obj;
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 1 'instance' in 'vkDestroyDebugUtilsMessengerEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDebugUtilsMessengerEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDebugUtilsMessengerEXT") {
      NapiObjectTypeError(info[1], "argument 2", "VkDebugUtilsMessengerEXT");
      return env.Undefined();
    }
    obj1 = obj;
    VkDebugUtilsMessengerEXT* instance = reinterpret_cast<VkDebugUtilsMessengerEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugUtilsMessengerEXT' or 'null' for argument 2 'messenger' in 'vkDestroyDebugUtilsMessengerEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkDestroyDebugUtilsMessengerEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkSubmitDebugUtilsMessageEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkInstance *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkInstance") {
      NapiObjectTypeError(info[0], "argument 1", "VkInstance");
      return env.Undefined();
    }
    obj0 = obj;
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 1 'instance' in 'vkSubmitDebugUtilsMessageEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'messageSeverity' in 'vkSubmitDebugUtilsMessageEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p1 = static_cast<int32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'messageTypes' in 'vkSubmitDebugUtilsMessageEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p2 = static_cast<int32_t>(info[2].As<Napi::Number>().Int64Value());

  Napi::Object obj3;
  VkDebugUtilsMessengerCallbackDataEXT *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT) {
      NapiObjectTypeError(info[3], "argument 4", "VkDebugUtilsMessengerCallbackDataEXT");
      return env.Undefined();
    }
    obj3 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDebugUtilsMessengerCallbackDataEXT* instance = reinterpret_cast<VkDebugUtilsMessengerCallbackDataEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDebugUtilsMessengerCallbackDataEXT' or 'null' for argument 4 'pCallbackData' in 'vkSubmitDebugUtilsMessageEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkSubmitDebugUtilsMessageEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    static_cast<VkDebugUtilsMessageSeverityFlagBitsEXT>($p1),
    static_cast<VkDebugUtilsMessageTypeFlagsEXT>($p2),
    $p3
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetMemoryHostPointerPropertiesEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetMemoryHostPointerPropertiesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'handleType' in 'vkGetMemoryHostPointerPropertiesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p1 = static_cast<int32_t>(info[1].As<Napi::Number>().Int64Value());

  void* $p2 = nullptr;
  if (info[2].IsArrayBuffer()) {
    Napi::ArrayBuffer buf = info[2].As<Napi::ArrayBuffer>();
    $p2 = buf.Data();
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'ArrayBuffer' or 'null' for argument 3 'pHostPointer' in 'vkGetMemoryHostPointerPropertiesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj3;
  VkMemoryHostPointerPropertiesEXT *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT) {
      NapiObjectTypeError(info[3], "argument 4", "VkMemoryHostPointerPropertiesEXT");
      return env.Undefined();
    }
    obj3 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkMemoryHostPointerPropertiesEXT* instance = reinterpret_cast<VkMemoryHostPointerPropertiesEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkMemoryHostPointerPropertiesEXT' or 'null' for argument 4 'pMemoryHostPointerProperties' in 'vkGetMemoryHostPointerPropertiesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetMemoryHostPointerPropertiesEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    static_cast<VkExternalMemoryHandleTypeFlagBits>($p1),
    info[2].IsNull() ? nullptr : $p2,
    $p3
  );
  if (info[3].IsObject()) {
     Napi::Object obj = info[3].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p3));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdWriteBufferMarkerAMD(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdWriteBufferMarkerAMD'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'pipelineStage' in 'vkCmdWriteBufferMarkerAMD'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p1 = static_cast<int32_t>(info[1].As<Napi::Number>().Int64Value());

  Napi::Object obj2;
  VkBuffer *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[2], "argument 3", "VkBuffer");
      return env.Undefined();
    }
    obj2 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 3 'dstBuffer' in 'vkCmdWriteBufferMarkerAMD'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless3;
  if (!info[3].IsBigInt() && !info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 4 'dstOffset' in 'vkCmdWriteBufferMarkerAMD'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p3 = 0;
  if (info[3].IsBigInt()) {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::BigInt>().Int64Value(&lossless3));
  } else {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::Number>().Int64Value());
  }

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'marker' in 'vkCmdWriteBufferMarkerAMD'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());
$vkCmdWriteBufferMarkerAMD(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    static_cast<VkPipelineStageFlagBits>($p1),
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2,
    $p3,
    $p4
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreateRenderPass2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateRenderPass2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkRenderPassCreateInfo2 *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2) {
      NapiObjectTypeError(info[1], "argument 2", "VkRenderPassCreateInfo2");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkRenderPassCreateInfo2* instance = reinterpret_cast<VkRenderPassCreateInfo2*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkRenderPassCreateInfo2' or 'null' for argument 2 'pCreateInfo' in 'vkCreateRenderPass2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkRenderPass *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkRenderPass") {
      NapiObjectTypeError(info[3], "argument 4", "VkRenderPass");
      return env.Undefined();
    }
    obj3 = obj;
    VkRenderPass* instance = reinterpret_cast<VkRenderPass*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkRenderPass' or 'null' for argument 4 'pRenderPass' in 'vkCreateRenderPass2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkCreateRenderPass2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdBeginRenderPass2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBeginRenderPass2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkRenderPassBeginInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkRenderPassBeginInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkRenderPassBeginInfo* instance = reinterpret_cast<VkRenderPassBeginInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkRenderPassBeginInfo' or 'null' for argument 2 'pRenderPassBegin' in 'vkCmdBeginRenderPass2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkSubpassBeginInfo *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO) {
      NapiObjectTypeError(info[2], "argument 3", "VkSubpassBeginInfo");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSubpassBeginInfo* instance = reinterpret_cast<VkSubpassBeginInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSubpassBeginInfo' or 'null' for argument 3 'pSubpassBeginInfo' in 'vkCmdBeginRenderPass2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkCmdBeginRenderPass2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdNextSubpass2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdNextSubpass2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSubpassBeginInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkSubpassBeginInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSubpassBeginInfo* instance = reinterpret_cast<VkSubpassBeginInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSubpassBeginInfo' or 'null' for argument 2 'pSubpassBeginInfo' in 'vkCmdNextSubpass2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkSubpassEndInfo *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SUBPASS_END_INFO) {
      NapiObjectTypeError(info[2], "argument 3", "VkSubpassEndInfo");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSubpassEndInfo* instance = reinterpret_cast<VkSubpassEndInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSubpassEndInfo' or 'null' for argument 3 'pSubpassEndInfo' in 'vkCmdNextSubpass2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkCmdNextSubpass2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdEndRenderPass2(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdEndRenderPass2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSubpassEndInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SUBPASS_END_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkSubpassEndInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSubpassEndInfo* instance = reinterpret_cast<VkSubpassEndInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSubpassEndInfo' or 'null' for argument 2 'pSubpassEndInfo' in 'vkCmdEndRenderPass2'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
vkCmdEndRenderPass2(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetSemaphoreCounterValue(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetSemaphoreCounterValue'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSemaphore *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSemaphore") {
      NapiObjectTypeError(info[1], "argument 2", "VkSemaphore");
      return env.Undefined();
    }
    obj1 = obj;
    VkSemaphore* instance = reinterpret_cast<VkSemaphore*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSemaphore' or 'null' for argument 2 'semaphore' in 'vkGetSemaphoreCounterValue'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint64_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pValue' in 'vkGetSemaphoreCounterValue'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint64_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pValue' in 'vkGetSemaphoreCounterValue'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkGetSemaphoreCounterValue(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    &$p2
  );
    Napi::BigInt pnum2 = Napi::BigInt::New(env, (uint64_t)$p2);
    if (info[2].IsObject()) obj2.Set("$", pnum2);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkWaitSemaphores(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkWaitSemaphores'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSemaphoreWaitInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkSemaphoreWaitInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSemaphoreWaitInfo* instance = reinterpret_cast<VkSemaphoreWaitInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSemaphoreWaitInfo' or 'null' for argument 2 'pWaitInfo' in 'vkWaitSemaphores'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'timeout' in 'vkWaitSemaphores'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }
  int32_t out = vkWaitSemaphores(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkSignalSemaphore(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkSignalSemaphore'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSemaphoreSignalInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkSemaphoreSignalInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkSemaphoreSignalInfo* instance = reinterpret_cast<VkSemaphoreSignalInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSemaphoreSignalInfo' or 'null' for argument 2 'pSignalInfo' in 'vkSignalSemaphore'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = vkSignalSemaphore(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdDrawIndirectCount(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDrawIndirectCount'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'buffer' in 'vkCmdDrawIndirectCount'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'offset' in 'vkCmdDrawIndirectCount'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }

  Napi::Object obj3;
  VkBuffer *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[3], "argument 4", "VkBuffer");
      return env.Undefined();
    }
    obj3 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 4 'countBuffer' in 'vkCmdDrawIndirectCount'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless4;
  if (!info[4].IsBigInt() && !info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 5 'countBufferOffset' in 'vkCmdDrawIndirectCount'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p4 = 0;
  if (info[4].IsBigInt()) {
    $p4 = static_cast<uint64_t>(info[4].As<Napi::BigInt>().Int64Value(&lossless4));
  } else {
    $p4 = static_cast<uint64_t>(info[4].As<Napi::Number>().Int64Value());
  }

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'maxDrawCount' in 'vkCmdDrawIndirectCount'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p5 = static_cast<uint32_t>(info[5].As<Napi::Number>().Int64Value());

  if (!info[6].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 7 'stride' in 'vkCmdDrawIndirectCount'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p6 = static_cast<uint32_t>(info[6].As<Napi::Number>().Int64Value());
vkCmdDrawIndirectCount(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    info[3].IsNull() ? VK_NULL_HANDLE : *$p3,
    $p4,
    $p5,
    $p6
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdDrawIndexedIndirectCount(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDrawIndexedIndirectCount'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'buffer' in 'vkCmdDrawIndexedIndirectCount'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'offset' in 'vkCmdDrawIndexedIndirectCount'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }

  Napi::Object obj3;
  VkBuffer *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[3], "argument 4", "VkBuffer");
      return env.Undefined();
    }
    obj3 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 4 'countBuffer' in 'vkCmdDrawIndexedIndirectCount'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless4;
  if (!info[4].IsBigInt() && !info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 5 'countBufferOffset' in 'vkCmdDrawIndexedIndirectCount'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p4 = 0;
  if (info[4].IsBigInt()) {
    $p4 = static_cast<uint64_t>(info[4].As<Napi::BigInt>().Int64Value(&lossless4));
  } else {
    $p4 = static_cast<uint64_t>(info[4].As<Napi::Number>().Int64Value());
  }

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'maxDrawCount' in 'vkCmdDrawIndexedIndirectCount'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p5 = static_cast<uint32_t>(info[5].As<Napi::Number>().Int64Value());

  if (!info[6].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 7 'stride' in 'vkCmdDrawIndexedIndirectCount'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p6 = static_cast<uint32_t>(info[6].As<Napi::Number>().Int64Value());
vkCmdDrawIndexedIndirectCount(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    info[3].IsNull() ? VK_NULL_HANDLE : *$p3,
    $p4,
    $p5,
    $p6
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetCheckpointNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetCheckpointNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  void* $p1 = nullptr;
  if (info[1].IsArrayBuffer()) {
    Napi::ArrayBuffer buf = info[1].As<Napi::ArrayBuffer>();
    $p1 = buf.Data();
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'ArrayBuffer' or 'null' for argument 2 'pCheckpointMarker' in 'vkCmdSetCheckpointNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdSetCheckpointNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? nullptr : $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetQueueCheckpointDataNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkQueue *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueue") {
      NapiObjectTypeError(info[0], "argument 1", "VkQueue");
      return env.Undefined();
    }
    obj0 = obj;
    VkQueue* instance = reinterpret_cast<VkQueue*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueue' or 'null' for argument 1 'queue' in 'vkGetQueueCheckpointDataNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pCheckpointDataCount' in 'vkGetQueueCheckpointDataNV'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pCheckpointDataCount' in 'vkGetQueueCheckpointDataNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkCheckpointDataNV>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[1].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[2].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pCheckpointData' in 'vkGetQueueCheckpointDataNV'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkCheckpointDataNV> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCheckpointDataNV") {
        NapiObjectTypeError(info[2], "argument 3", "VkCheckpointDataNV");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkCheckpointDataNV* instance = reinterpret_cast<VkCheckpointDataNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkCheckpointDataNV>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pCheckpointData' in 'vkGetQueueCheckpointDataNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkGetQueueCheckpointDataNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    &$p1,
    $p2 ? (VkCheckpointDataNV *) $p2.get()->data() : nullptr
  );
    if (info[1].IsObject()) obj1.Set("$", $p1);
  if (info[2].IsArray()) {
    VkCheckpointDataNV* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBindTransformFeedbackBuffersEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBindTransformFeedbackBuffersEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'firstBinding' in 'vkCmdBindTransformFeedbackBuffersEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'bindingCount' in 'vkCmdBindTransformFeedbackBuffersEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkBuffer>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pBuffers' in 'vkCmdBindTransformFeedbackBuffersEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkBuffer> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
        NapiObjectTypeError(info[0], "argument 4", "VkBuffer");
        return env.Undefined();
      }
      VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkBuffer>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pBuffers' in 'vkCmdBindTransformFeedbackBuffersEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<uint64_t*> $p4 = nullptr;

  if (info[4].IsTypedArray()) {

    if (info[4].As<Napi::TypedArray>().TypedArrayType() != napi_biguint64_array) {
      Napi::TypeError::New(env, "Invalid type for argument 5 'pOffsets' in 'vkCmdBindTransformFeedbackBuffersEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
      if (info[4].As<Napi::TypedArray>().ElementLength() != $p2) {
        Napi::RangeError::New(env, "Invalid array length for argument 5 'pOffsets' in 'vkCmdBindTransformFeedbackBuffersEXT'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    VkDeviceSize* data = getTypedArrayData<VkDeviceSize>(info[4]);
    $p4 = std::make_shared<VkDeviceSize*>(data);
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 5 'pOffsets' in 'vkCmdBindTransformFeedbackBuffersEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<uint64_t*> $p5 = nullptr;

  if (info[5].IsTypedArray()) {

    if (info[5].As<Napi::TypedArray>().TypedArrayType() != napi_biguint64_array) {
      Napi::TypeError::New(env, "Invalid type for argument 6 'pSizes' in 'vkCmdBindTransformFeedbackBuffersEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
      if (info[5].As<Napi::TypedArray>().ElementLength() != $p2) {
        Napi::RangeError::New(env, "Invalid array length for argument 6 'pSizes' in 'vkCmdBindTransformFeedbackBuffersEXT'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    VkDeviceSize* data = getTypedArrayData<VkDeviceSize>(info[5]);
    $p5 = std::make_shared<VkDeviceSize*>(data);
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 6 'pSizes' in 'vkCmdBindTransformFeedbackBuffersEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkCmdBindTransformFeedbackBuffersEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3 ? (const VkBuffer *) $p3.get()->data() : nullptr,
    $p4 ? *$p4.get() : nullptr,
    $p5 ? *$p5.get() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBeginTransformFeedbackEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBeginTransformFeedbackEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'firstCounterBuffer' in 'vkCmdBeginTransformFeedbackEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'counterBufferCount' in 'vkCmdBeginTransformFeedbackEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkBuffer>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pCounterBuffers' in 'vkCmdBeginTransformFeedbackEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkBuffer> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
        NapiObjectTypeError(info[0], "argument 4", "VkBuffer");
        return env.Undefined();
      }
      VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkBuffer>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pCounterBuffers' in 'vkCmdBeginTransformFeedbackEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<uint64_t*> $p4 = nullptr;

  if (info[4].IsTypedArray()) {

    if (info[4].As<Napi::TypedArray>().TypedArrayType() != napi_biguint64_array) {
      Napi::TypeError::New(env, "Invalid type for argument 5 'pCounterBufferOffsets' in 'vkCmdBeginTransformFeedbackEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
      if (info[4].As<Napi::TypedArray>().ElementLength() != $p2) {
        Napi::RangeError::New(env, "Invalid array length for argument 5 'pCounterBufferOffsets' in 'vkCmdBeginTransformFeedbackEXT'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    VkDeviceSize* data = getTypedArrayData<VkDeviceSize>(info[4]);
    $p4 = std::make_shared<VkDeviceSize*>(data);
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 5 'pCounterBufferOffsets' in 'vkCmdBeginTransformFeedbackEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkCmdBeginTransformFeedbackEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3 ? (const VkBuffer *) $p3.get()->data() : nullptr,
    $p4 ? *$p4.get() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdEndTransformFeedbackEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdEndTransformFeedbackEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'firstCounterBuffer' in 'vkCmdEndTransformFeedbackEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'counterBufferCount' in 'vkCmdEndTransformFeedbackEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkBuffer>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pCounterBuffers' in 'vkCmdEndTransformFeedbackEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkBuffer> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
        NapiObjectTypeError(info[0], "argument 4", "VkBuffer");
        return env.Undefined();
      }
      VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkBuffer>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pCounterBuffers' in 'vkCmdEndTransformFeedbackEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<uint64_t*> $p4 = nullptr;

  if (info[4].IsTypedArray()) {

    if (info[4].As<Napi::TypedArray>().TypedArrayType() != napi_biguint64_array) {
      Napi::TypeError::New(env, "Invalid type for argument 5 'pCounterBufferOffsets' in 'vkCmdEndTransformFeedbackEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
      if (info[4].As<Napi::TypedArray>().ElementLength() != $p2) {
        Napi::RangeError::New(env, "Invalid array length for argument 5 'pCounterBufferOffsets' in 'vkCmdEndTransformFeedbackEXT'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    VkDeviceSize* data = getTypedArrayData<VkDeviceSize>(info[4]);
    $p4 = std::make_shared<VkDeviceSize*>(data);
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 5 'pCounterBufferOffsets' in 'vkCmdEndTransformFeedbackEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkCmdEndTransformFeedbackEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3 ? (const VkBuffer *) $p3.get()->data() : nullptr,
    $p4 ? *$p4.get() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBeginQueryIndexedEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBeginQueryIndexedEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkQueryPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueryPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkQueryPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkQueryPool* instance = reinterpret_cast<VkQueryPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueryPool' or 'null' for argument 2 'queryPool' in 'vkCmdBeginQueryIndexedEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'query' in 'vkCmdBeginQueryIndexedEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'flags' in 'vkCmdBeginQueryIndexedEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p3 = static_cast<int32_t>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'index' in 'vkCmdBeginQueryIndexedEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());
$vkCmdBeginQueryIndexedEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    static_cast<VkQueryControlFlags>($p3),
    $p4
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdEndQueryIndexedEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdEndQueryIndexedEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkQueryPool *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueryPool") {
      NapiObjectTypeError(info[1], "argument 2", "VkQueryPool");
      return env.Undefined();
    }
    obj1 = obj;
    VkQueryPool* instance = reinterpret_cast<VkQueryPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueryPool' or 'null' for argument 2 'queryPool' in 'vkCmdEndQueryIndexedEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'query' in 'vkCmdEndQueryIndexedEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'index' in 'vkCmdEndQueryIndexedEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());
$vkCmdEndQueryIndexedEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdDrawIndirectByteCountEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDrawIndirectByteCountEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'instanceCount' in 'vkCmdDrawIndirectByteCountEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'firstInstance' in 'vkCmdDrawIndirectByteCountEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  Napi::Object obj3;
  VkBuffer *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[3], "argument 4", "VkBuffer");
      return env.Undefined();
    }
    obj3 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 4 'counterBuffer' in 'vkCmdDrawIndirectByteCountEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless4;
  if (!info[4].IsBigInt() && !info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 5 'counterBufferOffset' in 'vkCmdDrawIndirectByteCountEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p4 = 0;
  if (info[4].IsBigInt()) {
    $p4 = static_cast<uint64_t>(info[4].As<Napi::BigInt>().Int64Value(&lossless4));
  } else {
    $p4 = static_cast<uint64_t>(info[4].As<Napi::Number>().Int64Value());
  }

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'counterOffset' in 'vkCmdDrawIndirectByteCountEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p5 = static_cast<uint32_t>(info[5].As<Napi::Number>().Int64Value());

  if (!info[6].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 7 'vertexStride' in 'vkCmdDrawIndirectByteCountEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p6 = static_cast<uint32_t>(info[6].As<Napi::Number>().Int64Value());
$vkCmdDrawIndirectByteCountEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    info[3].IsNull() ? VK_NULL_HANDLE : *$p3,
    $p4,
    $p5,
    $p6
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetExclusiveScissorNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetExclusiveScissorNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'firstExclusiveScissor' in 'vkCmdSetExclusiveScissorNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'exclusiveScissorCount' in 'vkCmdSetExclusiveScissorNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkRect2D>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pExclusiveScissors' in 'vkCmdSetExclusiveScissorNV'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkRect2D> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkRect2D") {
        NapiObjectTypeError(info[3], "argument 4", "VkRect2D");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkRect2D* instance = reinterpret_cast<VkRect2D*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkRect2D>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pExclusiveScissors' in 'vkCmdSetExclusiveScissorNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkCmdSetExclusiveScissorNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3 ? (const VkRect2D *) $p3.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBindShadingRateImageNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBindShadingRateImageNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImageView *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImageView") {
      NapiObjectTypeError(info[1], "argument 2", "VkImageView");
      return env.Undefined();
    }
    obj1 = obj;
    VkImageView* instance = reinterpret_cast<VkImageView*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImageView' or 'null' for argument 2 'imageView' in 'vkCmdBindShadingRateImageNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'imageLayout' in 'vkCmdBindShadingRateImageNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkImageLayout $p2 = static_cast<VkImageLayout>(info[2].As<Napi::Number>().Int64Value());
$vkCmdBindShadingRateImageNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetViewportShadingRatePaletteNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetViewportShadingRatePaletteNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'firstViewport' in 'vkCmdSetViewportShadingRatePaletteNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'viewportCount' in 'vkCmdSetViewportShadingRatePaletteNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkShadingRatePaletteNV>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pShadingRatePalettes' in 'vkCmdSetViewportShadingRatePaletteNV'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkShadingRatePaletteNV> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkShadingRatePaletteNV") {
        NapiObjectTypeError(info[3], "argument 4", "VkShadingRatePaletteNV");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkShadingRatePaletteNV* instance = reinterpret_cast<VkShadingRatePaletteNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkShadingRatePaletteNV>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pShadingRatePalettes' in 'vkCmdSetViewportShadingRatePaletteNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkCmdSetViewportShadingRatePaletteNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3 ? (const VkShadingRatePaletteNV *) $p3.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetCoarseSampleOrderNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetCoarseSampleOrderNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'sampleOrderType' in 'vkCmdSetCoarseSampleOrderNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkCoarseSampleOrderTypeNV $p1 = static_cast<VkCoarseSampleOrderTypeNV>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'customSampleOrderCount' in 'vkCmdSetCoarseSampleOrderNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkCoarseSampleOrderCustomNV>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pCustomSampleOrders' in 'vkCmdSetCoarseSampleOrderNV'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkCoarseSampleOrderCustomNV> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCoarseSampleOrderCustomNV") {
        NapiObjectTypeError(info[3], "argument 4", "VkCoarseSampleOrderCustomNV");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkCoarseSampleOrderCustomNV* instance = reinterpret_cast<VkCoarseSampleOrderCustomNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkCoarseSampleOrderCustomNV>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pCustomSampleOrders' in 'vkCmdSetCoarseSampleOrderNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkCmdSetCoarseSampleOrderNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3 ? (const VkCoarseSampleOrderCustomNV *) $p3.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdDrawMeshTasksNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDrawMeshTasksNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'taskCount' in 'vkCmdDrawMeshTasksNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'firstTask' in 'vkCmdDrawMeshTasksNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());
$vkCmdDrawMeshTasksNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdDrawMeshTasksIndirectNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDrawMeshTasksIndirectNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'buffer' in 'vkCmdDrawMeshTasksIndirectNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'offset' in 'vkCmdDrawMeshTasksIndirectNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'drawCount' in 'vkCmdDrawMeshTasksIndirectNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'stride' in 'vkCmdDrawMeshTasksIndirectNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].As<Napi::Number>().Int64Value());
$vkCmdDrawMeshTasksIndirectNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3,
    $p4
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdDrawMeshTasksIndirectCountNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdDrawMeshTasksIndirectCountNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'buffer' in 'vkCmdDrawMeshTasksIndirectCountNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'offset' in 'vkCmdDrawMeshTasksIndirectCountNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }

  Napi::Object obj3;
  VkBuffer *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[3], "argument 4", "VkBuffer");
      return env.Undefined();
    }
    obj3 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 4 'countBuffer' in 'vkCmdDrawMeshTasksIndirectCountNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless4;
  if (!info[4].IsBigInt() && !info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 5 'countBufferOffset' in 'vkCmdDrawMeshTasksIndirectCountNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p4 = 0;
  if (info[4].IsBigInt()) {
    $p4 = static_cast<uint64_t>(info[4].As<Napi::BigInt>().Int64Value(&lossless4));
  } else {
    $p4 = static_cast<uint64_t>(info[4].As<Napi::Number>().Int64Value());
  }

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'maxDrawCount' in 'vkCmdDrawMeshTasksIndirectCountNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p5 = static_cast<uint32_t>(info[5].As<Napi::Number>().Int64Value());

  if (!info[6].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 7 'stride' in 'vkCmdDrawMeshTasksIndirectCountNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p6 = static_cast<uint32_t>(info[6].As<Napi::Number>().Int64Value());
$vkCmdDrawMeshTasksIndirectCountNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    info[3].IsNull() ? VK_NULL_HANDLE : *$p3,
    $p4,
    $p5,
    $p6
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCompileDeferredNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCompileDeferredNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipeline *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipeline") {
      NapiObjectTypeError(info[1], "argument 2", "VkPipeline");
      return env.Undefined();
    }
    obj1 = obj;
    VkPipeline* instance = reinterpret_cast<VkPipeline*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipeline' or 'null' for argument 2 'pipeline' in 'vkCompileDeferredNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'shader' in 'vkCompileDeferredNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());
  int32_t out = $vkCompileDeferredNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateAccelerationStructureNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkAccelerationStructureCreateInfoNV *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV) {
      NapiObjectTypeError(info[1], "argument 2", "VkAccelerationStructureCreateInfoNV");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkAccelerationStructureCreateInfoNV* instance = reinterpret_cast<VkAccelerationStructureCreateInfoNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureCreateInfoNV' or 'null' for argument 2 'pCreateInfo' in 'vkCreateAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkAccelerationStructureNV *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureNV") {
      NapiObjectTypeError(info[3], "argument 4", "VkAccelerationStructureNV");
      return env.Undefined();
    }
    obj3 = obj;
    VkAccelerationStructureNV* instance = reinterpret_cast<VkAccelerationStructureNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureNV' or 'null' for argument 4 'pAccelerationStructure' in 'vkCreateAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCreateAccelerationStructureNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyAccelerationStructureKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyAccelerationStructureKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkAccelerationStructureKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkAccelerationStructureKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkAccelerationStructureKHR* instance = reinterpret_cast<VkAccelerationStructureKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureKHR' or 'null' for argument 2 'accelerationStructure' in 'vkDestroyAccelerationStructureKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkDestroyAccelerationStructureKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkDestroyAccelerationStructureNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkAccelerationStructureNV *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureNV") {
      NapiObjectTypeError(info[1], "argument 2", "VkAccelerationStructureNV");
      return env.Undefined();
    }
    obj1 = obj;
    VkAccelerationStructureNV* instance = reinterpret_cast<VkAccelerationStructureNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureNV' or 'null' for argument 2 'accelerationStructure' in 'vkDestroyAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkDestroyAccelerationStructureNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetAccelerationStructureMemoryRequirementsNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetAccelerationStructureMemoryRequirementsNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkAccelerationStructureMemoryRequirementsInfoNV *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV) {
      NapiObjectTypeError(info[1], "argument 2", "VkAccelerationStructureMemoryRequirementsInfoNV");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkAccelerationStructureMemoryRequirementsInfoNV* instance = reinterpret_cast<VkAccelerationStructureMemoryRequirementsInfoNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureMemoryRequirementsInfoNV' or 'null' for argument 2 'pInfo' in 'vkGetAccelerationStructureMemoryRequirementsNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkMemoryRequirements2KHR *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR) {
      NapiObjectTypeError(info[2], "argument 3", "VkMemoryRequirements2KHR");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkMemoryRequirements2KHR* instance = reinterpret_cast<VkMemoryRequirements2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkMemoryRequirements2KHR' or 'null' for argument 3 'pMemoryRequirements' in 'vkGetAccelerationStructureMemoryRequirementsNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkGetAccelerationStructureMemoryRequirementsNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkBindAccelerationStructureMemoryNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkBindAccelerationStructureMemoryNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'bindInfoCount' in 'vkBindAccelerationStructureMemoryNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkBindAccelerationStructureMemoryInfoNV>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pBindInfos' in 'vkBindAccelerationStructureMemoryNV'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkBindAccelerationStructureMemoryInfoNV> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBindAccelerationStructureMemoryInfoNV") {
        NapiObjectTypeError(info[2], "argument 3", "VkBindAccelerationStructureMemoryInfoNV");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkBindAccelerationStructureMemoryInfoNV* instance = reinterpret_cast<VkBindAccelerationStructureMemoryInfoNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkBindAccelerationStructureMemoryInfoNV>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pBindInfos' in 'vkBindAccelerationStructureMemoryNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkBindAccelerationStructureMemoryNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkBindAccelerationStructureMemoryInfoNV *) $p2.get()->data() : nullptr
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdCopyAccelerationStructureNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdCopyAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkAccelerationStructureNV *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureNV") {
      NapiObjectTypeError(info[1], "argument 2", "VkAccelerationStructureNV");
      return env.Undefined();
    }
    obj1 = obj;
    VkAccelerationStructureNV* instance = reinterpret_cast<VkAccelerationStructureNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureNV' or 'null' for argument 2 'dst' in 'vkCmdCopyAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkAccelerationStructureNV *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureNV") {
      NapiObjectTypeError(info[2], "argument 3", "VkAccelerationStructureNV");
      return env.Undefined();
    }
    obj2 = obj;
    VkAccelerationStructureNV* instance = reinterpret_cast<VkAccelerationStructureNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureNV' or 'null' for argument 3 'src' in 'vkCmdCopyAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'mode' in 'vkCmdCopyAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkCopyAccelerationStructureModeKHR $p3 = static_cast<VkCopyAccelerationStructureModeKHR>(info[3].As<Napi::Number>().Int64Value());
$vkCmdCopyAccelerationStructureNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2,
    $p3
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdCopyAccelerationStructureKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdCopyAccelerationStructureKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkCopyAccelerationStructureInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkCopyAccelerationStructureInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkCopyAccelerationStructureInfoKHR* instance = reinterpret_cast<VkCopyAccelerationStructureInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCopyAccelerationStructureInfoKHR' or 'null' for argument 2 'pInfo' in 'vkCmdCopyAccelerationStructureKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdCopyAccelerationStructureKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCopyAccelerationStructureKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCopyAccelerationStructureKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeferredOperationKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeferredOperationKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDeferredOperationKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDeferredOperationKHR* instance = reinterpret_cast<VkDeferredOperationKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeferredOperationKHR' or 'null' for argument 2 'deferredOperation' in 'vkCopyAccelerationStructureKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkCopyAccelerationStructureInfoKHR *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR) {
      NapiObjectTypeError(info[2], "argument 3", "VkCopyAccelerationStructureInfoKHR");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkCopyAccelerationStructureInfoKHR* instance = reinterpret_cast<VkCopyAccelerationStructureInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCopyAccelerationStructureInfoKHR' or 'null' for argument 3 'pInfo' in 'vkCopyAccelerationStructureKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCopyAccelerationStructureKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdCopyAccelerationStructureToMemoryKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdCopyAccelerationStructureToMemoryKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkCopyAccelerationStructureToMemoryInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkCopyAccelerationStructureToMemoryInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkCopyAccelerationStructureToMemoryInfoKHR* instance = reinterpret_cast<VkCopyAccelerationStructureToMemoryInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCopyAccelerationStructureToMemoryInfoKHR' or 'null' for argument 2 'pInfo' in 'vkCmdCopyAccelerationStructureToMemoryKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdCopyAccelerationStructureToMemoryKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCopyAccelerationStructureToMemoryKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCopyAccelerationStructureToMemoryKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeferredOperationKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeferredOperationKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDeferredOperationKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDeferredOperationKHR* instance = reinterpret_cast<VkDeferredOperationKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeferredOperationKHR' or 'null' for argument 2 'deferredOperation' in 'vkCopyAccelerationStructureToMemoryKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkCopyAccelerationStructureToMemoryInfoKHR *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR) {
      NapiObjectTypeError(info[2], "argument 3", "VkCopyAccelerationStructureToMemoryInfoKHR");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkCopyAccelerationStructureToMemoryInfoKHR* instance = reinterpret_cast<VkCopyAccelerationStructureToMemoryInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCopyAccelerationStructureToMemoryInfoKHR' or 'null' for argument 3 'pInfo' in 'vkCopyAccelerationStructureToMemoryKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCopyAccelerationStructureToMemoryKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdCopyMemoryToAccelerationStructureKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdCopyMemoryToAccelerationStructureKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkCopyMemoryToAccelerationStructureInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkCopyMemoryToAccelerationStructureInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkCopyMemoryToAccelerationStructureInfoKHR* instance = reinterpret_cast<VkCopyMemoryToAccelerationStructureInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCopyMemoryToAccelerationStructureInfoKHR' or 'null' for argument 2 'pInfo' in 'vkCmdCopyMemoryToAccelerationStructureKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdCopyMemoryToAccelerationStructureKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCopyMemoryToAccelerationStructureKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCopyMemoryToAccelerationStructureKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeferredOperationKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeferredOperationKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDeferredOperationKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDeferredOperationKHR* instance = reinterpret_cast<VkDeferredOperationKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeferredOperationKHR' or 'null' for argument 2 'deferredOperation' in 'vkCopyMemoryToAccelerationStructureKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkCopyMemoryToAccelerationStructureInfoKHR *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR) {
      NapiObjectTypeError(info[2], "argument 3", "VkCopyMemoryToAccelerationStructureInfoKHR");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkCopyMemoryToAccelerationStructureInfoKHR* instance = reinterpret_cast<VkCopyMemoryToAccelerationStructureInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCopyMemoryToAccelerationStructureInfoKHR' or 'null' for argument 3 'pInfo' in 'vkCopyMemoryToAccelerationStructureKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCopyMemoryToAccelerationStructureKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdWriteAccelerationStructuresPropertiesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdWriteAccelerationStructuresPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'accelerationStructureCount' in 'vkCmdWriteAccelerationStructuresPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkAccelerationStructureKHR>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pAccelerationStructures' in 'vkCmdWriteAccelerationStructuresPropertiesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkAccelerationStructureKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureKHR") {
        NapiObjectTypeError(info[0], "argument 3", "VkAccelerationStructureKHR");
        return env.Undefined();
      }
      VkAccelerationStructureKHR* instance = reinterpret_cast<VkAccelerationStructureKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkAccelerationStructureKHR>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pAccelerationStructures' in 'vkCmdWriteAccelerationStructuresPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'queryType' in 'vkCmdWriteAccelerationStructuresPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkQueryType $p3 = static_cast<VkQueryType>(info[3].As<Napi::Number>().Int64Value());

  Napi::Object obj4;
  VkQueryPool *$p4 = nullptr;
  if (info[4].IsObject()) {
    Napi::Object obj = info[4].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueryPool") {
      NapiObjectTypeError(info[4], "argument 5", "VkQueryPool");
      return env.Undefined();
    }
    obj4 = obj;
    VkQueryPool* instance = reinterpret_cast<VkQueryPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p4 = instance;
  } else if (info[4].IsNull()) {
    $p4 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueryPool' or 'null' for argument 5 'queryPool' in 'vkCmdWriteAccelerationStructuresPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'firstQuery' in 'vkCmdWriteAccelerationStructuresPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p5 = static_cast<uint32_t>(info[5].As<Napi::Number>().Int64Value());
$vkCmdWriteAccelerationStructuresPropertiesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkAccelerationStructureKHR *) $p2.get()->data() : nullptr,
    $p3,
    info[4].IsNull() ? VK_NULL_HANDLE : *$p4,
    $p5
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdWriteAccelerationStructuresPropertiesNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdWriteAccelerationStructuresPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'accelerationStructureCount' in 'vkCmdWriteAccelerationStructuresPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkAccelerationStructureNV>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pAccelerationStructures' in 'vkCmdWriteAccelerationStructuresPropertiesNV'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkAccelerationStructureNV> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureNV") {
        NapiObjectTypeError(info[0], "argument 3", "VkAccelerationStructureNV");
        return env.Undefined();
      }
      VkAccelerationStructureNV* instance = reinterpret_cast<VkAccelerationStructureNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkAccelerationStructureNV>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pAccelerationStructures' in 'vkCmdWriteAccelerationStructuresPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'queryType' in 'vkCmdWriteAccelerationStructuresPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkQueryType $p3 = static_cast<VkQueryType>(info[3].As<Napi::Number>().Int64Value());

  Napi::Object obj4;
  VkQueryPool *$p4 = nullptr;
  if (info[4].IsObject()) {
    Napi::Object obj = info[4].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueryPool") {
      NapiObjectTypeError(info[4], "argument 5", "VkQueryPool");
      return env.Undefined();
    }
    obj4 = obj;
    VkQueryPool* instance = reinterpret_cast<VkQueryPool*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p4 = instance;
  } else if (info[4].IsNull()) {
    $p4 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueryPool' or 'null' for argument 5 'queryPool' in 'vkCmdWriteAccelerationStructuresPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'firstQuery' in 'vkCmdWriteAccelerationStructuresPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p5 = static_cast<uint32_t>(info[5].As<Napi::Number>().Int64Value());
$vkCmdWriteAccelerationStructuresPropertiesNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkAccelerationStructureNV *) $p2.get()->data() : nullptr,
    $p3,
    info[4].IsNull() ? VK_NULL_HANDLE : *$p4,
    $p5
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBuildAccelerationStructureNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBuildAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkAccelerationStructureInfoNV *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV) {
      NapiObjectTypeError(info[1], "argument 2", "VkAccelerationStructureInfoNV");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkAccelerationStructureInfoNV* instance = reinterpret_cast<VkAccelerationStructureInfoNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureInfoNV' or 'null' for argument 2 'pInfo' in 'vkCmdBuildAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkBuffer *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[2], "argument 3", "VkBuffer");
      return env.Undefined();
    }
    obj2 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 3 'instanceData' in 'vkCmdBuildAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless3;
  if (!info[3].IsBigInt() && !info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 4 'instanceOffset' in 'vkCmdBuildAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p3 = 0;
  if (info[3].IsBigInt()) {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::BigInt>().Int64Value(&lossless3));
  } else {
    $p3 = static_cast<uint64_t>(info[3].As<Napi::Number>().Int64Value());
  }

  if (!info[4].IsBoolean() && !info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Boolean' or 'Number' for argument 5 'update' in 'vkCmdBuildAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p4 = static_cast<uint32_t>(info[4].IsBoolean() ? info[4].As<Napi::Boolean>().Value() : info[4].As<Napi::Number>().Int32Value());

  Napi::Object obj5;
  VkAccelerationStructureNV *$p5 = nullptr;
  if (info[5].IsObject()) {
    Napi::Object obj = info[5].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureNV") {
      NapiObjectTypeError(info[5], "argument 6", "VkAccelerationStructureNV");
      return env.Undefined();
    }
    obj5 = obj;
    VkAccelerationStructureNV* instance = reinterpret_cast<VkAccelerationStructureNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p5 = instance;
  } else if (info[5].IsNull()) {
    $p5 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureNV' or 'null' for argument 6 'dst' in 'vkCmdBuildAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj6;
  VkAccelerationStructureNV *$p6 = nullptr;
  if (info[6].IsObject()) {
    Napi::Object obj = info[6].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureNV") {
      NapiObjectTypeError(info[6], "argument 7", "VkAccelerationStructureNV");
      return env.Undefined();
    }
    obj6 = obj;
    VkAccelerationStructureNV* instance = reinterpret_cast<VkAccelerationStructureNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p6 = instance;
  } else if (info[6].IsNull()) {
    $p6 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureNV' or 'null' for argument 7 'src' in 'vkCmdBuildAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj7;
  VkBuffer *$p7 = nullptr;
  if (info[7].IsObject()) {
    Napi::Object obj = info[7].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[7], "argument 8", "VkBuffer");
      return env.Undefined();
    }
    obj7 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p7 = instance;
  } else if (info[7].IsNull()) {
    $p7 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 8 'scratch' in 'vkCmdBuildAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless8;
  if (!info[8].IsBigInt() && !info[8].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 9 'scratchOffset' in 'vkCmdBuildAccelerationStructureNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p8 = 0;
  if (info[8].IsBigInt()) {
    $p8 = static_cast<uint64_t>(info[8].As<Napi::BigInt>().Int64Value(&lossless8));
  } else {
    $p8 = static_cast<uint64_t>(info[8].As<Napi::Number>().Int64Value());
  }
$vkCmdBuildAccelerationStructureNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2,
    $p3,
    $p4,
    info[5].IsNull() ? VK_NULL_HANDLE : *$p5,
    info[6].IsNull() ? VK_NULL_HANDLE : *$p6,
    info[7].IsNull() ? VK_NULL_HANDLE : *$p7,
    $p8
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkWriteAccelerationStructuresPropertiesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkWriteAccelerationStructuresPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'accelerationStructureCount' in 'vkWriteAccelerationStructuresPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkAccelerationStructureKHR>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pAccelerationStructures' in 'vkWriteAccelerationStructuresPropertiesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkAccelerationStructureKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureKHR") {
        NapiObjectTypeError(info[0], "argument 3", "VkAccelerationStructureKHR");
        return env.Undefined();
      }
      VkAccelerationStructureKHR* instance = reinterpret_cast<VkAccelerationStructureKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkAccelerationStructureKHR>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pAccelerationStructures' in 'vkWriteAccelerationStructuresPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'queryType' in 'vkWriteAccelerationStructuresPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkQueryType $p3 = static_cast<VkQueryType>(info[3].As<Napi::Number>().Int64Value());

  bool lossless4;
  if (!info[4].IsBigInt() && !info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 5 'dataSize' in 'vkWriteAccelerationStructuresPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  size_t $p4 = 0;
  if (info[4].IsBigInt()) {
    $p4 = static_cast<size_t>(info[4].As<Napi::BigInt>().Int64Value(&lossless4));
  } else {
    $p4 = static_cast<size_t>(info[4].As<Napi::Number>().Int64Value());
  }

  void* $p5 = nullptr;
  if (info[5].IsArrayBuffer()) {
    Napi::ArrayBuffer buf = info[5].As<Napi::ArrayBuffer>();
    $p5 = buf.Data();
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Expected 'ArrayBuffer' or 'null' for argument 6 'pData' in 'vkWriteAccelerationStructuresPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless6;
  if (!info[6].IsBigInt() && !info[6].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 7 'stride' in 'vkWriteAccelerationStructuresPropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  size_t $p6 = 0;
  if (info[6].IsBigInt()) {
    $p6 = static_cast<size_t>(info[6].As<Napi::BigInt>().Int64Value(&lossless6));
  } else {
    $p6 = static_cast<size_t>(info[6].As<Napi::Number>().Int64Value());
  }
  int32_t out = $vkWriteAccelerationStructuresPropertiesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkAccelerationStructureKHR *) $p2.get()->data() : nullptr,
    $p3,
    $p4,
    info[5].IsNull() ? nullptr : $p5,
    $p6
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdTraceRaysKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdTraceRaysKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkStridedDeviceAddressRegionKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkStridedDeviceAddressRegionKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkStridedDeviceAddressRegionKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkStridedDeviceAddressRegionKHR* instance = reinterpret_cast<VkStridedDeviceAddressRegionKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkStridedDeviceAddressRegionKHR' or 'null' for argument 2 'pRaygenShaderBindingTable' in 'vkCmdTraceRaysKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkStridedDeviceAddressRegionKHR *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkStridedDeviceAddressRegionKHR") {
      NapiObjectTypeError(info[2], "argument 3", "VkStridedDeviceAddressRegionKHR");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkStridedDeviceAddressRegionKHR* instance = reinterpret_cast<VkStridedDeviceAddressRegionKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkStridedDeviceAddressRegionKHR' or 'null' for argument 3 'pMissShaderBindingTable' in 'vkCmdTraceRaysKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj3;
  VkStridedDeviceAddressRegionKHR *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkStridedDeviceAddressRegionKHR") {
      NapiObjectTypeError(info[3], "argument 4", "VkStridedDeviceAddressRegionKHR");
      return env.Undefined();
    }
    obj3 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkStridedDeviceAddressRegionKHR* instance = reinterpret_cast<VkStridedDeviceAddressRegionKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkStridedDeviceAddressRegionKHR' or 'null' for argument 4 'pHitShaderBindingTable' in 'vkCmdTraceRaysKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj4;
  VkStridedDeviceAddressRegionKHR *$p4 = nullptr;
  if (info[4].IsObject()) {
    Napi::Object obj = info[4].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkStridedDeviceAddressRegionKHR") {
      NapiObjectTypeError(info[4], "argument 5", "VkStridedDeviceAddressRegionKHR");
      return env.Undefined();
    }
    obj4 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkStridedDeviceAddressRegionKHR* instance = reinterpret_cast<VkStridedDeviceAddressRegionKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p4 = instance;
  } else if (info[4].IsNull()) {
    $p4 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkStridedDeviceAddressRegionKHR' or 'null' for argument 5 'pCallableShaderBindingTable' in 'vkCmdTraceRaysKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'width' in 'vkCmdTraceRaysKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p5 = static_cast<uint32_t>(info[5].As<Napi::Number>().Int64Value());

  if (!info[6].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 7 'height' in 'vkCmdTraceRaysKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p6 = static_cast<uint32_t>(info[6].As<Napi::Number>().Int64Value());

  if (!info[7].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 8 'depth' in 'vkCmdTraceRaysKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p7 = static_cast<uint32_t>(info[7].As<Napi::Number>().Int64Value());
$vkCmdTraceRaysKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3,
    $p4,
    $p5,
    $p6,
    $p7
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdTraceRaysNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdTraceRaysNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBuffer *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[1], "argument 2", "VkBuffer");
      return env.Undefined();
    }
    obj1 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 2 'raygenShaderBindingTableBuffer' in 'vkCmdTraceRaysNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'raygenShaderBindingOffset' in 'vkCmdTraceRaysNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }

  Napi::Object obj3;
  VkBuffer *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[3], "argument 4", "VkBuffer");
      return env.Undefined();
    }
    obj3 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 4 'missShaderBindingTableBuffer' in 'vkCmdTraceRaysNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless4;
  if (!info[4].IsBigInt() && !info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 5 'missShaderBindingOffset' in 'vkCmdTraceRaysNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p4 = 0;
  if (info[4].IsBigInt()) {
    $p4 = static_cast<uint64_t>(info[4].As<Napi::BigInt>().Int64Value(&lossless4));
  } else {
    $p4 = static_cast<uint64_t>(info[4].As<Napi::Number>().Int64Value());
  }

  bool lossless5;
  if (!info[5].IsBigInt() && !info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 6 'missShaderBindingStride' in 'vkCmdTraceRaysNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p5 = 0;
  if (info[5].IsBigInt()) {
    $p5 = static_cast<uint64_t>(info[5].As<Napi::BigInt>().Int64Value(&lossless5));
  } else {
    $p5 = static_cast<uint64_t>(info[5].As<Napi::Number>().Int64Value());
  }

  Napi::Object obj6;
  VkBuffer *$p6 = nullptr;
  if (info[6].IsObject()) {
    Napi::Object obj = info[6].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[6], "argument 7", "VkBuffer");
      return env.Undefined();
    }
    obj6 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p6 = instance;
  } else if (info[6].IsNull()) {
    $p6 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 7 'hitShaderBindingTableBuffer' in 'vkCmdTraceRaysNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless7;
  if (!info[7].IsBigInt() && !info[7].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 8 'hitShaderBindingOffset' in 'vkCmdTraceRaysNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p7 = 0;
  if (info[7].IsBigInt()) {
    $p7 = static_cast<uint64_t>(info[7].As<Napi::BigInt>().Int64Value(&lossless7));
  } else {
    $p7 = static_cast<uint64_t>(info[7].As<Napi::Number>().Int64Value());
  }

  bool lossless8;
  if (!info[8].IsBigInt() && !info[8].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 9 'hitShaderBindingStride' in 'vkCmdTraceRaysNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p8 = 0;
  if (info[8].IsBigInt()) {
    $p8 = static_cast<uint64_t>(info[8].As<Napi::BigInt>().Int64Value(&lossless8));
  } else {
    $p8 = static_cast<uint64_t>(info[8].As<Napi::Number>().Int64Value());
  }

  Napi::Object obj9;
  VkBuffer *$p9 = nullptr;
  if (info[9].IsObject()) {
    Napi::Object obj = info[9].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
      NapiObjectTypeError(info[9], "argument 10", "VkBuffer");
      return env.Undefined();
    }
    obj9 = obj;
    VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p9 = instance;
  } else if (info[9].IsNull()) {
    $p9 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBuffer' or 'null' for argument 10 'callableShaderBindingTableBuffer' in 'vkCmdTraceRaysNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless10;
  if (!info[10].IsBigInt() && !info[10].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 11 'callableShaderBindingOffset' in 'vkCmdTraceRaysNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p10 = 0;
  if (info[10].IsBigInt()) {
    $p10 = static_cast<uint64_t>(info[10].As<Napi::BigInt>().Int64Value(&lossless10));
  } else {
    $p10 = static_cast<uint64_t>(info[10].As<Napi::Number>().Int64Value());
  }

  bool lossless11;
  if (!info[11].IsBigInt() && !info[11].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 12 'callableShaderBindingStride' in 'vkCmdTraceRaysNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p11 = 0;
  if (info[11].IsBigInt()) {
    $p11 = static_cast<uint64_t>(info[11].As<Napi::BigInt>().Int64Value(&lossless11));
  } else {
    $p11 = static_cast<uint64_t>(info[11].As<Napi::Number>().Int64Value());
  }

  if (!info[12].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 13 'width' in 'vkCmdTraceRaysNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p12 = static_cast<uint32_t>(info[12].As<Napi::Number>().Int64Value());

  if (!info[13].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 14 'height' in 'vkCmdTraceRaysNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p13 = static_cast<uint32_t>(info[13].As<Napi::Number>().Int64Value());

  if (!info[14].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 15 'depth' in 'vkCmdTraceRaysNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p14 = static_cast<uint32_t>(info[14].As<Napi::Number>().Int64Value());
$vkCmdTraceRaysNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    info[3].IsNull() ? VK_NULL_HANDLE : *$p3,
    $p4,
    $p5,
    info[6].IsNull() ? VK_NULL_HANDLE : *$p6,
    $p7,
    $p8,
    info[9].IsNull() ? VK_NULL_HANDLE : *$p9,
    $p10,
    $p11,
    $p12,
    $p13,
    $p14
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetRayTracingShaderGroupHandlesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetRayTracingShaderGroupHandlesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipeline *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipeline") {
      NapiObjectTypeError(info[1], "argument 2", "VkPipeline");
      return env.Undefined();
    }
    obj1 = obj;
    VkPipeline* instance = reinterpret_cast<VkPipeline*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipeline' or 'null' for argument 2 'pipeline' in 'vkGetRayTracingShaderGroupHandlesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'firstGroup' in 'vkGetRayTracingShaderGroupHandlesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'groupCount' in 'vkGetRayTracingShaderGroupHandlesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  bool lossless4;
  if (!info[4].IsBigInt() && !info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 5 'dataSize' in 'vkGetRayTracingShaderGroupHandlesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  size_t $p4 = 0;
  if (info[4].IsBigInt()) {
    $p4 = static_cast<size_t>(info[4].As<Napi::BigInt>().Int64Value(&lossless4));
  } else {
    $p4 = static_cast<size_t>(info[4].As<Napi::Number>().Int64Value());
  }

  void* $p5 = nullptr;
  if (info[5].IsArrayBuffer()) {
    Napi::ArrayBuffer buf = info[5].As<Napi::ArrayBuffer>();
    $p5 = buf.Data();
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Expected 'ArrayBuffer' or 'null' for argument 6 'pData' in 'vkGetRayTracingShaderGroupHandlesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetRayTracingShaderGroupHandlesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3,
    $p4,
    info[5].IsNull() ? nullptr : $p5
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetRayTracingCaptureReplayShaderGroupHandlesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipeline *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipeline") {
      NapiObjectTypeError(info[1], "argument 2", "VkPipeline");
      return env.Undefined();
    }
    obj1 = obj;
    VkPipeline* instance = reinterpret_cast<VkPipeline*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipeline' or 'null' for argument 2 'pipeline' in 'vkGetRayTracingCaptureReplayShaderGroupHandlesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'firstGroup' in 'vkGetRayTracingCaptureReplayShaderGroupHandlesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'groupCount' in 'vkGetRayTracingCaptureReplayShaderGroupHandlesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  bool lossless4;
  if (!info[4].IsBigInt() && !info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 5 'dataSize' in 'vkGetRayTracingCaptureReplayShaderGroupHandlesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  size_t $p4 = 0;
  if (info[4].IsBigInt()) {
    $p4 = static_cast<size_t>(info[4].As<Napi::BigInt>().Int64Value(&lossless4));
  } else {
    $p4 = static_cast<size_t>(info[4].As<Napi::Number>().Int64Value());
  }

  void* $p5 = nullptr;
  if (info[5].IsArrayBuffer()) {
    Napi::ArrayBuffer buf = info[5].As<Napi::ArrayBuffer>();
    $p5 = buf.Data();
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Expected 'ArrayBuffer' or 'null' for argument 6 'pData' in 'vkGetRayTracingCaptureReplayShaderGroupHandlesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3,
    $p4,
    info[5].IsNull() ? nullptr : $p5
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetAccelerationStructureHandleNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetAccelerationStructureHandleNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkAccelerationStructureNV *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureNV") {
      NapiObjectTypeError(info[1], "argument 2", "VkAccelerationStructureNV");
      return env.Undefined();
    }
    obj1 = obj;
    VkAccelerationStructureNV* instance = reinterpret_cast<VkAccelerationStructureNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureNV' or 'null' for argument 2 'accelerationStructure' in 'vkGetAccelerationStructureHandleNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'dataSize' in 'vkGetAccelerationStructureHandleNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  size_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<size_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<size_t>(info[2].As<Napi::Number>().Int64Value());
  }

  void* $p3 = nullptr;
  if (info[3].IsArrayBuffer()) {
    Napi::ArrayBuffer buf = info[3].As<Napi::ArrayBuffer>();
    $p3 = buf.Data();
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Expected 'ArrayBuffer' or 'null' for argument 4 'pData' in 'vkGetAccelerationStructureHandleNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetAccelerationStructureHandleNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    info[3].IsNull() ? nullptr : $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateRayTracingPipelinesNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateRayTracingPipelinesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipelineCache *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineCache") {
      NapiObjectTypeError(info[1], "argument 2", "VkPipelineCache");
      return env.Undefined();
    }
    obj1 = obj;
    VkPipelineCache* instance = reinterpret_cast<VkPipelineCache*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineCache' or 'null' for argument 2 'pipelineCache' in 'vkCreateRayTracingPipelinesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'createInfoCount' in 'vkCreateRayTracingPipelinesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkRayTracingPipelineCreateInfoNV>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pCreateInfos' in 'vkCreateRayTracingPipelinesNV'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkRayTracingPipelineCreateInfoNV> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkRayTracingPipelineCreateInfoNV") {
        NapiObjectTypeError(info[3], "argument 4", "VkRayTracingPipelineCreateInfoNV");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkRayTracingPipelineCreateInfoNV* instance = reinterpret_cast<VkRayTracingPipelineCreateInfoNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkRayTracingPipelineCreateInfoNV>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pCreateInfos' in 'vkCreateRayTracingPipelinesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }



  std::shared_ptr<std::vector<VkPipeline>> $p5 = nullptr;

  if (info[5].IsArray()) {

    // validate length
    if (info[5].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 6 'pPipelines' in 'vkCreateRayTracingPipelinesNV'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[5].As<Napi::Array>();
    std::vector<VkPipeline> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipeline") {
        NapiObjectTypeError(info[0], "argument 6", "VkPipeline");
        return env.Undefined();
      }
      VkPipeline* instance = reinterpret_cast<VkPipeline*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p5 = std::make_shared<std::vector<VkPipeline>>(data);
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 6 'pPipelines' in 'vkCreateRayTracingPipelinesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkCreateRayTracingPipelinesNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3 ? (const VkRayTracingPipelineCreateInfoNV *) $p3.get()->data() : nullptr,
    nullptr,
    $p5 ? (VkPipeline *) $p5.get()->data() : nullptr
  );
  if (info[5].IsArray()) {
    VkPipeline* $pdata = $p5.get()->data();
    Napi::Array array = info[5].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();

      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateRayTracingPipelinesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateRayTracingPipelinesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeferredOperationKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeferredOperationKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDeferredOperationKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDeferredOperationKHR* instance = reinterpret_cast<VkDeferredOperationKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeferredOperationKHR' or 'null' for argument 2 'deferredOperation' in 'vkCreateRayTracingPipelinesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkPipelineCache *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineCache") {
      NapiObjectTypeError(info[2], "argument 3", "VkPipelineCache");
      return env.Undefined();
    }
    obj2 = obj;
    VkPipelineCache* instance = reinterpret_cast<VkPipelineCache*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineCache' or 'null' for argument 3 'pipelineCache' in 'vkCreateRayTracingPipelinesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'createInfoCount' in 'vkCreateRayTracingPipelinesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p3 = static_cast<uint32_t>(info[3].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkRayTracingPipelineCreateInfoKHR>> $p4 = nullptr;

  if (info[4].IsArray()) {

    // validate length
    if (info[4].As<Napi::Array>().Length() != info[3].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 5 'pCreateInfos' in 'vkCreateRayTracingPipelinesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[4].As<Napi::Array>();
    std::vector<VkRayTracingPipelineCreateInfoKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkRayTracingPipelineCreateInfoKHR") {
        NapiObjectTypeError(info[4], "argument 5", "VkRayTracingPipelineCreateInfoKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkRayTracingPipelineCreateInfoKHR* instance = reinterpret_cast<VkRayTracingPipelineCreateInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p4 = std::make_shared<std::vector<VkRayTracingPipelineCreateInfoKHR>>(data);
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 5 'pCreateInfos' in 'vkCreateRayTracingPipelinesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }



  std::shared_ptr<std::vector<VkPipeline>> $p6 = nullptr;

  if (info[6].IsArray()) {

    // validate length
    if (info[6].As<Napi::Array>().Length() != info[3].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 7 'pPipelines' in 'vkCreateRayTracingPipelinesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[6].As<Napi::Array>();
    std::vector<VkPipeline> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipeline") {
        NapiObjectTypeError(info[0], "argument 7", "VkPipeline");
        return env.Undefined();
      }
      VkPipeline* instance = reinterpret_cast<VkPipeline*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p6 = std::make_shared<std::vector<VkPipeline>>(data);
  } else if (!info[6].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 7 'pPipelines' in 'vkCreateRayTracingPipelinesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkCreateRayTracingPipelinesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    info[2].IsNull() ? VK_NULL_HANDLE : *$p2,
    $p3,
    $p4 ? (const VkRayTracingPipelineCreateInfoKHR *) $p4.get()->data() : nullptr,
    nullptr,
    $p6 ? (VkPipeline *) $p6.get()->data() : nullptr
  );
  if (info[6].IsArray()) {
    VkPipeline* $pdata = $p6.get()->data();
    Napi::Array array = info[6].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();

      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceCooperativeMatrixPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pPropertyCount' in 'vkGetPhysicalDeviceCooperativeMatrixPropertiesNV'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pPropertyCount' in 'vkGetPhysicalDeviceCooperativeMatrixPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkCooperativeMatrixPropertiesNV>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[1].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[2].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pProperties' in 'vkGetPhysicalDeviceCooperativeMatrixPropertiesNV'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkCooperativeMatrixPropertiesNV> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCooperativeMatrixPropertiesNV") {
        NapiObjectTypeError(info[2], "argument 3", "VkCooperativeMatrixPropertiesNV");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkCooperativeMatrixPropertiesNV* instance = reinterpret_cast<VkCooperativeMatrixPropertiesNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkCooperativeMatrixPropertiesNV>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pProperties' in 'vkGetPhysicalDeviceCooperativeMatrixPropertiesNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    &$p1,
    $p2 ? (VkCooperativeMatrixPropertiesNV *) $p2.get()->data() : nullptr
  );
    if (info[1].IsObject()) obj1.Set("$", $p1);
  if (info[2].IsArray()) {
    VkCooperativeMatrixPropertiesNV* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdTraceRaysIndirectKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdTraceRaysIndirectKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkStridedDeviceAddressRegionKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkStridedDeviceAddressRegionKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkStridedDeviceAddressRegionKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkStridedDeviceAddressRegionKHR* instance = reinterpret_cast<VkStridedDeviceAddressRegionKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkStridedDeviceAddressRegionKHR' or 'null' for argument 2 'pRaygenShaderBindingTable' in 'vkCmdTraceRaysIndirectKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkStridedDeviceAddressRegionKHR *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkStridedDeviceAddressRegionKHR") {
      NapiObjectTypeError(info[2], "argument 3", "VkStridedDeviceAddressRegionKHR");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkStridedDeviceAddressRegionKHR* instance = reinterpret_cast<VkStridedDeviceAddressRegionKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkStridedDeviceAddressRegionKHR' or 'null' for argument 3 'pMissShaderBindingTable' in 'vkCmdTraceRaysIndirectKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj3;
  VkStridedDeviceAddressRegionKHR *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkStridedDeviceAddressRegionKHR") {
      NapiObjectTypeError(info[3], "argument 4", "VkStridedDeviceAddressRegionKHR");
      return env.Undefined();
    }
    obj3 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkStridedDeviceAddressRegionKHR* instance = reinterpret_cast<VkStridedDeviceAddressRegionKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkStridedDeviceAddressRegionKHR' or 'null' for argument 4 'pHitShaderBindingTable' in 'vkCmdTraceRaysIndirectKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj4;
  VkStridedDeviceAddressRegionKHR *$p4 = nullptr;
  if (info[4].IsObject()) {
    Napi::Object obj = info[4].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkStridedDeviceAddressRegionKHR") {
      NapiObjectTypeError(info[4], "argument 5", "VkStridedDeviceAddressRegionKHR");
      return env.Undefined();
    }
    obj4 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkStridedDeviceAddressRegionKHR* instance = reinterpret_cast<VkStridedDeviceAddressRegionKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p4 = instance;
  } else if (info[4].IsNull()) {
    $p4 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkStridedDeviceAddressRegionKHR' or 'null' for argument 5 'pCallableShaderBindingTable' in 'vkCmdTraceRaysIndirectKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless5;
  if (!info[5].IsBigInt() && !info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 6 'indirectDeviceAddress' in 'vkCmdTraceRaysIndirectKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p5 = 0;
  if (info[5].IsBigInt()) {
    $p5 = static_cast<uint64_t>(info[5].As<Napi::BigInt>().Int64Value(&lossless5));
  } else {
    $p5 = static_cast<uint64_t>(info[5].As<Napi::Number>().Int64Value());
  }
$vkCmdTraceRaysIndirectKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3,
    $p4,
    $p5
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetDeviceAccelerationStructureCompatibilityKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetDeviceAccelerationStructureCompatibilityKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkAccelerationStructureVersionInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkAccelerationStructureVersionInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkAccelerationStructureVersionInfoKHR* instance = reinterpret_cast<VkAccelerationStructureVersionInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureVersionInfoKHR' or 'null' for argument 2 'pVersionInfo' in 'vkGetDeviceAccelerationStructureCompatibilityKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  int32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pCompatibility' in 'vkGetDeviceAccelerationStructureCompatibilityKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<int32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pCompatibility' in 'vkGetDeviceAccelerationStructureCompatibilityKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkGetDeviceAccelerationStructureCompatibilityKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    reinterpret_cast<VkAccelerationStructureCompatibilityKHR *>(&$p2)
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetRayTracingShaderGroupStackSizeKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetRayTracingShaderGroupStackSizeKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipeline *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipeline") {
      NapiObjectTypeError(info[1], "argument 2", "VkPipeline");
      return env.Undefined();
    }
    obj1 = obj;
    VkPipeline* instance = reinterpret_cast<VkPipeline*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipeline' or 'null' for argument 2 'pipeline' in 'vkGetRayTracingShaderGroupStackSizeKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'group' in 'vkGetRayTracingShaderGroupStackSizeKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'groupShader' in 'vkGetRayTracingShaderGroupStackSizeKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkShaderGroupShaderKHR $p3 = static_cast<VkShaderGroupShaderKHR>(info[3].As<Napi::Number>().Int64Value());
  uint64_t out = $vkGetRayTracingShaderGroupStackSizeKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3
  );
  
  
  return Napi::BigInt::New(env, static_cast<int64_t>(out));
  
};

Napi::Value _vkCmdSetRayTracingPipelineStackSizeKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetRayTracingPipelineStackSizeKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'pipelineStackSize' in 'vkCmdSetRayTracingPipelineStackSizeKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());
$vkCmdSetRayTracingPipelineStackSizeKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetImageViewHandleNVX(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetImageViewHandleNVX'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImageViewHandleInfoNVX *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX) {
      NapiObjectTypeError(info[1], "argument 2", "VkImageViewHandleInfoNVX");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkImageViewHandleInfoNVX* instance = reinterpret_cast<VkImageViewHandleInfoNVX*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImageViewHandleInfoNVX' or 'null' for argument 2 'pInfo' in 'vkGetImageViewHandleNVX'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t out = $vkGetImageViewHandleNVX(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetImageViewAddressNVX(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetImageViewAddressNVX'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImageView *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImageView") {
      NapiObjectTypeError(info[1], "argument 2", "VkImageView");
      return env.Undefined();
    }
    obj1 = obj;
    VkImageView* instance = reinterpret_cast<VkImageView*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImageView' or 'null' for argument 2 'imageView' in 'vkGetImageViewAddressNVX'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkImageViewAddressPropertiesNVX *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX) {
      NapiObjectTypeError(info[2], "argument 3", "VkImageViewAddressPropertiesNVX");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkImageViewAddressPropertiesNVX* instance = reinterpret_cast<VkImageViewAddressPropertiesNVX*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImageViewAddressPropertiesNVX' or 'null' for argument 3 'pProperties' in 'vkGetImageViewAddressNVX'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetImageViewAddressNVX(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceSurfacePresentModes2EXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceSurfacePresentModes2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPhysicalDeviceSurfaceInfo2KHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkPhysicalDeviceSurfaceInfo2KHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPhysicalDeviceSurfaceInfo2KHR* instance = reinterpret_cast<VkPhysicalDeviceSurfaceInfo2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDeviceSurfaceInfo2KHR' or 'null' for argument 2 'pSurfaceInfo' in 'vkGetPhysicalDeviceSurfacePresentModes2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pPresentModeCount' in 'vkGetPhysicalDeviceSurfacePresentModes2EXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pPresentModeCount' in 'vkGetPhysicalDeviceSurfacePresentModes2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<int32_t*> $p3 = nullptr;

  if (info[3].IsTypedArray()) {

    if (info[3].As<Napi::TypedArray>().TypedArrayType() != napi_int32_array) {
      Napi::TypeError::New(env, "Invalid type for argument 4 'pPresentModes' in 'vkGetPhysicalDeviceSurfacePresentModes2EXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
      if (info[3].As<Napi::TypedArray>().ElementLength() != $p2) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pPresentModes' in 'vkGetPhysicalDeviceSurfacePresentModes2EXT'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    int32_t* data = getTypedArrayData<int32_t>(info[3]);
    $p3 = std::make_shared<int32_t*>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pPresentModes' in 'vkGetPhysicalDeviceSurfacePresentModes2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPhysicalDeviceSurfacePresentModes2EXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    &$p2,
    $p3 ? (VkPresentModeKHR *) *$p3.get() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetDeviceGroupSurfacePresentModes2EXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetDeviceGroupSurfacePresentModes2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPhysicalDeviceSurfaceInfo2KHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkPhysicalDeviceSurfaceInfo2KHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPhysicalDeviceSurfaceInfo2KHR* instance = reinterpret_cast<VkPhysicalDeviceSurfaceInfo2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDeviceSurfaceInfo2KHR' or 'null' for argument 2 'pSurfaceInfo' in 'vkGetDeviceGroupSurfacePresentModes2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  int32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pModes' in 'vkGetDeviceGroupSurfacePresentModes2EXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<int32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pModes' in 'vkGetDeviceGroupSurfacePresentModes2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetDeviceGroupSurfacePresentModes2EXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    reinterpret_cast<VkDeviceGroupPresentModeFlagsKHR *>(&$p2)
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkAcquireFullScreenExclusiveModeEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkAcquireFullScreenExclusiveModeEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSwapchainKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSwapchainKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSwapchainKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSwapchainKHR* instance = reinterpret_cast<VkSwapchainKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSwapchainKHR' or 'null' for argument 2 'swapchain' in 'vkAcquireFullScreenExclusiveModeEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkAcquireFullScreenExclusiveModeEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkReleaseFullScreenExclusiveModeEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkReleaseFullScreenExclusiveModeEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkSwapchainKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSwapchainKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkSwapchainKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkSwapchainKHR* instance = reinterpret_cast<VkSwapchainKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSwapchainKHR' or 'null' for argument 2 'swapchain' in 'vkReleaseFullScreenExclusiveModeEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkReleaseFullScreenExclusiveModeEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'queueFamilyIndex' in 'vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pCounterCount' in 'vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pCounterCount' in 'vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkPerformanceCounterKHR>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pCounters' in 'vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkPerformanceCounterKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPerformanceCounterKHR") {
        NapiObjectTypeError(info[3], "argument 4", "VkPerformanceCounterKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkPerformanceCounterKHR* instance = reinterpret_cast<VkPerformanceCounterKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkPerformanceCounterKHR>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pCounters' in 'vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<std::vector<VkPerformanceCounterDescriptionKHR>> $p4 = nullptr;

  if (info[4].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[4].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 5 'pCounterDescriptions' in 'vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[4].As<Napi::Array>();
    std::vector<VkPerformanceCounterDescriptionKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPerformanceCounterDescriptionKHR") {
        NapiObjectTypeError(info[4], "argument 5", "VkPerformanceCounterDescriptionKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkPerformanceCounterDescriptionKHR* instance = reinterpret_cast<VkPerformanceCounterDescriptionKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p4 = std::make_shared<std::vector<VkPerformanceCounterDescriptionKHR>>(data);
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 5 'pCounterDescriptions' in 'vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    &$p2,
    $p3 ? (VkPerformanceCounterKHR *) $p3.get()->data() : nullptr,
    $p4 ? (VkPerformanceCounterDescriptionKHR *) $p4.get()->data() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkPerformanceCounterKHR* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  if (info[4].IsArray()) {
    VkPerformanceCounterDescriptionKHR* $pdata = $p4.get()->data();
    Napi::Array array = info[4].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkQueryPoolPerformanceCreateInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkQueryPoolPerformanceCreateInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkQueryPoolPerformanceCreateInfoKHR* instance = reinterpret_cast<VkQueryPoolPerformanceCreateInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueryPoolPerformanceCreateInfoKHR' or 'null' for argument 2 'pPerformanceQueryCreateInfo' in 'vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pNumPasses' in 'vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pNumPasses' in 'vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    &$p2
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  
  
  return env.Undefined();
  
};

Napi::Value _vkAcquireProfilingLockKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkAcquireProfilingLockKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkAcquireProfilingLockInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkAcquireProfilingLockInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkAcquireProfilingLockInfoKHR* instance = reinterpret_cast<VkAcquireProfilingLockInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAcquireProfilingLockInfoKHR' or 'null' for argument 2 'pInfo' in 'vkAcquireProfilingLockKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkAcquireProfilingLockKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkReleaseProfilingLockKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkReleaseProfilingLockKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkReleaseProfilingLockKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetImageDrmFormatModifierPropertiesEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetImageDrmFormatModifierPropertiesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkImage *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkImage") {
      NapiObjectTypeError(info[1], "argument 2", "VkImage");
      return env.Undefined();
    }
    obj1 = obj;
    VkImage* instance = reinterpret_cast<VkImage*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImage' or 'null' for argument 2 'image' in 'vkGetImageDrmFormatModifierPropertiesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkImageDrmFormatModifierPropertiesEXT *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT) {
      NapiObjectTypeError(info[2], "argument 3", "VkImageDrmFormatModifierPropertiesEXT");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkImageDrmFormatModifierPropertiesEXT* instance = reinterpret_cast<VkImageDrmFormatModifierPropertiesEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkImageDrmFormatModifierPropertiesEXT' or 'null' for argument 3 'pProperties' in 'vkGetImageDrmFormatModifierPropertiesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetImageDrmFormatModifierPropertiesEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetBufferOpaqueCaptureAddress(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetBufferOpaqueCaptureAddress'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBufferDeviceAddressInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkBufferDeviceAddressInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkBufferDeviceAddressInfo* instance = reinterpret_cast<VkBufferDeviceAddressInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBufferDeviceAddressInfo' or 'null' for argument 2 'pInfo' in 'vkGetBufferOpaqueCaptureAddress'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t out = vkGetBufferOpaqueCaptureAddress(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::BigInt::New(env, static_cast<int64_t>(out));
  
};

Napi::Value _vkGetBufferDeviceAddress(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetBufferDeviceAddress'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBufferDeviceAddressInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkBufferDeviceAddressInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkBufferDeviceAddressInfo* instance = reinterpret_cast<VkBufferDeviceAddressInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBufferDeviceAddressInfo' or 'null' for argument 2 'pInfo' in 'vkGetBufferDeviceAddress'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t out = vkGetBufferDeviceAddress(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::BigInt::New(env, static_cast<int64_t>(out));
  
};

Napi::Value _vkCreateHeadlessSurfaceEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkInstance *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkInstance") {
      NapiObjectTypeError(info[0], "argument 1", "VkInstance");
      return env.Undefined();
    }
    obj0 = obj;
    VkInstance* instance = reinterpret_cast<VkInstance*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInstance' or 'null' for argument 1 'instance' in 'vkCreateHeadlessSurfaceEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkHeadlessSurfaceCreateInfoEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkHeadlessSurfaceCreateInfoEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkHeadlessSurfaceCreateInfoEXT* instance = reinterpret_cast<VkHeadlessSurfaceCreateInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkHeadlessSurfaceCreateInfoEXT' or 'null' for argument 2 'pCreateInfo' in 'vkCreateHeadlessSurfaceEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkSurfaceKHR *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkSurfaceKHR") {
      NapiObjectTypeError(info[3], "argument 4", "VkSurfaceKHR");
      return env.Undefined();
    }
    obj3 = obj;
    VkSurfaceKHR* instance = reinterpret_cast<VkSurfaceKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkSurfaceKHR' or 'null' for argument 4 'pSurface' in 'vkCreateHeadlessSurfaceEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCreateHeadlessSurfaceEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pCombinationCount' in 'vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pCombinationCount' in 'vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkFramebufferMixedSamplesCombinationNV>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[1].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[2].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pCombinations' in 'vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkFramebufferMixedSamplesCombinationNV> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkFramebufferMixedSamplesCombinationNV") {
        NapiObjectTypeError(info[2], "argument 3", "VkFramebufferMixedSamplesCombinationNV");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkFramebufferMixedSamplesCombinationNV* instance = reinterpret_cast<VkFramebufferMixedSamplesCombinationNV*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkFramebufferMixedSamplesCombinationNV>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pCombinations' in 'vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    &$p1,
    $p2 ? (VkFramebufferMixedSamplesCombinationNV *) $p2.get()->data() : nullptr
  );
    if (info[1].IsObject()) obj1.Set("$", $p1);
  if (info[2].IsArray()) {
    VkFramebufferMixedSamplesCombinationNV* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkInitializePerformanceApiINTEL(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkInitializePerformanceApiINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkInitializePerformanceApiInfoINTEL *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL) {
      NapiObjectTypeError(info[1], "argument 2", "VkInitializePerformanceApiInfoINTEL");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkInitializePerformanceApiInfoINTEL* instance = reinterpret_cast<VkInitializePerformanceApiInfoINTEL*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkInitializePerformanceApiInfoINTEL' or 'null' for argument 2 'pInitializeInfo' in 'vkInitializePerformanceApiINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkInitializePerformanceApiINTEL(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkUninitializePerformanceApiINTEL(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkUninitializePerformanceApiINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkUninitializePerformanceApiINTEL(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetPerformanceMarkerINTEL(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetPerformanceMarkerINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPerformanceMarkerInfoINTEL *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL) {
      NapiObjectTypeError(info[1], "argument 2", "VkPerformanceMarkerInfoINTEL");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPerformanceMarkerInfoINTEL* instance = reinterpret_cast<VkPerformanceMarkerInfoINTEL*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPerformanceMarkerInfoINTEL' or 'null' for argument 2 'pMarkerInfo' in 'vkCmdSetPerformanceMarkerINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCmdSetPerformanceMarkerINTEL(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdSetPerformanceStreamMarkerINTEL(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetPerformanceStreamMarkerINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPerformanceStreamMarkerInfoINTEL *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL) {
      NapiObjectTypeError(info[1], "argument 2", "VkPerformanceStreamMarkerInfoINTEL");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPerformanceStreamMarkerInfoINTEL* instance = reinterpret_cast<VkPerformanceStreamMarkerInfoINTEL*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPerformanceStreamMarkerInfoINTEL' or 'null' for argument 2 'pMarkerInfo' in 'vkCmdSetPerformanceStreamMarkerINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCmdSetPerformanceStreamMarkerINTEL(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdSetPerformanceOverrideINTEL(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetPerformanceOverrideINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPerformanceOverrideInfoINTEL *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL) {
      NapiObjectTypeError(info[1], "argument 2", "VkPerformanceOverrideInfoINTEL");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPerformanceOverrideInfoINTEL* instance = reinterpret_cast<VkPerformanceOverrideInfoINTEL*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPerformanceOverrideInfoINTEL' or 'null' for argument 2 'pOverrideInfo' in 'vkCmdSetPerformanceOverrideINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCmdSetPerformanceOverrideINTEL(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkAcquirePerformanceConfigurationINTEL(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkAcquirePerformanceConfigurationINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPerformanceConfigurationAcquireInfoINTEL *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL) {
      NapiObjectTypeError(info[1], "argument 2", "VkPerformanceConfigurationAcquireInfoINTEL");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPerformanceConfigurationAcquireInfoINTEL* instance = reinterpret_cast<VkPerformanceConfigurationAcquireInfoINTEL*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPerformanceConfigurationAcquireInfoINTEL' or 'null' for argument 2 'pAcquireInfo' in 'vkAcquirePerformanceConfigurationINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  VkPerformanceConfigurationINTEL *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPerformanceConfigurationINTEL") {
      NapiObjectTypeError(info[2], "argument 3", "VkPerformanceConfigurationINTEL");
      return env.Undefined();
    }
    obj2 = obj;
    VkPerformanceConfigurationINTEL* instance = reinterpret_cast<VkPerformanceConfigurationINTEL*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPerformanceConfigurationINTEL' or 'null' for argument 3 'pConfiguration' in 'vkAcquirePerformanceConfigurationINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkAcquirePerformanceConfigurationINTEL(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkReleasePerformanceConfigurationINTEL(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkReleasePerformanceConfigurationINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPerformanceConfigurationINTEL *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPerformanceConfigurationINTEL") {
      NapiObjectTypeError(info[1], "argument 2", "VkPerformanceConfigurationINTEL");
      return env.Undefined();
    }
    obj1 = obj;
    VkPerformanceConfigurationINTEL* instance = reinterpret_cast<VkPerformanceConfigurationINTEL*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPerformanceConfigurationINTEL' or 'null' for argument 2 'configuration' in 'vkReleasePerformanceConfigurationINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkReleasePerformanceConfigurationINTEL(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkQueueSetPerformanceConfigurationINTEL(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkQueue *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkQueue") {
      NapiObjectTypeError(info[0], "argument 1", "VkQueue");
      return env.Undefined();
    }
    obj0 = obj;
    VkQueue* instance = reinterpret_cast<VkQueue*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkQueue' or 'null' for argument 1 'queue' in 'vkQueueSetPerformanceConfigurationINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPerformanceConfigurationINTEL *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPerformanceConfigurationINTEL") {
      NapiObjectTypeError(info[1], "argument 2", "VkPerformanceConfigurationINTEL");
      return env.Undefined();
    }
    obj1 = obj;
    VkPerformanceConfigurationINTEL* instance = reinterpret_cast<VkPerformanceConfigurationINTEL*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPerformanceConfigurationINTEL' or 'null' for argument 2 'configuration' in 'vkQueueSetPerformanceConfigurationINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkQueueSetPerformanceConfigurationINTEL(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPerformanceParameterINTEL(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetPerformanceParameterINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'parameter' in 'vkGetPerformanceParameterINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkPerformanceParameterTypeINTEL $p1 = static_cast<VkPerformanceParameterTypeINTEL>(info[1].As<Napi::Number>().Int64Value());

  Napi::Object obj2;
  VkPerformanceValueINTEL *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPerformanceValueINTEL") {
      NapiObjectTypeError(info[2], "argument 3", "VkPerformanceValueINTEL");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPerformanceValueINTEL* instance = reinterpret_cast<VkPerformanceValueINTEL*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPerformanceValueINTEL' or 'null' for argument 3 'pValue' in 'vkGetPerformanceParameterINTEL'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetPerformanceParameterINTEL(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  if (info[2].IsObject()) {
     Napi::Object obj = info[2].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p2));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetDeviceMemoryOpaqueCaptureAddress(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetDeviceMemoryOpaqueCaptureAddress'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeviceMemoryOpaqueCaptureAddressInfo *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO) {
      NapiObjectTypeError(info[1], "argument 2", "VkDeviceMemoryOpaqueCaptureAddressInfo");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkDeviceMemoryOpaqueCaptureAddressInfo* instance = reinterpret_cast<VkDeviceMemoryOpaqueCaptureAddressInfo*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeviceMemoryOpaqueCaptureAddressInfo' or 'null' for argument 2 'pInfo' in 'vkGetDeviceMemoryOpaqueCaptureAddress'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t out = vkGetDeviceMemoryOpaqueCaptureAddress(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::BigInt::New(env, static_cast<int64_t>(out));
  
};

Napi::Value _vkGetPipelineExecutablePropertiesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetPipelineExecutablePropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipelineInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkPipelineInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPipelineInfoKHR* instance = reinterpret_cast<VkPipelineInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineInfoKHR' or 'null' for argument 2 'pPipelineInfo' in 'vkGetPipelineExecutablePropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pExecutableCount' in 'vkGetPipelineExecutablePropertiesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pExecutableCount' in 'vkGetPipelineExecutablePropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkPipelineExecutablePropertiesKHR>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pProperties' in 'vkGetPipelineExecutablePropertiesKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkPipelineExecutablePropertiesKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineExecutablePropertiesKHR") {
        NapiObjectTypeError(info[3], "argument 4", "VkPipelineExecutablePropertiesKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkPipelineExecutablePropertiesKHR* instance = reinterpret_cast<VkPipelineExecutablePropertiesKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkPipelineExecutablePropertiesKHR>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pProperties' in 'vkGetPipelineExecutablePropertiesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPipelineExecutablePropertiesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    &$p2,
    $p3 ? (VkPipelineExecutablePropertiesKHR *) $p3.get()->data() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkPipelineExecutablePropertiesKHR* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPipelineExecutableStatisticsKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetPipelineExecutableStatisticsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipelineExecutableInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkPipelineExecutableInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPipelineExecutableInfoKHR* instance = reinterpret_cast<VkPipelineExecutableInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineExecutableInfoKHR' or 'null' for argument 2 'pExecutableInfo' in 'vkGetPipelineExecutableStatisticsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pStatisticCount' in 'vkGetPipelineExecutableStatisticsKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pStatisticCount' in 'vkGetPipelineExecutableStatisticsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkPipelineExecutableStatisticKHR>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pStatistics' in 'vkGetPipelineExecutableStatisticsKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkPipelineExecutableStatisticKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineExecutableStatisticKHR") {
        NapiObjectTypeError(info[3], "argument 4", "VkPipelineExecutableStatisticKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkPipelineExecutableStatisticKHR* instance = reinterpret_cast<VkPipelineExecutableStatisticKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkPipelineExecutableStatisticKHR>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pStatistics' in 'vkGetPipelineExecutableStatisticsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPipelineExecutableStatisticsKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    &$p2,
    $p3 ? (VkPipelineExecutableStatisticKHR *) $p3.get()->data() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkPipelineExecutableStatisticKHR* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPipelineExecutableInternalRepresentationsKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetPipelineExecutableInternalRepresentationsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPipelineExecutableInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkPipelineExecutableInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPipelineExecutableInfoKHR* instance = reinterpret_cast<VkPipelineExecutableInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPipelineExecutableInfoKHR' or 'null' for argument 2 'pExecutableInfo' in 'vkGetPipelineExecutableInternalRepresentationsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj2;
  uint32_t $p2 = 0;
  if (info[2].IsObject()) {
    obj2 = info[2].As<Napi::Object>();
    if (!obj2.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 3 'pInternalRepresentationCount' in 'vkGetPipelineExecutableInternalRepresentationsKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj2.Get("$");
    
    $p2 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 3 'pInternalRepresentationCount' in 'vkGetPipelineExecutableInternalRepresentationsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkPipelineExecutableInternalRepresentationKHR>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[2].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[3].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pInternalRepresentations' in 'vkGetPipelineExecutableInternalRepresentationsKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkPipelineExecutableInternalRepresentationKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPipelineExecutableInternalRepresentationKHR") {
        NapiObjectTypeError(info[3], "argument 4", "VkPipelineExecutableInternalRepresentationKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkPipelineExecutableInternalRepresentationKHR* instance = reinterpret_cast<VkPipelineExecutableInternalRepresentationKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkPipelineExecutableInternalRepresentationKHR>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pInternalRepresentations' in 'vkGetPipelineExecutableInternalRepresentationsKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPipelineExecutableInternalRepresentationsKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    &$p2,
    $p3 ? (VkPipelineExecutableInternalRepresentationKHR *) $p3.get()->data() : nullptr
  );
    if (info[2].IsObject()) obj2.Set("$", $p2);
  if (info[3].IsArray()) {
    VkPipelineExecutableInternalRepresentationKHR* $pdata = $p3.get()->data();
    Napi::Array array = info[3].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdSetLineStippleEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetLineStippleEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'lineStippleFactor' in 'vkCmdSetLineStippleEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'lineStipplePattern' in 'vkCmdSetLineStippleEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint16_t $p2 = static_cast<uint16_t>(info[2].As<Napi::Number>().Int64Value());
$vkCmdSetLineStippleEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceToolPropertiesEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceToolPropertiesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pToolCount' in 'vkGetPhysicalDeviceToolPropertiesEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pToolCount' in 'vkGetPhysicalDeviceToolPropertiesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkPhysicalDeviceToolPropertiesEXT>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[1].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[2].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pToolProperties' in 'vkGetPhysicalDeviceToolPropertiesEXT'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkPhysicalDeviceToolPropertiesEXT> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDeviceToolPropertiesEXT") {
        NapiObjectTypeError(info[2], "argument 3", "VkPhysicalDeviceToolPropertiesEXT");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkPhysicalDeviceToolPropertiesEXT* instance = reinterpret_cast<VkPhysicalDeviceToolPropertiesEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkPhysicalDeviceToolPropertiesEXT>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pToolProperties' in 'vkGetPhysicalDeviceToolPropertiesEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPhysicalDeviceToolPropertiesEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    &$p1,
    $p2 ? (VkPhysicalDeviceToolPropertiesEXT *) $p2.get()->data() : nullptr
  );
    if (info[1].IsObject()) obj1.Set("$", $p1);
  if (info[2].IsArray()) {
    VkPhysicalDeviceToolPropertiesEXT* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCreateAccelerationStructureKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateAccelerationStructureKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkAccelerationStructureCreateInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkAccelerationStructureCreateInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkAccelerationStructureCreateInfoKHR* instance = reinterpret_cast<VkAccelerationStructureCreateInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureCreateInfoKHR' or 'null' for argument 2 'pCreateInfo' in 'vkCreateAccelerationStructureKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkAccelerationStructureKHR *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureKHR") {
      NapiObjectTypeError(info[3], "argument 4", "VkAccelerationStructureKHR");
      return env.Undefined();
    }
    obj3 = obj;
    VkAccelerationStructureKHR* instance = reinterpret_cast<VkAccelerationStructureKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureKHR' or 'null' for argument 4 'pAccelerationStructure' in 'vkCreateAccelerationStructureKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCreateAccelerationStructureKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdBuildAccelerationStructuresKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBuildAccelerationStructuresKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'infoCount' in 'vkCmdBuildAccelerationStructuresKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkAccelerationStructureBuildGeometryInfoKHR>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pInfos' in 'vkCmdBuildAccelerationStructuresKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkAccelerationStructureBuildGeometryInfoKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureBuildGeometryInfoKHR") {
        NapiObjectTypeError(info[2], "argument 3", "VkAccelerationStructureBuildGeometryInfoKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkAccelerationStructureBuildGeometryInfoKHR* instance = reinterpret_cast<VkAccelerationStructureBuildGeometryInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkAccelerationStructureBuildGeometryInfoKHR>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pInfos' in 'vkCmdBuildAccelerationStructuresKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<std::vector<VkAccelerationStructureBuildRangeInfoKHR>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'ppBuildRangeInfos' in 'vkCmdBuildAccelerationStructuresKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkAccelerationStructureBuildRangeInfoKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureBuildRangeInfoKHR") {
        NapiObjectTypeError(info[3], "argument 4", "VkAccelerationStructureBuildRangeInfoKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkAccelerationStructureBuildRangeInfoKHR* instance = reinterpret_cast<VkAccelerationStructureBuildRangeInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkAccelerationStructureBuildRangeInfoKHR>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'ppBuildRangeInfos' in 'vkCmdBuildAccelerationStructuresKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkCmdBuildAccelerationStructuresKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkAccelerationStructureBuildGeometryInfoKHR *) $p2.get()->data() : nullptr,
    $p3 ? (const VkAccelerationStructureBuildRangeInfoKHR * const*) $p3.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBuildAccelerationStructuresIndirectKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBuildAccelerationStructuresIndirectKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'infoCount' in 'vkCmdBuildAccelerationStructuresIndirectKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkAccelerationStructureBuildGeometryInfoKHR>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pInfos' in 'vkCmdBuildAccelerationStructuresIndirectKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkAccelerationStructureBuildGeometryInfoKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureBuildGeometryInfoKHR") {
        NapiObjectTypeError(info[2], "argument 3", "VkAccelerationStructureBuildGeometryInfoKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkAccelerationStructureBuildGeometryInfoKHR* instance = reinterpret_cast<VkAccelerationStructureBuildGeometryInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkAccelerationStructureBuildGeometryInfoKHR>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pInfos' in 'vkCmdBuildAccelerationStructuresIndirectKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<uint64_t*> $p3 = nullptr;

  if (info[3].IsTypedArray()) {

    if (info[3].As<Napi::TypedArray>().TypedArrayType() != napi_biguint64_array) {
      Napi::TypeError::New(env, "Invalid type for argument 4 'pIndirectDeviceAddresses' in 'vkCmdBuildAccelerationStructuresIndirectKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
      if (info[3].As<Napi::TypedArray>().ElementLength() != $p1) {
        Napi::RangeError::New(env, "Invalid array length for argument 4 'pIndirectDeviceAddresses' in 'vkCmdBuildAccelerationStructuresIndirectKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    VkDeviceAddress* data = getTypedArrayData<VkDeviceAddress>(info[3]);
    $p3 = std::make_shared<VkDeviceAddress*>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pIndirectDeviceAddresses' in 'vkCmdBuildAccelerationStructuresIndirectKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<uint32_t*> $p4 = nullptr;

  if (info[4].IsTypedArray()) {

    if (info[4].As<Napi::TypedArray>().TypedArrayType() != napi_uint32_array) {
      Napi::TypeError::New(env, "Invalid type for argument 5 'pIndirectStrides' in 'vkCmdBuildAccelerationStructuresIndirectKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
      if (info[4].As<Napi::TypedArray>().ElementLength() != $p1) {
        Napi::RangeError::New(env, "Invalid array length for argument 5 'pIndirectStrides' in 'vkCmdBuildAccelerationStructuresIndirectKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    uint32_t* data = getTypedArrayData<uint32_t>(info[4]);
    $p4 = std::make_shared<uint32_t*>(data);
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 5 'pIndirectStrides' in 'vkCmdBuildAccelerationStructuresIndirectKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<std::vector<uint32_t*>> $p5 = nullptr;

  if (info[5].IsArray()) {

    Napi::Array array = info[5].As<Napi::Array>();
    std::vector<uint32_t*> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Array innerArray = item.As<Napi::Array>();
      uint32_t* innerData = new uint32_t[innerArray.Length()];
      for (unsigned int ii = 0; ii < innerArray.Length(); ++ii) {
        Napi::Value item = innerArray.Get(ii);
        uint32_t value = item.As<Napi::Number>().Uint32Value();
        innerData[ii] = value;
      }
      data.push_back(innerData);
    };
    $p5 = std::make_shared<std::vector<uint32_t*>>(data);
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 6 'ppMaxPrimitiveCounts' in 'vkCmdBuildAccelerationStructuresIndirectKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkCmdBuildAccelerationStructuresIndirectKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkAccelerationStructureBuildGeometryInfoKHR *) $p2.get()->data() : nullptr,
    $p3 ? *$p3.get() : nullptr,
    $p4 ? *$p4.get() : nullptr,
    $p5 ? $p5.get()->data() : nullptr
  );
  if (info[5].IsArray()) {
    // free data
    for (unsigned int ii = 0; ii < $p5.get()->size(); ++ii) {
      delete $p5.get()->data()[ii];
    }
  }
  
  
  return env.Undefined();
  
};

Napi::Value _vkBuildAccelerationStructuresKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkBuildAccelerationStructuresKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeferredOperationKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeferredOperationKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDeferredOperationKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDeferredOperationKHR* instance = reinterpret_cast<VkDeferredOperationKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeferredOperationKHR' or 'null' for argument 2 'deferredOperation' in 'vkBuildAccelerationStructuresKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'infoCount' in 'vkBuildAccelerationStructuresKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkAccelerationStructureBuildGeometryInfoKHR>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pInfos' in 'vkBuildAccelerationStructuresKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkAccelerationStructureBuildGeometryInfoKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureBuildGeometryInfoKHR") {
        NapiObjectTypeError(info[3], "argument 4", "VkAccelerationStructureBuildGeometryInfoKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkAccelerationStructureBuildGeometryInfoKHR* instance = reinterpret_cast<VkAccelerationStructureBuildGeometryInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkAccelerationStructureBuildGeometryInfoKHR>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pInfos' in 'vkBuildAccelerationStructuresKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<std::vector<VkAccelerationStructureBuildRangeInfoKHR>> $p4 = nullptr;

  if (info[4].IsArray()) {

    // validate length
    if (info[4].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 5 'ppBuildRangeInfos' in 'vkBuildAccelerationStructuresKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[4].As<Napi::Array>();
    std::vector<VkAccelerationStructureBuildRangeInfoKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkAccelerationStructureBuildRangeInfoKHR") {
        NapiObjectTypeError(info[4], "argument 5", "VkAccelerationStructureBuildRangeInfoKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkAccelerationStructureBuildRangeInfoKHR* instance = reinterpret_cast<VkAccelerationStructureBuildRangeInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p4 = std::make_shared<std::vector<VkAccelerationStructureBuildRangeInfoKHR>>(data);
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 5 'ppBuildRangeInfos' in 'vkBuildAccelerationStructuresKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkBuildAccelerationStructuresKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    $p2,
    $p3 ? (const VkAccelerationStructureBuildGeometryInfoKHR *) $p3.get()->data() : nullptr,
    $p4 ? (const VkAccelerationStructureBuildRangeInfoKHR * const*) $p4.get()->data() : nullptr
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetAccelerationStructureDeviceAddressKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetAccelerationStructureDeviceAddressKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkAccelerationStructureDeviceAddressInfoKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkAccelerationStructureDeviceAddressInfoKHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkAccelerationStructureDeviceAddressInfoKHR* instance = reinterpret_cast<VkAccelerationStructureDeviceAddressInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureDeviceAddressInfoKHR' or 'null' for argument 2 'pInfo' in 'vkGetAccelerationStructureDeviceAddressKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t out = $vkGetAccelerationStructureDeviceAddressKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return Napi::BigInt::New(env, static_cast<int64_t>(out));
  
};

Napi::Value _vkCreateDeferredOperationKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreateDeferredOperationKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj2;
  VkDeferredOperationKHR *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeferredOperationKHR") {
      NapiObjectTypeError(info[2], "argument 3", "VkDeferredOperationKHR");
      return env.Undefined();
    }
    obj2 = obj;
    VkDeferredOperationKHR* instance = reinterpret_cast<VkDeferredOperationKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeferredOperationKHR' or 'null' for argument 3 'pDeferredOperation' in 'vkCreateDeferredOperationKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCreateDeferredOperationKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    nullptr,
    $p2
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyDeferredOperationKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyDeferredOperationKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeferredOperationKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeferredOperationKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDeferredOperationKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDeferredOperationKHR* instance = reinterpret_cast<VkDeferredOperationKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeferredOperationKHR' or 'null' for argument 2 'operation' in 'vkDestroyDeferredOperationKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkDestroyDeferredOperationKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetDeferredOperationMaxConcurrencyKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetDeferredOperationMaxConcurrencyKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeferredOperationKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeferredOperationKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDeferredOperationKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDeferredOperationKHR* instance = reinterpret_cast<VkDeferredOperationKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeferredOperationKHR' or 'null' for argument 2 'operation' in 'vkGetDeferredOperationMaxConcurrencyKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t out = $vkGetDeferredOperationMaxConcurrencyKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetDeferredOperationResultKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetDeferredOperationResultKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeferredOperationKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeferredOperationKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDeferredOperationKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDeferredOperationKHR* instance = reinterpret_cast<VkDeferredOperationKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeferredOperationKHR' or 'null' for argument 2 'operation' in 'vkGetDeferredOperationResultKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkGetDeferredOperationResultKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDeferredOperationJoinKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDeferredOperationJoinKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkDeferredOperationKHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDeferredOperationKHR") {
      NapiObjectTypeError(info[1], "argument 2", "VkDeferredOperationKHR");
      return env.Undefined();
    }
    obj1 = obj;
    VkDeferredOperationKHR* instance = reinterpret_cast<VkDeferredOperationKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDeferredOperationKHR' or 'null' for argument 2 'operation' in 'vkDeferredOperationJoinKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkDeferredOperationJoinKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdSetCullModeEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetCullModeEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'cullMode' in 'vkCmdSetCullModeEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p1 = static_cast<int32_t>(info[1].As<Napi::Number>().Int64Value());
$vkCmdSetCullModeEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    static_cast<VkCullModeFlags>($p1)
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetFrontFaceEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetFrontFaceEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'frontFace' in 'vkCmdSetFrontFaceEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkFrontFace $p1 = static_cast<VkFrontFace>(info[1].As<Napi::Number>().Int64Value());
$vkCmdSetFrontFaceEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetPrimitiveTopologyEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetPrimitiveTopologyEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'primitiveTopology' in 'vkCmdSetPrimitiveTopologyEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkPrimitiveTopology $p1 = static_cast<VkPrimitiveTopology>(info[1].As<Napi::Number>().Int64Value());
$vkCmdSetPrimitiveTopologyEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetViewportWithCountEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetViewportWithCountEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'viewportCount' in 'vkCmdSetViewportWithCountEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkViewport>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pViewports' in 'vkCmdSetViewportWithCountEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkViewport> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkViewport") {
        NapiObjectTypeError(info[2], "argument 3", "VkViewport");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkViewport* instance = reinterpret_cast<VkViewport*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkViewport>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pViewports' in 'vkCmdSetViewportWithCountEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkCmdSetViewportWithCountEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkViewport *) $p2.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetScissorWithCountEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetScissorWithCountEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'scissorCount' in 'vkCmdSetScissorWithCountEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkRect2D>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    if (info[2].As<Napi::Array>().Length() != info[1].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 3 'pScissors' in 'vkCmdSetScissorWithCountEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkRect2D> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkRect2D") {
        NapiObjectTypeError(info[2], "argument 3", "VkRect2D");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkRect2D* instance = reinterpret_cast<VkRect2D*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkRect2D>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pScissors' in 'vkCmdSetScissorWithCountEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkCmdSetScissorWithCountEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? (const VkRect2D *) $p2.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBindVertexBuffers2EXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBindVertexBuffers2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'firstBinding' in 'vkCmdBindVertexBuffers2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'bindingCount' in 'vkCmdBindVertexBuffers2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p2 = static_cast<uint32_t>(info[2].As<Napi::Number>().Int64Value());

  std::shared_ptr<std::vector<VkBuffer>> $p3 = nullptr;

  if (info[3].IsArray()) {

    // validate length
    if (info[3].As<Napi::Array>().Length() != info[2].As<Napi::Number>().Uint32Value()) {
      Napi::RangeError::New(env, "Invalid array length for argument 4 'pBuffers' in 'vkCmdBindVertexBuffers2EXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Array array = info[3].As<Napi::Array>();
    std::vector<VkBuffer> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkBuffer") {
        NapiObjectTypeError(info[0], "argument 4", "VkBuffer");
        return env.Undefined();
      }
      VkBuffer* instance = reinterpret_cast<VkBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p3 = std::make_shared<std::vector<VkBuffer>>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pBuffers' in 'vkCmdBindVertexBuffers2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<uint64_t*> $p4 = nullptr;

  if (info[4].IsTypedArray()) {

    if (info[4].As<Napi::TypedArray>().TypedArrayType() != napi_biguint64_array) {
      Napi::TypeError::New(env, "Invalid type for argument 5 'pOffsets' in 'vkCmdBindVertexBuffers2EXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
      if (info[4].As<Napi::TypedArray>().ElementLength() != $p2) {
        Napi::RangeError::New(env, "Invalid array length for argument 5 'pOffsets' in 'vkCmdBindVertexBuffers2EXT'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    VkDeviceSize* data = getTypedArrayData<VkDeviceSize>(info[4]);
    $p4 = std::make_shared<VkDeviceSize*>(data);
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 5 'pOffsets' in 'vkCmdBindVertexBuffers2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<uint64_t*> $p5 = nullptr;

  if (info[5].IsTypedArray()) {

    if (info[5].As<Napi::TypedArray>().TypedArrayType() != napi_biguint64_array) {
      Napi::TypeError::New(env, "Invalid type for argument 6 'pSizes' in 'vkCmdBindVertexBuffers2EXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
      if (info[5].As<Napi::TypedArray>().ElementLength() != $p2) {
        Napi::RangeError::New(env, "Invalid array length for argument 6 'pSizes' in 'vkCmdBindVertexBuffers2EXT'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    VkDeviceSize* data = getTypedArrayData<VkDeviceSize>(info[5]);
    $p5 = std::make_shared<VkDeviceSize*>(data);
  } else if (!info[5].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 6 'pSizes' in 'vkCmdBindVertexBuffers2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  std::shared_ptr<uint64_t*> $p6 = nullptr;

  if (info[6].IsTypedArray()) {

    if (info[6].As<Napi::TypedArray>().TypedArrayType() != napi_biguint64_array) {
      Napi::TypeError::New(env, "Invalid type for argument 7 'pStrides' in 'vkCmdBindVertexBuffers2EXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
      if (info[6].As<Napi::TypedArray>().ElementLength() != $p2) {
        Napi::RangeError::New(env, "Invalid array length for argument 7 'pStrides' in 'vkCmdBindVertexBuffers2EXT'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    VkDeviceSize* data = getTypedArrayData<VkDeviceSize>(info[6]);
    $p6 = std::make_shared<VkDeviceSize*>(data);
  } else if (!info[6].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 7 'pStrides' in 'vkCmdBindVertexBuffers2EXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkCmdBindVertexBuffers2EXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3 ? (const VkBuffer *) $p3.get()->data() : nullptr,
    $p4 ? *$p4.get() : nullptr,
    $p5 ? *$p5.get() : nullptr,
    $p6 ? *$p6.get() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetDepthTestEnableEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetDepthTestEnableEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsBoolean() && !info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Boolean' or 'Number' for argument 2 'depthTestEnable' in 'vkCmdSetDepthTestEnableEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].IsBoolean() ? info[1].As<Napi::Boolean>().Value() : info[1].As<Napi::Number>().Int32Value());
$vkCmdSetDepthTestEnableEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetDepthWriteEnableEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetDepthWriteEnableEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsBoolean() && !info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Boolean' or 'Number' for argument 2 'depthWriteEnable' in 'vkCmdSetDepthWriteEnableEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].IsBoolean() ? info[1].As<Napi::Boolean>().Value() : info[1].As<Napi::Number>().Int32Value());
$vkCmdSetDepthWriteEnableEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetDepthCompareOpEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetDepthCompareOpEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'depthCompareOp' in 'vkCmdSetDepthCompareOpEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkCompareOp $p1 = static_cast<VkCompareOp>(info[1].As<Napi::Number>().Int64Value());
$vkCmdSetDepthCompareOpEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetDepthBoundsTestEnableEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetDepthBoundsTestEnableEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsBoolean() && !info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Boolean' or 'Number' for argument 2 'depthBoundsTestEnable' in 'vkCmdSetDepthBoundsTestEnableEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].IsBoolean() ? info[1].As<Napi::Boolean>().Value() : info[1].As<Napi::Number>().Int32Value());
$vkCmdSetDepthBoundsTestEnableEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetStencilTestEnableEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetStencilTestEnableEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsBoolean() && !info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Boolean' or 'Number' for argument 2 'stencilTestEnable' in 'vkCmdSetStencilTestEnableEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint32_t $p1 = static_cast<uint32_t>(info[1].IsBoolean() ? info[1].As<Napi::Boolean>().Value() : info[1].As<Napi::Number>().Int32Value());
$vkCmdSetStencilTestEnableEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetStencilOpEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetStencilOpEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'faceMask' in 'vkCmdSetStencilOpEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t $p1 = static_cast<int32_t>(info[1].As<Napi::Number>().Int64Value());

  if (!info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 3 'failOp' in 'vkCmdSetStencilOpEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkStencilOp $p2 = static_cast<VkStencilOp>(info[2].As<Napi::Number>().Int64Value());

  if (!info[3].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 4 'passOp' in 'vkCmdSetStencilOpEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkStencilOp $p3 = static_cast<VkStencilOp>(info[3].As<Napi::Number>().Int64Value());

  if (!info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 5 'depthFailOp' in 'vkCmdSetStencilOpEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkStencilOp $p4 = static_cast<VkStencilOp>(info[4].As<Napi::Number>().Int64Value());

  if (!info[5].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 6 'compareOp' in 'vkCmdSetStencilOpEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkCompareOp $p5 = static_cast<VkCompareOp>(info[5].As<Napi::Number>().Int64Value());
$vkCmdSetStencilOpEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    static_cast<VkStencilFaceFlags>($p1),
    $p2,
    $p3,
    $p4,
    $p5
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCreatePrivateDataSlotEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkCreatePrivateDataSlotEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPrivateDataSlotCreateInfoEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT) {
      NapiObjectTypeError(info[1], "argument 2", "VkPrivateDataSlotCreateInfoEXT");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkPrivateDataSlotCreateInfoEXT* instance = reinterpret_cast<VkPrivateDataSlotCreateInfoEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPrivateDataSlotCreateInfoEXT' or 'null' for argument 2 'pCreateInfo' in 'vkCreatePrivateDataSlotEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj3;
  VkPrivateDataSlotEXT *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPrivateDataSlotEXT") {
      NapiObjectTypeError(info[3], "argument 4", "VkPrivateDataSlotEXT");
      return env.Undefined();
    }
    obj3 = obj;
    VkPrivateDataSlotEXT* instance = reinterpret_cast<VkPrivateDataSlotEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPrivateDataSlotEXT' or 'null' for argument 4 'pPrivateDataSlot' in 'vkCreatePrivateDataSlotEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  int32_t out = $vkCreatePrivateDataSlotEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    nullptr,
    $p3
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkDestroyPrivateDataSlotEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkDestroyPrivateDataSlotEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkPrivateDataSlotEXT *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPrivateDataSlotEXT") {
      NapiObjectTypeError(info[1], "argument 2", "VkPrivateDataSlotEXT");
      return env.Undefined();
    }
    obj1 = obj;
    VkPrivateDataSlotEXT* instance = reinterpret_cast<VkPrivateDataSlotEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPrivateDataSlotEXT' or 'null' for argument 2 'privateDataSlot' in 'vkDestroyPrivateDataSlotEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

$vkDestroyPrivateDataSlotEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    info[1].IsNull() ? VK_NULL_HANDLE : *$p1,
    nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkSetPrivateDataEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkSetPrivateDataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'objectType' in 'vkSetPrivateDataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkObjectType $p1 = static_cast<VkObjectType>(info[1].As<Napi::Number>().Int64Value());

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'objectHandle' in 'vkSetPrivateDataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }

  Napi::Object obj3;
  VkPrivateDataSlotEXT *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPrivateDataSlotEXT") {
      NapiObjectTypeError(info[3], "argument 4", "VkPrivateDataSlotEXT");
      return env.Undefined();
    }
    obj3 = obj;
    VkPrivateDataSlotEXT* instance = reinterpret_cast<VkPrivateDataSlotEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPrivateDataSlotEXT' or 'null' for argument 4 'privateDataSlot' in 'vkSetPrivateDataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  bool lossless4;
  if (!info[4].IsBigInt() && !info[4].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 5 'data' in 'vkSetPrivateDataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p4 = 0;
  if (info[4].IsBigInt()) {
    $p4 = static_cast<uint64_t>(info[4].As<Napi::BigInt>().Int64Value(&lossless4));
  } else {
    $p4 = static_cast<uint64_t>(info[4].As<Napi::Number>().Int64Value());
  }
  int32_t out = $vkSetPrivateDataEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    info[3].IsNull() ? VK_NULL_HANDLE : *$p3,
    $p4
  );
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkGetPrivateDataEXT(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetPrivateDataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'objectType' in 'vkGetPrivateDataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkObjectType $p1 = static_cast<VkObjectType>(info[1].As<Napi::Number>().Int64Value());

  bool lossless2;
  if (!info[2].IsBigInt() && !info[2].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'BigInt' or 'Number' for argument 3 'objectHandle' in 'vkGetPrivateDataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  uint64_t $p2 = 0;
  if (info[2].IsBigInt()) {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::BigInt>().Int64Value(&lossless2));
  } else {
    $p2 = static_cast<uint64_t>(info[2].As<Napi::Number>().Int64Value());
  }

  Napi::Object obj3;
  VkPrivateDataSlotEXT *$p3 = nullptr;
  if (info[3].IsObject()) {
    Napi::Object obj = info[3].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPrivateDataSlotEXT") {
      NapiObjectTypeError(info[3], "argument 4", "VkPrivateDataSlotEXT");
      return env.Undefined();
    }
    obj3 = obj;
    VkPrivateDataSlotEXT* instance = reinterpret_cast<VkPrivateDataSlotEXT*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p3 = instance;
  } else if (info[3].IsNull()) {
    $p3 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPrivateDataSlotEXT' or 'null' for argument 4 'privateDataSlot' in 'vkGetPrivateDataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj4;
  uint64_t $p4 = 0;
  if (info[4].IsObject()) {
    obj4 = info[4].As<Napi::Object>();
    if (!obj4.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 5 'pData' in 'vkGetPrivateDataEXT'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj4.Get("$");
    
    $p4 = static_cast<uint64_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[4].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 5 'pData' in 'vkGetPrivateDataEXT'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkGetPrivateDataEXT(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    info[3].IsNull() ? VK_NULL_HANDLE : *$p3,
    &$p4
  );
    Napi::BigInt pnum4 = Napi::BigInt::New(env, (uint64_t)$p4);
    if (info[4].IsObject()) obj4.Set("$", pnum4);
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdCopyBuffer2KHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdCopyBuffer2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkCopyBufferInfo2KHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkCopyBufferInfo2KHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkCopyBufferInfo2KHR* instance = reinterpret_cast<VkCopyBufferInfo2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCopyBufferInfo2KHR' or 'null' for argument 2 'pCopyBufferInfo' in 'vkCmdCopyBuffer2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdCopyBuffer2KHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdCopyImage2KHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdCopyImage2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkCopyImageInfo2KHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkCopyImageInfo2KHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkCopyImageInfo2KHR* instance = reinterpret_cast<VkCopyImageInfo2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCopyImageInfo2KHR' or 'null' for argument 2 'pCopyImageInfo' in 'vkCmdCopyImage2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdCopyImage2KHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdBlitImage2KHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdBlitImage2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkBlitImageInfo2KHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkBlitImageInfo2KHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkBlitImageInfo2KHR* instance = reinterpret_cast<VkBlitImageInfo2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkBlitImageInfo2KHR' or 'null' for argument 2 'pBlitImageInfo' in 'vkCmdBlitImage2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdBlitImage2KHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdCopyBufferToImage2KHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdCopyBufferToImage2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkCopyBufferToImageInfo2KHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkCopyBufferToImageInfo2KHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkCopyBufferToImageInfo2KHR* instance = reinterpret_cast<VkCopyBufferToImageInfo2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCopyBufferToImageInfo2KHR' or 'null' for argument 2 'pCopyBufferToImageInfo' in 'vkCmdCopyBufferToImage2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdCopyBufferToImage2KHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdCopyImageToBuffer2KHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdCopyImageToBuffer2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkCopyImageToBufferInfo2KHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkCopyImageToBufferInfo2KHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkCopyImageToBufferInfo2KHR* instance = reinterpret_cast<VkCopyImageToBufferInfo2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCopyImageToBufferInfo2KHR' or 'null' for argument 2 'pCopyImageToBufferInfo' in 'vkCmdCopyImageToBuffer2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdCopyImageToBuffer2KHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdResolveImage2KHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdResolveImage2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkResolveImageInfo2KHR *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR) {
      NapiObjectTypeError(info[1], "argument 2", "VkResolveImageInfo2KHR");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkResolveImageInfo2KHR* instance = reinterpret_cast<VkResolveImageInfo2KHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkResolveImageInfo2KHR' or 'null' for argument 2 'pResolveImageInfo' in 'vkCmdResolveImage2KHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkCmdResolveImage2KHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkCmdSetFragmentShadingRateKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetFragmentShadingRateKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  VkExtent2D *$p1 = nullptr;
  if (info[1].IsObject()) {
    Napi::Object obj = info[1].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkExtent2D") {
      NapiObjectTypeError(info[1], "argument 2", "VkExtent2D");
      return env.Undefined();
    }
    obj1 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkExtent2D* instance = reinterpret_cast<VkExtent2D*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p1 = instance;
  } else if (info[1].IsNull()) {
    $p1 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkExtent2D' or 'null' for argument 2 'pFragmentSize' in 'vkCmdSetFragmentShadingRateKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

    std::shared_ptr<std::vector<VkFragmentShadingRateCombinerOpKHR>> $p2 = nullptr;
    if (info[2].IsArray()) {
      // validate length
      if (info[2].As<Napi::Array>().Length() != 2) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'combinerOps' in 'vkCmdSetFragmentShadingRateKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
      std::vector<VkFragmentShadingRateCombinerOpKHR> data = createFromShadingArrayOfV8Numbers(info[2]);
      $p2 = std::make_shared<std::vector<VkFragmentShadingRateCombinerOpKHR>>(data);
    } else if (!info[2].IsNull()) {
      Napi::TypeError::New(env, "Invalid type for argument 3 'combinerOps' in 'vkCmdSetFragmentShadingRateKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
$vkCmdSetFragmentShadingRateKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? $p2.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetPhysicalDeviceFragmentShadingRatesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkPhysicalDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkPhysicalDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkPhysicalDevice* instance = reinterpret_cast<VkPhysicalDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkPhysicalDevice' or 'null' for argument 1 'physicalDevice' in 'vkGetPhysicalDeviceFragmentShadingRatesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  Napi::Object obj1;
  uint32_t $p1 = 0;
  if (info[1].IsObject()) {
    obj1 = info[1].As<Napi::Object>();
    if (!obj1.Has("$")) {
      Napi::Error::New(env, "Missing Object property '$' for argument 2 'pFragmentShadingRateCount' in 'vkGetPhysicalDeviceFragmentShadingRatesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    Napi::Value val = obj1.Get("$");
    
    $p1 = static_cast<uint32_t>(val.As<Napi::Number>().Int64Value());
  } else if (!info[1].IsNull()) {
    Napi::TypeError::New(env, "Expected 'Object' or 'null' for argument 2 'pFragmentShadingRateCount' in 'vkGetPhysicalDeviceFragmentShadingRatesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<std::vector<VkPhysicalDeviceFragmentShadingRateKHR>> $p2 = nullptr;

  if (info[2].IsArray()) {

    // validate length
    {
      uint32_t expectedLength = info[1].As<Napi::Object>().Get("$").As<Napi::Number>().Uint32Value();
      if (info[2].As<Napi::Array>().Length() != expectedLength) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'pFragmentShadingRates' in 'vkGetPhysicalDeviceFragmentShadingRatesKHR'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
    }
    Napi::Array array = info[2].As<Napi::Array>();
    std::vector<VkPhysicalDeviceFragmentShadingRateKHR> data(array.Length());
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkPhysicalDeviceFragmentShadingRateKHR") {
        NapiObjectTypeError(info[2], "argument 3", "VkPhysicalDeviceFragmentShadingRateKHR");
        return env.Undefined();
      }
      Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
      if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
      VkPhysicalDeviceFragmentShadingRateKHR* instance = reinterpret_cast<VkPhysicalDeviceFragmentShadingRateKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
      data[ii] = *instance;
    };
    $p2 = std::make_shared<std::vector<VkPhysicalDeviceFragmentShadingRateKHR>>(data);
  } else if (!info[2].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 3 'pFragmentShadingRates' in 'vkGetPhysicalDeviceFragmentShadingRatesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  int32_t out = $vkGetPhysicalDeviceFragmentShadingRatesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    &$p1,
    $p2 ? (VkPhysicalDeviceFragmentShadingRateKHR *) $p2.get()->data() : nullptr
  );
    if (info[1].IsObject()) obj1.Set("$", $p1);
  if (info[2].IsArray()) {
    VkPhysicalDeviceFragmentShadingRateKHR* $pdata = $p2.get()->data();
    Napi::Array array = info[2].As<Napi::Array>();
    for (unsigned int ii = 0; ii < array.Length(); ++ii) {
      Napi::Value item = array.Get(ii);
      Napi::Object obj = item.As<Napi::Object>();
      // reflect call
      Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>(&$pdata[ii]));
      obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
    };
  }
  
  
  return Napi::Number::New(env, static_cast<int32_t>(out));
  
};

Napi::Value _vkCmdSetFragmentShadingRateEnumNV(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkCommandBuffer *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkCommandBuffer") {
      NapiObjectTypeError(info[0], "argument 1", "VkCommandBuffer");
      return env.Undefined();
    }
    obj0 = obj;
    VkCommandBuffer* instance = reinterpret_cast<VkCommandBuffer*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkCommandBuffer' or 'null' for argument 1 'commandBuffer' in 'vkCmdSetFragmentShadingRateEnumNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'shadingRate' in 'vkCmdSetFragmentShadingRateEnumNV'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkFragmentShadingRateNV $p1 = static_cast<VkFragmentShadingRateNV>(info[1].As<Napi::Number>().Int64Value());

    std::shared_ptr<std::vector<VkFragmentShadingRateCombinerOpKHR>> $p2 = nullptr;
    if (info[2].IsArray()) {
      // validate length
      if (info[2].As<Napi::Array>().Length() != 2) {
        Napi::RangeError::New(env, "Invalid array length for argument 3 'combinerOps' in 'vkCmdSetFragmentShadingRateEnumNV'").ThrowAsJavaScriptException();
        return env.Undefined();
      }
      std::vector<VkFragmentShadingRateCombinerOpKHR> data = createFromShadingArrayOfV8Numbers(info[2]);
      $p2 = std::make_shared<std::vector<VkFragmentShadingRateCombinerOpKHR>>(data);
    } else if (!info[2].IsNull()) {
      Napi::TypeError::New(env, "Invalid type for argument 3 'combinerOps' in 'vkCmdSetFragmentShadingRateEnumNV'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
$vkCmdSetFragmentShadingRateEnumNV(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2 ? $p2.get()->data() : nullptr
  );
  
  
  return env.Undefined();
  
};

Napi::Value _vkGetAccelerationStructureBuildSizesKHR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  
  Napi::Object obj0;
  VkDevice *$p0 = nullptr;
  if (info[0].IsObject()) {
    Napi::Object obj = info[0].As<Napi::Object>();
    if ((obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value()) != "VkDevice") {
      NapiObjectTypeError(info[0], "argument 1", "VkDevice");
      return env.Undefined();
    }
    obj0 = obj;
    VkDevice* instance = reinterpret_cast<VkDevice*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p0 = instance;
  } else if (info[0].IsNull()) {
    $p0 = VK_NULL_HANDLE;
  } else {
    Napi::TypeError::New(env, "Expected 'VkDevice' or 'null' for argument 1 'device' in 'vkGetAccelerationStructureBuildSizesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  if (!info[1].IsNumber()) {
    Napi::TypeError::New(env, "Expected 'Number' for argument 2 'buildType' in 'vkGetAccelerationStructureBuildSizesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  VkAccelerationStructureBuildTypeKHR $p1 = static_cast<VkAccelerationStructureBuildTypeKHR>(info[1].As<Napi::Number>().Int64Value());

  Napi::Object obj2;
  VkAccelerationStructureBuildGeometryInfoKHR *$p2 = nullptr;
  if (info[2].IsObject()) {
    Napi::Object obj = info[2].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR) {
      NapiObjectTypeError(info[2], "argument 3", "VkAccelerationStructureBuildGeometryInfoKHR");
      return env.Undefined();
    }
    obj2 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkAccelerationStructureBuildGeometryInfoKHR* instance = reinterpret_cast<VkAccelerationStructureBuildGeometryInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p2 = instance;
  } else if (info[2].IsNull()) {
    $p2 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureBuildGeometryInfoKHR' or 'null' for argument 3 'pBuildInfo' in 'vkGetAccelerationStructureBuildSizesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }

  std::shared_ptr<uint32_t*> $p3 = nullptr;

  if (info[3].IsTypedArray()) {

    if (info[3].As<Napi::TypedArray>().TypedArrayType() != napi_uint32_array) {
      Napi::TypeError::New(env, "Invalid type for argument 4 'pMaxPrimitiveCounts' in 'vkGetAccelerationStructureBuildSizesKHR'").ThrowAsJavaScriptException();
      return env.Undefined();
    }
    uint32_t* data = getTypedArrayData<uint32_t>(info[3]);
    $p3 = std::make_shared<uint32_t*>(data);
  } else if (!info[3].IsNull()) {
    Napi::TypeError::New(env, "Invalid type for argument 4 'pMaxPrimitiveCounts' in 'vkGetAccelerationStructureBuildSizesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }


  Napi::Object obj4;
  VkAccelerationStructureBuildSizesInfoKHR *$p4 = nullptr;
  if (info[4].IsObject()) {
    Napi::Object obj = info[4].As<Napi::Object>();
    if (GetStructureTypeFromObject(obj) != VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR) {
      NapiObjectTypeError(info[4], "argument 5", "VkAccelerationStructureBuildSizesInfoKHR");
      return env.Undefined();
    }
    obj4 = obj;
    Napi::Value flushCall = obj.Get("flush").As<Napi::Function>().Call(obj, {  });
    if (!(flushCall.As<Napi::Boolean>().Value())) return env.Undefined();
    VkAccelerationStructureBuildSizesInfoKHR* instance = reinterpret_cast<VkAccelerationStructureBuildSizesInfoKHR*>(obj.Get("memoryBuffer").As<Napi::ArrayBuffer>().Data());
    $p4 = instance;
  } else if (info[4].IsNull()) {
    $p4 = nullptr;
  } else {
    Napi::TypeError::New(env, "Expected 'VkAccelerationStructureBuildSizesInfoKHR' or 'null' for argument 5 'pSizeInfo' in 'vkGetAccelerationStructureBuildSizesKHR'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
$vkGetAccelerationStructureBuildSizesKHR(
    info[0].IsNull() ? VK_NULL_HANDLE : *$p0,
    $p1,
    $p2,
    $p3 ? *$p3.get() : nullptr,
    $p4
  );
  if (info[4].IsObject()) {
     Napi::Object obj = info[4].As<Napi::Object>();
    // reflect call
    Napi::BigInt memoryAddress = Napi::BigInt::New(env, reinterpret_cast<int64_t>($p4));
    obj.Get("reflect").As<Napi::Function>().Call(obj, { memoryAddress });
  }
  
  
  return env.Undefined();
  
};



#endif
